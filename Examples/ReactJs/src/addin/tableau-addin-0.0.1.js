/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Copyright (C) 2014 Klar√§lvdalens Datakonsult AB, a KDAB Group company, info@kdab.com, author Milian Wolff <milian.wolff@kdab.com>
** Contact: https://www.qt.io/licensing/
**
** This file is part of the QtWebChannel module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** "Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
** $QT_END_LICENSE$
**
****************************************************************************/

"use strict";

var QWebChannelMessageTypes = {
    signal: 1,
    propertyUpdate: 2,
    init: 3,
    idle: 4,
    debug: 5,
    invokeMethod: 6,
    connectToSignal: 7,
    disconnectFromSignal: 8,
    setProperty: 9,
    response: 10,
};

var QWebChannel = function(transport, initCallback)
{
    if (typeof transport !== "object" || typeof transport.send !== "function") {
        console.error("The QWebChannel expects a transport object with a send function and onmessage callback property." +
                      " Given is: transport: " + typeof(transport) + ", transport.send: " + typeof(transport.send));
        return;
    }

    var channel = this;
    this.transport = transport;

    this.send = function(data)
    {
        if (typeof(data) !== "string") {
            data = JSON.stringify(data);
        }
        channel.transport.send(data);
    }

    this.transport.onmessage = function(message)
    {
        var data = message.data;
        if (typeof data === "string") {
            data = JSON.parse(data);
        }
        switch (data.type) {
            case QWebChannelMessageTypes.signal:
                channel.handleSignal(data);
                break;
            case QWebChannelMessageTypes.response:
                channel.handleResponse(data);
                break;
            case QWebChannelMessageTypes.propertyUpdate:
                channel.handlePropertyUpdate(data);
                break;
            default:
                console.error("invalid message received:", message.data);
                break;
        }
    }

    this.execCallbacks = {};
    this.execId = 0;
    this.exec = function(data, callback)
    {
        if (!callback) {
            // if no callback is given, send directly
            channel.send(data);
            return;
        }
        if (channel.execId === Number.MAX_VALUE) {
            // wrap
            channel.execId = Number.MIN_VALUE;
        }
        if (data.hasOwnProperty("id")) {
            console.error("Cannot exec message with property id: " + JSON.stringify(data));
            return;
        }
        data.id = channel.execId++;
        channel.execCallbacks[data.id] = callback;
        channel.send(data);
    };

    this.objects = {};

    this.handleSignal = function(message)
    {
        var object = channel.objects[message.object];
        if (object) {
            object.signalEmitted(message.signal, message.args);
        } else {
            console.warn("Unhandled signal: " + message.object + "::" + message.signal);
        }
    }

    this.handleResponse = function(message)
    {
        if (!message.hasOwnProperty("id")) {
            console.error("Invalid response message received: ", JSON.stringify(message));
            return;
        }
        channel.execCallbacks[message.id](message.data);
        delete channel.execCallbacks[message.id];
    }

    this.handlePropertyUpdate = function(message)
    {
        for (var i in message.data) {
            var data = message.data[i];
            var object = channel.objects[data.object];
            if (object) {
                object.propertyUpdate(data.signals, data.properties);
            } else {
                console.warn("Unhandled property update: " + data.object + "::" + data.signal);
            }
        }
        channel.exec({type: QWebChannelMessageTypes.idle});
    }

    this.debug = function(message)
    {
        channel.send({type: QWebChannelMessageTypes.debug, data: message});
    };

    channel.exec({type: QWebChannelMessageTypes.init}, function(data) {
        for (var objectName in data) {
            var object = new QObject(objectName, data[objectName], channel);
        }
        // now unwrap properties, which might reference other registered objects
        for (var objectName in channel.objects) {
            channel.objects[objectName].unwrapProperties();
        }
        if (initCallback) {
            initCallback(channel);
        }
        channel.exec({type: QWebChannelMessageTypes.idle});
    });
};

function QObject(name, data, webChannel)
{
    this.__id__ = name;
    webChannel.objects[name] = this;

    // List of callbacks that get invoked upon signal emission
    this.__objectSignals__ = {};

    // Cache of all properties, updated when a notify signal is emitted
    this.__propertyCache__ = {};

    var object = this;

    // ----------------------------------------------------------------------

    this.unwrapQObject = function(response)
    {
        if (response instanceof Array) {
            // support list of objects
            var ret = new Array(response.length);
            for (var i = 0; i < response.length; ++i) {
                ret[i] = object.unwrapQObject(response[i]);
            }
            return ret;
        }
        if (!response
            || !response["__QObject*__"]
            || response.id === undefined) {
            return response;
        }

        var objectId = response.id;
        if (webChannel.objects[objectId])
            return webChannel.objects[objectId];

        if (!response.data) {
            console.error("Cannot unwrap unknown QObject " + objectId + " without data.");
            return;
        }

        var qObject = new QObject( objectId, response.data, webChannel );
        qObject.destroyed.connect(function() {
            if (webChannel.objects[objectId] === qObject) {
                delete webChannel.objects[objectId];
                // reset the now deleted QObject to an empty {} object
                // just assigning {} though would not have the desired effect, but the
                // below also ensures all external references will see the empty map
                // NOTE: this detour is necessary to workaround QTBUG-40021
                var propertyNames = [];
                for (var propertyName in qObject) {
                    propertyNames.push(propertyName);
                }
                for (var idx in propertyNames) {
                    delete qObject[propertyNames[idx]];
                }
            }
        });
        // here we are already initialized, and thus must directly unwrap the properties
        qObject.unwrapProperties();
        return qObject;
    }

    this.unwrapProperties = function()
    {
        for (var propertyIdx in object.__propertyCache__) {
            object.__propertyCache__[propertyIdx] = object.unwrapQObject(object.__propertyCache__[propertyIdx]);
        }
    }

    function addSignal(signalData, isPropertyNotifySignal)
    {
        var signalName = signalData[0];
        var signalIndex = signalData[1];
        object[signalName] = {
            connect: function(callback) {
                if (typeof(callback) !== "function") {
                    console.error("Bad callback given to connect to signal " + signalName);
                    return;
                }

                object.__objectSignals__[signalIndex] = object.__objectSignals__[signalIndex] || [];
                object.__objectSignals__[signalIndex].push(callback);

                if (!isPropertyNotifySignal && signalName !== "destroyed") {
                    // only required for "pure" signals, handled separately for properties in propertyUpdate
                    // also note that we always get notified about the destroyed signal
                    webChannel.exec({
                        type: QWebChannelMessageTypes.connectToSignal,
                        object: object.__id__,
                        signal: signalIndex
                    });
                }
            },
            disconnect: function(callback) {
                if (typeof(callback) !== "function") {
                    console.error("Bad callback given to disconnect from signal " + signalName);
                    return;
                }
                object.__objectSignals__[signalIndex] = object.__objectSignals__[signalIndex] || [];
                var idx = object.__objectSignals__[signalIndex].indexOf(callback);
                if (idx === -1) {
                    console.error("Cannot find connection of signal " + signalName + " to " + callback.name);
                    return;
                }
                object.__objectSignals__[signalIndex].splice(idx, 1);
                if (!isPropertyNotifySignal && object.__objectSignals__[signalIndex].length === 0) {
                    // only required for "pure" signals, handled separately for properties in propertyUpdate
                    webChannel.exec({
                        type: QWebChannelMessageTypes.disconnectFromSignal,
                        object: object.__id__,
                        signal: signalIndex
                    });
                }
            }
        };
    }

    /**
     * Invokes all callbacks for the given signalname. Also works for property notify callbacks.
     */
    function invokeSignalCallbacks(signalName, signalArgs)
    {
        var connections = object.__objectSignals__[signalName];
        if (connections) {
            connections.forEach(function(callback) {
                callback.apply(callback, signalArgs);
            });
        }
    }

    this.propertyUpdate = function(signals, propertyMap)
    {
        // update property cache
        for (var propertyIndex in propertyMap) {
            var propertyValue = propertyMap[propertyIndex];
            object.__propertyCache__[propertyIndex] = propertyValue;
        }

        for (var signalName in signals) {
            // Invoke all callbacks, as signalEmitted() does not. This ensures the
            // property cache is updated before the callbacks are invoked.
            invokeSignalCallbacks(signalName, signals[signalName]);
        }
    }

    this.signalEmitted = function(signalName, signalArgs)
    {
        invokeSignalCallbacks(signalName, signalArgs);
    }

    function addMethod(methodData)
    {
        var methodName = methodData[0];
        var methodIdx = methodData[1];
        object[methodName] = function() {
            var args = [];
            var callback;
            for (var i = 0; i < arguments.length; ++i) {
                if (typeof arguments[i] === "function")
                    callback = arguments[i];
                else
                    args.push(arguments[i]);
            }

            webChannel.exec({
                "type": QWebChannelMessageTypes.invokeMethod,
                "object": object.__id__,
                "method": methodIdx,
                "args": args
            }, function(response) {
                if (response !== undefined) {
                    var result = object.unwrapQObject(response);
                    if (callback) {
                        (callback)(result);
                    }
                }
            });
        };
    }

    function bindGetterSetter(propertyInfo)
    {
        var propertyIndex = propertyInfo[0];
        var propertyName = propertyInfo[1];
        var notifySignalData = propertyInfo[2];
        // initialize property cache with current value
        // NOTE: if this is an object, it is not directly unwrapped as it might
        // reference other QObject that we do not know yet
        object.__propertyCache__[propertyIndex] = propertyInfo[3];

        if (notifySignalData) {
            if (notifySignalData[0] === 1) {
                // signal name is optimized away, reconstruct the actual name
                notifySignalData[0] = propertyName + "Changed";
            }
            addSignal(notifySignalData, true);
        }

        Object.defineProperty(object, propertyName, {
            configurable: true,
            get: function () {
                var propertyValue = object.__propertyCache__[propertyIndex];
                if (propertyValue === undefined) {
                    // This shouldn't happen
                    console.warn("Undefined value in property cache for property \"" + propertyName + "\" in object " + object.__id__);
                }

                return propertyValue;
            },
            set: function(value) {
                if (value === undefined) {
                    console.warn("Property setter for " + propertyName + " called with undefined value!");
                    return;
                }
                object.__propertyCache__[propertyIndex] = value;
                webChannel.exec({
                    "type": QWebChannelMessageTypes.setProperty,
                    "object": object.__id__,
                    "property": propertyIndex,
                    "value": value
                });
            }
        });

    }

    // ----------------------------------------------------------------------

    data.methods.forEach(addMethod);

    data.properties.forEach(bindGetterSetter);

    data.signals.forEach(function(signal) { addSignal(signal, false); });

    for (var name in data.enums) {
        object[name] = data.enums[name];
    }
}

//required for use with nodejs
if (typeof module === 'object') {
    module.exports = {
        QWebChannel: QWebChannel
    };
}


/*! BEGIN AddInBootstrap */


   // #include "../../../../support_modules/underscore/1.6.0/underscore.js"
/*!
 * jQuery JavaScript Library v3.0.0
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2016-06-09T18:02Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};



	function DOMEval( code, doc ) {
		doc = doc || document;

		var script = doc.createElement( "script" );

		script.text = code;
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


var
	version = "3.0.0",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = jQuery.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isFunction: function( obj ) {
		return jQuery.type( obj ) === "function";
	},

	isArray: Array.isArray,

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {

		// As of jQuery 3.0, isNumeric is limited to
		// strings and numbers (primitives or objects)
		// that can be coerced to finite numbers (gh-2662)
		var type = jQuery.type( obj );
		return ( type === "number" || type === "string" ) &&

			// parseFloat NaNs numeric-cast false positives ("")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			!isNaN( obj - parseFloat( obj ) );
	},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}

		// Support: Android <=2.3 only (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call( obj ) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		DOMEval( code );
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE <=9 - 11, Edge 12 - 13
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

// JSHint would error on this code due to the Symbol not being defined in ES5.
// Defining this global in .jshintrc would create a danger of using the global
// unguarded in another place, it seems safer to just disable JSHint for these
// three lines.
/* jshint ignore: start */
if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}
/* jshint ignore: end */

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.0
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-01-04
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	disabledAncestor = addCombinator(
		function( elem ) {
			return elem.disabled === true;
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {
	// Known :disabled false positives:
	// IE: *[disabled]:not(button, input, select, textarea, optgroup, option, menuitem, fieldset)
	// not IE: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Check form elements and option elements for explicit disabling
		return "label" in elem && elem.disabled === disabled ||
			"form" in elem && elem.disabled === disabled ||

			// Check non-disabled form elements for fieldset[disabled] ancestors
			"form" in elem && elem.disabled === false && (
				// Support: IE6-11+
				// Ancestry is covered for us
				elem.isDisabled === disabled ||

				// Otherwise, assume any non-<option> under fieldset[disabled] is disabled
				/* jshint -W018 */
				elem.isDisabled !== !disabled &&
					("label" in elem || !disabledAncestor( elem )) !== disabled
			);
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var m = context.getElementById( id );
				return m ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;



var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		} );

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;
	} );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		return elem.contentDocument || jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnotwhite = ( /\S+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( jQuery.isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && jQuery.isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && jQuery.isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Support: Android 4.0 only
			// Strict mode functions invoked without .call/.apply get global-object context
			resolve.call( undefined, value );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( /*jshint -W002 */ value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.call( undefined, value );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = jQuery.isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( jQuery.isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				jQuery.isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList.then( fn );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			len ? fn( elems[ 0 ], key ) : emptyGet;
};
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	/* jshint -W018 */
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ jQuery.camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ jQuery.camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( jQuery.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( jQuery.camelCase );
			} else {
				key = jQuery.camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnotwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :

					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? JSON.parse( data ) :
					data;
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			jQuery.contains( elem.ownerDocument, elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted,
		scale = 1,
		maxIterations = 20,
		currentValue = tween ?
			function() { return tween.cur(); } :
			function() { return jQuery.css( elem, prop, "" ); },
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		do {

			// If previous iteration zeroed out, double until we get *something*.
			// Use string for doubling so we don't accidentally see scale as unchanged below
			scale = scale || ".5";

			// Adjust and apply
			initialInUnit = initialInUnit / scale;
			jQuery.style( elem, prop, initialInUnit + unit );

		// Update scale, tolerating zero or NaN from tween.cur()
		// Break the loop if scale is unchanged or perfect, or if we've just had enough.
		} while (
			scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
		);
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) ),
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

var rscriptType = ( /^$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret = typeof context.getElementsByTagName !== "undefined" ?
			context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== "undefined" ?
				context.querySelectorAll( tag || "*" ) :
			[];

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], ret ) :
		ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( jQuery.type( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();
var documentElement = document.documentElement;



var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 only
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, matches, sel, handleObj,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Support: IE <=9
		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		//
		// Support: Firefox <=42
		// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
		if ( delegateCount && cur.nodeType &&
			( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push( { elem: cur, handlers: matches } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: jQuery.isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			return ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
		}

		return event.which;
	}
}, jQuery.event.addProp );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	// Support: IE <=10 - 11, Edge 12 - 13
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

function manipulationTarget( elem, content ) {
	if ( jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return elem.getElementsByTagName( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		isFunction = jQuery.isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( isFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( isFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rmargin = ( /^margin/ );

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		div.style.cssText =
			"box-sizing:border-box;" +
			"position:relative;display:block;" +
			"margin:auto;border:1px;padding:1px;" +
			"top:1%;width:50%";
		div.innerHTML = "";
		documentElement.appendChild( container );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = divStyle.marginLeft === "2px";
		boxSizingReliableVal = divStyle.width === "4px";

		// Support: Android 4.0 - 4.3 only
		// Some styles come back with percentage values, even though they shouldn't
		div.style.marginRight = "50%";
		pixelMarginRightVal = divStyle.marginRight === "4px";

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
		"padding:0;margin-top:1px;position:absolute";
	container.appendChild( div );

	jQuery.extend( support, {
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelMarginRight: function() {
			computeStyleTests();
			return pixelMarginRightVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		style = elem.style;

	computed = computed || getStyles( elem );

	// Support: IE <=9 only
	// getPropertyValue is only needed for .css('filter') (#12537)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?

		// If we already have the right measurement, avoid augmentation
		4 :

		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {

			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// At this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {

			// At this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// At this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var val,
		valueIsBorderBox = true,
		styles = getStyles( elem ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// Support: IE <=11 only
	// Running getBoundingClientRect on a disconnected node
	// in IE throws an error.
	if ( elem.getClientRects().length ) {
		val = elem.getBoundingClientRect()[ name ];
	}

	// Some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {

		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test( val ) ) {
			return val;
		}

		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// Use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				style[ name ] = value;
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}
		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, name, extra );
						} ) :
						getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = extra && getStyles( elem ),
				subtract = extra && augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				);

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ name ] = value;
				value = jQuery.css( elem, name );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function raf() {
	if ( timerId ) {
		window.requestAnimationFrame( raf );
		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 13
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* jshint -W083 */
			anim.done( function() {

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( jQuery.isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					jQuery.proxy( result.stop, result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnotwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	// Go to the end state if fx are off or if document is hidden
	if ( jQuery.fx.off || document.hidden ) {
		opt.duration = 0;

	} else {
		opt.duration = typeof opt.duration === "number" ?
			opt.duration : opt.duration in jQuery.fx.speeds ?
				jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = window.requestAnimationFrame ?
			window.requestAnimationFrame( raf ) :
			window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	if ( window.cancelAnimationFrame ) {
		window.cancelAnimationFrame( timerId );
	} else {
		window.clearInterval( timerId );
	}

	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				return tabindex ?
					parseInt( tabindex, 10 ) :
					rfocusable.test( elem.nodeName ) ||
						rclickable.test( elem.nodeName ) && elem.href ?
							0 :
							-1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {
			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




var rclass = /[\t\r\n\f]/g;

function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnotwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 &&
					( " " + curValue + " " ).replace( rclass, " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnotwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 &&
					( " " + curValue + " " ).replace( rclass, " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( type === "string" ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = value.match( rnotwhite ) || [];

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + getClass( elem ) + " " ).replace( rclass, " " )
					.indexOf( className ) > -1
			) {
				return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g,
	rspaces = /[\x20\t\r\n\f]+/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?

					// Handle most common string cases
					ret.replace( rreturn, "" ) :

					// Handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					jQuery.trim( jQuery.text( elem ) ).replace( rspaces, " " );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];
					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




support.focusin = "onfocusin" in window;


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = jQuery.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = jQuery.isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					} ) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 13
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in uncached url if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rts, "" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( jQuery.isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" ).prop( {
					charset: s.scriptCharset,
					src: s.url
				} ).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = jQuery.trim( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var docElem, win, rect, doc,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		rect = elem.getBoundingClientRect();

		// Make sure element is not hidden (display: none)
		if ( rect.width || rect.height ) {
			doc = elem.ownerDocument;
			win = getWindow( doc );
			docElem = doc.documentElement;

			return {
				top: rect.top + win.pageYOffset - docElem.clientTop,
				left: rect.left + win.pageXOffset - docElem.clientLeft
			};
		}

		// Return zeros for disconnected and hidden elements (gh-2310)
		return rect;
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
		// because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume getBoundingClientRect is there when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {

			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset = {
				top: parentOffset.top + jQuery.css( offsetParent[ 0 ], "borderTopWidth", true ),
				left: parentOffset.left + jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true )
			};
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

jQuery.parseJSON = JSON.parse;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}





var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}


return jQuery;
} ) );

// (function() {
  // Steal this trick from the Api.script to get ss declared globally for us.
  // #include "../../CoreSlim/Properties/MscorlibSlim.script"

  var global;

// SaltarelleCompiler Runtime (http://www.saltarelle-compiler.com)
// Modified version of Script# Core Runtime (http://projects.nikhilk.net/ScriptSharp)

if (typeof(global) === "undefined") {
	if (typeof(window) !== "undefined")
		global = window;
	else if (typeof(self) !== "undefined")
		global = self;
}
(function(global) {
"use strict";

var ss = { __assemblies: {} };

ss.initAssembly = function assembly(obj, name, res) {
	res = res || {};
	obj.name = name;
	obj.toString = function() { return this.name; };
	obj.__types = {};
	obj.getResourceNames = function() { return Object.keys(res); };
	obj.getResourceDataBase64 = function(name) { return res[name] || null; };
	obj.getResourceData = function(name) { var r = res[name]; return r ? ss.dec64(r) : null; };
	ss.__assemblies[name] = obj;
};
ss.initAssembly(ss, 'mscorlib');

ss.load = function ss$load(name) {
	return ss.__assemblies[name] || require(name);
};

var enc = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/', dec;
ss.enc64 = function(a, b) {
	var s = '', i;
	for (i = 0; i < a.length; i += 3) {
		var c1 = a[i], c2 = a[i+1], c3 = a[i+2];
		s += (b && i && !(i%57) ? '\n' : '') + enc[c1 >> 2] + enc[((c1 & 3) << 4) | (c2 >> 4)] + (i < a.length - 1 ? enc[((c2 & 15) << 2) | (c3 >> 6)] : '=') + (i < a.length - 2 ? enc[c3 & 63] : '=');
	}
	return s;
};

ss.dec64 = function(s) {
	s = s.replace(/\s/g, '');
	dec = dec || (function() { var o = {'=':-1}; for (var i = 0; i < 64; i++) o[enc[i]] = i; return o; })();
	var a = Array(Math.max(s.length * 3 / 4 - 2, 0)), i;
	for (i = 0; i < s.length; i += 4) {
		var j = i * 3 / 4, c1 = dec[s[i]], c2 = dec[s[i+1]], c3 = dec[s[i+2]], c4 = dec[s[i+3]];
		a[j] = (c1 << 2) | (c2 >> 4);
		if (c3 >= 0) a[j+1] = ((c2 & 15) << 4) | (c3 >> 2);
		if (c4 >= 0) a[j+2] = ((c3 & 3) << 6) | c4;
	}
	return a;
};

ss.getAssemblies = function ss$getAssemblies() {
	return Object.keys(ss.__assemblies).map(function(n) { return ss.__assemblies[n]; });
};

ss.isNullOrUndefined = function ss$isNullOrUndefined(o) {
	return (o === null) || (o === undefined);
};

ss.isValue = function ss$isValue(o) {
	return (o !== null) && (o !== undefined);
};

ss.referenceEquals = function ss$referenceEquals(a, b) {
	return ss.isValue(a) ? a === b : !ss.isValue(b);
};

ss.mkdict = function ss$mkdict() {
	var a = (arguments.length != 1 ? arguments : arguments[0]);
	var r = {};
	for (var i = 0; i < a.length; i += 2) {
		r[a[i]] = a[i + 1];
	}
	return r;
};

ss.clone = function ss$clone(t, o) {
	return o ? t.$clone(o) : o;
}

ss.coalesce = function ss$coalesce(a, b) {
	return ss.isValue(a) ? a : b;
};

ss.isDate = function ss$isDate(obj) {
	return Object.prototype.toString.call(obj) === '[object Date]';
};

ss.isArray = function ss$isArray(obj) {
	return Object.prototype.toString.call(obj) === '[object Array]';
};

ss.isTypedArrayType = function ss$isTypedArrayType(type) {
	return ['Float32Array', 'Float64Array', 'Int8Array', 'Int16Array', 'Int32Array', 'Uint8Array', 'Uint16Array', 'Uint32Array', 'Uint8ClampedArray'].indexOf(ss.getTypeFullName(type)) >= 0;
};

ss.isArrayOrTypedArray = function ss$isArray(obj) {
	return ss.isArray(obj) || ss.isTypedArrayType(ss.getInstanceType(obj));
};

ss.getHashCode = function ss$getHashCode(obj) {
	if (!ss.isValue(obj))
		throw new ss_NullReferenceException('Cannot get hash code of null');
	else if (typeof(obj.getHashCode) === 'function')
		return obj.getHashCode();
	else if (typeof(obj) === 'boolean') {
		return obj ? 1 : 0;
	}
	else if (typeof(obj) === 'number') {
		var s = obj.toExponential();
		s = s.substr(0, s.indexOf('e'));
		return parseInt(s.replace('.', ''), 10) & 0xffffffff;
	}
	else if (typeof(obj) === 'string') {
		var res = 0;
		for (var i = 0; i < obj.length; i++)
			res = (res * 31 + obj.charCodeAt(i)) & 0xffffffff;
		return res;
	}
	else if (ss.isDate(obj)) {
		return obj.valueOf() & 0xffffffff;
	}
	else {
		return ss.defaultHashCode(obj);
	}
};

ss.defaultHashCode = function ss$defaultHashCode(obj) {
	return obj.$__hashCode__ || (obj.$__hashCode__ = (Math.random() * 0x100000000) | 0);
};

ss.equals = function ss$equals(a, b) {
	if (!ss.isValue(a))
		throw new ss_NullReferenceException('Object is null');
	else if (a !== ss && typeof(a.equals) === 'function')
		return a.equals(b);
	if (ss.isDate(a) && ss.isDate(b))
		return a.valueOf() === b.valueOf();
	else if (typeof(a) === 'function' && typeof(b) === 'function')
		return ss.delegateEquals(a, b);
	else if (ss.isNullOrUndefined(a) && ss.isNullOrUndefined(b))
		return true;
	else
		return a === b;
};

ss.compare = function ss$compare(a, b) {
	if (!ss.isValue(a))
		throw new ss_NullReferenceException('Object is null');
	else if (typeof(a) === 'number' || typeof(a) === 'string' || typeof(a) === 'boolean')
		return ss.isValue(b) ? (a < b ? -1 : (a > b ? 1 : 0)) : 1;
	else if (ss.isDate(a))
		return ss.isValue(b) ? ss.compare(a.valueOf(), b.valueOf()) : 1;
	else
		return a.compareTo(b);
};

ss.equalsT = function ss$equalsT(a, b) {
	if (!ss.isValue(a))
		throw new ss_NullReferenceException('Object is null');
	else if (typeof(a) === 'number' || typeof(a) === 'string' || typeof(a) === 'boolean')
		return a === b;
	else if (ss.isDate(a))
		return a.valueOf() === b.valueOf();
	else
		return a.equalsT(b);
};

ss.staticEquals = function ss$staticEquals(a, b) {
	if (!ss.isValue(a))
		return !ss.isValue(b);
	else
		return ss.isValue(b) ? ss.equals(a, b) : false;
};

ss.shallowCopy = function ss$shallowCopy(source, target) {
	var keys = Object.keys(source);
	for (var i = 0, l = keys.length; i < l; i++) {
		var k = keys[i];
		target[k] = source[k];
	}
};

ss.isLower = function ss$isLower(c) {
	var s = String.fromCharCode(c);
	return s === s.toLowerCase() && s !== s.toUpperCase();
};

ss.isUpper = function ss$isUpper(c) {
	var s = String.fromCharCode(c);
	return s !== s.toLowerCase() && s === s.toUpperCase();
};

if (typeof(window) == 'object') {
	// Browser-specific stuff that could go into the Web assembly, but that assembly does not have an associated JS file.
	if (!window.Element) {
		// IE does not have an Element constructor. This implementation should make casting to elements work.
		window.Element = function() {};
		window.Element.isInstanceOfType = function(instance) { return instance && typeof instance.constructor === 'undefined' && typeof instance.tagName === 'string'; };
	}
	window.Element.__typeName = 'Element';
	
	if (!window.XMLHttpRequest) {
		window.XMLHttpRequest = function() {
			var progIDs = [ 'Msxml2.XMLHTTP', 'Microsoft.XMLHTTP' ];
	
			for (var i = 0; i < progIDs.length; i++) {
				try {
					var xmlHttp = new ActiveXObject(progIDs[i]);
					return xmlHttp;
				}
				catch (ex) {
				}
			}
	
			return null;
		};
	}

	ss.parseXml = function(markup) {
		try {
			if (DOMParser) {
				var domParser = new DOMParser();
				return domParser.parseFromString(markup, 'text/xml');
			}
			else {
				var progIDs = [ 'Msxml2.DOMDocument.3.0', 'Msxml2.DOMDocument' ];

				for (var i = 0; i < progIDs.length; i++) {
					var xmlDOM = new ActiveXObject(progIDs[i]);
					xmlDOM.async = false;
					xmlDOM.loadXML(markup);
					xmlDOM.setProperty('SelectionLanguage', 'XPath');
					return xmlDOM;
				}
			}
		}
		catch (ex) {
		}

		return null;
	};
}

///////////////////////////////////////////////////////////////////////////////
// Object Extensions

ss.clearKeys = function ss$clearKeys(d) {
	for (var n in d) {
		if (d.hasOwnProperty(n))
			delete d[n];
	}
};

ss.keyExists = function ss$keyExists(d, key) {
	return d[key] !== undefined;
};

if (!Object.keys) {
	Object.keys = (function() {
		'use strict';
		var hasOwnProperty = Object.prototype.hasOwnProperty,
			hasDontEnumBug = !({toString: null}).propertyIsEnumerable('toString'),
			dontEnums = ['toString','toLocaleString','valueOf','hasOwnProperty','isPrototypeOf','propertyIsEnumerable','constructor'],
			dontEnumsLength = dontEnums.length;

		return function (obj) {
			if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {
				throw new TypeError('Object.keys called on non-object');
			}

			var result = [], prop, i;

			for (prop in obj) {
				if (hasOwnProperty.call(obj, prop)) {
					result.push(prop);
				}
			}

			if (hasDontEnumBug) {
				for (i = 0; i < dontEnumsLength; i++) {
					if (hasOwnProperty.call(obj, dontEnums[i])) {
						result.push(dontEnums[i]);
					}
				}
			}
			return result;
		};
	}());
}

ss.getKeyCount = function ss$getKeyCount(d) {
	return Object.keys(d).length;
};

///////////////////////////////////////////////////////////////////////////////
// Type System Implementation

ss.__genericCache = {};

ss._makeGenericTypeName = function ss$_makeGenericTypeName(genericType, typeArguments) {
	var result = genericType.__typeName;
	for (var i = 0; i < typeArguments.length; i++)
		result += (i === 0 ? '[' : ',') + '[' + ss.getTypeFullName(typeArguments[i]) + ']';
	result += ']';
	return result;
};

ss.makeGenericType = function ss$makeGenericType(genericType, typeArguments) {
	var name = ss._makeGenericTypeName(genericType, typeArguments);
	return ss.__genericCache[name] || genericType.apply(null, typeArguments);
};

ss.registerGenericClassInstance = function ss$registerGenericClassInstance(instance, genericType, typeArguments, members, baseType, interfaceTypes) {
	var name = ss._makeGenericTypeName(genericType, typeArguments);
	ss.__genericCache[name] = instance;
	instance.__typeName = name;
	instance.__genericTypeDefinition = genericType;
	instance.__typeArguments = typeArguments;
	ss.initClass(instance, genericType.__assembly, members, baseType(), interfaceTypes());
};

ss.registerGenericInterfaceInstance = function ss$registerGenericInterfaceInstance(instance, genericType, typeArguments, members, baseInterfaces) {
	var name = ss._makeGenericTypeName(genericType, typeArguments);
	ss.__genericCache[name] = instance;
	instance.__typeName = name;
	instance.__genericTypeDefinition = genericType;
	instance.__typeArguments = typeArguments;
	ss.initInterface(instance, genericType.__assembly, members, baseInterfaces());
};

ss.isGenericTypeDefinition = function ss$isGenericTypeDefinition(type) {
	return type.__isGenericTypeDefinition || false;
};

ss.getGenericTypeDefinition = function ss$getGenericTypeDefinition(type) {
	return type.__genericTypeDefinition || null;
};

ss.getGenericParameterCount = function ss$getGenericParameterCount(type) {
	return type.__typeArgumentCount || 0;
};

ss.getGenericArguments = function ss$getGenericArguments(type) {
	return type.__typeArguments || null;
};

ss.setMetadata = function ss$_setMetadata(type, metadata) {
	if (metadata.members) {
		for (var i = 0; i < metadata.members.length; i++) {
			var m = metadata.members[i];
			m.typeDef = type;
			if (m.adder) m.adder.typeDef = type;
			if (m.remover) m.remover.typeDef = type;
			if (m.getter) m.getter.typeDef = type;
			if (m.setter) m.setter.typeDef = type;
		}
	}
	type.__metadata = metadata;
	if (metadata.variance) {
		type.isAssignableFrom = function(source) {
			var check = function(target, type) {
				if (type.__genericTypeDefinition === target.__genericTypeDefinition && type.__typeArguments.length == target.__typeArguments.length) {
					for (var i = 0; i < target.__typeArguments.length; i++) {
						var v = target.__metadata.variance[i], t = target.__typeArguments[i], s = type.__typeArguments[i];
						switch (v) {
							case 1: if (!ss.isAssignableFrom(t, s)) return false; break;
							case 2: if (!ss.isAssignableFrom(s, t)) return false; break;
							default: if (s !== t) return false;
						}
					}
					return true;
				}
				return false;
			};

			if (source.__interface && check(this, source))
				return true;
			var ifs = ss.getInterfaces(source);
			for (var i = 0; i < ifs.length; i++) {
				if (ifs[i] === this || check(this, ifs[i]))
					return true;
			}
			return false;
		};
	}
}

ss.initClass = function ss$initClass(ctor, asm, members, baseType, interfaces) {
	ctor.__class = true;
	ctor.__assembly = asm;
	if (!ctor.__typeArguments)
		asm.__types[ctor.__typeName] = ctor;
	if (baseType && baseType !== Object) {
		var f = function(){};
		f.prototype = baseType.prototype;
		ctor.prototype = new f();
		ctor.prototype.constructor = ctor;
	}
	ss.shallowCopy(members, ctor.prototype);
	if (interfaces)
		ctor.__interfaces = interfaces;
};

ss.initGenericClass = function ss$initGenericClass(ctor, asm, typeArgumentCount) {
	ctor.__class = true;
	ctor.__assembly = asm;
	asm.__types[ctor.__typeName] = ctor;
	ctor.__typeArgumentCount = typeArgumentCount;
	ctor.__isGenericTypeDefinition = true;
};

ss.initInterface = function ss$initInterface(ctor, asm, members, baseInterfaces) {
	ctor.__interface = true;
	ctor.__assembly = asm;
	if (!ctor.__typeArguments)
		asm.__types[ctor.__typeName] = ctor;
	if (baseInterfaces)
		ctor.__interfaces = baseInterfaces;
	ss.shallowCopy(members, ctor.prototype);
	ctor.isAssignableFrom = function(type) { return ss.contains(ss.getInterfaces(type), this); };
};

ss.initGenericInterface = function ss$initGenericClass(ctor, asm, typeArgumentCount) {
	ctor.__interface = true;
	ctor.__assembly = asm;
	asm.__types[ctor.__typeName] = ctor;
	ctor.__typeArgumentCount = typeArgumentCount;
	ctor.__isGenericTypeDefinition = true;
};

ss.initEnum = function ss$initEnum(ctor, asm, members, namedValues) {
	ctor.__enum = true;
	ctor.__assembly = asm;
	asm.__types[ctor.__typeName] = ctor;
	ss.shallowCopy(members, ctor.prototype);
	ctor.getDefaultValue = ctor.createInstance = function() { return namedValues ? null : 0; };
	ctor.isInstanceOfType = function(instance) { return typeof(instance) == (namedValues ? 'string' : 'number'); };
};

ss.getBaseType = function ss$getBaseType(type) {
	if (type === Object || type.__interface) {
		return null;
	}
	else if (Object.getPrototypeOf) {
		return Object.getPrototypeOf(type.prototype).constructor;
	}
	else {
		var p = type.prototype;
		if (Object.prototype.hasOwnProperty.call(p, 'constructor')) {
			try {
				var ownValue = p.constructor;
				delete p.constructor;
				return p.constructor;
			}
			finally {
				p.constructor = ownValue;
			}
		}
		return p.constructor;
	}
};

ss.getTypeFullName = function ss$getTypeFullName(type) {
	return type.__typeName || type.name || (type.toString().match(/^\s*function\s*([^\s(]+)/) || [])[1] || 'Object';
};

ss.getTypeQName = function ss$getTypeFullName(type) {
	return ss.getTypeFullName(type) + (type.__assembly ? ', ' + type.__assembly.name : '');
};

ss.getTypeName = function ss$getTypeName(type) {
	var fullName = ss.getTypeFullName(type);
	var bIndex = fullName.indexOf('[');
	var nsIndex = fullName.lastIndexOf('.', bIndex >= 0 ? bIndex : fullName.length);
	return nsIndex > 0 ? fullName.substr(nsIndex + 1) : fullName;
};

ss.getTypeNamespace = function ss$getTypeNamespace(type) {
	var fullName = ss.getTypeFullName(type);
	var bIndex = fullName.indexOf('[');
	var nsIndex = fullName.lastIndexOf('.', bIndex >= 0 ? bIndex : fullName.length);
	return nsIndex > 0 ? fullName.substr(0, nsIndex) : '';
};

ss.getTypeAssembly = function ss$getTypeAssembly(type) {
	if (ss.contains([Date, Number, Boolean, String, Function, Array], type))
		return ss;
	else
		return type.__assembly || null;
};

ss._getAssemblyType = function ss$_getAssemblyType(asm, name) {
	var result = [];
	if (asm.__types) {
		return asm.__types[name] || null;
	}
	else {
		var a = name.split('.');
		for (var i = 0; i < a.length; i++) {
			asm = asm[a[i]];
			if (!ss.isValue(asm))
				return null;
		}
		if (typeof asm !== 'function')
			return null;
		return asm;
	}
};

ss.getAssemblyTypes = function ss$getAssemblyTypes(asm) {
	var result = [];
	if (asm.__types) {
		for (var t in asm.__types) {
			if (asm.__types.hasOwnProperty(t))
				result.push(asm.__types[t]);
		}
	}
	else {
		var traverse = function(s, n) {
			for (var c in s) {
				if (s.hasOwnProperty(c))
					traverse(s[c], c);
			}
			if (typeof(s) === 'function' && ss.isUpper(n.charCodeAt(0)))
				result.push(s);
		};
		traverse(asm, '');
	}
	return result;
};

ss.createAssemblyInstance = function ss$createAssemblyInstance(asm, typeName) {
	var t = ss.getType(typeName, asm);
	return t ? ss.createInstance(t) : null;
};

ss.getInterfaces = function ss$getInterfaces(type) {
	if (type.__interfaces)
		return type.__interfaces;
	else if (type === Date || type === Number)
		return [ ss_IEquatable, ss_IComparable, ss_IFormattable ];
	else if (type === Boolean || type === String)
		return [ ss_IEquatable, ss_IComparable ];
	else if (type === Array || ss.isTypedArrayType(type))
		return [ ss_IEnumerable, ss_ICollection, ss_IList ];
	else
		return [];
};

ss.isInstanceOfType = function ss$isInstanceOfType(instance, type) {
	if (ss.isNullOrUndefined(instance))
		return false;

	if (typeof(type.isInstanceOfType) === 'function')
		return type.isInstanceOfType(instance);

	return ss.isAssignableFrom(type, ss.getInstanceType(instance));
};

ss.isAssignableFrom = function ss$isAssignableFrom(target, type) {
	return target === type || (typeof(target.isAssignableFrom) === 'function' && target.isAssignableFrom(type)) || type.prototype instanceof target;
};

ss.isClass = function Type$isClass(type) {
	return (type.__class == true || type === Array || type === Function || type === RegExp || type === String || type === Error || type === Object);
};

ss.isEnum = function Type$isEnum(type) {
	return !!type.__enum;
};

ss.isFlags = function Type$isFlags(type) {
	return type.__metadata && type.__metadata.enumFlags || false;
};

ss.isInterface = function Type$isInterface(type) {
	return !!type.__interface;
};

ss.safeCast = function ss$safeCast(instance, type) {
	if (type === true)
		return instance;
	else if (type === false)
		return null;
	else
		return ss.isInstanceOfType(instance, type) ? instance : null;
};

ss.cast = function ss$cast(instance, type) {
	if (instance === null || typeof(instance) === 'undefined')
		return instance;
	else if (type === true || (type !== false && ss.isInstanceOfType(instance, type)))
		return instance;
	throw new ss_InvalidCastException('Cannot cast object to type ' + ss.getTypeFullName(type));
};

ss.getInstanceType = function ss$getInstanceType(instance) {
	if (!ss.isValue(instance))
		throw new ss_NullReferenceException('Cannot get type of null');

	// NOTE: We have to catch exceptions because the constructor
	//       cannot be looked up on native COM objects
	try {
		return instance.constructor;
	}
	catch (ex) {
		return Object;
	}
};

ss._getType = function (typeName, asm, re) {
	var outer = !re;
	re = re || /[[,\]]/g;
	var last = re.lastIndex, m = re.exec(typeName), tname, targs = [];
	if (m) {
		tname = typeName.substring(last, m.index);
		switch (m[0]) {
			case '[':
				if (typeName[m.index + 1] != '[')
					return null;
				for (;;) {
					re.exec(typeName);
					var t = ss._getType(typeName, global, re);
					if (!t)
						return null;
					targs.push(t);
					m = re.exec(typeName);
					if (m[0] === ']')
						break;
					else if (m[0] !== ',')
						return null;
				}
				m = re.exec(typeName);
				if (m && m[0] === ',') {
					re.exec(typeName);
					if (!(asm = ss.__assemblies[(re.lastIndex > 0 ? typeName.substring(m.index + 1, re.lastIndex - 1) : typeName.substring(m.index + 1)).trim()]))
						return null;
				}
				break;

			case ']':
				break;

			case ',':
				re.exec(typeName);
				if (!(asm = ss.__assemblies[(re.lastIndex > 0 ? typeName.substring(m.index + 1, re.lastIndex - 1) : typeName.substring(m.index + 1)).trim()]))
					return null;
				break;
		}
	}
	else {
		tname = typeName.substring(last);
	}

	if (outer && re.lastIndex)
		return null;

	var t = ss._getAssemblyType(asm, tname.trim());
	return targs.length ? ss.makeGenericType(t, targs) : t;
}

ss.getType = function ss$getType(typeName, asm) {
	return typeName ? ss._getType(typeName, asm || global) : null;
};

ss.getDefaultValue = function ss$getDefaultValue(type) {
	if (typeof(type.getDefaultValue) === 'function')
		return type.getDefaultValue();
	else if (type === Boolean)
		return false;
	else if (type === Date)
		return new Date(0);
	else if (type === Number)
		return 0;
	return null;
};

ss.createInstance = function ss$createInstance(type) {
	if (typeof(type.createInstance) === 'function')
		return type.createInstance();
	else if (type === Boolean)
		return false;
	else if (type === Date)
		return new Date(0);
	else if (type === Number)
		return 0;
	else if (type === String)
		return '';
	else
		return new type();
};

ss.applyConstructor = function ss$applyConstructor(constructor, args) {
	var f = function() {
		constructor.apply(this, args);
	};
	f.prototype = constructor.prototype;
	return new f();
};

ss.getAttributes = function ss$getAttributes(type, attrType, inherit) {
	var result = [];
	if (inherit) {
		var b = ss.getBaseType(type);
		if (b) {
			var a = ss.getAttributes(b, attrType, true);
			for (var i = 0; i < a.length; i++) {
				var t = ss.getInstanceType(a[i]);
				if (!t.__metadata || !t.__metadata.attrNoInherit)
					result.push(a[i]);
			}
		}
	}
	if (type.__metadata && type.__metadata.attr) {
		for (var i = 0; i < type.__metadata.attr.length; i++) {
			var a = type.__metadata.attr[i];
			if (attrType == null || ss.isInstanceOfType(a, attrType)) {
				var t = ss.getInstanceType(a);
				if (!t.__metadata || !t.__metadata.attrAllowMultiple) {
					for (var j = result.length - 1; j >= 0; j--) {
						if (ss.isInstanceOfType(result[j], t))
							result.splice(j, 1);
					}
				}
				result.push(a);
			}
		}
	}
	return result;
};

ss.getMembers = function ss$getMembers(type, memberTypes, bindingAttr, name, params) {
	var result = [];
	if ((bindingAttr & 72) == 72 || (bindingAttr & 6) == 4) {
		var b = ss.getBaseType(type);
		if (b)
			result = ss.getMembers(b, memberTypes & ~1, bindingAttr & (bindingAttr & 64 ? 255 : 247) & (bindingAttr & 2 ? 251 : 255), name, params);
	}

	var f = function(m) {
		if ((memberTypes & m.type) && (((bindingAttr & 4) && !m.isStatic) || ((bindingAttr & 8) && m.isStatic)) && (!name || m.name === name)) {
			if (params) {
				if ((m.params || []).length !== params.length)
					return;
				for (var i = 0; i < params.length; i++) {
					if (params[i] !== m.params[i])
						return;
				}
			}
			result.push(m);
		}
	};

	if (type.__metadata && type.__metadata.members) {
		for (var i = 0; i < type.__metadata.members.length; i++) {
			var m = type.__metadata.members[i];
			f(m);
			for (var j = 0; j < 4; j++) {
				var a = ['getter','setter','adder','remover'][j];
				if (m[a])
					f(m[a]);
			}
		}
	}

	if (bindingAttr & 256) {
		while (type) {
			var r = [];
			for (var i = 0; i < result.length; i++) {
				if (result[i].typeDef === type)
					r.push(result[i]);
			}
			if (r.length > 1)
				throw new ss_AmbiguousMatchException('Ambiguous match');
			else if (r.length === 1)
				return r[0];
			type = ss.getBaseType(type);
		}
		return null;
	}

	return result;
};

ss.midel = function ss$midel(mi, target, typeArguments) {
	if (mi.isStatic && !!target)
		throw new ss_ArgumentException('Cannot specify target for static method');
	else if (!mi.isStatic && !target)
		throw new ss_ArgumentException('Must specify target for instance method');

	var method;
	if (mi.fget) {
		method = function() { return (mi.isStatic ? mi.typeDef : this)[mi.fget]; };
	}
	else if (mi.fset) {
		method = function(v) { (mi.isStatic ? mi.typeDef : this)[mi.fset] = v; };
	}
	else {
		method = mi.def || (mi.isStatic || mi.sm ? mi.typeDef[mi.sname] : target[mi.sname]);

		if (mi.tpcount) {
			if (!typeArguments || typeArguments.length !== mi.tpcount)
				throw new ss_ArgumentException('Wrong number of type arguments');
			method = method.apply(null, typeArguments);
		}
		else {
			if (typeArguments && typeArguments.length)
				throw new ss_ArgumentException('Cannot specify type arguments for non-generic method');
		}
		if (mi.exp) {
			var _m1 = method;
			method = function () { return _m1.apply(this, Array.prototype.slice.call(arguments, 0, arguments.length - 1).concat(arguments[arguments.length - 1])); };
		}
		if (mi.sm) {
			var _m2 = method;
			method = function() { return _m2.apply(null, [this].concat(Array.prototype.slice.call(arguments))); };
		}
	}
	return ss.mkdel(target, method);
};

ss.invokeCI = function ss$invokeCI(ci, args) {
	if (ci.exp)
		args = args.slice(0, args.length - 1).concat(args[args.length - 1]);

	if (ci.def)
		return ci.def.apply(null, args);
	else if (ci.sm)
		return ci.typeDef[ci.sname].apply(null, args);
	else
		return ss.applyConstructor(ci.sname ? ci.typeDef[ci.sname] : ci.typeDef, args);
};

ss.fieldAccess = function ss$fieldAccess(fi, obj) {
	if (fi.isStatic && !!obj)
		throw new ss_ArgumentException('Cannot specify target for static field');
	else if (!fi.isStatic && !obj)
		throw new ss_ArgumentException('Must specify target for instance field');
	obj = fi.isStatic ? fi.typeDef : obj;
	if (arguments.length === 3)
		obj[fi.sname] = arguments[2];
	else
		return obj[fi.sname];
};

///////////////////////////////////////////////////////////////////////////////
// IFormattable

var ss_IFormattable = function IFormattable$() { };

ss_IFormattable.__typeName = 'ss.IFormattable';
ss.IFormattable = ss_IFormattable;
ss.initInterface(ss_IFormattable, ss, { format: null });

ss.format = function ss$format(obj, fmt) {
	if (typeof(obj) === 'number')
		return ss.formatNumber(obj, fmt);
	else if (ss.isDate(obj))
		return ss.formatDate(obj, fmt);
	else
		return obj.format(fmt);
};

///////////////////////////////////////////////////////////////////////////////
// IComparable

var ss_IComparable = function IComparable$() { };

ss_IComparable.__typeName = 'ss.IComparable';
ss.IComparable = ss_IComparable;
ss.initInterface(ss_IComparable, ss, { compareTo: null });

///////////////////////////////////////////////////////////////////////////////
// IEquatable

var ss_IEquatable = function IEquatable$() { };

ss_IEquatable.__typeName = 'ss.IEquatable';
ss.IEquatable = ss_IEquatable;
ss.initInterface(ss_IEquatable, ss, { equalsT: null });

///////////////////////////////////////////////////////////////////////////////
// Number Extensions

ss.formatNumber = function ss$formatNumber(num, format) {
	if (ss.isNullOrUndefined(format) || (format.length == 0) || (format == 'i')) {
		return num.toString();
	}
	return ss.netFormatNumber(num, format, ss_CultureInfo.invariantCulture.numberFormat);
};

ss.localeFormatNumber = function ss$localeFormatNumber(num, format) {
	if (ss.isNullOrUndefined(format) || (format.length == 0) || (format == 'i')) {
		return num.toLocaleString();
	}
	return ss.netFormatNumber(num, format, ss_CultureInfo.currentCulture.numberFormat);
};

ss._commaFormatNumber = function ss$_commaFormat(number, groups, decimal, comma) {
	var decimalPart = null;
	var decimalIndex = number.indexOf(decimal);
	if (decimalIndex > 0) {
		decimalPart = number.substr(decimalIndex);
		number = number.substr(0, decimalIndex);
	}

	var negative = ss.startsWithString(number, '-');
	if (negative) {
		number = number.substr(1);
	}

	var groupIndex = 0;
	var groupSize = groups[groupIndex];
	if (number.length < groupSize) {
		return (negative ? '-' : '') + (decimalPart ? number + decimalPart : number);
	}

	var index = number.length;
	var s = '';
	var done = false;
	while (!done) {
		var length = groupSize;
		var startIndex = index - length;
		if (startIndex < 0) {
			groupSize += startIndex;
			length += startIndex;
			startIndex = 0;
			done = true;
		}
		if (!length) {
			break;
		}
		
		var part = number.substr(startIndex, length);
		if (s.length) {
			s = part + comma + s;
		}
		else {
			s = part;
		}
		index -= length;

		if (groupIndex < groups.length - 1) {
			groupIndex++;
			groupSize = groups[groupIndex];
		}
	}

	if (negative) {
		s = '-' + s;
	}    
	return decimalPart ? s + decimalPart : s;
};

ss.netFormatNumber = function ss$netFormatNumber(num, format, numberFormat) {
	var nf = (numberFormat && numberFormat.getFormat(ss_NumberFormatInfo)) || ss_CultureInfo.currentCulture.numberFormat;

	var s = '';    
	var precision = -1;
	
	if (format.length > 1) {
		precision = parseInt(format.substr(1), 10);
	}

	var fs = format.charAt(0);
	switch (fs) {
		case 'd': case 'D':
			s = parseInt(Math.abs(num)).toString();
			if (precision != -1) {
				s = ss.padLeftString(s, precision, 0x30);
			}
			if (num < 0) {
				s = '-' + s;
			}
			break;
		case 'x': case 'X':
			s = parseInt(Math.abs(num)).toString(16);
			if (fs == 'X') {
				s = s.toUpperCase();
			}
			if (precision != -1) {
				s = ss.padLeftString(s, precision, 0x30);
			}
			break;
		case 'e': case 'E':
			if (precision == -1) {
				s = num.toExponential();
			}
			else {
				s = num.toExponential(precision);
			}
			if (fs == 'E') {
				s = s.toUpperCase();
			}
			break;
		case 'f': case 'F':
		case 'n': case 'N':
			if (precision == -1) {
				precision = nf.numberDecimalDigits;
			}
			s = num.toFixed(precision).toString();
			if (precision && (nf.numberDecimalSeparator != '.')) {
				var index = s.indexOf('.');
				s = s.substr(0, index) + nf.numberDecimalSeparator + s.substr(index + 1);
			}
			if ((fs == 'n') || (fs == 'N')) {
				s = ss._commaFormatNumber(s, nf.numberGroupSizes, nf.numberDecimalSeparator, nf.numberGroupSeparator);
			}
			break;
		case 'c': case 'C':
			if (precision == -1) {
				precision = nf.currencyDecimalDigits;
			}
			s = Math.abs(num).toFixed(precision).toString();
			if (precision && (nf.currencyDecimalSeparator != '.')) {
				var index = s.indexOf('.');
				s = s.substr(0, index) + nf.currencyDecimalSeparator + s.substr(index + 1);
			}
			s = ss._commaFormatNumber(s, nf.currencyGroupSizes, nf.currencyDecimalSeparator, nf.currencyGroupSeparator);
			if (num < 0) {
				s = ss.formatString(nf.currencyNegativePattern, s);
			}
			else {
				s = ss.formatString(nf.currencyPositivePattern, s);
			}
			break;
		case 'p': case 'P':
			if (precision == -1) {
				precision = nf.percentDecimalDigits;
			}
			s = (Math.abs(num) * 100.0).toFixed(precision).toString();
			if (precision && (nf.percentDecimalSeparator != '.')) {
				var index = s.indexOf('.');
				s = s.substr(0, index) + nf.percentDecimalSeparator + s.substr(index + 1);
			}
			s = ss._commaFormatNumber(s, nf.percentGroupSizes, nf.percentDecimalSeparator, nf.percentGroupSeparator);
			if (num < 0) {
				s = ss.formatString(nf.percentNegativePattern, s);
			}
			else {
				s = ss.formatString(nf.percentPositivePattern, s);
			}
			break;
	}

	return s;
};

///////////////////////////////////////////////////////////////////////////////
// String Extensions
ss.netSplit = function ss$netSplit(s, strings, limit, options) {
	var re = new RegExp(strings.map(ss.regexpEscape).join('|'), 'g'), res = [], m, i;
	for (i = 0;; i = re.lastIndex) {
		if (m = re.exec(s)) {
			if (options !== 1 || m.index > i) {
				if (res.length === limit - 1) {
					res.push(s.substr(i));
					return res;
				}
				else
					res.push(s.substring(i, m.index));
			}
		}
		else {
			if (options !== 1 || i !== s.length)
				res.push(s.substr(i));
			return res;
		}
	}
};

ss.compareStrings = function ss$compareStrings(s1, s2, ignoreCase) {
	if (!ss.isValue(s1))
		return ss.isValue(s2) ? -1 : 0;
	if (!ss.isValue(s2))
		return 1;

	if (ignoreCase) {
		if (s1) {
			s1 = s1.toUpperCase();
		}
		if (s2) {
			s2 = s2.toUpperCase();
		}
	}
	s1 = s1 || '';
	s2 = s2 || '';

	if (s1 == s2) {
		return 0;
	}
	if (s1 < s2) {
		return -1;
	}
	return 1;
};

ss.endsWithString = function ss$endsWithString(s, suffix) {
	if (!suffix.length) {
		return true;
	}
	if (suffix.length > s.length) {
		return false;
	}
	return (s.substr(s.length - suffix.length) == suffix);
};

ss._formatString = function ss$_formatString(format, values, useLocale) {
	if (!ss._formatRE) {
		ss._formatRE = /\{\{|\}\}|\{[^\}\{]+\}/g;
	}

	return format.replace(ss._formatRE,
		function(m) {
			if (m === '{{' || m === '}}')
				return m.charAt(0);
			var index = parseInt(m.substr(1), 10);
			var value = values[index + 1];
			if (ss.isNullOrUndefined(value)) {
				return '';
			}
			if (ss.isInstanceOfType(value, ss_IFormattable)) {
				var formatSpec = null;
				var formatIndex = m.indexOf(':');
				if (formatIndex > 0) {
					formatSpec = m.substring(formatIndex + 1, m.length - 1);
				}
				return ss.format(value, formatSpec);
			}
			else {
				return useLocale ? value.toLocaleString() : value.toString();
			}
		});
};

ss.formatString = function String$format(format) {
	return ss._formatString(format, arguments, /* useLocale */ false);
};

ss.stringFromChar = function ss$stringFromChar(ch, count) {
	var s = ch;
	for (var i = 1; i < count; i++) {
		s += ch;
	}
	return s;
};

ss.htmlDecode = function ss$htmlDecode(s) {
	return s.replace(/&([^;]+);/g, function(_, e) {
		if (e[0] === '#')
			return String.fromCharCode(parseInt(e.substr(1), 10));
		switch (e) {
			case 'quot': return '"';
			case 'apos': return "'";
			case 'amp': return '&';
			case 'lt': return '<';
			case 'gt': return '>';
			default : return '&' + e + ';';
		}
	});
};

ss.htmlEncode = function ss$htmlEncode(s) {
	return s.replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
};

ss.jsEncode = function ss$jsEncode(s, q) {
	s = s.replace(/\\/g, '\\\\').replace(/'/g, "\\'").replace(/"/g, '\\"');
	return q ? '"' + s + '"' : s;
};

ss.indexOfAnyString = function ss$indexOfAnyString(s, chars, startIndex, count) {
	var length = s.length;
	if (!length) {
		return -1;
	}

	chars = String.fromCharCode.apply(null, chars);
	startIndex = startIndex || 0;
	count = count || length;

	var endIndex = startIndex + count - 1;
	if (endIndex >= length) {
		endIndex = length - 1;
	}

	for (var i = startIndex; i <= endIndex; i++) {
		if (chars.indexOf(s.charAt(i)) >= 0) {
			return i;
		}
	}
	return -1;
};

ss.insertString = function ss$insertString(s, index, value) {
	if (!value) {
		return s;
	}
	if (!index) {
		return value + s;
	}
	var s1 = s.substr(0, index);
	var s2 = s.substr(index);
	return s1 + value + s2;
};

ss.isNullOrEmptyString = function ss$isNullOrEmptyString(s) {
	return !s || !s.length;
};

ss.lastIndexOfAnyString = function ss$lastIndexOfAnyString(s, chars, startIndex, count) {
	var length = s.length;
	if (!length) {
		return -1;
	}

	chars = String.fromCharCode.apply(null, chars);
	startIndex = startIndex || length - 1;
	count = count || length;

	var endIndex = startIndex - count + 1;
	if (endIndex < 0) {
		endIndex = 0;
	}

	for (var i = startIndex; i >= endIndex; i--) {
		if (chars.indexOf(s.charAt(i)) >= 0) {
			return i;
		}
	}
	return -1;
};

ss.localeFormatString = function ss$localeFormatString(format) {
	return ss._formatString(format, arguments, /* useLocale */ true);
};

ss.padLeftString = function ss$padLeftString(s, totalWidth, ch) {
	if (s.length < totalWidth) {
		ch = String.fromCharCode(ch || 0x20);
		return ss.stringFromChar(ch, totalWidth - s.length) + s;
	}
	return s;
};

ss.padRightString = function ss$padRightString(s, totalWidth, ch) {
	if (s.length < totalWidth) {
		ch = String.fromCharCode(ch || 0x20);
		return s + ss.stringFromChar(ch, totalWidth - s.length);
	}
	return s;
};

ss.removeString = function ss$removeString(s, index, count) {
	if (!count || ((index + count) > this.length)) {
		return s.substr(0, index);
	}
	return s.substr(0, index) + s.substr(index + count);
};

ss.replaceAllString = function ss$replaceAllString(s, oldValue, newValue) {
	newValue = newValue || '';
	return s.split(oldValue).join(newValue);
};

ss.startsWithString = function ss$startsWithString(s, prefix) {
	if (!prefix.length) {
		return true;
	}
	if (prefix.length > s.length) {
		return false;
	}
	return (s.substr(0, prefix.length) == prefix);
};

if (!String.prototype.trim) {
	String.prototype.trim = function String$trim() {
		return ss.trimStartString(ss.trimEndString(this));
	};
}

ss.trimEndString = function ss$trimEndString(s, chars) {
	return s.replace(chars ? new RegExp('[' + String.fromCharCode.apply(null, chars) + ']+$') : /\s*$/, '');
};

ss.trimStartString = function ss$trimStartString(s, chars) {
	return s.replace(chars ? new RegExp('^[' + String.fromCharCode.apply(null, chars) + ']+') : /^\s*/, '');
};

ss.trimString = function ss$trimString(s, chars) {
	return ss.trimStartString(ss.trimEndString(s, chars), chars);
};

ss.lastIndexOfString = function ss$lastIndexOfString(s, search, startIndex, count) {
	var index = s.lastIndexOf(search, startIndex);
	return (index < (startIndex - count + 1)) ? -1 : index;
};

ss.indexOfString = function ss$indexOfString(s, search, startIndex, count) {
	var index = s.indexOf(search, startIndex);
	return ((index + search.length) <= (startIndex + count)) ? index : -1;
};

///////////////////////////////////////////////////////////////////////////////
// Math Extensions

ss.divRem = function ss$divRem(a, b, result) {
	var remainder = a % b;
	result.$ = remainder;
	return (a - remainder) / b;
};

ss.round = function ss$round(n, d, rounding) {
	var m = Math.pow(10, d || 0);
	n *= m;
	var sign = (n > 0) | -(n < 0);
	if (n % 1 === 0.5 * sign) {
		var f = Math.floor(n);
		return (f + (rounding ? (sign > 0) : (f % 2 * sign))) / m;
	}

	return Math.round(n) / m;
};

///////////////////////////////////////////////////////////////////////////////
// IFormatProvider

var ss_IFormatProvider = function IFormatProvider$() { };

ss_IFormatProvider.__typeName = 'ss.IFormatProvider';
ss.IFormatProvider = ss_IFormatProvider;
ss.initInterface(ss_IFormatProvider, ss, { getFormat: null });

///////////////////////////////////////////////////////////////////////////////
// NumberFormatInfo

var ss_NumberFormatInfo = function NumberFormatInfo$() {
};

ss_NumberFormatInfo.__typeName = 'ss.NumberFormatInfo';
ss.NumberFormatInfo = ss_NumberFormatInfo;
ss.initClass(ss_NumberFormatInfo, ss, {
	getFormat:  function NumberFormatInfo$getFormat(type) {
		return (type === ss_NumberFormatInfo) ? this : null;
	}
}, null, [ss_IFormatProvider]);

ss_NumberFormatInfo.invariantInfo = new ss_NumberFormatInfo();
ss.shallowCopy({
	naNSymbol: 'NaN',
	negativeSign: '-',
	positiveSign: '+',
	negativeInfinitySymbol: '-Infinity',
	positiveInfinitySymbol: 'Infinity',

	percentSymbol: '%',
	percentGroupSizes: [3],
	percentDecimalDigits: 2,
	percentDecimalSeparator: '.',
	percentGroupSeparator: ',',
	percentPositivePattern: 0,
	percentNegativePattern: 0,

	currencySymbol: '$',
	currencyGroupSizes: [3],
	currencyDecimalDigits: 2,
	currencyDecimalSeparator: '.',
	currencyGroupSeparator: ',',
	currencyNegativePattern: 0,
	currencyPositivePattern: 0,

	numberGroupSizes: [3],
	numberDecimalDigits: 2,
	numberDecimalSeparator: '.',
	numberGroupSeparator: ','
}, ss_NumberFormatInfo.invariantInfo);

///////////////////////////////////////////////////////////////////////////////
// DateTimeFormatInfo

var ss_DateTimeFormatInfo = function DateTimeFormatInfo$() {
};

ss_DateTimeFormatInfo.__typeName = 'ss.DateTimeFormatInfo';
ss.DateTimeFormatInfo = ss_DateTimeFormatInfo;
ss.initClass(ss_DateTimeFormatInfo, ss, {
	getFormat: function DateTimeFormatInfo$getFormat(type) {
		return type === ss_DateTimeFormatInfo ? this : null;
	}
}, null, [ss_IFormatProvider]);

ss_DateTimeFormatInfo.invariantInfo = new ss_DateTimeFormatInfo();
ss.shallowCopy({
	amDesignator: 'AM',
	pmDesignator: 'PM',

	dateSeparator: '/',
	timeSeparator: ':',

	gmtDateTimePattern: 'ddd, dd MMM yyyy HH:mm:ss \'GMT\'',
	universalDateTimePattern: 'yyyy-MM-dd HH:mm:ssZ',
	sortableDateTimePattern: 'yyyy-MM-ddTHH:mm:ss',
	dateTimePattern: 'dddd, MMMM dd, yyyy h:mm:ss tt',

	longDatePattern: 'dddd, MMMM dd, yyyy',
	shortDatePattern: 'M/d/yyyy',

	longTimePattern: 'h:mm:ss tt',
	shortTimePattern: 'h:mm tt',

	firstDayOfWeek: 0,
	dayNames: ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'],
	shortDayNames: ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'],
	minimizedDayNames: ['Su','Mo','Tu','We','Th','Fr','Sa'],

	monthNames: ['January','February','March','April','May','June','July','August','September','October','November','December',''],
	shortMonthNames: ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','']
}, ss_DateTimeFormatInfo.invariantInfo);

//#include "Stopwatch.js"

///////////////////////////////////////////////////////////////////////////////
// Array Extensions

ss._flatIndex = function ss$_flatIndex(arr, indices) {
	if (indices.length != (arr._sizes ? arr._sizes.length : 1))
		throw new ss_ArgumentException('Invalid number of indices');

	if (indices[0] < 0 || indices[0] >= (arr._sizes ? arr._sizes[0] : arr.length))
		throw new ss_ArgumentException('Index 0 out of range');

	var idx = indices[0];
	if (arr._sizes) {
		for (var i = 1; i < arr._sizes.length; i++) {
			if (indices[i] < 0 || indices[i] >= arr._sizes[i])
				throw new ss_ArgumentException('Index ' + i + ' out of range');
			idx = idx * arr._sizes[i] + indices[i];
		}
	}
	return idx;
};

ss.arrayGet2 = function ss$arrayGet2(arr, indices) {
	var idx = ss._flatIndex(arr, indices);
	var r = arr[idx];
	return typeof r !== 'undefined' ? r : arr._defvalue;
};

ss.arrayGet = function ss$arrayGet(arr) {
	return ss.arrayGet2(arr, Array.prototype.slice.call(arguments, 1));
}

ss.arraySet2 = function ss$arraySet2(arr, value, indices) {
	var idx = ss._flatIndex(arr, indices);
	arr[idx] = value;
};

ss.arraySet = function ss$arraySet() {
	return ss.arraySet2(arguments[0], arguments[arguments.length - 1], Array.prototype.slice.call(arguments, 1, arguments.length - 1));
};

ss.arrayRank = function ss$arrayRank(arr) {
	return arr._sizes ? arr._sizes.length : 1;
};

ss.arrayLength = function ss$arrayLength(arr, dimension) {
	if (dimension >= (arr._sizes ? arr._sizes.length : 1))
		throw new ss_ArgumentException('Invalid dimension');
	return arr._sizes ? arr._sizes[dimension] : arr.length;
};

ss.arrayExtract = function ss$arrayExtract(arr, start, count) {
	if (!ss.isValue(count)) {
		return arr.slice(start);
	}
	return arr.slice(start, start + count);
};

ss.arrayAddRange = function ss$arrayAddRange(arr, items) {
	if (items instanceof Array) {
		arr.push.apply(arr, items);
	}
	else {
		var e = ss.getEnumerator(items);
		try {
			while (e.moveNext()) {
				ss.add(arr, e.current());
			}
		}
		finally {
			if (ss.isInstanceOfType(e, ss_IDisposable)) {
				ss.cast(e, ss_IDisposable).dispose();
			}
		}
	}
};

ss.arrayClone = function ss$arrayClone(arr) {
	if (arr.length === 1) {
		return [arr[0]];
	}
	else {
		return Array.apply(null, arr);
	}
};

ss.arrayPeekFront = function ss$arrayPeekFront(arr) {
	if (arr.length)
		return arr[0];
	throw new ss_InvalidOperationException('Array is empty');
};

ss.arrayPeekBack = function ss$arrayPeekBack(arr) {
	if (arr.length)
		return arr[arr.length - 1];
	throw new ss_InvalidOperationException('Array is empty');
};

ss.indexOfArray = function ss$indexOfArray(arr, item, startIndex) {
	startIndex = startIndex || 0;
	for (var i = startIndex; i < arr.length; i++) {
		if (ss.staticEquals(arr[i], item)) {
			return i;
		}
	}
	return -1;
}

ss.arrayInsertRange = function ss$arrayInsertRange(arr, index, items) {
	if (items instanceof Array) {
		if (index === 0) {
			arr.unshift.apply(arr, items);
		}
		else {
			for (var i = 0; i < items.length; i++) {
				arr.splice(index + i, 0, items[i]);
			}
		}
	}
	else {
		var e = ss.getEnumerator(items);
		try {
			while (e.moveNext()) {
				arr.insert(index, e.current());
				index++;
			}
		}
		finally {
			if (ss.isInstanceOfType(e, ss_IDisposable)) {
				ss.cast(e, ss_IDisposable).dispose();
			}
		}
	}
};

if (!Array.prototype.map) {
	Array.prototype.map = function Array$map(callback, instance) {
		var length = this.length;
		var mapped = new Array(length);
		for (var i = 0; i < length; i++) {
			if (i in this) {
				mapped[i] = callback.call(instance, this[i], i, this);
			}
		}
		return mapped;
	};
}

ss.arrayRemoveRange = function ss$arrayRemoveRange(arr, index, count) {
	arr.splice(index, count);
};

if (!Array.prototype.some) {
	Array.prototype.some = function Array$some(callback, instance) {
		var length = this.length;
		for (var i = 0; i < length; i++) {
			if (i in this && callback.call(instance, this[i], i, this)) {
				return true;
			}
		}
		return false;
	};
}

// Production steps of ECMA-262, Edition 5, 15.4.4.18
// Reference: http://es5.github.io/#x15.4.4.18
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach
if (!Array.prototype.forEach) {

	Array.prototype.forEach = function(callback, thisArg) {

	    var T, k;

	    if (this == null) {
	        throw new TypeError(' this is null or not defined');
	    }

	    // 1. Let O be the result of calling ToObject passing the |this| value as the argument.
	    var O = Object(this);

	    // 2. Let lenValue be the result of calling the Get internal method of O with the argument "length".
	    // 3. Let len be ToUint32(lenValue).
	    var len = O.length >>> 0;

	    // 4. If IsCallable(callback) is false, throw a TypeError exception.
	    // See: http://es5.github.com/#x9.11
	    if (typeof callback !== "function") {
	        throw new TypeError(callback + ' is not a function');
	    }

	    // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.
	    if (arguments.length > 1) {
	        T = thisArg;
	    }

	    // 6. Let k be 0
	    k = 0;

	    // 7. Repeat, while k < len
	    while (k < len) {

	        var kValue;

	        // a. Let Pk be ToString(k).
	        //   This is implicit for LHS operands of the in operator
	        // b. Let kPresent be the result of calling the HasProperty internal method of O with argument Pk.
	        //   This step can be combined with c
	        // c. If kPresent is true, then
	        if (k in O) {

	            // i. Let kValue be the result of calling the Get internal method of O with argument Pk.
	            kValue = O[k];

	            // ii. Call the Call internal method of callback with T as the this value and
	            // argument list containing kValue, k, and O.
	            callback.call(T, kValue, k, O);
	        }
	        // d. Increase k by 1.
	        k++;
	    }
	    // 8. return undefined
	};
}

// Production steps of ECMA-262, Edition 5
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter
if (!Array.prototype.filter) {
    Array.prototype.filter = function(fun/*, thisArg*/) {

        if (this === void 0 || this === null) {
            throw new TypeError();
        }

        var t = Object(this);
        var len = t.length >>> 0;
        if (typeof fun !== 'function') {
            throw new TypeError();
        }

        var res = [];
        var thisArg = arguments.length >= 2 ? arguments[1] : void 0;
        for (var i = 0; i < len; i++) {
            if (i in t) {
                var val = t[i];

                // NOTE: Technically this should Object.defineProperty at
                //       the next index, as push can be affected by
                //       properties on Object.prototype and Array.prototype.
                //       But that method's new, and collisions should be
                //       rare, so use the more-compatible alternative.
                if (fun.call(thisArg, val, i, t)) {
                    res.push(val);
                }
            }
        }

        return res;
    };
}

ss.arrayFromEnumerable = function ss$arrayFromEnumerable(enm) {
	if (!ss.isValue(enm))
		return null;

	var e = ss.getEnumerator(enm), r = [];
	try {
		while (e.moveNext())
			r.push(e.current());
	}
	finally {
		e.dispose();
	}
	return r;
};

ss.multidimArray = function ss$multidimArray(defvalue, sizes) {
	var arr = [];
	arr._defvalue = defvalue;
	arr._sizes = [arguments[1]];
	var length = arguments[1];
	for (var i = 2; i < arguments.length; i++) {
		length *= arguments[i];
		arr._sizes[i - 1] = arguments[i];
	}
	arr.length = length;
	return arr;
};

ss.repeat = function ss$repeat(value, count) {
	var result = [];
	for (var i = 0; i < count; i++)
		result.push(value);
	return result;
};

ss.arrayFill = function ss$arrayFill(dst, val, index, count) {
	if (index < 0 || count < 0 || (index + count) > dst.length)
		throw new ss_ArgumentException();
	if (Array.prototype.fill) {
		dst.fill(val, index, index + count);
	}
	else {
		while (--count >= 0)
			dst[index + count] = val;
	}
};

ss.arrayCopy = function ss$arrayCopy(src, spos, dst, dpos, len) {
	if (spos < 0 || dpos < 0 || len < 0)
		throw new ss_ArgumentOutOfRangeException();

	if (len > (src.length - spos) || len > (dst.length - dpos))
		throw new ss_ArgumentException();

	if (spos < dpos && src === dst) {
		while (--len >= 0)
			dst[dpos + len] = src[spos + len];
	}
	else {
		for (var i = 0; i < len; i++)
			dst[dpos + i] = src[spos + i];
	}
}

///////////////////////////////////////////////////////////////////////////////
// Date Extensions

ss.utcNow = function ss$utcNow() {
	var d = new Date();
	return new Date(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(), d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds());
};

ss.toUTC = function ss$toUniversalTime(d) {
	return new Date(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(), d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds());
};

ss.fromUTC = function ss$toLocalTime(d) {
	return new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds()));
};

ss.today = function ss$today() {
	var d = new Date();
	return new Date(d.getFullYear(), d.getMonth(), d.getDate());
}

ss.formatDate = function ss$formatDate(date, format) {
	if (ss.isNullOrUndefined(format) || (format.length == 0) || (format == 'i')) {
		return date.toString();
	}
	if (format == 'id') {
		return date.toDateString();
	}
	if (format == 'it') {
		return date.toTimeString();
	}

	return ss._netFormatDate(date, format, false);
};

ss.localeFormatDate = function ss$localeFormatDate(date, format) {
	if (ss.isNullOrUndefined(format) || (format.length == 0) || (format == 'i')) {
		return date.toLocaleString();
	}
	if (format == 'id') {
		return date.toLocaleDateString();
	}
	if (format == 'it') {
		return date.toLocaleTimeString();
	}

	return ss._netFormatDate(date, format, true);
};

ss._netFormatDate = function ss$_netFormatDate(dt, format, useLocale) {
	var dtf = useLocale ? ss_CultureInfo.currentCulture.dateTimeFormat : ss_CultureInfo.invariantCulture.dateTimeFormat;

	if (format.length == 1) {
		switch (format) {
			case 'f': format = dtf.longDatePattern + ' ' + dtf.shortTimePattern; break;
			case 'F': format = dtf.dateTimePattern; break;

			case 'd': format = dtf.shortDatePattern; break;
			case 'D': format = dtf.longDatePattern; break;

			case 't': format = dtf.shortTimePattern; break;
			case 'T': format = dtf.longTimePattern; break;

			case 'g': format = dtf.shortDatePattern + ' ' + dtf.shortTimePattern; break;
			case 'G': format = dtf.shortDatePattern + ' ' + dtf.longTimePattern; break;

			case 'R': case 'r':
				dtf = ss_CultureInfo.InvariantCulture.dateTimeFormat;
				format = dtf.gmtDateTimePattern;
				break;
			case 'u': format = dtf.universalDateTimePattern; break;
			case 'U':
				format = dtf.dateTimePattern;
				dt = new Date(dt.getUTCFullYear(), dt.getUTCMonth(), dt.getUTCDate(),
							  dt.getUTCHours(), dt.getUTCMinutes(), dt.getUTCSeconds(), dt.getUTCMilliseconds());
				break;

			case 's': format = dtf.sortableDateTimePattern; break;
		}
	}

	if (format.charAt(0) == '%') {
		format = format.substr(1);
	}

	if (!Date._formatRE) {
		Date._formatRE = /'.*?[^\\]'|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z/g;
	}

	var re = Date._formatRE;
	var sb = new ss_StringBuilder();

	re.lastIndex = 0;
	while (true) {
		var index = re.lastIndex;
		var match = re.exec(format);

		sb.append(format.slice(index, match ? match.index : format.length));
		if (!match) {
			break;
		}

		var fs = match[0];
		var part = fs;
		switch (fs) {
			case 'dddd':
				part = dtf.dayNames[dt.getDay()];
				break;
			case 'ddd':
				part = dtf.shortDayNames[dt.getDay()];
				break;
			case 'dd':
				part = ss.padLeftString(dt.getDate().toString(), 2, 0x30);
				break;
			case 'd':
				part = dt.getDate();
				break;
			case 'MMMM':
				part = dtf.monthNames[dt.getMonth()];
				break;
			case 'MMM':
				part = dtf.shortMonthNames[dt.getMonth()];
				break;
			case 'MM':
				part = ss.padLeftString((dt.getMonth() + 1).toString(), 2, 0x30);
				break;
			case 'M':
				part = (dt.getMonth() + 1);
				break;
			case 'yyyy':
				part = dt.getFullYear();
				break;
			case 'yy':
				part = ss.padLeftString((dt.getFullYear() % 100).toString(), 2, 0x30);
				break;
			case 'y':
				part = (dt.getFullYear() % 100);
				break;
			case 'h': case 'hh':
				part = dt.getHours() % 12;
				if (!part) {
					part = '12';
				}
				else if (fs == 'hh') {
					part = ss.padLeftString(part.toString(), 2, 0x30);
				}
				break;
			case 'HH':
				part = ss.padLeftString(dt.getHours().toString(), 2, 0x30);
				break;
			case 'H':
				part = dt.getHours();
				break;
			case 'mm':
				part = ss.padLeftString(dt.getMinutes().toString(), 2, 0x30);
				break;
			case 'm':
				part = dt.getMinutes();
				break;
			case 'ss':
				part = ss.padLeftString(dt.getSeconds().toString(), 2, 0x30);
				break;
			case 's':
				part = dt.getSeconds();
				break;
			case 't': case 'tt':
				part = (dt.getHours() < 12) ? dtf.amDesignator : dtf.pmDesignator;
				if (fs == 't') {
					part = part.charAt(0);
				}
				break;
			case 'fff':
				part = ss.padLeftString(dt.getMilliseconds().toString(), 3, 0x30);
				break;
			case 'ff':
				part = ss.padLeftString(dt.getMilliseconds().toString(), 3).substr(0, 2);
				break;
			case 'f':
				part = ss.padLeftString(dt.getMilliseconds().toString(), 3).charAt(0);
				break;
			case 'z':
				part = dt.getTimezoneOffset() / 60;
				part = ((part >= 0) ? '-' : '+') + Math.floor(Math.abs(part));
				break;
			case 'zz': case 'zzz':
				part = dt.getTimezoneOffset() / 60;
				part = ((part >= 0) ? '-' : '+') + Math.floor(ss.padLeftString(Math.abs(part)).toString(), 2, 0x30);
				if (fs == 'zzz') {
					part += dtf.timeSeparator + Math.abs(ss.padLeftString(dt.getTimezoneOffset() % 60).toString(), 2, 0x30);
				}
				break;
			default:
				if (part.charAt(0) == '\'') {
					part = part.substr(1, part.length - 2).replace(/\\'/g, '\'');
				}
				break;
		}
		sb.append(part);
	}

	return sb.toString();
};

ss._parseExactDate = function ss$_parseExactDate(val, format, provider, utc) {
	provider = (provider && provider.getFormat(ss_DateTimeFormatInfo)) || ss_CultureInfo.currentCulture.dateTimeFormat;
	var AM = provider.amDesignator, PM = provider.pmDesignator;

	var _isInteger = function(val) {
		var digits="1234567890";
		for (var i=0; i < val.length; i++) {
			if (digits.indexOf(val.charAt(i))==-1) {
				return false;
			}
		}
		return true;
	};

	var _getInt = function(str,i,minlength,maxlength) {
		for (var x=maxlength; x>=minlength; x--) {
			var token=str.substring(i,i+x);
			if (token.length < minlength) {
				return null;
			}
			if (_isInteger(token)) {
				return token;
			}
		}
		return null;
	};

	val = val + "";
	format = format + "";
	var i_val = 0;
	var i_format = 0;
	var c = "";
	var token = "";

	var year = 0, month = 1, date = 1, hh = 0, mm = 0, _ss = 0, ampm = "";
		
	while (i_format < format.length) {
		// Get next token from format string
		c = format.charAt(i_format);
		token = "";
		while ((format.charAt(i_format) == c) && (i_format < format.length)) {
			token += format.charAt(i_format++);
		}
		// Extract contents of value based on format token
		if (token=="yyyy" || token=="yy" || token=="y") {
			if (token == "yyyy")
				year = _getInt(val, i_val, 4, 4);
			if (token == "yy")
				year = _getInt(val, i_val, 2, 2);
			if (token == "y")
				year = _getInt(val, i_val, 2, 4);

			if (year == null)
				return null;

			i_val += year.length;
			if (year.length == 2) {
				if (year > 30) {
					year = 1900 + (year-0);
				}
				else {
					year = 2000 + (year-0);
				}
			}
		}
		else if (token == "MM" || token == "M") {
			month = _getInt(val, i_val, token.length, 2);
			if (month == null || (month < 1) || (month > 12))
				return null;
			i_val += month.length;
		}
		else if (token=="dd"||token=="d") {
			date = _getInt(val, i_val, token.length, 2);
			if (date == null || (date < 1) || (date > 31))
				return null;
			i_val += date.length;
		}
		else if (token=="hh"||token=="h") {
			hh = _getInt(val, i_val, token.length, 2);
			if (hh == null || (hh < 1) || (hh > 12))
				return null;
			i_val += hh.length;
		}
		else if (token=="HH"||token=="H") {
			hh = _getInt(val, i_val, token.length, 2);
			if (hh == null || (hh < 0) || (hh > 23))
				return null;
			i_val += hh.length;
		}
		else if (token == "mm" || token == "m") {
			mm = _getInt(val, i_val, token.length, 2);
			if (mm == null || (mm < 0) || (mm > 59))
				return null;
			i_val += mm.length;
		}
		else if (token == "ss" || token == "s") {
			_ss = _getInt(val, i_val, token.length, 2);
			if (_ss == null || (_ss < 0) || (_ss > 59))
				return null;
			i_val += _ss.length;
		}
		else if (token == "t") {
			if (val.substring(i_val, i_val + 1).toLowerCase() == AM.charAt(0).toLowerCase())
				ampm = AM;
			else if (val.substring(i_val, i_val + 1).toLowerCase() == PM.charAt(0).toLowerCase())
				ampm = PM;
			else
				return null;
			i_val += 1;
		}
		else if (token == "tt") {
			if (val.substring(i_val, i_val + 2).toLowerCase() == AM.toLowerCase())
				ampm = AM;
			else if (val.substring(i_val,i_val+2).toLowerCase() == PM.toLowerCase())
				ampm = PM;
			else
				return null;
			i_val += 2;
		}
		else {
			if (val.substring(i_val, i_val + token.length) != token)
				return null;
			else
				i_val += token.length;
		}
	}
	// If there are any trailing characters left in the value, it doesn't match
	if (i_val != val.length)
		return null;

	// Is date valid for month?
	if (month == 2) {
		// Check for leap year
		if (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)) { // leap year
			if (date > 29)
				return null;
		}
		else if (date > 28)
			return null;
	}
	if ((month == 4) || (month == 6) || (month == 9) || (month == 11)) {
		if (date > 30) {
			return null;
		}
	}
	// Correct hours value
	if (hh < 12 && ampm == PM) {
		hh = hh - 0 + 12;
	}
	else if (hh > 11 && ampm == AM) {
		hh -= 12;
	}

	if (utc)
		return new Date(Date.UTC(year, month - 1, date, hh, mm, _ss));
	else
		return new Date(year, month - 1, date, hh, mm, _ss);
};

ss.parseExactDate = function ss$parseExactDate(val, format, provider) {
	return ss._parseExactDate(val, format, provider, false);
};

ss.parseExactDateUTC = function ss$parseExactDateUTC(val, format, provider) {
	return ss._parseExactDate(val, format, provider, true);
};

///////////////////////////////////////////////////////////////////////////////
// Function Extensions

ss._delegateContains = function ss$_delegateContains(targets, object, method) {
	for (var i = 0; i < targets.length; i += 2) {
		if (targets[i] === object && targets[i + 1] === method) {
			return true;
		}
	}
	return false;
};

ss._mkdel = function ss$_mkdel(targets) {
	var delegate = function() {
		if (targets.length == 2) {
			return targets[1].apply(targets[0], arguments);
		}
		else {
			var clone = ss.arrayClone(targets);
			for (var i = 0; i < clone.length; i += 2) {
				if (ss._delegateContains(targets, clone[i], clone[i + 1])) {
					clone[i + 1].apply(clone[i], arguments);
				}
			}
			return null;
		}
	};
	delegate._targets = targets;

	return delegate;
};

ss.mkdel = function ss$mkdel(object, method) {
	if (!object) {
		return method;
	}
	if (typeof method === 'string') {
		method = object[method];
	}
	return ss._mkdel([object, method]);
};

ss.delegateCombine = function ss$delegateCombine(delegate1, delegate2) {
	if (!delegate1) {
		if (!delegate2._targets) {
			return ss.mkdel(null, delegate2);
		}
		return delegate2;
	}
	if (!delegate2) {
		if (!delegate1._targets) {
			return ss.mkdel(null, delegate1);
		}
		return delegate1;
	}

	var targets1 = delegate1._targets ? delegate1._targets : [null, delegate1];
	var targets2 = delegate2._targets ? delegate2._targets : [null, delegate2];

	return ss._mkdel(targets1.concat(targets2));
};

ss.delegateRemove = function ss$delegateRemove(delegate1, delegate2) {
	if (!delegate1 || (delegate1 === delegate2)) {
		return null;
	}

	var targets = delegate1._targets;
	if (!delegate2 || !targets) {
		return delegate1;
	}

	var object = null;
	var method;
	if (delegate2._targets) {
		object = delegate2._targets[0];
		method = delegate2._targets[1];
	}
	else {
		method = delegate2;
	}

	for (var i = 0; i < targets.length; i += 2) {
		if ((targets[i] === object) && (targets[i + 1] === method)) {
			if (targets.length == 2) {
				return null;
			}
			var t = ss.arrayClone(targets);
			t.splice(i, 2);
			return ss._mkdel(t);
		}
	}

	return delegate1;
};

ss.delegateEquals = function ss$delegateEquals(a, b) {
	if (a === b)
		return true;
	if (!a._targets && !b._targets)
		return false;
	var ta = a._targets || [null, a], tb = b._targets || [null, b];
	if (ta.length != tb.length)
		return false;
	for (var i = 0; i < ta.length; i++) {
		if (ta[i] !== tb[i])
			return false;
	}
	return true;
};

ss.delegateClone = function ss$delegateClone(source) {
	return source._targets ? ss._mkdel(source._targets) : function() { return source.apply(this, arguments); };
};

ss.thisFix = function ss$thisFix(source) {
	return function() {
		var x = [this];
		for(var i = 0; i < arguments.length; i++)
			x.push(arguments[i]);
		return source.apply(source, x);
	};
};

ss.getInvocationList = function ss$getInvocationList(delegate) {
	if (!delegate._targets)
		return [delegate];
	var result = [];
	for (var i = 0; i < delegate._targets.length; i += 2)
		result.push(ss.mkdel(delegate._targets[i], delegate._targets[i + 1]));
	return result;
};

///////////////////////////////////////////////////////////////////////////////
// RegExp Extensions
ss.regexpEscape = function ss$regexpEscape(s) {
	return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
};

///////////////////////////////////////////////////////////////////////////////
// Debug Extensions

ss.Debug = global.Debug || function() {};
ss.Debug.__typeName = 'Debug';

if (!ss.Debug.writeln) {
	ss.Debug.writeln = function Debug$writeln(text) {
		if (global.console) {
			if (global.console.debug) {
				global.console.debug(text);
				return;
			}
			else if (global.console.log) {
				global.console.log(text);
				return;
			}
		}
		else if (global.opera &&
			global.opera.postError) {
			global.opera.postError(text);
			return;
		}
	}
};

ss.Debug._fail = function Debug$_fail(message) {
	ss.Debug.writeln(message);
	debugger;
};

ss.Debug.assert = function Debug$assert(condition, message) {
	if (!condition) {
		message = 'Assert failed: ' + message;
		if (confirm(message + '\r\n\r\nBreak into debugger?')) {
			ss.Debug._fail(message);
		}
	}
};

ss.Debug.fail = function Debug$fail(message) {
	ss.Debug._fail(message);
};

///////////////////////////////////////////////////////////////////////////////
// Enum

var ss_Enum = function Enum$() {
};
ss_Enum.__typeName = 'ss.Enum';
ss.Enum = ss_Enum;
ss.initClass(ss_Enum, ss, {});

ss_Enum.parse = function Enum$parse(enumType, s) {
	var values = enumType.prototype;
	if (!ss.isFlags(enumType)) {
		for (var f in values) {
			if (f === s) {
				return values[f];
			}
		}
	}
	else {
		var parts = s.split('|');
		var value = 0;
		var parsed = true;

		for (var i = parts.length - 1; i >= 0; i--) {
			var part = parts[i].trim();
			var found = false;

			for (var f in values) {
				if (f === part) {
					value |= values[f];
					found = true;
					break;
				}
			}
			if (!found) {
				parsed = false;
				break;
			}
		}

		if (parsed) {
			return value;
		}
	}
	throw new ss_ArgumentException('Invalid Enumeration Value');
};

ss_Enum.toString = function  Enum$toString(enumType, value) {
	var values = enumType.prototype;
	if (!ss.isFlags(enumType) || (value === 0)) {
		for (var i in values) {
			if (values[i] === value) {
				return i;
			}
		}
		throw new ss_ArgumentException('Invalid Enumeration Value');
	}
	else {
		var parts = [];
		for (var i in values) {
			if (values[i] & value) {
				ss.add(parts, i);
			}
		}
		if (!parts.length) {
			throw new ss_ArgumentException('Invalid Enumeration Value');
		}
		return parts.join(' | ');
	}
};

ss_Enum.getValues = function Enum$getValues(enumType) {
	var parts = [];
	var values = enumType.prototype;
	for (var i in values) {
		if (values.hasOwnProperty(i))
			parts.push(values[i]);
	}
	return parts;
};

///////////////////////////////////////////////////////////////////////////////
// CultureInfo

var ss_CultureInfo = function CultureInfo$(name, numberFormat, dateTimeFormat) {
	this.name = name;
	this.numberFormat = numberFormat;
	this.dateTimeFormat = dateTimeFormat;
};

ss_CultureInfo.__typeName = 'ss.CultureInfo';
ss.CultureInfo = ss_CultureInfo;
ss.initClass(ss_CultureInfo, ss, {
	getFormat:  function CultureInfo$getFormat(type) {
		switch (type) {
			case ss_NumberFormatInfo: return this.numberFormat;
			case ss_DateTimeFormatInfo: return this.dateTimeFormat;
			default: return null;
		}
	}
}, null, [ss_IFormatProvider]);

ss_CultureInfo.invariantCulture = new ss_CultureInfo('en-US', ss_NumberFormatInfo.invariantInfo, ss_DateTimeFormatInfo.invariantInfo);
ss_CultureInfo.currentCulture = ss_CultureInfo.invariantCulture;

///////////////////////////////////////////////////////////////////////////////
// IEnumerator

var ss_IEnumerator = function IEnumerator$() { };

ss_IEnumerator.__typeName = 'ss.IEnumerator';
ss.IEnumerator = ss_IEnumerator;
ss.initInterface(ss_IEnumerator, ss, { current: null, moveNext: null, reset: null }, [ss_IDisposable]);

///////////////////////////////////////////////////////////////////////////////
// IEnumerable

var ss_IEnumerable = function IEnumerable$() { };

ss_IEnumerable.__typeName = 'ss.IEnumerable';
ss.IEnumerable = ss_IEnumerable;
ss.initInterface(ss_IEnumerable, ss, { getEnumerator: null });
ss.getEnumerator = function ss$getEnumerator(obj) {
	return obj.getEnumerator ? obj.getEnumerator() : new ss_ArrayEnumerator(obj);
};

///////////////////////////////////////////////////////////////////////////////
// ICollection

var ss_ICollection = function ICollection$() { };

ss_ICollection.__typeName = 'ss.ICollection';
ss.ICollection = ss_ICollection;
ss.initInterface(ss_ICollection, ss, { get_count: null, add: null, clear: null, contains: null, remove: null });

ss.count = function ss$count(obj) {
	return obj.get_count ? obj.get_count() : obj.length;
};

ss.add = function ss$add(obj, item) {
	if (obj.add)
		obj.add(item);
	else if (ss.isArray(obj))
		obj.push(item);
	else
		throw new ss_NotSupportedException();
};

ss.clear = function ss$clear(obj) {
	if (obj.clear)
		obj.clear();
	else if (ss.isArray(obj))
		obj.length = 0;
	else
		throw new ss_NotSupportedException();
};

ss.remove = function ss$remove(obj, item) {
	if (obj.remove)
		return obj.remove(item);
	else if (ss.isArray(obj)) {
		var index = ss.indexOf(obj, item);
		if (index >= 0) {
			obj.splice(index, 1);
			return true;
		}
		return false;
	}
	else
		throw new ss_NotSupportedException();
};

ss.contains = function ss$contains(obj, item) {
	if (obj.contains)
		return obj.contains(item);
	else
		return ss.indexOf(obj, item) >= 0;
};

//#include "TimeSpan.js"

///////////////////////////////////////////////////////////////////////////////
// IEqualityComparer

var ss_IEqualityComparer = function IEqualityComparer$() { };

ss_IEqualityComparer.__typeName = 'ss.IEqualityComparer';
ss.IEqualityComparer = ss_IEqualityComparer;
ss.initInterface(ss_IEqualityComparer, ss, { areEqual: null, getObjectHashCode: null });

///////////////////////////////////////////////////////////////////////////////
// IComparer

var ss_IComparer = function IComparer$() { };

ss_IComparer.__typeName = 'ss.IComparer';
ss.IComparer = ss_IComparer;
ss.initInterface(ss_IComparer, ss, { compare: null });

///////////////////////////////////////////////////////////////////////////////
// Nullable

ss.unbox = function ss$unbox(instance) {
	if (!ss.isValue(instance))
		throw new ss_InvalidOperationException('Nullable object must have a value.');
	return instance;
};

var ss_Nullable$1 = function Nullable$1$(T) {
	var $type = function() {
	};
	$type.isInstanceOfType = function(instance) {
		return ss.isInstanceOfType(instance, T);
	};
	ss.registerGenericClassInstance($type, ss_Nullable$1, [T], {}, function() { return null; }, function() { return []; });
	return $type;
};

ss_Nullable$1.__typeName = 'ss.Nullable$1';
ss.Nullable$1 = ss_Nullable$1;
ss.initGenericClass(ss_Nullable$1, ss, 1);

ss_Nullable$1.eq = function Nullable$eq(a, b) {
	return !ss.isValue(a) ? !ss.isValue(b) : (a === b);
};

ss_Nullable$1.ne = function Nullable$eq(a, b) {
	return !ss.isValue(a) ? ss.isValue(b) : (a !== b);
};

ss_Nullable$1.le = function Nullable$le(a, b) {
	return ss.isValue(a) && ss.isValue(b) && a <= b;
};

ss_Nullable$1.ge = function Nullable$ge(a, b) {
	return ss.isValue(a) && ss.isValue(b) && a >= b;
};

ss_Nullable$1.lt = function Nullable$lt(a, b) {
	return ss.isValue(a) && ss.isValue(b) && a < b;
};

ss_Nullable$1.gt = function Nullable$gt(a, b) {
	return ss.isValue(a) && ss.isValue(b) && a > b;
};

ss_Nullable$1.sub = function Nullable$sub(a, b) {
	return ss.isValue(a) && ss.isValue(b) ? a - b : null;
};

ss_Nullable$1.add = function Nullable$add(a, b) {
	return ss.isValue(a) && ss.isValue(b) ? a + b : null;
};

ss_Nullable$1.mod = function Nullable$mod(a, b) {
	return ss.isValue(a) && ss.isValue(b) ? a % b : null;
};

ss_Nullable$1.div = function Nullable$divf(a, b) {
	return ss.isValue(a) && ss.isValue(b) ? a / b : null;
};

ss_Nullable$1.mul = function Nullable$mul(a, b) {
	return ss.isValue(a) && ss.isValue(b) ? a * b : null;
};

ss_Nullable$1.band = function Nullable$band(a, b) {
	return ss.isValue(a) && ss.isValue(b) ? a & b : null;
};

ss_Nullable$1.bor = function Nullable$bor(a, b) {
	return ss.isValue(a) && ss.isValue(b) ? a | b : null;
};

ss_Nullable$1.bxor = function Nullable$xor(a, b) {
	return ss.isValue(a) && ss.isValue(b) ? a ^ b : null;
};

ss_Nullable$1.shl = function Nullable$shl(a, b) {
	return ss.isValue(a) && ss.isValue(b) ? a << b : null;
};

ss_Nullable$1.srs = function Nullable$srs(a, b) {
	return ss.isValue(a) && ss.isValue(b) ? a >> b : null;
};

ss_Nullable$1.sru = function Nullable$sru(a, b) {
	return ss.isValue(a) && ss.isValue(b) ? a >>> b : null;
};

ss_Nullable$1.and = function Nullable$and(a, b) {
	if (a === true && b === true)
		return true;
	else if (a === false || b === false)
		return false;
	else
		return null;
};

ss_Nullable$1.or = function Nullable$or(a, b) {
	if (a === true || b === true)
		return true;
	else if (a === false && b === false)
		return false;
	else
		return null;
};

ss_Nullable$1.xor = function Nullable$xor(a, b) {
	return ss.isValue(a) && ss.isValue(b) ? !!(a ^ b) : null;
};

ss_Nullable$1.not = function Nullable$not(a) {
	return ss.isValue(a) ? !a : null;
};

ss_Nullable$1.neg = function Nullable$neg(a) {
	return ss.isValue(a) ? -a : null;
};

ss_Nullable$1.pos = function Nullable$pos(a) {
	return ss.isValue(a) ? +a : null;
};

ss_Nullable$1.cpl = function Nullable$cpl(a) {
	return ss.isValue(a) ? ~a : null;
};

ss_Nullable$1.lift1 = function Nullable$lift1(f, o) {
	return ss.isValue(o) ? f(o) : null;
};

ss_Nullable$1.lift2 = function Nullable$lift2(f, a, b) {
	return ss.isValue(a) && ss.isValue(b) ? f(a, b) : null;
};

ss_Nullable$1.liftcmp = function Nullable$liftcmp(f, a, b) {
	return ss.isValue(a) && ss.isValue(b) ? f(a, b) : false;
};

ss_Nullable$1.lifteq = function Nullable$lifteq(f, a, b) {
	var va = ss.isValue(a), vb = ss.isValue(b);
	return (!va && !vb) || (va && vb && f(a, b));
};

ss_Nullable$1.liftne = function Nullable$liftne(f, a, b) {
	var va = ss.isValue(a), vb = ss.isValue(b);
	return (va !== vb) || (va && f(a, b));
};

///////////////////////////////////////////////////////////////////////////////
// IList

var ss_IList = function IList$() { };

ss_IList.__typeName = 'ss.IList';
ss.IList = ss_IList;
ss.initInterface(ss_IList, ss, { get_item: null, set_item: null, indexOf: null, insert: null, removeAt: null }, [ss_ICollection, ss_IEnumerable]);

ss.getItem = function ss$getItem(obj, index) {
	return obj.get_item ? obj.get_item(index) : obj[index];
}

ss.setItem = function ss$setItem(obj, index, value) {
	obj.set_item ? obj.set_item(index, value) : (obj[index] = value);
}

ss.indexOf = function ss$indexOf(obj, item) {
	var itemType = typeof(item);
	if ((!item || typeof(item.equals) !== 'function') && typeof(obj.indexOf) === 'function') {
		// use indexOf if item is null or if item does not implement an equals function
		return obj.indexOf(item);
	} else if (ss.isArrayOrTypedArray(obj)) {
		for (var i = 0; i < obj.length; i++) {
			if (ss.staticEquals(obj[i], item)) {
				return i;
			}
		}
		return -1;
	}
	else
		return obj.indexOf(item);
};

ss.insert = function ss$insert(obj, index, item) {
	if (obj.insert)
		obj.insert(index, item);
	else if (ss.isArray(obj))
		obj.splice(index, 0, item);
	else
		throw new ss_NotSupportedException();
};

ss.removeAt = function ss$removeAt(obj, index) {
	if (obj.removeAt)
		obj.removeAt(index);
	else if (ss.isArray(obj))
		obj.splice(index, 1);
	else
		throw new ss_NotSupportedException();
};

///////////////////////////////////////////////////////////////////////////////
// IDictionary

var ss_IDictionary = function IDictionary$() { };

ss_IDictionary.__typeName = 'ss.IDictionary';
ss.IDictionary = ss_IDictionary;
ss.initInterface(ss_IDictionary, ss, { get_item: null, set_item: null, get_keys: null, get_values: null, containsKey: null, add: null, remove: null, tryGetValue: null }, [ss_IEnumerable]);

///////////////////////////////////////////////////////////////////////////////
// Int32

var ss_Int32 = function Int32$() { };

ss_Int32.__typeName = 'ss.Int32';
ss.Int32 = ss_Int32;
ss.initClass(ss_Int32, ss, {}, Object, [ ss_IEquatable, ss_IComparable, ss_IFormattable ]);
ss_Int32.__class = false;

ss_Int32.isInstanceOfType = function Int32$isInstanceOfType(instance) {
	return typeof(instance) === 'number' && isFinite(instance) && Math.round(instance, 0) == instance;
};

ss_Int32.getDefaultValue = ss_Int32.createInstance = function Int32$getDefaultValue() {
	return 0;
};

ss_Int32.div = function Int32$div(a, b) {
	if (!ss.isValue(a) || !ss.isValue(b)) return null;
	if (b === 0) throw new ss_DivideByZeroException();
	return ss_Int32.trunc(a / b);
};

ss_Int32.trunc = function Int32$trunc(n) {
	return ss.isValue(n) ? (n > 0 ? Math.floor(n) : Math.ceil(n)) : null;
};

ss_Int32.tryParse = function Int32$tryParse(s, result, min, max) {
	result.$ = 0;
	if (!/^[+-]?[0-9]+$/.test(s))
		return false;
	var n = parseInt(s, 10);
	if (n < min || n > max)
		return false;
	result.$ = n;
	return true;
};

///////////////////////////////////////////////////////////////////////////////
// MutableDateTime

var ss_JsDate = function JsDate$() { };

ss_JsDate.__typeName = 'ss.JsDate';
ss.JsDate = ss_JsDate;
ss.initClass(ss_JsDate, ss, {}, Object, [ ss_IEquatable, ss_IComparable ]);

ss_JsDate.createInstance = function JsDate$createInstance() {
	return new Date();
};

ss_JsDate.isInstanceOfType = function JsDate$isInstanceOfType(instance) {
	return instance instanceof Date;
};

///////////////////////////////////////////////////////////////////////////////
// ArrayEnumerator

var ss_ArrayEnumerator = function ArrayEnumerator$(array) {
	this._array = array;
	this._index = -1;
};
ss_ArrayEnumerator.__typeName = 'ss.ArrayEnumerator';
ss.ArrayEnumerator = ss_ArrayEnumerator;
ss.initClass(ss_ArrayEnumerator, ss, {
	moveNext: function ArrayEnumerator$moveNext() {
		this._index++;
		return (this._index < this._array.length);
	},
	reset: function ArrayEnumerator$reset() {
		this._index = -1;
	},
	current: function ArrayEnumerator$current() {
		if (this._index < 0 || this._index >= this._array.length)
			throw 'Invalid operation';
		return this._array[this._index];
	},
	dispose: function ArrayEnumerator$dispose() {
	}
}, null, [ss_IEnumerator, ss_IDisposable]);

///////////////////////////////////////////////////////////////////////////////
// ObjectEnumerator

var ss_ObjectEnumerator = function ObjectEnumerator$(o) {
	this._keys = Object.keys(o);
	this._index = -1;
	this._object = o;
};

ss_ObjectEnumerator.__typeName = 'ss.ObjectEnumerator';
ss.ObjectEnumerator = ss_ObjectEnumerator;
ss.initClass(ss_ObjectEnumerator, ss, {
	moveNext: function ObjectEnumerator$moveNext() {
		this._index++;
		return (this._index < this._keys.length);
	},
	reset: function ObjectEnumerator$reset() {
		this._index = -1;
	},
	current: function ObjectEnumerator$current() {
		if (this._index < 0 || this._index >= this._keys.length)
			throw new ss_InvalidOperationException('Invalid operation');
		var k = this._keys[this._index];
		return { key: k, value: this._object[k] };
	},
	dispose: function ObjectEnumerator$dispose() {
	}
}, null, [ss_IEnumerator, ss_IDisposable]);

///////////////////////////////////////////////////////////////////////////////
// EqualityComparer

var ss_EqualityComparer = function EqualityComparer$() {
};
ss_EqualityComparer.__typeName = 'ss.EqualityComparer';
ss.EqualityComparer = ss_EqualityComparer;
ss.initClass(ss_EqualityComparer, ss, {
	areEqual: function EqualityComparer$areEqual(x, y) {
		return ss.staticEquals(x, y);
	},
	getObjectHashCode: function EqualityComparer$getObjectHashCode(obj) {
		return ss.isValue(obj) ? ss.getHashCode(obj) : 0;
	}
}, null, [ss_IEqualityComparer]);
ss_EqualityComparer.def = new ss_EqualityComparer();

///////////////////////////////////////////////////////////////////////////////
// Comparer

var ss_Comparer = function Comparer$(f) {
	this.f = f;
};

ss_Comparer.__typeName = 'ss.Comparer';
ss.Comparer = ss_Comparer;
ss.initClass(ss_Comparer, ss, {
	compare: function Comparer$compare(x, y) {
		return this.f(x, y);
	}
}, null, [ss_IComparer]);
ss_Comparer.def = new ss_Comparer(function Comparer$defaultCompare(a, b) {
	if (!ss.isValue(a))
		return !ss.isValue(b)? 0 : -1;
	else if (!ss.isValue(b))
		return 1;
	else
		return ss.compare(a, b);
});

//#include "Dictionary.js"

///////////////////////////////////////////////////////////////////////////////
// IDisposable

var ss_IDisposable = function IDisposable$() { };
ss_IDisposable.__typeName = 'ss.IDisposable';
ss.IDisposable = ss_IDisposable;
ss.initInterface(ss_IDisposable, ss, { dispose: null });

///////////////////////////////////////////////////////////////////////////////
// StringBuilder

var ss_StringBuilder = function StringBuilder$(s) {
	this._parts = (ss.isValue(s) && s != '') ? [s] : [];
	this.length = ss.isValue(s) ? s.length : 0;
}

ss_StringBuilder.__typeName = 'ss.StringBuilder';
ss.StringBuilder = ss_StringBuilder;
ss.initClass(ss_StringBuilder, ss, {
	append: function StringBuilder$append(o) {
		if (ss.isValue(o)) {
			var s = o.toString();
			ss.add(this._parts, s);
			this.length += s.length;
		}
		return this;
	},

	appendChar: function StringBuilder$appendChar(c) {
		return this.append(String.fromCharCode(c));
	},

	appendLine: function StringBuilder$appendLine(s) {
		this.append(s);
		this.append('\r\n');
		return this;
	},

	appendLineChar: function StringBuilder$appendLineChar(c) {
		return this.appendLine(String.fromCharCode(c));
	},

	clear: function StringBuilder$clear() {
		this._parts = [];
		this.length = 0;
	},

	toString: function StringBuilder$toString() {
		return this._parts.join('');
	}
});

///////////////////////////////////////////////////////////////////////////////
// Random

var ss_Random = function Random$(seed) {
	var _seed = (seed === undefined) ? parseInt(Date.now() % 2147483648) : parseInt(Math.abs(seed));
	this.inext = 0;
	this.inextp = 21;
	this.seedArray = new Array(56);
	for(var i = 0; i < 56; i++)
		this.seedArray[i] = 0;

	_seed = 161803398 - _seed;
	if (_seed < 0)
		_seed += 2147483648;
	this.seedArray[55] = _seed;
	var mk = 1;
	for (var i = 1; i < 55; i++) {
		var ii = (21 * i) % 55;
		this.seedArray[ii] = mk;
		mk = _seed - mk;
		if (mk < 0)
			mk += 2147483648;

		_seed = this.seedArray[ii];
	}
	for (var j = 1; j < 5; j++) {
		for (var k = 1; k < 56; k++) {
			this.seedArray[k] -= this.seedArray[1 + (k + 30) % 55];
			if (this.seedArray[k] < 0)
				this.seedArray[k] += 2147483648;
		}
	}
};

ss_Random.__typeName = 'ss.Random';
ss.Random = ss_Random;
ss.initClass(ss_Random, ss, {
	next: function Random$next() {
		return this.sample() * 2147483648 | 0;
	},
	nextMax: function Random$nextMax(max) {
		return this.sample() * max | 0;
	},
	nextMinMax: function Random$nextMinMax(min, max) {
		return (this.sample() * (max - min) + min) | 0;
	},
	nextBytes: function Random$nextBytes(bytes) {
		for (var i = 0; i < bytes.length; i++)
			bytes[i] = (this.sample() * 256) | 0;
	},
	nextDouble: function Random$nextDouble() {
		return this.sample();
	},
	sample: function Random$sample() {
		if (++this.inext >= 56)
			this.inext = 1;
		if (++this.inextp >= 56)
			this.inextp = 1;

		var retVal =  this.seedArray[this.inext] - this.seedArray[this.inextp];

		if (retVal < 0)
			retVal += 2147483648;

		this.seedArray[this.inext] = retVal;

		return retVal * (1.0 / 2147483648);
	}
});

///////////////////////////////////////////////////////////////////////////////
// EventArgs

var ss_EventArgs = function EventArgs$() {
}
ss_EventArgs.__typeName = 'ss.EventArgs';
ss.EventArgs = ss_EventArgs;
ss.initClass(ss_EventArgs, ss, {});

ss_EventArgs.Empty = new ss_EventArgs();

///////////////////////////////////////////////////////////////////////////////
// Exception

var ss_Exception = function Exception$(message, innerException) {
	this._message = message || 'An error occurred.';
	this._innerException = innerException || null;
	this._error = new Error();
}

ss_Exception.__typeName = 'ss.Exception';
ss.Exception = ss_Exception;
ss.initClass(ss_Exception, ss, {
	get_message: function Exception$get_message() {
		return this._message;
	},
	get_innerException: function Exception$get_innerException() {
		return this._innerException;
	},
	get_stack: function Exception$get_stack() {
		return this._error.stack;
	},
	toString: function Exception$toString() {
		var message = this._message;
		var exception = this;
		if (ss.isNullOrEmptyString(message)) {
			if (ss.isValue(ss.getInstanceType(exception)) && ss.isValue(ss.getTypeFullName(ss.getInstanceType(exception)))) {
				message = ss.getTypeFullName(ss.getInstanceType(exception));
			}
			else {
				message = '[object Exception]';
			}
		}
		return message;
	}
});

ss_Exception.wrap = function Exception$wrap(o) {
	if (ss.isInstanceOfType(o, ss_Exception)) {
		return o;
	}
	else if (o instanceof TypeError) {
		// TypeError can either be 'cannot read property blah of null/undefined' (proper NullReferenceException), or it can be eg. accessing a non-existent method of an object.
		// As long as all code is compiled, they should with a very high probability indicate the use of a null reference.
		return new ss_NullReferenceException(o.message, new ss_JsErrorException(o));
	}
	else if (o instanceof RangeError) {
		return new ss_ArgumentOutOfRangeException(null, o.message, new ss_JsErrorException(o));
	}
	else if (o instanceof Error) {
		return new ss_JsErrorException(o);
	}
	else {
		return new ss_Exception(o.toString());
	}
};

////////////////////////////////////////////////////////////////////////////////
// NotImplementedException

var ss_NotImplementedException = function NotImplementedException$(message, innerException) {
	ss_Exception.call(this, message || 'The method or operation is not implemented.', innerException);
};
ss_NotImplementedException.__typeName = 'ss.NotImplementedException';
ss.NotImplementedException = ss_NotImplementedException;
ss.initClass(ss_NotImplementedException, ss, {}, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// NotSupportedException

var ss_NotSupportedException = function NotSupportedException$(message, innerException) {
	ss_Exception.call(this, message || 'Specified method is not supported.', innerException);
};
ss_NotSupportedException.__typeName = 'ss.NotSupportedException';
ss.NotSupportedException = ss_NotSupportedException;
ss.initClass(ss_NotSupportedException, ss, {}, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// AggregateException

var ss_AggregateException = function AggregateException$(message, innerExceptions) {
	this.innerExceptions = ss.isValue(innerExceptions) ? ss.arrayFromEnumerable(innerExceptions) : [];
	ss_Exception.call(this, message || 'One or more errors occurred.', this.innerExceptions.length ? this.innerExceptions[0] : null);
};

ss_AggregateException.__typeName = 'ss.AggregateException';
ss.AggregateException = ss_AggregateException;
ss.initClass(ss_AggregateException, ss, {
	flatten: function  AggregateException$flatten() {
		var inner = [];
		for (var i = 0; i < this.innerExceptions.length; i++) {
			var e = this.innerExceptions[i];
			if (ss.isInstanceOfType(e, ss_AggregateException)) {
				inner.push.apply(inner, e.flatten().innerExceptions);
			}
			else {
				inner.push(e);
			}
		}
		return new ss_AggregateException(this._message, inner);
	}
}, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// PromiseException

var ss_PromiseException = function PromiseException(args, message, innerException) {
	ss_Exception.call(this, message || (args.length && args[0] ? args[0].toString() : 'An error occurred'), innerException);
	this.arguments = ss.arrayClone(args);
};

ss_PromiseException.__typeName = 'ss.PromiseException';
ss.PromiseException = ss_PromiseException;
ss.initClass(ss_PromiseException, ss, {
	get_arguments: function PromiseException$get_arguments() {
		return this._arguments;
	}
}, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// JsErrorException

var ss_JsErrorException = function JsErrorException$(error, message, innerException) {
	ss_Exception.call(this, message || error.message, innerException);
	this.error = error;
};
ss_JsErrorException.__typeName = 'ss.JsErrorException';
ss.JsErrorException = ss_JsErrorException;
ss.initClass(ss_JsErrorException, ss, {
	get_stack: function Exception$get_stack() {
		return this.error.stack;
	}
}, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// ArgumentException

var ss_ArgumentException = function ArgumentException$(message, paramName, innerException) {
	ss_Exception.call(this, message || 'Value does not fall within the expected range.', innerException);
	this.paramName = paramName || null;
};

ss_ArgumentException.__typeName = 'ss.ArgumentException';
ss.ArgumentException = ss_ArgumentException;
ss.initClass(ss_ArgumentException, ss, {}, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// ArgumentNullException

var ss_ArgumentNullException = function ArgumentNullException$(paramName, message, innerException) {
	if (!message) {
		message = 'Value cannot be null.';
		if (paramName)
			message += '\nParameter name: ' + paramName;
	}

	ss_ArgumentException.call(this, message, paramName, innerException);
};

ss_ArgumentNullException.__typeName = 'ss.ArgumentNullException';
ss.ArgumentNullException = ss_ArgumentNullException;
ss.initClass(ss_ArgumentNullException, ss, {}, ss_ArgumentException);

////////////////////////////////////////////////////////////////////////////////
// ArgumentNullException

var ss_ArgumentOutOfRangeException = function ArgumentOutOfRangeException$(paramName, message, innerException, actualValue) {
	if (!message) {
		message = 'Value is out of range.';
		if (paramName)
			message += '\nParameter name: ' + paramName;
	}

	ss_ArgumentException.call(this, message, paramName, innerException);
	this.actualValue = actualValue || null;
};

ss_ArgumentOutOfRangeException.__typeName = 'ss.ArgumentOutOfRangeException';
ss.ArgumentOutOfRangeException = ss_ArgumentOutOfRangeException;
ss.initClass(ss_ArgumentOutOfRangeException, ss, {}, ss_ArgumentException);

////////////////////////////////////////////////////////////////////////////////
// FormatException

var ss_FormatException = function FormatException$(message, innerException) {
	ss_Exception.call(this, message || 'Invalid format.', innerException);
};
ss_FormatException.__typeName = 'ss.FormatException';
ss.FormatException = ss_FormatException;
ss.initClass(ss_FormatException, ss, {}, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// DivideByZeroException

var ss_DivideByZeroException = function DivideByZeroException$(message, innerException) {
	ss_Exception.call(this, message || 'Division by 0.', innerException);
};
ss_DivideByZeroException.__typeName = 'ss.DivideByZeroException';
ss.DivideByZeroException = ss_DivideByZeroException;
ss.initClass(ss_DivideByZeroException, ss, {}, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// InvalidCastException

var ss_InvalidCastException = function InvalidCastException$(message, innerException) {
	ss_Exception.call(this, message || 'The cast is not valid.', innerException);
};
ss_InvalidCastException.__typeName = 'ss.InvalidCastException';
ss.InvalidCastException = ss_InvalidCastException;
ss.initClass(ss_InvalidCastException, ss, {}, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// InvalidOperationException

var ss_InvalidOperationException = function InvalidOperationException$(message, innerException) {
	ss_Exception.call(this, message || 'Operation is not valid due to the current state of the object.', innerException);
};
ss_InvalidOperationException.__typeName = 'ss.InvalidOperationException';
ss.InvalidOperationException = ss_InvalidOperationException;
ss.initClass(ss_InvalidOperationException, ss, {}, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// NullReferenceException

var ss_NullReferenceException = function NullReferenceException$(message, innerException) {
	ss_Exception.call(this, message || 'Object is null.', innerException);
};
ss_NullReferenceException.__typeName = 'ss.NullReferenceException';
ss.NullReferenceException = ss_NullReferenceException;
ss.initClass(ss_NullReferenceException, ss, {}, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// KeyNotFoundException

var ss_KeyNotFoundException = function KeyNotFoundException$(message, innerException) {
	ss_Exception.call(this, message || 'Key not found.', innerException);
};
ss_KeyNotFoundException.__typeName = 'ss.KeyNotFoundException';
ss.KeyNotFoundException = ss_KeyNotFoundException;
ss.initClass(ss_KeyNotFoundException, ss, {}, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// InvalidOperationException

var ss_AmbiguousMatchException = function AmbiguousMatchException$(message, innerException) {
	ss_Exception.call(this, message || 'Ambiguous match.', innerException);
};
ss_AmbiguousMatchException.__typeName = 'ss.AmbiguousMatchException';
ss.AmbiguousMatchException = ss_AmbiguousMatchException;
ss.initClass(ss_AmbiguousMatchException, ss, {}, ss_Exception);

///////////////////////////////////////////////////////////////////////////////
// IteratorBlockEnumerable

var ss_IteratorBlockEnumerable = function IteratorBlockEnumerable$(getEnumerator, $this) {
	this._getEnumerator = getEnumerator;
	this._this = $this;
};

ss_IteratorBlockEnumerable.__typeName = 'ss.IteratorBlockEnumerable';
ss.IteratorBlockEnumerable = ss_IteratorBlockEnumerable;
ss.initClass(ss_IteratorBlockEnumerable, ss, {
	getEnumerator: function IteratorBlockEnumerable$getEnumerator() {
		return this._getEnumerator.call(this._this);
	}
}, null, [ss_IEnumerable]);

///////////////////////////////////////////////////////////////////////////////
// IteratorBlockEnumerator

var ss_IteratorBlockEnumerator = function IteratorBlockEnumerator$(moveNext, getCurrent, dispose, $this) {
	this._moveNext = moveNext;
	this._getCurrent = getCurrent;
	this._dispose = dispose;
	this._this = $this;
};

ss_IteratorBlockEnumerator.__typeName = 'ss.IteratorBlockEnumerator';
ss.IteratorBlockEnumerator = ss_IteratorBlockEnumerator;
ss.initClass(ss_IteratorBlockEnumerator, ss, {
	moveNext: function IteratorBlockEnumerator$moveNext() {
		try {
			return this._moveNext.call(this._this);
		}
		catch (ex) {
			if (this._dispose)
				this._dispose.call(this._this);
			throw ex;
		}
	},
	current: function IteratorBlockEnumerator$current() {
		return this._getCurrent.call(this._this);
	},
	reset: function IteratorBlockEnumerator$reset() {
		throw new ss_NotSupportedException('Reset is not supported.');
	},
	dispose: function IteratorBlockEnumerator$dispose() {
		if (this._dispose)
			this._dispose.call(this._this);
	}
}, null, [ss_IEnumerator, ss_IDisposable]);

///////////////////////////////////////////////////////////////////////////////
// Lazy

var ss_Lazy = function Lazy$(valueFactory) {
	this._valueFactory = valueFactory;
	this.isValueCreated = false;
};
ss_Lazy.__typeName = 'ss.Lazy';
ss.Lazy = ss_Lazy;
ss.initClass(ss_Lazy, ss, {
	value: function Lazy$value() {
		if (!this.isValueCreated) {
			this._value = this._valueFactory();
			delete this._valueFactory;
			this.isValueCreated = true;
		}
		return this._value;
	}
});

///////////////////////////////////////////////////////////////////////////////
// Task

var ss_Task = function Task$(action, state) {
	this._action = action;
	this._state = state;
	this.exception = null;
	this.status = 0;
	this._thens = [];
	this._result = null;
};

ss_Task.delay = function Task$delay(delay) {
	var tcs = new ss_TaskCompletionSource();
	setTimeout(function() {
		tcs.setResult(0);
	}, delay);
	return tcs.task;
};

ss_Task.fromResult = function Task$fromResult(result) {
	var t = new ss_Task();
	t.status = 5;
	t._result = result;
	return t;
};

ss_Task.run = function Task$run(f) {
	var tcs = new ss_TaskCompletionSource();
	setTimeout(function() {
		try {
			tcs.setResult(f());
		}
		catch (e) {
			tcs.setException(ss_Exception.wrap(e));
		}
	}, 0);
	return tcs.task;
};

ss_Task.whenAll = function Task$whenAll(tasks) {
	var tcs = new ss_TaskCompletionSource();
	if (tasks.length === 0) {
		tcs.setResult([]);
	}
	else {
		var result = new Array(tasks.length), remaining = tasks.length, cancelled = false, exceptions = [];
		for (var i = 0; i < tasks.length; i++) {
			(function(i) {
				tasks[i].continueWith(function(t) {
					switch (t.status) {
						case 5:
							result[i] = t.getResult();
							break;
						case 6:
							cancelled = true;
							break;
						case 7:
							ss.arrayAddRange(exceptions, t.exception.innerExceptions);
							break;
						default:
							throw new ss_InvalidOperationException('Invalid task status ' + t.status);
					}
					if (--remaining === 0) {
						if (exceptions.length > 0)
							tcs.setException(exceptions);
						else if (cancelled)
							tcs.setCanceled();
						else
							tcs.setResult(result);
					}
				});
			})(i);
		}
	}
	return tcs.task;
};

ss_Task.whenAny = function Task$whenAny(tasks) {
	if (!tasks.length)
		throw new ss_ArgumentException('Must wait for at least one task', 'tasks');

	var tcs = new ss_TaskCompletionSource();
	for (var i = 0; i < tasks.length; i++) {
		tasks[i].continueWith(function(t) {
			switch (t.status) {
				case 5:
					tcs.trySetResult(t);
					break;
				case 6:
					tcs.trySetCanceled();
					break;
				case 7:
					tcs.trySetException(t.exception.innerExceptions);
					break;
				default:
					throw new ss_InvalidOperationException('Invalid task status ' + t.status);
			}
		});
	}
	return tcs.task;
};

ss_Task.fromDoneCallback = function Task$fromDoneCallback(t, i, m) {
	var tcs = new ss_TaskCompletionSource(), args;
	if (typeof(i) === 'number') {
		args = Array.prototype.slice.call(arguments, 3);
		if (i < 0)
			i += args.length + 1;
	}
	else {
		args = Array.prototype.slice.call(arguments, 2);
		m = i;
		i = args.length;
	}

	var cb = function(v) {
		tcs.setResult(v);
	};
	
	args = args.slice(0, i).concat(cb, args.slice(i));

	t[m].apply(t, args);
	return tcs.task;
};

ss_Task.fromPromise = function Task$fromPromise(p, f) {
	var tcs = new ss_TaskCompletionSource();
	if (typeof(f) === 'number')
		f = (function(i) { return function() { return arguments[i >= 0 ? i : (arguments.length + i)]; }; })(f);
	else if (typeof(f) !== 'function')
		f = function() { return Array.prototype.slice.call(arguments, 0); };

	p.then(function() {
		tcs.setResult(typeof(f) === 'function' ? f.apply(null, arguments) : null);
	}, function() {
		tcs.setException(new ss_PromiseException(Array.prototype.slice.call(arguments, 0)));
	});
	return tcs.task;
};

ss_Task.fromNode = function  Task$fromNode(t, f, m) {
	var tcs = new ss_TaskCompletionSource(), args;
	if (typeof(f) === 'function') {
		args = Array.prototype.slice.call(arguments, 3);
	}
	else {
		args = Array.prototype.slice.call(arguments, 2);
		m = f;
		f = function() { return arguments[0]; };
	}

	var cb = function(e) {
		if (e)
			tcs.setException(ss_Exception.wrap(e));
		else
			tcs.setResult(f.apply(null, Array.prototype.slice.call(arguments, 1)));
	};
	
	args.push(cb);

	t[m].apply(t, args);
	return tcs.task;
};

ss_Task.__typeName = 'ss.Task';
ss.Task = ss_Task;
ss.initClass(ss_Task, ss, {
	continueWith: function Task$continueWith(continuation) {
		var tcs = new ss_TaskCompletionSource();
		var _this = this;
		var fn = function() {
			try {
				tcs.setResult(continuation(_this));
			}
			catch (e) {
				tcs.setException(ss_Exception.wrap(e));
			}
		};
		if (this.isCompleted()) {
			setTimeout(fn, 0);
		}
		else {
			this._thens.push(fn);
		}
		return tcs.task;
	},
	start: function Task$start() {
		if (this.status !== 0)
			throw new ss_InvalidOperationException('Task was already started.');
		var _this = this;
		this.status = 3;
		setTimeout(function() {
			try {
				var result = _this._action(_this._state);
				delete _this._action;
				delete _this._state;
				_this._complete(result);
			}
			catch (e) {
				_this._fail(new ss_AggregateException(null, [ss_Exception.wrap(e)]));
			}
		}, 0);
	},
	_runCallbacks: function Task$_runCallbacks() {
		for (var i = 0; i < this._thens.length; i++)
			this._thens[i](this);
		delete this._thens;
	},
	_complete: function Task$_complete(result) {
		if (this.isCompleted())
			return false;
		this._result = result;
		this.status = 5;
		this._runCallbacks();
		return true;
	},
	_fail: function Task$_fail(exception) {
		if (this.isCompleted())
			return false;
		this.exception = exception;
		this.status = 7;
		this._runCallbacks();
		return true;
	},
	_cancel: function Task$_cancel() {
		if (this.isCompleted())
			return false;
		this.status = 6;
		this._runCallbacks();
		return true;
	},
	isCanceled: function Task$isCanceled() {
		return this.status === 6;
	},
	isCompleted: function Task$isCompleted() {
		return this.status >= 5;
	},
	isFaulted: function Task$isFaulted() {
		return this.status === 7;
	},
	_getResult: function Task$_getResult(should_await) {
		switch (this.status) {
			case 5:
				return this._result;
			case 6:
				throw new ss_InvalidOperationException('Task was cancelled.');
			case 7:
				throw should_await ? this.exception.innerExceptions[0] : this.exception;
			default:
				throw new ss_InvalidOperationException('Task is not yet completed.');
		}
	},
	getResult: function Task$getResult() {
		return this._getResult(false);
	},
	getAwaitedResult: function Task$getAwaitedResult() {
		return this._getResult(true);
	},
	dispose: function Task$dispose() {
	}
}, null, [ss_IDisposable]);

////////////////////////////////////////////////////////////////////////////////
// TaskStatus
var ss_TaskStatus = function() {
};
ss_TaskStatus.__typeName = 'ss.TaskStatus';
ss.TaskStatus = ss_TaskStatus;
ss.initEnum(ss_TaskStatus, ss, { created: 0, running: 3, ranToCompletion: 5, canceled: 6, faulted: 7 });

///////////////////////////////////////////////////////////////////////////////
// TaskCompletionSource

var ss_TaskCompletionSource = function TaskCompletionSource$() {
	this.task = new ss_Task();
	this.task.status = 3;
};

ss_TaskCompletionSource.__typeName = 'ss.TaskCompletionSource';
ss.TaskCompletionSource = ss_TaskCompletionSource;
ss.initClass(ss_TaskCompletionSource, ss, {
	setCanceled: function TaskCompletionSource$setCanceled() {
		if (!this.task._cancel())
			throw new ss_InvalidOperationException('Task was already completed.');
	},
	setResult: function TaskCompletionSource$setResult(result) {
		if (!this.task._complete(result))
			throw new ss_InvalidOperationException('Task was already completed.');
	},
	setException: function TaskCompletionSource$setException(exception) {
		if (!this.trySetException(exception))
			throw new ss_InvalidOperationException('Task was already completed.');
	},
	trySetCanceled: function TaskCompletionSource$trySetCanceled() {
		return this.task._cancel();
	},
	trySetResult: function TaskCompletionSource$setResult(result) {
		return this.task._complete(result);
	},
	trySetException: function TaskCompletionSource$setException(exception) {
		if (ss.isInstanceOfType(exception, ss_Exception))
			exception = [exception];
		return this.task._fail(new ss_AggregateException(null, exception));
	}
});

///////////////////////////////////////////////////////////////////////////////
// CancelEventArgs

var ss_CancelEventArgs = function CancelEventArgs$() {
	ss_EventArgs.call(this);
	this.cancel = false;
}

ss_CancelEventArgs.__typeName = 'ss.CancelEventArgs';
ss.CancelEventArgs = ss_CancelEventArgs;
ss.initClass(ss_CancelEventArgs, ss, {}, ss_EventArgs);

//#include "Guid.js"

global.ss = ss;
})(global);

  var ss = global.ss;
  global.tableauSoftware = global.tableauSoftware || {};
  
  var tab = global.tab = {};
  var tsConfig = global.tsConfig || {};

   // #include "../../CoreSlim/bin/Debug/tabcoreslim.debug.js"
/*! BEGIN Core */

/*! BEGIN Underscore */
// Include Underscore inline here since it's so small
//     Underscore.js 1.6.0
//     http://underscorejs.org
//     (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.
(function(){var n=this,t=n._,r={},e=Array.prototype,u=Object.prototype,i=Function.prototype,a=e.push,o=e.slice,c=e.concat,l=u.toString,f=u.hasOwnProperty,s=e.forEach,p=e.map,h=e.reduce,v=e.reduceRight,g=e.filter,d=e.every,m=e.some,y=e.indexOf,b=e.lastIndexOf,x=Array.isArray,w=Object.keys,_=i.bind,j=function(n){return n instanceof j?n:this instanceof j?void(this._wrapped=n):new j(n)};"undefined"!=typeof exports?("undefined"!=typeof module&&module.exports&&(exports=module.exports=j),exports._=j):n._=j,j.VERSION="1.6.0";var A=j.each=j.forEach=function(n,t,e){if(null==n)return n;if(s&&n.forEach===s)n.forEach(t,e);else if(n.length===+n.length){for(var u=0,i=n.length;i>u;u++)if(t.call(e,n[u],u,n)===r)return}else for(var a=j.keys(n),u=0,i=a.length;i>u;u++)if(t.call(e,n[a[u]],a[u],n)===r)return;return n};j.map=j.collect=function(n,t,r){var e=[];return null==n?e:p&&n.map===p?n.map(t,r):(A(n,function(n,u,i){e.push(t.call(r,n,u,i))}),e)};var O="Reduce of empty array with no initial value";j.reduce=j.foldl=j.inject=function(n,t,r,e){var u=arguments.length>2;if(null==n&&(n=[]),h&&n.reduce===h)return e&&(t=j.bind(t,e)),u?n.reduce(t,r):n.reduce(t);if(A(n,function(n,i,a){u?r=t.call(e,r,n,i,a):(r=n,u=!0)}),!u)throw new TypeError(O);return r},j.reduceRight=j.foldr=function(n,t,r,e){var u=arguments.length>2;if(null==n&&(n=[]),v&&n.reduceRight===v)return e&&(t=j.bind(t,e)),u?n.reduceRight(t,r):n.reduceRight(t);var i=n.length;if(i!==+i){var a=j.keys(n);i=a.length}if(A(n,function(o,c,l){c=a?a[--i]:--i,u?r=t.call(e,r,n[c],c,l):(r=n[c],u=!0)}),!u)throw new TypeError(O);return r},j.find=j.detect=function(n,t,r){var e;return k(n,function(n,u,i){return t.call(r,n,u,i)?(e=n,!0):void 0}),e},j.filter=j.select=function(n,t,r){var e=[];return null==n?e:g&&n.filter===g?n.filter(t,r):(A(n,function(n,u,i){t.call(r,n,u,i)&&e.push(n)}),e)},j.reject=function(n,t,r){return j.filter(n,function(n,e,u){return!t.call(r,n,e,u)},r)},j.every=j.all=function(n,t,e){t||(t=j.identity);var u=!0;return null==n?u:d&&n.every===d?n.every(t,e):(A(n,function(n,i,a){return(u=u&&t.call(e,n,i,a))?void 0:r}),!!u)};var k=j.some=j.any=function(n,t,e){t||(t=j.identity);var u=!1;return null==n?u:m&&n.some===m?n.some(t,e):(A(n,function(n,i,a){return u||(u=t.call(e,n,i,a))?r:void 0}),!!u)};j.contains=j.include=function(n,t){return null==n?!1:y&&n.indexOf===y?n.indexOf(t)!=-1:k(n,function(n){return n===t})},j.invoke=function(n,t){var r=o.call(arguments,2),e=j.isFunction(t);return j.map(n,function(n){return(e?t:n[t]).apply(n,r)})},j.pluck=function(n,t){return j.map(n,j.property(t))},j.where=function(n,t){return j.filter(n,j.matches(t))},j.findWhere=function(n,t){return j.find(n,j.matches(t))},j.max=function(n,t,r){if(!t&&j.isArray(n)&&n[0]===+n[0]&&n.length<65535)return Math.max.apply(Math,n);var e=-1/0,u=-1/0;return A(n,function(n,i,a){var o=t?t.call(r,n,i,a):n;o>u&&(e=n,u=o)}),e},j.min=function(n,t,r){if(!t&&j.isArray(n)&&n[0]===+n[0]&&n.length<65535)return Math.min.apply(Math,n);var e=1/0,u=1/0;return A(n,function(n,i,a){var o=t?t.call(r,n,i,a):n;u>o&&(e=n,u=o)}),e},j.shuffle=function(n){var t,r=0,e=[];return A(n,function(n){t=j.random(r++),e[r-1]=e[t],e[t]=n}),e},j.sample=function(n,t,r){return null==t||r?(n.length!==+n.length&&(n=j.values(n)),n[j.random(n.length-1)]):j.shuffle(n).slice(0,Math.max(0,t))};var E=function(n){return null==n?j.identity:j.isFunction(n)?n:j.property(n)};j.sortBy=function(n,t,r){return t=E(t),j.pluck(j.map(n,function(n,e,u){return{value:n,index:e,criteria:t.call(r,n,e,u)}}).sort(function(n,t){var r=n.criteria,e=t.criteria;if(r!==e){if(r>e||r===void 0)return 1;if(e>r||e===void 0)return-1}return n.index-t.index}),"value")};var F=function(n){return function(t,r,e){var u={};return r=E(r),A(t,function(i,a){var o=r.call(e,i,a,t);n(u,o,i)}),u}};j.groupBy=F(function(n,t,r){j.has(n,t)?n[t].push(r):n[t]=[r]}),j.indexBy=F(function(n,t,r){n[t]=r}),j.countBy=F(function(n,t){j.has(n,t)?n[t]++:n[t]=1}),j.sortedIndex=function(n,t,r,e){r=E(r);for(var u=r.call(e,t),i=0,a=n.length;a>i;){var o=i+a>>>1;r.call(e,n[o])<u?i=o+1:a=o}return i},j.toArray=function(n){return n?j.isArray(n)?o.call(n):n.length===+n.length?j.map(n,j.identity):j.values(n):[]},j.size=function(n){return null==n?0:n.length===+n.length?n.length:j.keys(n).length},j.first=j.head=j.take=function(n,t,r){return null==n?void 0:null==t||r?n[0]:0>t?[]:o.call(n,0,t)},j.initial=function(n,t,r){return o.call(n,0,n.length-(null==t||r?1:t))},j.last=function(n,t,r){return null==n?void 0:null==t||r?n[n.length-1]:o.call(n,Math.max(n.length-t,0))},j.rest=j.tail=j.drop=function(n,t,r){return o.call(n,null==t||r?1:t)},j.compact=function(n){return j.filter(n,j.identity)};var M=function(n,t,r){return t&&j.every(n,j.isArray)?c.apply(r,n):(A(n,function(n){j.isArray(n)||j.isArguments(n)?t?a.apply(r,n):M(n,t,r):r.push(n)}),r)};j.flatten=function(n,t){return M(n,t,[])},j.without=function(n){return j.difference(n,o.call(arguments,1))},j.partition=function(n,t){var r=[],e=[];return A(n,function(n){(t(n)?r:e).push(n)}),[r,e]},j.uniq=j.unique=function(n,t,r,e){j.isFunction(t)&&(e=r,r=t,t=!1);var u=r?j.map(n,r,e):n,i=[],a=[];return A(u,function(r,e){(t?e&&a[a.length-1]===r:j.contains(a,r))||(a.push(r),i.push(n[e]))}),i},j.union=function(){return j.uniq(j.flatten(arguments,!0))},j.intersection=function(n){var t=o.call(arguments,1);return j.filter(j.uniq(n),function(n){return j.every(t,function(t){return j.contains(t,n)})})},j.difference=function(n){var t=c.apply(e,o.call(arguments,1));return j.filter(n,function(n){return!j.contains(t,n)})},j.zip=function(){for(var n=j.max(j.pluck(arguments,"length").concat(0)),t=new Array(n),r=0;n>r;r++)t[r]=j.pluck(arguments,""+r);return t},j.object=function(n,t){if(null==n)return{};for(var r={},e=0,u=n.length;u>e;e++)t?r[n[e]]=t[e]:r[n[e][0]]=n[e][1];return r},j.indexOf=function(n,t,r){if(null==n)return-1;var e=0,u=n.length;if(r){if("number"!=typeof r)return e=j.sortedIndex(n,t),n[e]===t?e:-1;e=0>r?Math.max(0,u+r):r}if(y&&n.indexOf===y)return n.indexOf(t,r);for(;u>e;e++)if(n[e]===t)return e;return-1},j.lastIndexOf=function(n,t,r){if(null==n)return-1;var e=null!=r;if(b&&n.lastIndexOf===b)return e?n.lastIndexOf(t,r):n.lastIndexOf(t);for(var u=e?r:n.length;u--;)if(n[u]===t)return u;return-1},j.range=function(n,t,r){arguments.length<=1&&(t=n||0,n=0),r=arguments[2]||1;for(var e=Math.max(Math.ceil((t-n)/r),0),u=0,i=new Array(e);e>u;)i[u++]=n,n+=r;return i};var R=function(){};j.bind=function(n,t){var r,e;if(_&&n.bind===_)return _.apply(n,o.call(arguments,1));if(!j.isFunction(n))throw new TypeError;return r=o.call(arguments,2),e=function(){if(!(this instanceof e))return n.apply(t,r.concat(o.call(arguments)));R.prototype=n.prototype;var u=new R;R.prototype=null;var i=n.apply(u,r.concat(o.call(arguments)));return Object(i)===i?i:u}},j.partial=function(n){var t=o.call(arguments,1);return function(){for(var r=0,e=t.slice(),u=0,i=e.length;i>u;u++)e[u]===j&&(e[u]=arguments[r++]);for(;r<arguments.length;)e.push(arguments[r++]);return n.apply(this,e)}},j.bindAll=function(n){var t=o.call(arguments,1);if(0===t.length)throw new Error("bindAll must be passed function names");return A(t,function(t){n[t]=j.bind(n[t],n)}),n},j.memoize=function(n,t){var r={};return t||(t=j.identity),function(){var e=t.apply(this,arguments);return j.has(r,e)?r[e]:r[e]=n.apply(this,arguments)}},j.delay=function(n,t){var r=o.call(arguments,2);return setTimeout(function(){return n.apply(null,r)},t)},j.defer=function(n){return j.delay.apply(j,[n,1].concat(o.call(arguments,1)))},j.throttle=function(n,t,r){var e,u,i,a=null,o=0;r||(r={});var c=function(){o=r.leading===!1?0:j.now(),a=null,i=n.apply(e,u),e=u=null};return function(){var l=j.now();o||r.leading!==!1||(o=l);var f=t-(l-o);return e=this,u=arguments,0>=f?(clearTimeout(a),a=null,o=l,i=n.apply(e,u),e=u=null):a||r.trailing===!1||(a=setTimeout(c,f)),i}},j.debounce=function(n,t,r){var e,u,i,a,o,c=function(){var l=j.now()-a;t>l?e=setTimeout(c,t-l):(e=null,r||(o=n.apply(i,u),i=u=null))};return function(){i=this,u=arguments,a=j.now();var l=r&&!e;return e||(e=setTimeout(c,t)),l&&(o=n.apply(i,u),i=u=null),o}},j.once=function(n){var t,r=!1;return function(){return r?t:(r=!0,t=n.apply(this,arguments),n=null,t)}},j.wrap=function(n,t){return j.partial(t,n)},j.compose=function(){var n=arguments;return function(){for(var t=arguments,r=n.length-1;r>=0;r--)t=[n[r].apply(this,t)];return t[0]}},j.after=function(n,t){return function(){return--n<1?t.apply(this,arguments):void 0}},j.keys=function(n){if(!j.isObject(n))return[];if(w)return w(n);var t=[];for(var r in n)j.has(n,r)&&t.push(r);return t},j.values=function(n){for(var t=j.keys(n),r=t.length,e=new Array(r),u=0;r>u;u++)e[u]=n[t[u]];return e},j.pairs=function(n){for(var t=j.keys(n),r=t.length,e=new Array(r),u=0;r>u;u++)e[u]=[t[u],n[t[u]]];return e},j.invert=function(n){for(var t={},r=j.keys(n),e=0,u=r.length;u>e;e++)t[n[r[e]]]=r[e];return t},j.functions=j.methods=function(n){var t=[];for(var r in n)j.isFunction(n[r])&&t.push(r);return t.sort()},j.extend=function(n){return A(o.call(arguments,1),function(t){if(t)for(var r in t)n[r]=t[r]}),n},j.pick=function(n){var t={},r=c.apply(e,o.call(arguments,1));return A(r,function(r){r in n&&(t[r]=n[r])}),t},j.omit=function(n){var t={},r=c.apply(e,o.call(arguments,1));for(var u in n)j.contains(r,u)||(t[u]=n[u]);return t},j.defaults=function(n){return A(o.call(arguments,1),function(t){if(t)for(var r in t)n[r]===void 0&&(n[r]=t[r])}),n},j.clone=function(n){return j.isObject(n)?j.isArray(n)?n.slice():j.extend({},n):n},j.tap=function(n,t){return t(n),n};var S=function(n,t,r,e){if(n===t)return 0!==n||1/n==1/t;if(null==n||null==t)return n===t;n instanceof j&&(n=n._wrapped),t instanceof j&&(t=t._wrapped);var u=l.call(n);if(u!=l.call(t))return!1;switch(u){case"[object String]":return n==String(t);case"[object Number]":return n!=+n?t!=+t:0==n?1/n==1/t:n==+t;case"[object Date]":case"[object Boolean]":return+n==+t;case"[object RegExp]":return n.source==t.source&&n.global==t.global&&n.multiline==t.multiline&&n.ignoreCase==t.ignoreCase}if("object"!=typeof n||"object"!=typeof t)return!1;for(var i=r.length;i--;)if(r[i]==n)return e[i]==t;var a=n.constructor,o=t.constructor;if(a!==o&&!(j.isFunction(a)&&a instanceof a&&j.isFunction(o)&&o instanceof o)&&"constructor"in n&&"constructor"in t)return!1;r.push(n),e.push(t);var c=0,f=!0;if("[object Array]"==u){if(c=n.length,f=c==t.length)for(;c--&&(f=S(n[c],t[c],r,e)););}else{for(var s in n)if(j.has(n,s)&&(c++,!(f=j.has(t,s)&&S(n[s],t[s],r,e))))break;if(f){for(s in t)if(j.has(t,s)&&!c--)break;f=!c}}return r.pop(),e.pop(),f};j.isEqual=function(n,t){return S(n,t,[],[])},j.isEmpty=function(n){if(null==n)return!0;if(j.isArray(n)||j.isString(n))return 0===n.length;for(var t in n)if(j.has(n,t))return!1;return!0},j.isElement=function(n){return!(!n||1!==n.nodeType)},j.isArray=x||function(n){return"[object Array]"==l.call(n)},j.isObject=function(n){return n===Object(n)},A(["Arguments","Function","String","Number","Date","RegExp"],function(n){j["is"+n]=function(t){return l.call(t)=="[object "+n+"]"}}),j.isArguments(arguments)||(j.isArguments=function(n){return!(!n||!j.has(n,"callee"))}),"function"!=typeof/./&&(j.isFunction=function(n){return"function"==typeof n}),j.isFinite=function(n){return isFinite(n)&&!isNaN(parseFloat(n))},j.isNaN=function(n){return j.isNumber(n)&&n!=+n},j.isBoolean=function(n){return n===!0||n===!1||"[object Boolean]"==l.call(n)},j.isNull=function(n){return null===n},j.isUndefined=function(n){return n===void 0},j.has=function(n,t){return f.call(n,t)},j.noConflict=function(){return n._=t,this},j.identity=function(n){return n},j.constant=function(n){return function(){return n}},j.property=function(n){return function(t){return t[n]}},j.matches=function(n){return function(t){if(t===n)return!0;for(var r in n)if(n[r]!==t[r])return!1;return!0}},j.times=function(n,t,r){for(var e=Array(Math.max(0,n)),u=0;n>u;u++)e[u]=t.call(r,u);return e},j.random=function(n,t){return null==t&&(t=n,n=0),n+Math.floor(Math.random()*(t-n+1))},j.now=Date.now||function(){return(new Date).getTime()};var T={escape:{"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;"}};T.unescape=j.invert(T.escape);var I={escape:new RegExp("["+j.keys(T.escape).join("")+"]","g"),unescape:new RegExp("("+j.keys(T.unescape).join("|")+")","g")};j.each(["escape","unescape"],function(n){j[n]=function(t){return null==t?"":(""+t).replace(I[n],function(t){return T[n][t]})}}),j.result=function(n,t){if(null==n)return void 0;var r=n[t];return j.isFunction(r)?r.call(n):r},j.mixin=function(n){A(j.functions(n),function(t){var r=j[t]=n[t];j.prototype[t]=function(){var n=[this._wrapped];return a.apply(n,arguments),z.call(this,r.apply(j,n))}})};var N=0;j.uniqueId=function(n){var t=++N+"";return n?n+t:t},j.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var q=/(.)^/,B={"'":"'","\\":"\\","\r":"r","\n":"n","	":"t","\u2028":"u2028","\u2029":"u2029"},D=/\\|'|\r|\n|\t|\u2028|\u2029/g;j.template=function(n,t,r){var e;r=j.defaults({},r,j.templateSettings);var u=new RegExp([(r.escape||q).source,(r.interpolate||q).source,(r.evaluate||q).source].join("|")+"|$","g"),i=0,a="__p+='";n.replace(u,function(t,r,e,u,o){return a+=n.slice(i,o).replace(D,function(n){return"\\"+B[n]}),r&&(a+="'+\n((__t=("+r+"))==null?'':_.escape(__t))+\n'"),e&&(a+="'+\n((__t=("+e+"))==null?'':__t)+\n'"),u&&(a+="';\n"+u+"\n__p+='"),i=o+t.length,t}),a+="';\n",r.variable||(a="with(obj||{}){\n"+a+"}\n"),a="var __t,__p='',__j=Array.prototype.join,"+"print=function(){__p+=__j.call(arguments,'');};\n"+a+"return __p;\n";try{e=new Function(r.variable||"obj","_",a)}catch(o){throw o.source=a,o}if(t)return e(t,j);var c=function(n){return e.call(this,n,j)};return c.source="function("+(r.variable||"obj")+"){\n"+a+"}",c},j.chain=function(n){return j(n).chain()};var z=function(n){return this._chain?j(n).chain():n};j.mixin(j),A(["pop","push","reverse","shift","sort","splice","unshift"],function(n){var t=e[n];j.prototype[n]=function(){var r=this._wrapped;return t.apply(r,arguments),"shift"!=n&&"splice"!=n||0!==r.length||delete r[0],z.call(this,r)}}),A(["concat","join","slice"],function(n){var t=e[n];j.prototype[n]=function(){return z.call(this,t.apply(this._wrapped,arguments))}}),j.extend(j.prototype,{chain:function(){return this._chain=!0,this},value:function(){return this._wrapped}}),"function"==typeof define&&define.amd&&define("underscore",[],function(){return j})}).call(this);
// END Underscore

(function() {
/*! BEGIN CoreSlim */


(function() {
	'dont use strict';
	var $asm = {};
	global.tab = global.tab || {};
	ss.initAssembly($asm, 'tabcoreslim');
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.CoreSlim.CookieHelper
	var $tab_CookieHelper = function() {
	};
	$tab_CookieHelper.__typeName = 'tab.CookieHelper';
	$tab_CookieHelper.getCookie = function CookieHelper$GetCookie() {
		return document.cookie;
	};
	$tab_CookieHelper.setCookie = function CookieHelper$SetCookie(value) {
		document.cookie = value;
	};
	global.tab.CookieHelper = $tab_CookieHelper;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.CoreSlim.EscapingUtil
	var $tab_EscapingUtil = function() {
	};
	$tab_EscapingUtil.__typeName = 'tab.EscapingUtil';
	$tab_EscapingUtil.escapeHtml = function EscapingUtil$EscapeHtml(html) {
		var escaped = ss.coalesce(html, '');
		escaped = escaped.replace(new RegExp('&', 'g'), '&amp;');
		escaped = escaped.replace(new RegExp('<', 'g'), '&lt;');
		escaped = escaped.replace(new RegExp('>', 'g'), '&gt;');
		escaped = escaped.replace(new RegExp('"', 'g'), '&quot;');
		escaped = escaped.replace(new RegExp("'", 'g'), '&#39;');
		escaped = escaped.replace(new RegExp('/', 'g'), '&#47;');
		return escaped;
	};
	global.tab.EscapingUtil = $tab_EscapingUtil;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.ScriptEx
	var $tab_ScriptEx = function() {
	};
	$tab_ScriptEx.__typeName = 'tab.ScriptEx';
	global.tab.ScriptEx = $tab_ScriptEx;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.CoreSlim.WindowHelper
	var $tab_WindowHelper = function(window) {
		this.$window = null;
		this.$window = window;
	};
	$tab_WindowHelper.__typeName = 'tab.WindowHelper';
	$tab_WindowHelper.get_windowSelf = function WindowHelper$get_WindowSelf() {
		return window.self;
	};
	$tab_WindowHelper.get_selection = function WindowHelper$get_Selection() {
		if (typeof(window['getSelection']) === 'function') {
			return window.getSelection();
		}
		else if (typeof(document['getSelection']) === 'function') {
			return document.getSelection();
		}
		return null;
	};
	$tab_WindowHelper.close = function WindowHelper$Close(window) {
		window.close();
	};
	$tab_WindowHelper.getOpener = function WindowHelper$GetOpener(window) {
		return window.opener;
	};
	$tab_WindowHelper.getLocation = function WindowHelper$GetLocation(window) {
		return window.location;
	};
	$tab_WindowHelper.getPathAndSearch = function WindowHelper$GetPathAndSearch(window) {
		return window.location.pathname + window.location.search;
	};
	$tab_WindowHelper.setLocationHref = function WindowHelper$SetLocationHref(window, href) {
		window.location.href = href;
	};
	$tab_WindowHelper.locationReplace = function WindowHelper$LocationReplace(window, url) {
		window.location.replace(url);
	};
	$tab_WindowHelper.open = function WindowHelper$Open(href, target, options) {
		return window.open(href, target, options);
	};
	$tab_WindowHelper.reload = function WindowHelper$Reload(w, forceGet) {
		w.location.reload(forceGet);
	};
	$tab_WindowHelper.requestAnimationFrame = function WindowHelper$RequestAnimationFrame(action) {
		return $tab_WindowHelper.$requestAnimationFrameFunc(action);
	};
	$tab_WindowHelper.cancelAnimationFrame = function WindowHelper$CancelAnimationFrame(animationId) {
		if (ss.isValue(animationId)) {
			$tab_WindowHelper.$cancelAnimationFrameFunc(animationId);
		}
	};
	$tab_WindowHelper.setTimeout = function WindowHelper$SetTimeout(callback, milliseconds) {
		return window.setTimeout(callback, milliseconds);
	};
	$tab_WindowHelper.setInterval = function WindowHelper$SetInterval(callback, milliseconds) {
		return window.setInterval(callback, milliseconds);
	};
	$tab_WindowHelper.addListener = function WindowHelper$AddListener(windowParam, eventName, messageListener) {
		if ('addEventListener' in windowParam) {
			windowParam.addEventListener(eventName, messageListener, false);
		}
		else {
			windowParam.attachEvent('on' + eventName, messageListener);
		}
	};
	$tab_WindowHelper.removeListener = function WindowHelper$RemoveListener(window, eventName, messageListener) {
		if ('removeEventListener' in window) {
			window.removeEventListener(eventName, messageListener, false);
		}
		else {
			window.detachEvent('on' + eventName, messageListener);
		}
	};
	$tab_WindowHelper.$setDefaultRequestAnimationFrameImpl = function WindowHelper$SetDefaultRequestAnimationFrameImpl() {
		var lastTime = 0;
		$tab_WindowHelper.$requestAnimationFrameFunc = function(callback) {
			var curTime = (new Date()).getTime();
			var timeToCall = Math.max(0, 16 - (curTime - lastTime));
			lastTime = curTime + timeToCall;
			var id = window.setTimeout(callback, timeToCall);
			return id;
		};
	};
	$tab_WindowHelper.clearSelection = function WindowHelper$ClearSelection() {
		var selection = $tab_WindowHelper.get_selection();
		if (ss.isValue(selection)) {
			if (typeof(selection['removeAllRanges']) === 'function') {
				selection.removeAllRanges();
			}
			else if (typeof(selection['empty']) === 'function') {
				selection['empty']();
			}
		}
	};
	global.tab.WindowHelper = $tab_WindowHelper;
	ss.initClass($tab_CookieHelper, $asm, {});
	ss.initClass($tab_EscapingUtil, $asm, {});
	ss.initClass($tab_ScriptEx, $asm, {});
	ss.initClass($tab_WindowHelper, $asm, {
		get_pageXOffset: function WindowHelper$get_PageXOffset() {
			return $tab_WindowHelper.$pageXOffsetFunc(this.$window);
		},
		get_pageYOffset: function WindowHelper$get_PageYOffset() {
			return $tab_WindowHelper.$pageYOffsetFunc(this.$window);
		},
		get_clientWidth: function WindowHelper$get_ClientWidth() {
			return $tab_WindowHelper.$clientWidthFunc(this.$window);
		},
		get_clientHeight: function WindowHelper$get_ClientHeight() {
			return $tab_WindowHelper.$clientHeightFunc(this.$window);
		},
		get_innerWidth: function WindowHelper$get_InnerWidth() {
			return $tab_WindowHelper.$innerWidthFunc(this.$window);
		},
		get_outerWidth: function WindowHelper$get_OuterWidth() {
			return $tab_WindowHelper.$outerWidthFunc(this.$window);
		},
		get_innerHeight: function WindowHelper$get_InnerHeight() {
			return $tab_WindowHelper.$innerHeightFunc(this.$window);
		},
		get_outerHeight: function WindowHelper$get_OuterHeight() {
			return $tab_WindowHelper.$outerHeightFunc(this.$window);
		},
		get_screenLeft: function WindowHelper$get_ScreenLeft() {
			return $tab_WindowHelper.$screenLeftFunc(this.$window);
		},
		get_screenTop: function WindowHelper$get_ScreenTop() {
			return $tab_WindowHelper.$screenTopFunc(this.$window);
		},
		isQuirksMode: function WindowHelper$IsQuirksMode() {
			return document.compatMode === 'BackCompat';
		}
	});
	(function() {
		$tab_WindowHelper.$innerWidthFunc = null;
		$tab_WindowHelper.$innerHeightFunc = null;
		$tab_WindowHelper.$clientWidthFunc = null;
		$tab_WindowHelper.$clientHeightFunc = null;
		$tab_WindowHelper.$pageXOffsetFunc = null;
		$tab_WindowHelper.$pageYOffsetFunc = null;
		$tab_WindowHelper.$screenLeftFunc = null;
		$tab_WindowHelper.$screenTopFunc = null;
		$tab_WindowHelper.$outerWidthFunc = null;
		$tab_WindowHelper.$outerHeightFunc = null;
		$tab_WindowHelper.$requestAnimationFrameFunc = null;
		$tab_WindowHelper.$cancelAnimationFrameFunc = null;
		if ('innerWidth' in window) {
			$tab_WindowHelper.$innerWidthFunc = function(w) {
				return w.innerWidth;
			};
		}
		else {
			$tab_WindowHelper.$innerWidthFunc = function(w1) {
				return w1.document.documentElement.offsetWidth;
			};
		}
		if ('outerWidth' in window) {
			$tab_WindowHelper.$outerWidthFunc = function(w2) {
				return w2.outerWidth;
			};
		}
		else {
			$tab_WindowHelper.$outerWidthFunc = $tab_WindowHelper.$innerWidthFunc;
		}
		if ('innerHeight' in window) {
			$tab_WindowHelper.$innerHeightFunc = function(w3) {
				return w3.innerHeight;
			};
		}
		else {
			$tab_WindowHelper.$innerHeightFunc = function(w4) {
				return w4.document.documentElement.offsetHeight;
			};
		}
		if ('outerHeight' in window) {
			$tab_WindowHelper.$outerHeightFunc = function(w5) {
				return w5.outerHeight;
			};
		}
		else {
			$tab_WindowHelper.$outerHeightFunc = $tab_WindowHelper.$innerHeightFunc;
		}
		if ('clientWidth' in window) {
			$tab_WindowHelper.$clientWidthFunc = function(w6) {
				return w6['clientWidth'];
			};
		}
		else {
			$tab_WindowHelper.$clientWidthFunc = function(w7) {
				return w7.document.documentElement.clientWidth;
			};
		}
		if ('clientHeight' in window) {
			$tab_WindowHelper.$clientHeightFunc = function(w8) {
				return w8['clientHeight'];
			};
		}
		else {
			$tab_WindowHelper.$clientHeightFunc = function(w9) {
				return w9.document.documentElement.clientHeight;
			};
		}
		if (ss.isValue(window.self.pageXOffset)) {
			$tab_WindowHelper.$pageXOffsetFunc = function(w10) {
				return w10.pageXOffset;
			};
		}
		else {
			$tab_WindowHelper.$pageXOffsetFunc = function(w11) {
				return w11.document.documentElement.scrollLeft;
			};
		}
		if (ss.isValue(window.self.pageYOffset)) {
			$tab_WindowHelper.$pageYOffsetFunc = function(w12) {
				return w12.pageYOffset;
			};
		}
		else {
			$tab_WindowHelper.$pageYOffsetFunc = function(w13) {
				return w13.document.documentElement.scrollTop;
			};
		}
		if ('screenLeft' in window) {
			$tab_WindowHelper.$screenLeftFunc = function(w14) {
				return ss.unbox(ss.cast(w14.screenLeft, ss.Int32));
			};
		}
		else {
			$tab_WindowHelper.$screenLeftFunc = function(w15) {
				return w15.screenX;
			};
		}
		if ('screenTop' in window) {
			$tab_WindowHelper.$screenTopFunc = function(w16) {
				return ss.unbox(ss.cast(w16.screenTop, ss.Int32));
			};
		}
		else {
			$tab_WindowHelper.$screenTopFunc = function(w17) {
				return w17.screenY;
			};
		}
		{
			var DefaultRequestName = 'requestAnimationFrame';
			var DefaultCancelName = 'cancelAnimationFrame';
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			var requestFuncName = null;
			var cancelFuncName = null;
			if (DefaultRequestName in window) {
				requestFuncName = DefaultRequestName;
			}
			if (DefaultCancelName in window) {
				cancelFuncName = DefaultCancelName;
			}
			for (var ii = 0; ii < vendors.length && (ss.isNullOrUndefined(requestFuncName) || ss.isNullOrUndefined(cancelFuncName)); ++ii) {
				var vendor = vendors[ii];
				var funcName = vendor + 'RequestAnimationFrame';
				if (ss.isNullOrUndefined(requestFuncName) && funcName in window) {
					requestFuncName = funcName;
				}
				if (ss.isNullOrUndefined(cancelFuncName)) {
					funcName = vendor + 'CancelAnimationFrame';
					if (funcName in window) {
						cancelFuncName = funcName;
					}
					funcName = vendor + 'CancelRequestAnimationFrame';
					if (funcName in window) {
						cancelFuncName = funcName;
					}
				}
			}
			if (ss.isValue(requestFuncName)) {
				$tab_WindowHelper.$requestAnimationFrameFunc = function(callback) {
					return window[requestFuncName](callback);
				};
			}
			else {
				$tab_WindowHelper.$setDefaultRequestAnimationFrameImpl();
			}
			if (ss.isValue(cancelFuncName)) {
				$tab_WindowHelper.$cancelAnimationFrameFunc = function(animationId) {
					window[cancelFuncName](animationId);
				};
			}
			else {
				$tab_WindowHelper.$cancelAnimationFrameFunc = function(id) {
					window.clearTimeout(id);
				};
			}
		}
	})();
})();

// END CoreSlim

(function() {
	'dont use strict';
	var $asm = {};
	global.tab = global.tab || {};
	global.tableau = global.tableau || {};
	global.tableau.types = global.tableau.types || {};
	global.tableau.util = global.tableau.util || {};
	ss.initAssembly($asm, 'vqlcore');
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.ColumnClass
	var $ColumnClass = function() {
	};
	$ColumnClass.__typeName = 'ColumnClass';
	global.ColumnClass = $ColumnClass;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.DrillState
	var $DrillState = function() {
	};
	$DrillState.__typeName = 'DrillState';
	global.DrillState = $DrillState;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.TypeDefs.SelectAction
	var $SelectAction = function() {
	};
	$SelectAction.__typeName = 'SelectAction';
	global.SelectAction = $SelectAction;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.jQueryExtensions
	$.fn.focusDelayed = function jQueryExtensions$FocusDelayed(delayMilliseconds, action) {
		this.each(function(index, elem) {
			window.setTimeout(function() {
				$(elem).focus();
				if (ss.isValue(action)) {
					action.call(elem);
				}
			}, delayMilliseconds);
		});
	};
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.jQuerySelectorExtensions
	$.expr.pseudos.focusable = function jQuerySelectorExtensions$Focusable(element) {
		return $tab_$jQuerySelectorExtensionsImpl.$focusable(element, !isNaN(parseInt($(element).attr('tabindex'), 10)));
	};
	$.expr.pseudos.tabbable = function jQuerySelectorExtensions$Tabbable(element) {
		var tabIndex = parseInt($(element).attr('tabindex'), 10);
		var isTabIndexNaN = isNaN(tabIndex);
		return (isTabIndexNaN || tabIndex >= 0) && $tab_$jQuerySelectorExtensionsImpl.$focusable(element, !isTabIndexNaN);
	};
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.jQuerySelectorExtensionsImpl
	var $tab_$jQuerySelectorExtensionsImpl = function() {
	};
	$tab_$jQuerySelectorExtensionsImpl.__typeName = 'tab.$jQuerySelectorExtensionsImpl';
	$tab_$jQuerySelectorExtensionsImpl.$focusable = function jQuerySelectorExtensionsImpl$Focusable(element, isTabIndexNotNaN) {
		var nodeName = element.nodeName.toLowerCase();
		if (nodeName === 'area') {
			ss.Debug.fail('<area> tags are not supported');
			return false;
		}
		var focusable = isTabIndexNotNaN;
		var focusableNodes = new RegExp('input|select|textarea|button|object');
		if (focusableNodes.test(nodeName)) {
			focusable = !element.disabled;
		}
		else if (nodeName === 'a') {
			focusable = !ss.isNullOrEmptyString(ss.cast(element, ss.isValue(element) && (ss.isInstanceOfType(element, Element) && element.tagName === 'A')).href) || isTabIndexNotNaN;
		}
		return focusable && $tab_$jQuerySelectorExtensionsImpl.$isVisible(element);
	};
	$tab_$jQuerySelectorExtensionsImpl.$isVisible = function jQuerySelectorExtensionsImpl$IsVisible(element) {
		for (var visibility = ''; ss.isValue(element); element = element.parentElement) {
			if (element.style.display === 'none') {
				return false;
			}
			else if (visibility === 'visible') {
				continue;
			}
			else if (visibility.length === 0 || visibility === 'inherit') {
				visibility = element.style.visibility;
			}
			if (visibility === 'hidden') {
				return false;
			}
		}
		return true;
	};
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.AbstractEnumerator
	var $tab_AbstractEnumerator$1 = function(T) {
		var $type = function() {
		};
		ss.registerGenericClassInstance($type, $tab_AbstractEnumerator$1, [T], {
			current: null,
			reset: null,
			moveNext: null,
			dispose: function AbstractEnumerator$Dispose() {
			}
		}, function() {
			return null;
		}, function() {
			return [ss.IDisposable, ss.IEnumerator, ss.IEnumerator];
		});
		return $type;
	};
	$tab_AbstractEnumerator$1.__typeName = 'tab.AbstractEnumerator$1';
	ss.initGenericClass($tab_AbstractEnumerator$1, $asm, 1);
	global.tab.AbstractEnumerator$1 = $tab_AbstractEnumerator$1;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.BaseLogAppender
	var $tab_BaseLogAppender = function() {
		this.$filters = null;
		this.$filters = [];
	};
	$tab_BaseLogAppender.__typeName = 'tab.BaseLogAppender';
	global.tab.BaseLogAppender = $tab_BaseLogAppender;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.BrowserSupport
	var $tab_BrowserSupport = function() {
	};
	$tab_BrowserSupport.__typeName = 'tab.BrowserSupport';
	$tab_BrowserSupport.get_getComputedStyle = function BrowserSupport$get_GetComputedStyle() {
		return 'getComputedStyle' in window;
	};
	$tab_BrowserSupport.get_addEventListener = function BrowserSupport$get_AddEventListener() {
		return 'addEventListener' in document;
	};
	$tab_BrowserSupport.get_selectStart = function BrowserSupport$get_SelectStart() {
		return $tab_BrowserSupport.$selectStart;
	};
	$tab_BrowserSupport.get_fontLoaderApi = function BrowserSupport$get_FontLoaderApi() {
		return $tab_BrowserSupport.$fonts;
	};
	$tab_BrowserSupport.get_postMessage = function BrowserSupport$get_PostMessage() {
		return $tab_BrowserSupport.$postMessage;
	};
	$tab_BrowserSupport.get_historyApi = function BrowserSupport$get_HistoryApi() {
		return $tab_BrowserSupport.$historyApi;
	};
	$tab_BrowserSupport.get_consoleLogFormating = function BrowserSupport$get_ConsoleLogFormating() {
		return $tab_BrowserSupport.$consoleLogFormatting;
	};
	$tab_BrowserSupport.get_isMobile = function BrowserSupport$get_IsMobile() {
		return $tab_BrowserSupport.$isAndroid || $tab_BrowserSupport.$isIos;
	};
	$tab_BrowserSupport.get_isIos = function BrowserSupport$get_IsIos() {
		return $tab_BrowserSupport.$isIos;
	};
	$tab_BrowserSupport.get_isAndroid = function BrowserSupport$get_IsAndroid() {
		return $tab_BrowserSupport.$isAndroid;
	};
	$tab_BrowserSupport.get_isChrome = function BrowserSupport$get_IsChrome() {
		return $tab_BrowserSupport.$isChrome;
	};
	$tab_BrowserSupport.get_isMac = function BrowserSupport$get_IsMac() {
		return $tab_BrowserSupport.$isMac;
	};
	$tab_BrowserSupport.get_isIE = function BrowserSupport$get_IsIE() {
		return $tab_BrowserSupport.$isIE;
	};
	$tab_BrowserSupport.get_isEdge = function BrowserSupport$get_IsEdge() {
		return $tab_BrowserSupport.$isEdge;
	};
	$tab_BrowserSupport.get_isFF = function BrowserSupport$get_IsFF() {
		return $tab_BrowserSupport.$isFF;
	};
	$tab_BrowserSupport.get_isOpera = function BrowserSupport$get_IsOpera() {
		return $tab_BrowserSupport.$isOpera;
	};
	$tab_BrowserSupport.get_isSafari = function BrowserSupport$get_IsSafari() {
		return $tab_BrowserSupport.$isSafari;
	};
	$tab_BrowserSupport.get_isWindows = function BrowserSupport$get_IsWindows() {
		return $tab_BrowserSupport.$isWindows;
	};
	$tab_BrowserSupport.get_isHighDpi = function BrowserSupport$get_IsHighDpi() {
		return window.matchMedia('(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)').matches;
	};
	$tab_BrowserSupport.get_browserVersion = function BrowserSupport$get_BrowserVersion() {
		return $tab_BrowserSupport.$internetExplorerVersion;
	};
	$tab_BrowserSupport.get_safariVersion = function BrowserSupport$get_SafariVersion() {
		return $tab_BrowserSupport.$safariVersion;
	};
	$tab_BrowserSupport.get_googleChromeVersion = function BrowserSupport$get_GoogleChromeVersion() {
		return $tab_BrowserSupport.$googleChromeVersion;
	};
	$tab_BrowserSupport.get_iosVersion = function BrowserSupport$get_IosVersion() {
		return $tab_BrowserSupport.$iosVersion;
	};
	$tab_BrowserSupport.get_raisesEventOnImageReassignment = function BrowserSupport$get_RaisesEventOnImageReassignment() {
		return !$tab_BrowserSupport.$isSafari;
	};
	$tab_BrowserSupport.get_imageLoadIsSynchronous = function BrowserSupport$get_ImageLoadIsSynchronous() {
		return $tab_BrowserSupport.$isIE;
	};
	$tab_BrowserSupport.get_useAlternateHitStrategy = function BrowserSupport$get_UseAlternateHitStrategy() {
		return $tab_BrowserSupport.$shouldUseAlternateHitStrategy;
	};
	$tab_BrowserSupport.get_cssTransformName = function BrowserSupport$get_CssTransformName() {
		return $tab_BrowserSupport.$cssTransformName;
	};
	$tab_BrowserSupport.get_cssTransitionName = function BrowserSupport$get_CssTransitionName() {
		return $tab_BrowserSupport.$cssTransitionName;
	};
	$tab_BrowserSupport.get_backingStoragePixelRatio = function BrowserSupport$get_BackingStoragePixelRatio() {
		return $tab_BrowserSupport.$backingStoragePixelRatio;
	};
	$tab_BrowserSupport.get_devicePixelRatio = function BrowserSupport$get_DevicePixelRatio() {
		return $tab_BrowserSupport.$devicePixelRatio;
	};
	$tab_BrowserSupport.get_canvasLinePattern = function BrowserSupport$get_CanvasLinePattern() {
		return $tab_BrowserSupport.$canvasLinePattern;
	};
	$tab_BrowserSupport.get_dateInput = function BrowserSupport$get_DateInput() {
		return $tab_BrowserSupport.$dateInput;
	};
	$tab_BrowserSupport.get_dateTimeInput = function BrowserSupport$get_DateTimeInput() {
		return $tab_BrowserSupport.$dateTimeInput;
	};
	$tab_BrowserSupport.get_dateTimeLocalInput = function BrowserSupport$get_DateTimeLocalInput() {
		return $tab_BrowserSupport.$dateTimeLocalInput;
	};
	$tab_BrowserSupport.get_timeInput = function BrowserSupport$get_TimeInput() {
		return $tab_BrowserSupport.$timeInput;
	};
	$tab_BrowserSupport.get_setSelectionRange = function BrowserSupport$get_SetSelectionRange() {
		return $tab_BrowserSupport.$setSelectionRange;
	};
	$tab_BrowserSupport.get_mouseWheelEvent = function BrowserSupport$get_MouseWheelEvent() {
		if ('onwheel' in window.document.documentElement) {
			return 'wheel';
		}
		if ('onmousewheel' in window.document.documentElement) {
			return 'mousewheel';
		}
		return 'MozMousePixelScroll';
	};
	$tab_BrowserSupport.get_mouseCapture = function BrowserSupport$get_MouseCapture() {
		return 'releaseCapture' in document;
	};
	$tab_BrowserSupport.get_orientationChange = function BrowserSupport$get_OrientationChange() {
		return 'onorientationchange' in window;
	};
	$tab_BrowserSupport.get_isGeolocationSupported = function BrowserSupport$get_IsGeolocationSupported() {
		return ss.isValue(window.navigator.geolocation);
	};
	$tab_BrowserSupport.get_isIpad = function BrowserSupport$get_IsIpad() {
		return window.navigator.userAgent.indexOf('iPad') !== -1;
	};
	$tab_BrowserSupport.detectBrowserSupport = function BrowserSupport$DetectBrowserSupport() {
		var body = document.body;
		var div = document.createElement('div');
		body.appendChild(div);
		$tab_BrowserSupport.$selectStart = 'onselectstart' in div;
		body.removeChild(div).style.display = 'none';
		$tab_BrowserSupport.$postMessage = 'postMessage' in window;
		$tab_BrowserSupport.$historyApi = typeof(window.history['pushState']) === 'function' && typeof(window.history['replaceState']) === 'function';
		$tab_BrowserSupport.$detectConsoleLogFormatting();
		$tab_BrowserSupport.$detectBrowser();
		$tab_BrowserSupport.$detectTransitionSupport();
		$tab_BrowserSupport.$detectTransformSupport();
		$tab_BrowserSupport.$detectDocumentElementFromPoint();
		$tab_BrowserSupport.$detectDevicePixelRatio();
		$tab_BrowserSupport.$detectBackingStoragePixelRatio();
		$tab_BrowserSupport.$detectDateInputSupport();
		$tab_BrowserSupport.$detectCanvasLinePattern();
		$tab_BrowserSupport.$detectSetSelectionRangeSupport();
	};
	$tab_BrowserSupport.getOrigin = function BrowserSupport$GetOrigin(location) {
		var origin = location.origin;
		if (ss.isNullOrUndefined(origin)) {
			origin = location.protocol + '//' + location.host;
		}
		return origin;
	};
	$tab_BrowserSupport.doPostMessageWithContext = function BrowserSupport$DoPostMessageWithContext(message) {
		var success = tabBootstrap.Utility.doPostMessageWithContext(message);
		if (!success) {
			$tab_Logger.lazyGetLogger($tab_BrowserSupport).debug('BrowserSupport::DoPostMessage failed.', []);
		}
	};
	$tab_BrowserSupport.$detectDocumentElementFromPoint = function BrowserSupport$DetectDocumentElementFromPoint() {
		var body = window.document.body;
		if ($tab_BrowserSupport.$isWebKit && $tab_BrowserSupport.get_isMobile()) {
			var target = $('<div></div>');
			target.css(ss.mkdict(['position', 'absolute', 'top', '300px', 'left', '300px', 'width', '25px', 'height', '25px', 'z-index', '10000']));
			var elem = target.get(0);
			try {
				body.appendChild(elem);
				$tab_BrowserSupport.$shouldUseAlternateHitStrategy = !ss.referenceEquals(document.elementFromPoint(310, 310), elem);
			}
			catch ($t1) {
			}
			finally {
				target.remove();
			}
		}
	};
	$tab_BrowserSupport.$detectConsoleLogFormatting = function BrowserSupport$DetectConsoleLogFormatting() {
		try {
			if (!!ss.isValue(window.console && ss.isValue(window.console.log))) {
				$tab_BrowserSupport.$consoleLogFormatting = window.navigator.userAgent.indexOf('iPad') < 0;
			}
			else {
				$tab_BrowserSupport.$consoleLogFormatting = false;
			}
		}
		catch ($t1) {
			$tab_BrowserSupport.$consoleLogFormatting = false;
		}
	};
	$tab_BrowserSupport.$detectBrowser = function BrowserSupport$DetectBrowser() {
		var ua = $tab_BrowserSupport.$getUserAgent();
		$tab_BrowserSupport.$isKhtml = ua.indexOf('Konqueror') >= 0;
		$tab_BrowserSupport.$isWebKit = ua.indexOf('WebKit') >= 0;
		$tab_BrowserSupport.$isChrome = ua.indexOf('Chrome') >= 0;
		$tab_BrowserSupport.$isSafari = ua.indexOf('Safari') >= 0 && !$tab_BrowserSupport.$isChrome;
		$tab_BrowserSupport.$isOpera = ua.indexOf('Opera') >= 0;
		if ($tab_BrowserSupport.$isSafari) {
			var versionMatches = ua.match(new RegExp('\\bVersion\\/(\\d+\\.\\d+)'));
			if (ss.isValue(versionMatches)) {
				$tab_BrowserSupport.$safariVersion = parseFloat(versionMatches[1]);
			}
		}
		if ($tab_BrowserSupport.$isChrome) {
			var versionMatches1 = ua.match(new RegExp('\\bChrome/(\\d+\\.\\d+)'));
			if (ss.isValue(versionMatches1)) {
				$tab_BrowserSupport.$googleChromeVersion = parseFloat(versionMatches1[1]);
			}
		}
		$tab_BrowserSupport.$internetExplorerVersion = 0;
		$tab_BrowserSupport.$isIE = false;
		var oldIEVersions = ua.match(new RegExp('\\bMSIE (\\d+\\.\\d+)'));
		if (ss.isValue(oldIEVersions)) {
			$tab_BrowserSupport.$isIE = true;
			$tab_BrowserSupport.$internetExplorerVersion = parseFloat(oldIEVersions[1]);
		}
		if (!$tab_BrowserSupport.$isIE && !$tab_BrowserSupport.$isOpera && (ua.indexOf('Trident') >= 0 || ua.indexOf('Edge/') >= 0)) {
			var tridentIEVersions = ua.match(new RegExp('\\brv:(\\d+\\.\\d+)'));
			var edgeIEVersions = ua.match(new RegExp('Edge/(\\d+\\.\\d+)'));
			if (ss.isValue(tridentIEVersions)) {
				$tab_BrowserSupport.$isIE = true;
				$tab_BrowserSupport.$isEdge = false;
				$tab_BrowserSupport.$internetExplorerVersion = parseFloat(tridentIEVersions[1]);
			}
			else if (ss.isValue(edgeIEVersions)) {
				$tab_BrowserSupport.$isIE = true;
				$tab_BrowserSupport.$isEdge = true;
				$tab_BrowserSupport.$isChrome = false;
				$tab_BrowserSupport.$isSafari = false;
				$tab_BrowserSupport.$internetExplorerVersion = parseFloat(edgeIEVersions[1]);
			}
		}
		$tab_BrowserSupport.$isMozilla = !$tab_BrowserSupport.$isKhtml && !$tab_BrowserSupport.$isWebKit && !$tab_BrowserSupport.$isIE && ua.indexOf('Gecko') >= 0;
		$tab_BrowserSupport.$isFF = $tab_BrowserSupport.$isMozilla || ua.indexOf('Firefox') >= 0 || ua.indexOf('Minefield') >= 0;
		var commandRegex = new RegExp('iPhone|iPod|iPad');
		$tab_BrowserSupport.$isIos = commandRegex.test(ua);
		if ($tab_BrowserSupport.$isIos) {
			var iosVersions = ua.match(new RegExp('\\bOS ([\\d+_?]+) like Mac OS X'));
			if (ss.isValue(iosVersions)) {
				$tab_BrowserSupport.$iosVersion = parseFloat(ss.replaceAllString(iosVersions[1].replace('_', '.'), '_', ''));
			}
		}
		$tab_BrowserSupport.$isAndroid = ua.indexOf('Android') >= 0 && !$tab_BrowserSupport.$isIE;
		$tab_BrowserSupport.$isMac = ua.indexOf('Mac') >= 0;
		$tab_BrowserSupport.$isWindows = ua.indexOf('Windows') >= 0;
	};
	$tab_BrowserSupport.$getUserAgent = function BrowserSupport$GetUserAgent() {
		return window.navigator.userAgent;
	};
	$tab_BrowserSupport.$detectTransitionSupport = function BrowserSupport$DetectTransitionSupport() {
		var transitions = ss.mkdict(['transition', 'transition', 'webkitTransition', '-webkit-transition', 'msTransition', '-ms-transition', 'mozTransition', '-moz-transition', 'oTransition', '-o-transition']);
		var $t1 = $tab_BrowserSupport.$detectCssStyleSupport(transitions);
		if (ss.isNullOrUndefined($t1)) {
			$t1 = $tab_BrowserSupport.$cssTransitionName;
		}
		$tab_BrowserSupport.$cssTransitionName = $t1;
	};
	$tab_BrowserSupport.$detectTransformSupport = function BrowserSupport$DetectTransformSupport() {
		var transforms = ss.mkdict(['transform', 'transform', 'webkitTransform', '-webkit-transform', 'msTransform', '-ms-transform', 'mozTransform', '-moz-transform', 'oTransform', '-o-transform']);
		var $t1 = $tab_BrowserSupport.$detectCssStyleSupport(transforms);
		if (ss.isNullOrUndefined($t1)) {
			$t1 = $tab_BrowserSupport.$cssTransformName;
		}
		$tab_BrowserSupport.$cssTransformName = $t1;
	};
	$tab_BrowserSupport.$detectCssStyleSupport = function BrowserSupport$DetectCssStyleSupport(browserNames) {
		var $t1 = new ss.ObjectEnumerator(browserNames);
		try {
			while ($t1.moveNext()) {
				var t = $t1.current();
				var $t2 = document.body.style;
				if (!(t.key in $t2)) {
					continue;
				}
				return t.value;
			}
		}
		finally {
			$t1.dispose();
		}
		return null;
	};
	$tab_BrowserSupport.$detectDevicePixelRatio = function BrowserSupport$DetectDevicePixelRatio() {
		$tab_BrowserSupport.$devicePixelRatio = ss.coalesce(window.self['devicePixelRatio'], 1);
	};
	$tab_BrowserSupport.$detectBackingStoragePixelRatio = function BrowserSupport$DetectBackingStoragePixelRatio() {
		var canvas = document.createElement('canvas');
		if (ss.isNullOrUndefined(canvas)) {
			$tab_BrowserSupport.$backingStoragePixelRatio = 1;
			return;
		}
		var context = null;
		if (typeof(ss.getInstanceType(canvas)['getContext']) === 'function') {
			context = ss.cast(canvas, ss.isValue(canvas) && (ss.isInstanceOfType(canvas, Element) && canvas.tagName === 'CANVAS')).getContext('2d');
		}
		if (ss.isNullOrUndefined(context)) {
			$tab_BrowserSupport.$backingStoragePixelRatio = 1;
			return;
		}
		var ctx = context;
		$tab_BrowserSupport.$backingStoragePixelRatio = ss.unbox(ss.cast(ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || 1, Number));
	};
	$tab_BrowserSupport.$detectCanvasLinePattern = function BrowserSupport$DetectCanvasLinePattern() {
		var canvas = document.createElement('canvas');
		if (ss.isNullOrUndefined(canvas)) {
			return;
		}
		var context = null;
		if (typeof(canvas['getContext']) === 'function') {
			context = ss.cast(canvas, ss.isValue(canvas) && (ss.isInstanceOfType(canvas, Element) && canvas.tagName === 'CANVAS')).getContext('2d');
		}
		if (ss.isNullOrUndefined(context)) {
			return;
		}
		$tab_BrowserSupport.$canvasLinePattern = typeof(context['setLineDash']) === 'function' || 'mozDash' in context || 'webkitLineDash' in context;
	};
	$tab_BrowserSupport.$detectSetSelectionRangeSupport = function BrowserSupport$DetectSetSelectionRangeSupport() {
		var inputObject = $('<input>');
		$tab_BrowserSupport.$setSelectionRange = typeof(inputObject.get(0)['setSelectionRange']) === 'function';
	};
	$tab_BrowserSupport.$detectDateInputSupport = function BrowserSupport$DetectDateInputSupport() {
		$tab_BrowserSupport.$dateInput = $tab_BrowserSupport.$detectCustomInputSupport('date');
		$tab_BrowserSupport.$dateTimeInput = $tab_BrowserSupport.$detectCustomInputSupport('datetime');
		$tab_BrowserSupport.$dateTimeLocalInput = $tab_BrowserSupport.$detectCustomInputSupport('datetime-local');
		$tab_BrowserSupport.$timeInput = $tab_BrowserSupport.$detectCustomInputSupport('time');
	};
	$tab_BrowserSupport.$detectCustomInputSupport = function BrowserSupport$DetectCustomInputSupport(inputType) {
		var inputObject = $("<input type='" + inputType + "'>").css({ position: 'absolute', visibility: 'hidden' }).appendTo($(document.body));
		var $t1 = inputObject.get(0);
		var input = ss.cast($t1, ss.isValue($t1) && (ss.isInstanceOfType($t1, Element) && $t1.tagName === 'INPUT'));
		var reportedInputType = input.getAttribute('type');
		var InvalidDataString = '@inva/1d:)';
		input.value = InvalidDataString;
		var supportsInput = ss.referenceEquals(reportedInputType, inputType) && !ss.referenceEquals(input.value, InvalidDataString);
		inputObject.remove();
		return supportsInput;
	};
	$tab_BrowserSupport.$installPolyfill = function(T) {
		return function BrowserSupport$InstallPolyfill(constructorName) {
			var supported = constructorName in window;
			if (!supported) {
				var maker = function() {
					return ss.createInstance(T);
				};
				var windowAsDynamic = window;
				windowAsDynamic[constructorName] = maker;
			}
		};
	};
	global.tab.BrowserSupport = $tab_BrowserSupport;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.CalendarOptions
	var $tab_CalendarOptions = function() {
		this.startOfWeek = 1;
		this.fiscalYearStart = 1;
		this.minDaysInFirstWeek = 1;
		this.brokenWeeks = true;
	};
	$tab_CalendarOptions.__typeName = 'tab.CalendarOptions';
	global.tab.CalendarOptions = $tab_CalendarOptions;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.CallOnDispose
	var $tab_CallOnDispose = function(callOnDispose) {
		this.$callOnDispose = null;
		this.$callOnDispose = callOnDispose;
	};
	$tab_CallOnDispose.__typeName = 'tab.CallOnDispose';
	global.tab.CallOnDispose = $tab_CallOnDispose;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.CircleUtil
	var $tab_CircleUtil = function() {
	};
	$tab_CircleUtil.__typeName = 'tab.CircleUtil';
	$tab_CircleUtil.isEmpty = function CircleUtil$IsEmpty(circle) {
		return $tab_DoubleUtil.isApproximatelyZero(circle.radius);
	};
	$tab_CircleUtil.isEqual = function CircleUtil$IsEqual(c1, c2) {
		return $tab_DoubleUtil.isApproximatelyEqual(c1.radius, c2.radius) && $tab_CircleUtil.hasTheSameCenter(c1, c2);
	};
	$tab_CircleUtil.hasTheSameCenter = function CircleUtil$HasTheSameCenter(c1, c2) {
		return $tab_DoubleUtil.isApproximatelyEqual(c1.center.x, c2.center.x) && $tab_DoubleUtil.isApproximatelyEqual(c1.center.y, c2.center.y);
	};
	$tab_CircleUtil.intersectsWith = function CircleUtil$IntersectsWith(c1, c2) {
		var distanceSquared = Math.pow(c1.center.x - c2.center.x, 2) + Math.pow(c1.center.y - c2.center.y, 2);
		return Math.pow(c1.radius + c2.radius, 2) > distanceSquared;
	};
	$tab_CircleUtil.offsetCircle = function CircleUtil$OffsetCircle(c, p) {
		var offsetCenter = { x: c.center.x + p.x, y: c.center.y + p.y };
		return { center: offsetCenter, radius: c.radius };
	};
	$tab_CircleUtil.clone = function CircleUtil$Clone(c) {
		return { center: { x: c.center.x, y: c.center.y }, radius: c.radius };
	};
	$tab_CircleUtil.boundingBox = function CircleUtil$BoundingBox(circle) {
		var intRadius = Math.ceil(circle.radius);
		var minX = Math.floor(circle.center.x - intRadius);
		var maxX = Math.ceil(circle.center.x + intRadius);
		var minY = Math.floor(circle.center.y - intRadius);
		var maxY = Math.ceil(circle.center.y + intRadius);
		return { x: minX, y: minY, w: maxX - minX, h: maxY - minY };
	};
	$tab_CircleUtil.containmentBox = function CircleUtil$ContainmentBox(circle) {
		var diffX = Math.abs(ss.round(circle.center.x) - circle.center.x);
		var diffY = Math.abs(ss.round(circle.center.y) - circle.center.y);
		var halfLength = Math.sqrt(2) / 2 * circle.radius - Math.max(diffX, diffY);
		var left = Math.ceil(circle.center.x - halfLength);
		var top = Math.ceil(circle.center.y - halfLength);
		var right = Math.floor(circle.center.x + halfLength);
		var bottom = Math.floor(circle.center.y + halfLength);
		return { x: left, y: top, w: right - left, h: bottom - top };
	};
	$tab_CircleUtil.getChangedRects = function CircleUtil$GetChangedRects(c1, c2) {
		if (!$tab_CircleUtil.hasTheSameCenter(c1, c2)) {
			$tab_Log.get(c1).warn('Circle centers in comparison should be the same, but are not', []);
			return [];
		}
		var outerBox = ((c1.radius > c2.radius) ? $tab_CircleUtil.boundingBox(c1) : $tab_CircleUtil.boundingBox(c2));
		var innerBox = ((c1.radius > c2.radius) ? $tab_CircleUtil.containmentBox(c2) : $tab_CircleUtil.containmentBox(c1));
		var changedRects = new Array(4);
		var horzBoxHeight = ss.Int32.div(outerBox.h - innerBox.h, 2);
		var vertBoxWidth = ss.Int32.div(outerBox.w - innerBox.w, 2);
		changedRects[0] = { x: outerBox.x, y: outerBox.y, w: outerBox.w, h: horzBoxHeight };
		changedRects[1] = { x: outerBox.x, y: outerBox.y + horzBoxHeight + innerBox.h, w: outerBox.w, h: horzBoxHeight };
		changedRects[2] = { x: outerBox.x, y: outerBox.y + horzBoxHeight, w: vertBoxWidth, h: innerBox.h };
		changedRects[3] = { x: outerBox.x + vertBoxWidth + innerBox.w, y: outerBox.y + horzBoxHeight, w: vertBoxWidth, h: innerBox.h };
		return changedRects;
	};
	global.tab.CircleUtil = $tab_CircleUtil;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.ConsoleLogAppender
	var $tab_ConsoleLogAppender = function() {
		this.$levelMethods = null;
		$tab_BaseLogAppender.call(this);
	};
	$tab_ConsoleLogAppender.__typeName = 'tab.ConsoleLogAppender';
	$tab_ConsoleLogAppender.enableLogging = function ConsoleLogAppender$EnableLogging(filter) {
		if (ss.isNullOrUndefined($tab_ConsoleLogAppender.$globalAppender)) {
			$tab_ConsoleLogAppender.$globalAppender = new $tab_ConsoleLogAppender();
			$tab_Logger.addAppender($tab_ConsoleLogAppender.$globalAppender);
		}
		$tab_ConsoleLogAppender.$globalAppender.addFilter(filter || function() {
			return true;
		});
	};
	$tab_ConsoleLogAppender.disableLogging = function ConsoleLogAppender$DisableLogging() {
		if (ss.isNullOrUndefined($tab_ConsoleLogAppender.$globalAppender)) {
			return;
		}
		$tab_Logger.removeAppender($tab_ConsoleLogAppender.$globalAppender);
		$tab_ConsoleLogAppender.$globalAppender = null;
	};
	global.tab.ConsoleLogAppender = $tab_ConsoleLogAppender;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.DataSourceConnectionAttemptErrorResponse
	var $tab_DataSourceConnectionAttemptErrorResponse = function() {
		this.ErrorType = null;
		this.RedirectUrl = null;
		this.ErrorMessage = null;
	};
	$tab_DataSourceConnectionAttemptErrorResponse.__typeName = 'tab.DataSourceConnectionAttemptErrorResponse';
	$tab_DataSourceConnectionAttemptErrorResponse.tryDeserialize = function DataSourceConnectionAttemptErrorResponse$TryDeserialize(responseText) {
		try {
			var response = JSON.parse(responseText);
			return response;
		}
		catch ($t1) {
			return null;
		}
	};
	global.tab.DataSourceConnectionAttemptErrorResponse = $tab_DataSourceConnectionAttemptErrorResponse;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.DateTimeAutoFormatMode
	var $tab_DateTimeAutoFormatMode = function() {
	};
	$tab_DateTimeAutoFormatMode.__typeName = 'tab.DateTimeAutoFormatMode';
	global.tab.DateTimeAutoFormatMode = $tab_DateTimeAutoFormatMode;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.DateUtil
	var $tab_DateUtil = function() {
	};
	$tab_DateUtil.__typeName = 'tab.DateUtil';
	$tab_DateUtil.get_$log = function DateUtil$get_Log() {
		return $tab_Logger.lazyGetLogger($tab_DateUtil);
	};
	$tab_DateUtil.get_nowAsTime = function DateUtil$get_NowAsTime() {
		return (new Date()).getTime();
	};
	$tab_DateUtil.adjustDateByPeriod = function DateUtil$AdjustDateByPeriod(date, periodType, numPeriods) {
		var outDate = new Date();
		switch (periodType) {
			case 'year': {
				outDate = new Date(date.getFullYear() + numPeriods, date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds());
				break;
			}
			case 'quarter': {
				outDate = $tab_DateUtil.adjustByMonths(date, numPeriods * 3);
				break;
			}
			case 'month': {
				outDate = $tab_DateUtil.adjustByMonths(date, numPeriods);
				break;
			}
			case 'week': {
				outDate = $tab_DateUtil.$adjustByDays(date, numPeriods * 7);
				break;
			}
			case 'day': {
				outDate = $tab_DateUtil.$adjustByDays(date, numPeriods);
				break;
			}
			case 'hour': {
				outDate = new Date(date.getTime() + numPeriods * $tab_DateUtil.oneHour);
				break;
			}
			case 'minute': {
				outDate = new Date(date.getTime() + numPeriods * $tab_DateUtil.oneMinute);
				break;
			}
			case 'second': {
				outDate = new Date(date.getTime() + numPeriods * $tab_DateUtil.oneSecond);
				break;
			}
		}
		return outDate;
	};
	$tab_DateUtil.$adjustByDays = function DateUtil$AdjustByDays(inputDate, numDays) {
		var inputDateNoon = new Date(inputDate.getFullYear(), inputDate.getMonth(), inputDate.getDate(), 12);
		var adjustedDate = new Date(inputDateNoon.getTime() + $tab_DateUtil.oneDay * numDays);
		return new Date(adjustedDate.getFullYear(), adjustedDate.getMonth(), adjustedDate.getDate(), inputDate.getHours(), inputDate.getMinutes(), inputDate.getSeconds());
	};
	$tab_DateUtil.adjustByMonths = function DateUtil$AdjustByMonths(date, n) {
		var currentMonth = date.getMonth();
		var years;
		var newMonth;
		if (n < 0) {
			years = -((12 - (currentMonth - 1) - 1 - n) / 12) | 0;
		}
		else {
			years = (currentMonth - 1 + n) / 12 | 0;
		}
		newMonth = currentMonth + (n - years * 12);
		return new Date(date.getFullYear() + years, newMonth, date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds());
	};
	$tab_DateUtil.adjustDateByPeriodInUTC = function DateUtil$AdjustDateByPeriodInUTC(date, periodType, numPeriods) {
		var outDate = new Date();
		switch (periodType) {
			case 'year': {
				outDate = new Date(date.getUTCFullYear() + numPeriods, date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds());
				break;
			}
			case 'quarter': {
				outDate = $tab_DateUtil.adjustByMonthsInUTC(date, numPeriods * 3);
				break;
			}
			case 'month': {
				outDate = $tab_DateUtil.adjustByMonthsInUTC(date, numPeriods);
				break;
			}
			case 'week': {
				outDate = new Date(date.getTime() + numPeriods * $tab_DateUtil.oneWeek);
				break;
			}
			case 'day': {
				outDate = new Date(date.getTime() + numPeriods * $tab_DateUtil.oneDay);
				break;
			}
			case 'hour': {
				outDate = new Date(date.getTime() + numPeriods * $tab_DateUtil.oneHour);
				break;
			}
			case 'minute': {
				outDate = new Date(date.getTime() + numPeriods * $tab_DateUtil.oneMinute);
				break;
			}
			case 'second': {
				outDate = new Date(date.getTime() + numPeriods * $tab_DateUtil.oneSecond);
				break;
			}
		}
		return outDate;
	};
	$tab_DateUtil.adjustByMonthsInUTC = function DateUtil$AdjustByMonthsInUTC(date, n) {
		var currentMonth = date.getUTCMonth(), years, newMonth;
		if (n < 0) {
			years = -((12 - (currentMonth - 1) - 1 - n) / 12) | 0;
		}
		else {
			years = (currentMonth - 1 + n) / 12 | 0;
		}
		newMonth = currentMonth + (n - years * 12);
		return new Date(Date.UTC(date.getUTCFullYear() + years, newMonth, date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds()));
	};
	$tab_DateUtil.parsePresModelDate = function DateUtil$ParsePresModelDate(dateValue) {
		if (ss.isNullOrUndefined(dateValue)) {
			return null;
		}
		var matches = (new RegExp('(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)( (\\d\\d):(\\d\\d):(\\d\\d))?')).exec(dateValue);
		if (ss.isNullOrUndefined(matches)) {
			$tab_DateUtil.get_$log().debug("Date doesn't match: %s", [dateValue]);
			return null;
		}
		var year = parseInt(matches[1], 10);
		var month = parseInt(matches[2], 10) - 1;
		var day = parseInt(matches[3], 10);
		if (ss.isNullOrEmptyString(matches[4])) {
			return new Date(Date.UTC(year, month, day));
		}
		else {
			var hours = parseInt(matches[5], 10);
			var minutes = parseInt(matches[6], 10);
			var seconds = parseInt(matches[7], 10);
			return new Date(Date.UTC(year, month, day, hours, minutes, seconds));
		}
	};
	$tab_DateUtil.dateAsYear = function DateUtil$DateAsYear(arg) {
		return arg.getUTCFullYear();
	};
	$tab_DateUtil.dateAsQuarter = function DateUtil$DateAsQuarter(arg) {
		var month = $tab_DateUtil.$getMonthNum(arg);
		return parseInt(1 + ss.Int32.div(month - 1, 3));
	};
	$tab_DateUtil.dateAsMonth = function DateUtil$DateAsMonth(arg) {
		return $tab_DateUtil.$getMonthNum(arg);
	};
	$tab_DateUtil.dateAsWeek = function DateUtil$DateAsWeek(arg) {
		var jan1 = new Date(arg.getUTCFullYear(), 0, 1);
		var dayOfYear = $tab_DateUtil.$getDayOfYear(arg);
		var value = parseInt(1 + (dayOfYear + $tab_DateUtil.$getDayNum(jan1) - 2) / 7);
		return value;
	};
	$tab_DateUtil.dateAsDay = function DateUtil$DateAsDay(arg) {
		return arg.getUTCDate();
	};
	$tab_DateUtil.dateAsDayOfYear = function DateUtil$DateAsDayOfYear(arg) {
		return $tab_DateUtil.$getDayOfYear(arg);
	};
	$tab_DateUtil.dateAsDayOfWeek = function DateUtil$DateAsDayOfWeek(arg) {
		return $tab_DateUtil.$getDayNum(arg);
	};
	$tab_DateUtil.dateAsMonthYear = function DateUtil$DateAsMonthYear(arg) {
		var value = $tab_DateUtil.$getMonthNum(arg) * 10000 + arg.getUTCFullYear();
		return value;
	};
	$tab_DateUtil.dateAsMonthDayYear = function DateUtil$DateAsMonthDayYear(arg) {
		var value = $tab_DateUtil.$getMonthNum(arg) * 1000000 + arg.getUTCDate() * 10000 + arg.getUTCFullYear();
		return value;
	};
	$tab_DateUtil.dateTimeAsHour = function DateUtil$DateTimeAsHour(arg) {
		return arg.getUTCHours();
	};
	$tab_DateUtil.dateTimeAsMinute = function DateUtil$DateTimeAsMinute(arg) {
		return arg.getUTCMinutes();
	};
	$tab_DateUtil.dateTimeAsSecond = function DateUtil$DateTimeAsSecond(arg) {
		return arg.getUTCSeconds();
	};
	$tab_DateUtil.dateTimeAsOleDate = function DateUtil$DateTimeAsOleDate(arg) {
		return $tableau_types.OleDateFromJsDate(arg.getTime());
	};
	$tab_DateUtil.$getDayOfYear = function DateUtil$GetDayOfYear(arg) {
		var yn = arg.getUTCFullYear();
		var mn = arg.getUTCMonth();
		var dn = arg.getUTCDate();
		var d1 = new Date(yn, 0, 1, 12, 0, 0);
		var d2 = new Date(yn, mn, dn, 12, 0, 0);
		var ddiff = Math.round((d2 - d1) / 86400000);
		return ddiff + 1;
	};
	$tab_DateUtil.$getMonthNum = function DateUtil$GetMonthNum(arg) {
		return arg.getUTCMonth() + 1;
	};
	$tab_DateUtil.$getDayNum = function DateUtil$GetDayNum(arg) {
		return arg.getUTCDay() + 1;
	};
	$tab_DateUtil.daysSinceEpoch = function DateUtil$DaysSinceEpoch(date) {
		return Math.floor(date.getTime() / 86400000);
	};
	global.tab.DateUtil = $tab_DateUtil;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.Debouncer
	var $tab_Debouncer = function(action, timeout) {
		this.$timeoutHandle = null;
		this.$timeout = 0;
		this.$action = null;
		$tab_Param.verifyValue(action, 'action');
		this.$action = action;
		this.$timeout = timeout;
	};
	$tab_Debouncer.__typeName = 'tab.Debouncer';
	global.tab.Debouncer = $tab_Debouncer;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.DisposableHolder
	var $tab_DisposableHolder = function() {
		this.$disposables = [];
	};
	$tab_DisposableHolder.__typeName = 'tab.DisposableHolder';
	global.tab.DisposableHolder = $tab_DisposableHolder;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.DomUtil
	var $tab_DomUtil = function() {
	};
	$tab_DomUtil.__typeName = 'tab.DomUtil';
	$tab_DomUtil.get_$log = function DomUtil$get_Log() {
		return $tab_Logger.lazyGetLogger($tab_DomUtil);
	};
	$tab_DomUtil.get_documentBody = function DomUtil$get_DocumentBody() {
		return document.body;
	};
	$tab_DomUtil.getComputedStyle = function DomUtil$GetComputedStyle(e) {
		if ($tab_BrowserSupport.get_getComputedStyle()) {
			var s = window.getComputedStyle(e);
			if (ss.isValue(s)) {
				return s;
			}
		}
		$tab_DomUtil.get_$log().warn('Calling GetComputedStyle but is unsupported', []);
		return e.style;
	};
	$tab_DomUtil.getComputedZIndex = function DomUtil$GetComputedZIndex(child) {
		$tab_Param.verifyValue(child, 'child');
		var iter = $(child);
		var lastPositioned = iter;
		var html = document.documentElement;
		var body = document.body;
		while (iter.length !== 0 && !ss.referenceEquals(iter[0], body) && !ss.referenceEquals(iter[0], html)) {
			var pos = iter.css('position');
			if (pos === 'absolute' || pos === 'fixed') {
				lastPositioned = iter;
			}
			iter = iter.offsetParent();
		}
		return $tab_DomUtil.$parseZIndexProperty(lastPositioned);
	};
	$tab_DomUtil.resize = function DomUtil$Resize(e, rect) {
		if (!!(typeof(e['resize']) === 'function')) {
			e.resize(rect);
		}
		else {
			$tab_DomUtil.setMarginBox(ss.cast(e.domNode || e, HTMLElement), rect);
		}
	};
	$tab_DomUtil.getContentBox = function DomUtil$GetContentBox(e) {
		var obj = $(e);
		return { l: parseInt(obj.css('padding-left'), 10) || 0, t: parseInt(obj.css('padding-top'), 10) || 0, w: $tab_DoubleUtil.roundToInt(obj.width()), h: $tab_DoubleUtil.roundToInt(obj.height()) };
	};
	$tab_DomUtil.setContentBox = function DomUtil$SetContentBox(e, r) {
		$(e).width(r.w).height(r.h);
	};
	$tab_DomUtil.setMarginBox = function DomUtil$SetMarginBox(e, r) {
		$tab_DomUtil.setMarginBoxJQ($(e), r);
	};
	$tab_DomUtil.setMarginBoxJQ = function DomUtil$SetMarginBoxJQ(o, r) {
		var rawElement = o[0];
		var elementStyle = rawElement.style;
		var computedStyle = window.getComputedStyle(rawElement);
		$tab_DomUtil.$setMarginSizeJQ(computedStyle, r, rawElement);
		if (!isNaN(r.t)) {
			elementStyle.top = r.t + 'px';
		}
		if (!isNaN(r.l)) {
			elementStyle.left = r.l + 'px';
		}
	};
	$tab_DomUtil.setAbsolutePositionBox = function DomUtil$SetAbsolutePositionBox(o, r) {
		o.css({ left: (r.l || 0) + 'px', top: (r.t || 0) + 'px', width: (r.w || 0) + 'px', height: (r.h || 0) + 'px' });
	};
	$tab_DomUtil.getMarginBox = function DomUtil$GetMarginBox(e) {
		return $tab_DomUtil.getMarginBoxJQ($(e));
	};
	$tab_DomUtil.getMarginBoxJQ = function DomUtil$GetMarginBoxJQ(o) {
		var p = o.position();
		return { l: $tab_DoubleUtil.roundToInt(p.left), t: $tab_DoubleUtil.roundToInt(p.top), w: $tab_DoubleUtil.roundToInt(o.outerWidth(true)), h: $tab_DoubleUtil.roundToInt(o.outerHeight(true)) };
	};
	$tab_DomUtil.getRectXY = function DomUtil$GetRectXY(o) {
		var x = $tab_DoubleUtil.roundToInt($tab_DomUtil.getPageOffset(o).left);
		var y = $tab_DoubleUtil.roundToInt($tab_DomUtil.getPageOffset(o).top);
		var w = $tab_DoubleUtil.roundToInt(o.outerWidth(true));
		var h = $tab_DoubleUtil.roundToInt(o.outerHeight(true));
		return { x: x, y: y, w: w, h: h };
	};
	$tab_DomUtil.getRectXY$1 = function DomUtil$GetRectXY(o, includeScroll) {
		var result = $tab_DomUtil.getRectXY(o);
		if (includeScroll) {
			var scroll = $tab_DomUtil.docScroll();
			result.x += scroll.x;
			result.y += scroll.y;
		}
		return result;
	};
	$tab_DomUtil.docScroll = function DomUtil$DocScroll() {
		var x = ss.coalesce(window.pageXOffset, ss.coalesce(document.documentElement.scrollLeft, ss.coalesce($tab_DomUtil.get_documentBody().scrollLeft, 0)));
		var y = ss.coalesce(window.pageYOffset, ss.coalesce(document.documentElement.scrollTop, ss.coalesce($tab_DomUtil.get_documentBody().scrollTop, 0)));
		return { x: x, y: y };
	};
	$tab_DomUtil.isAncestorOf = function DomUtil$IsAncestorOf(ancestor, child) {
		if (ss.isNullOrUndefined(ancestor) || ss.isNullOrUndefined(child)) {
			return false;
		}
		return $(child).parents().index(ancestor) >= 0;
	};
	$tab_DomUtil.isEqualOrAncestorOf = function DomUtil$IsEqualOrAncestorOf(ancestor, child) {
		if (ss.isNullOrUndefined(ancestor) || ss.isNullOrUndefined(child)) {
			return false;
		}
		return ss.referenceEquals(ancestor, child) || $tab_DomUtil.isAncestorOf(ancestor, child);
	};
	$tab_DomUtil.setElementPosition = function DomUtil$SetElementPosition(e, pageX, pageY, duration, useTransform) {
		if (!ss.isValue(useTransform) || ss.unbox(useTransform)) {
			var styling = ss.mkdict(['top', '0px', 'left', '0px']);
			var transformVal = (new ss.StringBuilder('translate3d(')).append(pageX).append('px,').append(pageY).append('px,').append('0px)').toString();
			styling[$tab_BrowserSupport.get_cssTransformName()] = transformVal;
			if (ss.isValue(duration)) {
				styling[$tab_BrowserSupport.get_cssTransitionName() + '-duration'] = duration;
			}
			e.css(styling);
			return;
		}
		var css = ss.mkdict(['position', 'absolute', 'top', pageY + 'px', 'left', pageX + 'px']);
		css[$tab_BrowserSupport.get_cssTransformName()] = '';
		e.css(css);
	};
	$tab_DomUtil.getElementPosition = function DomUtil$GetElementPosition(e) {
		return $tab_PointUtil.fromPosition(e.offset());
	};
	$tab_DomUtil.getElementClientPosition = function DomUtil$GetElementClientPosition(e) {
		var p = $tab_DomUtil.getElementPosition(e);
		p.x -= $(document.documentElement).scrollLeft();
		p.y -= $tab_DoubleUtil.roundToInt($(document.documentElement).scrollTop());
		return p;
	};
	$tab_DomUtil.getTransformOffset = function DomUtil$GetTransformOffset(element) {
		if (ss.isNullOrUndefined(element)) {
			$tab_DomUtil.get_$log().warn('Attempting to get transformation on null element!', []);
			return { left: 0, top: 0 };
		}
		var fullTransform = element.css('transform');
		if (ss.isNullOrEmptyString(fullTransform)) {
			return { left: 0, top: 0 };
		}
		var transform = fullTransform.split('(');
		var index = $tab_DomUtil.$translationFuncIndexer[transform[0]];
		if (ss.isNullOrUndefined(index)) {
			return { left: 0, top: 0 };
		}
		var vals = transform[1].split(',');
		return { left: ss.coalesce($tab_DoubleUtil.parseDouble(vals[ss.unbox(index)]), 0), top: ss.coalesce($tab_DoubleUtil.parseDouble(vals[ss.unbox(index) + 1]), 0) };
	};
	$tab_DomUtil.getTransformScale = function DomUtil$GetTransformScale(element) {
		if (ss.isNullOrUndefined(element)) {
			$tab_DomUtil.get_$log().warn('Attempting to get transformation on null element!', []);
			return 1;
		}
		var fullTransform = element.css('transform');
		if (ss.isNullOrEmptyString(fullTransform)) {
			return 1;
		}
		var transform = fullTransform.split('(');
		if (transform[0] === 'scale' || transform[0] === 'matrix' || transform[0] === 'matrix3d') {
			return ss.coalesce($tab_DoubleUtil.parseDouble(transform[1]), 1);
		}
		else {
			return 1;
		}
	};
	$tab_DomUtil.getPageOffset = function DomUtil$GetPageOffset(e) {
		var elementRect = e[0].getBoundingClientRect();
		var documentElementRect = document.documentElement.getBoundingClientRect();
		return { left: elementRect.left - documentElementRect.left, top: elementRect.top - documentElementRect.top };
	};
	$tab_DomUtil.getScrollPosition = function DomUtil$GetScrollPosition(o) {
		return { left: o[0].scrollLeft, top: o[0].scrollTop };
	};
	$tab_DomUtil.scrollPosition = function DomUtil$ScrollPosition(o, pos) {
		o[0].scrollLeft = pos.left;
		o[0].scrollTop = pos.top;
	};
	$tab_DomUtil.focusWithoutScrolling = function DomUtil$FocusWithoutScrolling(focusMethod, scrollNode) {
		if (ss.isNullOrUndefined(scrollNode) || scrollNode.length === 0) {
			focusMethod();
		}
		else {
			scrollNode.attr($tab_DomUtil.$testWaitAttributeName, '');
			window.setTimeout(function() {
				var scrollPos = $tab_DomUtil.getScrollPosition(scrollNode);
				focusMethod();
				$tab_DomUtil.scrollPosition(scrollNode, scrollPos);
				scrollNode.removeAttr($tab_DomUtil.$testWaitAttributeName);
			}, 200);
		}
	};
	$tab_DomUtil.roomAroundPosition = function DomUtil$RoomAroundPosition(p) {
		var roomAbove = p.top - window.pageYOffset;
		var roomBelow = window.pageYOffset + window.innerHeight - p.top;
		var roomLeft = p.left - window.pageXOffset;
		var roomRight = window.pageXOffset + window.innerWidth - p.left;
		return { roomAbove: roomAbove, roomBelow: roomBelow, roomLeft: roomLeft, roomRight: roomRight };
	};
	$tab_DomUtil.getElementRelativePosition = function DomUtil$GetElementRelativePosition(e, p) {
		if (ss.isNullOrUndefined(p)) {
			p = e.parent();
		}
		var ep = e.offset();
		var pp = p.offset();
		return { x: $tab_DoubleUtil.roundToInt(ep.left) - $tab_DoubleUtil.roundToInt(pp.left), y: $tab_DoubleUtil.roundToInt(ep.top) - $tab_DoubleUtil.roundToInt(pp.top) };
	};
	$tab_DomUtil.parseWidthFromStyle = function DomUtil$ParseWidthFromStyle(style) {
		if (ss.isValue(style) && !$tab_MiscUtil.isNullOrEmpty$1(style.width)) {
			return parseInt(style.width);
		}
		return Number.NaN;
	};
	$tab_DomUtil.parseHeightFromStyle = function DomUtil$ParseHeightFromStyle(style) {
		if (ss.isValue(style) && !$tab_MiscUtil.isNullOrEmpty$1(style.height)) {
			return parseInt(style.height);
		}
		return Number.NaN;
	};
	$tab_DomUtil.createNamespacedEventName = function DomUtil$CreateNamespacedEventName(eventName, eventNamespace) {
		if (ss.isValue(eventNamespace)) {
			return eventName + eventNamespace;
		}
		return eventName.toString();
	};
	$tab_DomUtil.stopPropagationOfInputEvents = function DomUtil$StopPropagationOfInputEvents(o, eventNamespace) {
		var stopPropagation = function(e) {
			e.stopPropagation();
		};
		$tab_DomUtil.handleInputEvents(o, eventNamespace, stopPropagation);
	};
	$tab_DomUtil.handleInputEvents = function DomUtil$HandleInputEvents(o, eventNamespace, handler) {
		o.on($tab_DomUtil.createNamespacedEventName('touchstart', eventNamespace), handler).on($tab_DomUtil.createNamespacedEventName('touchcancel', eventNamespace), handler).on($tab_DomUtil.createNamespacedEventName('touchend', eventNamespace), handler).on($tab_DomUtil.createNamespacedEventName('touchmove', eventNamespace), handler).on($tab_DomUtil.createNamespacedEventName('click', eventNamespace), handler).on($tab_DomUtil.createNamespacedEventName('mousedown', eventNamespace), handler).on($tab_DomUtil.createNamespacedEventName('mousemove', eventNamespace), handler).on($tab_DomUtil.createNamespacedEventName('mouseup', eventNamespace), handler);
	};
	$tab_DomUtil.isFocusableTextElement = function DomUtil$IsFocusableTextElement(domElement) {
		if (ss.isValue(domElement) && ss.isValue(domElement.tagName)) {
			var targetTagName = domElement.tagName.toLowerCase();
			if (targetTagName === 'textarea' || targetTagName === 'input' || targetTagName === 'select') {
				return true;
			}
		}
		return false;
	};
	$tab_DomUtil.isCheckboxElement = function DomUtil$IsCheckboxElement(domElement) {
		if (ss.isValue(domElement) && ss.isValue(domElement.tagName)) {
			var targetTagName = domElement.tagName.toLowerCase();
			var typeAttributeValue = $(domElement).attr('type');
			if (targetTagName === 'input' && typeAttributeValue === 'checkbox') {
				return true;
			}
		}
		return false;
	};
	$tab_DomUtil.handleTouchEvents = function DomUtil$HandleTouchEvents(domElement) {
		if ($tab_DomUtil.isCheckboxElement(domElement)) {
			return false;
		}
		if ($tab_DomUtil.isFocusableTextElement(domElement)) {
			return false;
		}
		return true;
	};
	$tab_DomUtil.setCapture = function DomUtil$SetCapture(e, retargetToElement) {
		if (!$tab_BrowserSupport.get_mouseCapture()) {
			return;
		}
		e.setCapture(retargetToElement);
	};
	$tab_DomUtil.releaseCapture = function DomUtil$ReleaseCapture() {
		if (!$tab_BrowserSupport.get_mouseCapture()) {
			return;
		}
		document.releaseCapture();
	};
	$tab_DomUtil.blur = function DomUtil$Blur() {
		var activeElem = document.activeElement;
		if (ss.isValue(activeElem) && !ss.referenceEquals(activeElem, $tab_DomUtil.get_documentBody()) && typeof(activeElem['blur']) === 'function') {
			activeElem.blur();
		}
	};
	$tab_DomUtil.$convertCssToInt = function DomUtil$ConvertCssToInt(cssValue, defaultValue) {
		var x = parseInt(cssValue, 10);
		return (isNaN(x) ? defaultValue : x);
	};
	$tab_DomUtil.getSizeFromCssPixelProperty = function DomUtil$GetSizeFromCssPixelProperty(element, propertyName) {
		var strValue = element.css(propertyName);
		return $tab_DomUtil.$convertCssToInt(strValue, 0);
	};
	$tab_DomUtil.$setOuterWidth = function DomUtil$SetOuterWidth(computedStyle, outerWidth, element) {
		var marginLeft = $tab_DomUtil.$convertCssToInt(computedStyle.marginLeft, 0);
		var borderLeft = $tab_DomUtil.$convertCssToInt(computedStyle.borderLeftWidth, 0);
		var paddingLeft = $tab_DomUtil.$convertCssToInt(computedStyle.paddingLeft, 0);
		var paddingRight = $tab_DomUtil.$convertCssToInt(computedStyle.paddingRight, 0);
		var borderRight = $tab_DomUtil.$convertCssToInt(computedStyle.borderRightWidth, 0);
		var marginRight = $tab_DomUtil.$convertCssToInt(computedStyle.marginRight, 0);
		var newVal = Math.max(outerWidth - marginLeft - borderLeft - paddingLeft - paddingRight - borderRight - marginRight, 0);
		element.style.width = newVal + 'px';
	};
	$tab_DomUtil.$setOuterHeight = function DomUtil$SetOuterHeight(computedStyle, outerHeight, element) {
		var marginTop = $tab_DomUtil.$convertCssToInt(computedStyle.marginTop, 0);
		var borderTop = $tab_DomUtil.$convertCssToInt(computedStyle.borderTopWidth, 0);
		var paddingTop = $tab_DomUtil.$convertCssToInt(computedStyle.paddingTop, 0);
		var paddingBottom = $tab_DomUtil.$convertCssToInt(computedStyle.paddingBottom, 0);
		var borderBottom = $tab_DomUtil.$convertCssToInt(computedStyle.borderBottomWidth, 0);
		var marginBottom = $tab_DomUtil.$convertCssToInt(computedStyle.marginBottom, 0);
		var newVal = Math.max(outerHeight - marginTop - borderTop - paddingTop - paddingBottom - borderBottom - marginBottom, 0);
		element.style.height = newVal + 'px';
	};
	$tab_DomUtil.$setMarginSizeJQ = function DomUtil$SetMarginSizeJQ(computedStyle, s, element) {
		if (s.w >= 0) {
			$tab_DomUtil.$setOuterWidth(computedStyle, s.w, element);
		}
		if (s.h >= 0) {
			$tab_DomUtil.$setOuterHeight(computedStyle, s.h, element);
		}
	};
	$tab_DomUtil.$parseZIndexProperty = function DomUtil$ParseZIndexProperty(o) {
		$tab_Param.verifyValue(o, 'o');
		var zindexProperty = o.css('z-index');
		if (_.isNumber(zindexProperty)) {
			return ss.unbox(ss.cast(zindexProperty, ss.Int32));
		}
		if (_.isString(zindexProperty)) {
			if (!ss.isNullOrEmptyString(ss.cast(zindexProperty, String)) && ss.cast(zindexProperty, String) !== 'auto' && ss.cast(zindexProperty, String) !== 'inherits') {
				return parseInt(ss.cast(zindexProperty, String), 10);
			}
		}
		return 0;
	};
	$tab_DomUtil.makeHtmlSafeId = function DomUtil$MakeHtmlSafeId(value) {
		return ss.replaceAllString(encodeURIComponent(value), '.', 'dot');
	};
	$tab_DomUtil.setSelectionRangeOnInput = function DomUtil$SetSelectionRangeOnInput(inputElement, selectionStart, selectionEnd) {
		if ($tab_BrowserSupport.get_setSelectionRange()) {
			try {
				inputElement.setSelectionRange(selectionStart, selectionEnd);
			}
			catch ($t1) {
			}
		}
	};
	$tab_DomUtil.selectAllInputText = function DomUtil$SelectAllInputText(inputElement) {
		try {
			if ($tab_BrowserSupport.get_setSelectionRange()) {
				inputElement.get(0).setSelectionRange(0, inputElement.val().length);
			}
			else {
				inputElement.select();
			}
		}
		catch ($t1) {
		}
	};
	$tab_DomUtil.setCursorPosition = function DomUtil$SetCursorPosition(input, pos) {
		if (typeof(input['createTextRange']) === 'function') {
			var rng = (input.createTextRange ? input.createTextRange() : null);
			rng.move('character', pos);
			rng.select();
			rng.scrollIntoView();
			input.focus();
		}
		else if ($tab_BrowserSupport.get_isSafari() && $tab_BrowserSupport.get_setSelectionRange()) {
			input.focus();
			input.setSelectionRange(pos, pos);
		}
		else {
			input.blur();
			input.selectionStart = input.selectionEnd = pos;
			input.focus();
		}
	};
	$tab_DomUtil.replaceSelection = function DomUtil$ReplaceSelection(input, text) {
		var oldVal = input.value;
		var prefix = oldVal.substr(0, input.selectionStart);
		var suffix = oldVal.substring(input.selectionEnd);
		var newCursorPos = input.selectionStart + text.length;
		input.value = prefix + text + suffix;
		$tab_DomUtil.setCursorPosition(input, newCursorPos);
	};
	$tab_DomUtil.setNativeTooltip = function DomUtil$SetNativeTooltip(obj, tooltipText) {
		var empty = ss.isNullOrEmptyString(tooltipText);
		if (empty) {
			obj.removeAttr('title');
		}
		else {
			obj.attr('title', tooltipText);
		}
		if (tsConfig.is_mobile) {
			obj.children('.tab-mobileTooltip').remove();
			if (!empty) {
				var tooltipDiv = $("<div class='tab-mobileTooltip'/>").text(tooltipText);
				obj.append(tooltipDiv);
			}
		}
	};
	$tab_DomUtil.isContentOverflowingY = function DomUtil$IsContentOverflowingY(obj) {
		return obj.prop('scrollHeight') > obj.prop('clientHeight');
	};
	$tab_DomUtil.nodeHasTextSelection = function DomUtil$NodeHasTextSelection(node) {
		var windowSelection = window.getSelection();
		for (var ii = windowSelection.rangeCount - 1; ii >= 0; --ii) {
			var range = windowSelection.getRangeAt(ii);
			if (ss.referenceEquals(node, range.startContainer) || node.contains(range.startContainer) || ss.referenceEquals(node, range.endContainer) || node.contains(range.endContainer)) {
				return true;
			}
		}
		return false;
	};
	$tab_DomUtil.generateUniqueId = function DomUtil$GenerateUniqueId() {
		return 'tab-ui-id-' + $tab_DomUtil.$uniqueId++;
	};
	$tab_DomUtil.getIds = function DomUtil$GetIds(collection) {
		if (ss.isNullOrUndefined(collection)) {
			return [];
		}
		return collection.map(function(index, element) {
			return element.id;
		}).get();
	};
	global.tab.DomUtil = $tab_DomUtil;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.DoubleRectXYUtil
	var $tab_DoubleRectXYUtil = function() {
	};
	$tab_DoubleRectXYUtil.__typeName = 'tab.DoubleRectXYUtil';
	$tab_DoubleRectXYUtil.isEmpty = function DoubleRectXYUtil$IsEmpty(r) {
		if (!ss.isValue(r)) {
			$tab_Log.get(r).warn('Rect should not be empty when testing IsEmpty', []);
			return true;
		}
		return r.w === 0 || r.h === 0;
	};
	$tab_DoubleRectXYUtil.isEqual = function DoubleRectXYUtil$IsEqual(r1, r2) {
		return r1.x === r2.x && r1.y === r2.y && r1.w === r2.w && r1.h === r2.h;
	};
	$tab_DoubleRectXYUtil.isNull = function DoubleRectXYUtil$IsNull(r) {
		return r.x === 0 && r.y === 0 && r.w === 0 && r.h === 0;
	};
	$tab_DoubleRectXYUtil.inRect = function DoubleRectXYUtil$InRect(r, p) {
		return p.x >= r.x && p.x < r.x + r.w && p.y >= r.y && p.y < r.y + r.h;
	};
	$tab_DoubleRectXYUtil.inRect$1 = function DoubleRectXYUtil$InRect(rx, ry, rw, rh, px, py) {
		return px >= rx && px < rx + rw && py >= ry && py < ry + rh;
	};
	$tab_DoubleRectXYUtil.intersectsWith = function DoubleRectXYUtil$IntersectsWith(r1, r2) {
		return !(r2.x + r2.w < r1.x || r2.y + r2.h < r1.y || r2.x > r1.x + r1.w || r2.y > r1.y + r1.h);
	};
	$tab_DoubleRectXYUtil.outsetRect = function DoubleRectXYUtil$OutsetRect(r, dx, dy) {
		return { x: r.x - dx, y: r.y - dy, w: r.w + dx + dx, h: r.h + dy + dy };
	};
	$tab_DoubleRectXYUtil.outsetRectInPlace = function DoubleRectXYUtil$OutsetRectInPlace(r, dx, dy) {
		r.x -= dx;
		r.y -= dy;
		r.w += 2 * dx;
		r.h += 2 * dy;
	};
	$tab_DoubleRectXYUtil.toEncompassingRectXY = function DoubleRectXYUtil$ToEncompassingRectXY(rect) {
		var minX = Math.floor(rect.x);
		var minY = Math.floor(rect.y);
		var maxX = Math.ceil(rect.x + rect.w);
		var maxY = Math.ceil(rect.y + rect.h);
		return { x: minX, y: minY, w: maxX - minX, h: maxY - minY };
	};
	global.tab.DoubleRectXYUtil = $tab_DoubleRectXYUtil;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.DoubleUtil
	var $tab_DoubleUtil = function() {
	};
	$tab_DoubleUtil.__typeName = 'tab.DoubleUtil';
	$tab_DoubleUtil.get_$log = function DoubleUtil$get_Log() {
		return $tab_Logger.lazyGetLogger($tab_DoubleUtil);
	};
	$tab_DoubleUtil.isApproximatelyEqual = function DoubleUtil$IsApproximatelyEqual(d1, d2) {
		if (Math.abs(d1 - d2) < $tab_DoubleUtil.epsilon) {
			return true;
		}
		if (d1 === 0) {
			return false;
		}
		var intermediate = d2 / d1;
		if ($tab_DoubleUtil.$lowerBound <= intermediate && intermediate <= $tab_DoubleUtil.$upperBound) {
			return true;
		}
		return false;
	};
	$tab_DoubleUtil.isApproximatelyZero = function DoubleUtil$IsApproximatelyZero(d) {
		return $tab_DoubleUtil.isApproximatelyEqual(0, d);
	};
	$tab_DoubleUtil.isLessThanAndNotApproximatelyEqual = function DoubleUtil$IsLessThanAndNotApproximatelyEqual(d1, d2) {
		return d1 < d2 && !$tab_DoubleUtil.isApproximatelyEqual(d1, d2);
	};
	$tab_DoubleUtil.isLessThanOrApproximatelyEqual = function DoubleUtil$IsLessThanOrApproximatelyEqual(d1, d2) {
		return d1 < d2 || $tab_DoubleUtil.isApproximatelyEqual(d1, d2);
	};
	$tab_DoubleUtil.isGreaterThanAndNotApproximatelyEqual = function DoubleUtil$IsGreaterThanAndNotApproximatelyEqual(d1, d2) {
		return d1 > d2 && !$tab_DoubleUtil.isApproximatelyEqual(d1, d2);
	};
	$tab_DoubleUtil.isGreaterThanOrApproximatelyEqual = function DoubleUtil$IsGreaterThanOrApproximatelyEqual(d1, d2) {
		return d1 > d2 || $tab_DoubleUtil.isApproximatelyEqual(d1, d2);
	};
	$tab_DoubleUtil.sigFigs = function DoubleUtil$SigFigs(n, numSigFigs) {
		if (n === 0 || numSigFigs === 0) {
			$tab_DoubleUtil.get_$log().warn('Neither the input nor the number of significant figures can be 0', []);
			return n;
		}
		var mult = Math.pow(10, numSigFigs - Math.floor(Math.log(Math.abs(n)) / Math.LN10) - 1);
		return ss.round(n * mult) / mult;
	};
	$tab_DoubleUtil.roundToInt = function DoubleUtil$RoundToInt(value) {
		return ss.round(value);
	};
	$tab_DoubleUtil.parseDouble = function DoubleUtil$ParseDouble(s) {
		var val = parseFloat(s);
		return (isFinite(val) ? val : null);
	};
	$tab_DoubleUtil.isValidDouble = function DoubleUtil$IsValidDouble(s) {
		if (ss.isNullOrEmptyString(s)) {
			return false;
		}
		return $.isNumeric(s);
	};
	$tab_DoubleUtil.parse64BitInteger = function DoubleUtil$Parse64BitInteger(s) {
		var parsed = {};
		if (!ss.Int32.tryParse(s, parsed)) {
			return null;
		}
		var validDouble = $tab_DoubleUtil.parseValidDouble(s);
		if (ss.Nullable$1.gt(validDouble, $tab_DoubleUtil.$longMaxValue) || ss.Nullable$1.lt(validDouble, $tab_DoubleUtil.$longMinValue)) {
			return null;
		}
		return parsed.$;
	};
	$tab_DoubleUtil.isValid32BitInteger = function DoubleUtil$IsValid32BitInteger(s) {
		if (ss.isNullOrEmptyString(s)) {
			return false;
		}
		var parsed = $tab_DoubleUtil.parse64BitInteger(s);
		if (ss.isNullOrUndefined(parsed)) {
			return false;
		}
		return ss.Nullable$1.le(parsed, 2147483647) && ss.Nullable$1.ge(parsed, -2147483648);
	};
	$tab_DoubleUtil.isValid64BitInteger = function DoubleUtil$IsValid64BitInteger(s) {
		if (ss.isNullOrEmptyString(s)) {
			return false;
		}
		var parsed = $tab_DoubleUtil.parse64BitInteger(s);
		if (ss.isNullOrUndefined(parsed)) {
			return false;
		}
		return true;
	};
	$tab_DoubleUtil.parseValidDouble = function DoubleUtil$ParseValidDouble(s) {
		if (ss.isNullOrEmptyString(s)) {
			return Number.NaN;
		}
		if (!$tab_DoubleUtil.isValidDouble(s)) {
			return Number.NaN;
		}
		return parseFloat(s);
	};
	$tab_DoubleUtil.multiplyBy100 = function DoubleUtil$MultiplyBy100(num) {
		return num * 1000 / 10;
	};
	$tab_DoubleUtil.truncateTwoDecimalPlaces = function DoubleUtil$TruncateTwoDecimalPlaces(num) {
		return ss.Int32.trunc($tab_DoubleUtil.multiplyBy100(num)) / 100;
	};
	global.tab.DoubleUtil = $tab_DoubleUtil;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.ErrorTrace
	var $tab_ErrorTrace = function() {
	};
	$tab_ErrorTrace.__typeName = 'tab.ErrorTrace';
	$tab_ErrorTrace.install = function ErrorTrace$Install() {
		var enabled = tsConfig.clientErrorReportingLevel;
		if (!ss.isNullOrEmptyString(enabled)) {
			if (enabled === 'debug') {
				$tab_ErrorTrace.$getStack = true;
			}
		}
		$tab_ErrorTrace.$extendToAsynchronousCallback('setTimeout');
		$tab_ErrorTrace.$extendToAsynchronousCallback('setInterval');
		$tab_ErrorTrace.installGlobalHandler();
	};
	$tab_ErrorTrace.wrap = function ErrorTrace$Wrap(func) {
		return function() {
			try {
				return func.apply(this, Array.prototype.slice.call(arguments));
			}
			catch ($t1) {
				var e = ss.Exception.wrap($t1);
				$tab_ErrorTrace.report(e, false);
				throw $t1;
			}
		};
	};
	$tab_ErrorTrace.$extendToAsynchronousCallback = function ErrorTrace$ExtendToAsynchronousCallback(functionName) {
		var originalFunction = window[functionName];
		var callback = function() {
			var args = ss.arrayClone(Array.prototype.slice.call(arguments));
			var originalCallback = args[0];
			if (ss.isInstanceOfType(originalCallback, Function)) {
				args[0] = $tab_ErrorTrace.wrap(ss.cast(originalCallback, Function));
			}
			return originalFunction.apply(this, args);
		};
		window[functionName] = callback;
	};
	$tab_ErrorTrace.windowOnError = function ErrorTrace$WindowOnError(message, url, lineNo, column, error) {
		var stack;
		if (ss.isValue($tab_ErrorTrace.$lastExceptionStack)) {
			$tab_ErrorTrace.$augmentStackTraceWithInitialElement($tab_ErrorTrace.$lastExceptionStack, url, lineNo, message);
			stack = $tab_ErrorTrace.$lastExceptionStack;
			$tab_ErrorTrace.$lastExceptionStack = null;
			$tab_ErrorTrace.$lastException = null;
		}
		else {
			var location = new $tab_StackLocation(url, lineNo);
			location.functionName = $tab_ErrorTrace.$guessFunctionName(location);
			location.context = $tab_ErrorTrace.$gatherContext(location);
			stack = new $tab_StackTrace('onError', message);
			stack.name = 'window.onError';
			stack.locations = [location];
		}
		$tab_ErrorTrace.$queuedTraces.push(stack);
		if (ss.isValue($tab_ErrorTrace.$oldOnErrorHandler)) {
			$tab_ErrorTrace.$oldOnErrorHandler.apply(this, Array.prototype.slice.call(arguments));
		}
		return false;
	};
	$tab_ErrorTrace.$augmentStackTraceWithInitialElement = function ErrorTrace$AugmentStackTraceWithInitialElement(stack, url, lineNo, message) {
		var initial = new $tab_StackLocation(url, lineNo);
		if (ss.isValue(initial.url) && ss.isValue(initial.lineNo)) {
			stack.isIncomplete = false;
			if (ss.isNullOrUndefined(initial.functionName)) {
				initial.functionName = $tab_ErrorTrace.$guessFunctionName(initial);
			}
			if (ss.isNullOrUndefined(initial.context)) {
				initial.context = $tab_ErrorTrace.$gatherContext(initial);
			}
			var reference = message.match(new RegExp(" '([^']+)' "));
			if (ss.isValue(reference) && reference.length > 1) {
				initial.columnNo = $tab_ErrorTrace.$findSourceInLine(reference[1], initial);
			}
			if (ss.isValue(stack.locations) && stack.locations.length > 0) {
				var top = stack.locations[0];
				if (ss.referenceEquals(top.url, initial.url)) {
					if (top.lineNo === initial.lineNo) {
						return;
					}
					else if (ss.isNullOrUndefined(top.lineNo) && ss.referenceEquals(top.functionName, initial.functionName)) {
						top.lineNo = initial.lineNo;
						top.context = initial.context;
						return;
					}
				}
			}
			stack.locations.unshift(initial);
			stack.isPartial = true;
			return;
		}
		else {
			stack.isIncomplete = true;
		}
		return;
	};
	$tab_ErrorTrace.$loadSource = function ErrorTrace$LoadSource(url) {
		if (!$tab_ErrorTrace.$remoteFetching) {
			return '';
		}
		try {
			var srcRequest = new XMLHttpRequest();
			srcRequest.open('GET', url, false);
			srcRequest.send('');
			return srcRequest.responseText;
		}
		catch ($t1) {
			return '';
		}
	};
	$tab_ErrorTrace.$getSource = function ErrorTrace$GetSource(url) {
		if (ss.isNullOrUndefined(url)) {
			return [];
		}
		if (!ss.keyExists($tab_ErrorTrace.$sourceCache, url)) {
			var source = '';
			if (url.indexOf(document.domain) > -1) {
				source = $tab_ErrorTrace.$loadSource(url);
			}
			$tab_ErrorTrace.$sourceCache[url] = (ss.isNullOrEmptyString(source) ? [] : source.split('\n'));
		}
		return $tab_ErrorTrace.$sourceCache[url];
	};
	$tab_ErrorTrace.$findSourceInLine = function ErrorTrace$FindSourceInLine(fragment, location) {
		var source = $tab_ErrorTrace.$getSource(location.url);
		var re = new RegExp('\\b' + $tab_ErrorTrace.$escapeRegexp(fragment) + '\\b');
		if (ss.isValue(source) && source.length > location.lineNo) {
			var matches = re.exec(source[location.lineNo]);
			if (ss.isValue(matches)) {
				return matches.index;
			}
		}
		return -1;
	};
	$tab_ErrorTrace.$guessFunctionName = function ErrorTrace$GuessFunctionName(location) {
		var functionArgNames = new RegExp('function ([^(]*)\\(([^)]*)\\)');
		var guessFunction = new RegExp('[\'"]?([0-9A-Za-z$_]+)[\'"]?\\s*[:=]\\s*(function|eval|new Function)');
		var line = '';
		var maxLines = 10;
		var source = $tab_ErrorTrace.$getSource(location.url);
		if (source.length === 0) {
			return $tab_ErrorTrace.$unknownFunctionName;
		}
		for (var i = 0; i < maxLines; i++) {
			line = source[location.lineNo - 1] + line;
			if (!ss.isNullOrEmptyString(line)) {
				var matches = guessFunction.exec(line);
				if (ss.isValue(matches) && matches.length > 0) {
					return matches[1];
				}
				matches = functionArgNames.exec(line);
				if (ss.isValue(matches) && matches.length > 0) {
					return matches[1];
				}
			}
		}
		return $tab_ErrorTrace.$unknownFunctionName;
	};
	$tab_ErrorTrace.$gatherContext = function ErrorTrace$GatherContext(location) {
		var source = $tab_ErrorTrace.$getSource(location.url);
		if (ss.isNullOrUndefined(source) || source.length === 0) {
			return null;
		}
		var context = [];
		var LinesOfContext = 3;
		var linesBefore = Math.floor(1.5);
		var linesAfter = linesBefore + 1;
		var start = Math.max(0, location.lineNo - linesBefore - 1);
		var end = Math.min(source.length, location.lineNo + linesAfter - 1);
		location.lineNo -= 1;
		for (var i = start; i < end; i++) {
			if (!ss.isNullOrEmptyString(source[i])) {
				context.push(source[i]);
			}
		}
		return context;
	};
	$tab_ErrorTrace.$escapeRegexp = function ErrorTrace$EscapeRegexp(input) {
		return input.replace(new RegExp('[\\-\\[\\]{}()*+?.,\\\\\\^$|#]', 'g'), '\\\\$&');
	};
	$tab_ErrorTrace.$getStackTraceFor = function ErrorTrace$GetStackTraceFor(e) {
		var defaultTrace = new $tab_StackTrace('stack', e.get_message());
		defaultTrace.name = ss.cast(e.name, String);
		if ($tab_ErrorTrace.$getStack) {
			var stack = null;
			try {
				stack = $tab_ErrorTrace.$computeStackTraceFromStackTraceProp(e);
			}
			catch ($t1) {
				var inner = ss.Exception.wrap($t1);
				if ($tab_ErrorTrace.$shouldReThrow) {
					throw inner;
				}
			}
			if (ss.isValue(stack)) {
				return stack;
			}
		}
		else {
			return defaultTrace;
		}
		defaultTrace.traceMode = 'failed';
		return defaultTrace;
	};
	$tab_ErrorTrace.$computeStackTraceFromStackTraceProp = function ErrorTrace$ComputeStackTraceFromStackTraceProp(e) {
		var locations = $tab_ErrorTrace.$parseException(e);
		var stack = new $tab_StackTrace('stack', e.get_message());
		stack.name = ss.cast(e.name, String);
		stack.locations = locations;
		return stack;
	};
	$tab_ErrorTrace.$parseException = function ErrorTrace$ParseException(e) {
		var err;
		if (ss.isValue(e.get_innerException())) {
			err = ss.cast(e.get_innerException().error, Error);
		}
		else {
			err = ss.cast(e._error, Error);
		}
		if (ss.isValue(err.stack) && ss.isValue(err.stack.match($tab_ErrorTrace.$chromeIEStackRegexp))) {
			return $tab_ErrorTrace.$parseChromeOrIE(err);
		}
		if (ss.isValue(err.stack)) {
			return $tab_ErrorTrace.$parseFFOrSafari(err);
		}
		return null;
	};
	$tab_ErrorTrace.$parseChromeOrIE = function ErrorTrace$ParseChromeOrIE(error) {
		var filtered = error.stack.split(String.fromCharCode(10)).filter(function(line) {
			return ss.isValue(line.match($tab_ErrorTrace.$chromeIEStackRegexp));
		});
		return filtered.map(function(line1) {
			if (line1.indexOf('(eval ') > -1) {
				line1 = ss.replaceAllString(line1, 'eval code', 'eval').replace($tab_ErrorTrace.$throwAwayEvalRegexp, '');
			}
			var tokens = line1.replace(new RegExp('^\\s+'), '').replace(new RegExp('\\(eval code'), '(').split(new RegExp('\\s+')).slice(1);
			var locationParts = $tab_ErrorTrace.$extractLocation(tokens.pop());
			var functionName = ss.coalesce(tokens.join(' '), 'undefined');
			var fileName = ((ss.indexOf(['eval', '<anonymous>'], locationParts[0]) > -1) ? 'undefined' : locationParts[0]);
			var lineNum = parseInt(locationParts[1]);
			var colNum = parseInt(locationParts[2]);
			var $t1 = new $tab_StackLocation(fileName, lineNum);
			$t1.functionName = functionName;
			$t1.columnNo = colNum;
			$t1.context = [line1];
			var stackFrame = $t1;
			stackFrame.context = $tab_ErrorTrace.$gatherContext(stackFrame);
			return stackFrame;
		});
	};
	$tab_ErrorTrace.$parseFFOrSafari = function ErrorTrace$ParseFFOrSafari(error) {
		var filtered = error.stack.split(String.fromCharCode(10)).filter(function(line) {
			return ss.isNullOrUndefined(line.match($tab_ErrorTrace.$safariNativeCodeRegexp));
		});
		return filtered.map(function(line1) {
			if (line1.indexOf(' > eval') > -1) {
				line1 = line1.replace(new RegExp(' line (\\d+)(?: > eval line \\d+)* > eval\\:\\d+\\:\\d+', 'g'), ':$1');
			}
			if (line1.indexOf('@') === -1 && line1.indexOf(':') === -1) {
				return new $tab_StackLocation(line1, -1);
			}
			else {
				var tokens = line1.split('@');
				var locationParts = $tab_ErrorTrace.$extractLocation(tokens.pop());
				var functionName = ss.coalesce(tokens.join('@'), 'undefined');
				var fileName = locationParts[0];
				var lineNum = parseInt(locationParts[1]);
				var colNum = parseInt(locationParts[2]);
				var $t1 = new $tab_StackLocation(fileName, lineNum);
				$t1.functionName = functionName;
				$t1.columnNo = colNum;
				$t1.context = [line1];
				var stackFrame = $t1;
				stackFrame.context = $tab_ErrorTrace.$gatherContext(stackFrame);
				return stackFrame;
			}
		});
	};
	$tab_ErrorTrace.$extractLocation = function ErrorTrace$ExtractLocation(urlLike) {
		if (urlLike.indexOf(String.fromCharCode(58)) === -1) {
			return [urlLike];
		}
		var parts = $tab_ErrorTrace.$extractLocationRegexp.exec(urlLike.replace($tab_ErrorTrace.$extractLocationUrlLikeRegexp, ''));
		return [parts[1], ss.coalesce(parts[2], 'undefined'), ss.coalesce(parts[3], 'undefined')];
	};
	$tab_ErrorTrace.hasTraces = function ErrorTrace$HasTraces() {
		return $tab_ErrorTrace.$queuedTraces.length > 0;
	};
	$tab_ErrorTrace.dequeueTraces = function ErrorTrace$DequeueTraces() {
		var traces = $tab_ErrorTrace.$queuedTraces;
		$tab_ErrorTrace.$queuedTraces = [];
		return traces;
	};
	$tab_ErrorTrace.installGlobalHandler = function ErrorTrace$InstallGlobalHandler() {
		if ($tab_ErrorTrace.$onErrorHandlerInstalled || !$tab_ErrorTrace.$collectWindowErrors) {
			return;
		}
		$tab_ErrorTrace.$oldOnErrorHandler = window.onerror;
		window.onerror = $tab_ErrorTrace.windowOnError;
		$tab_ErrorTrace.$onErrorHandlerInstalled = true;
	};
	$tab_ErrorTrace.report = function ErrorTrace$Report(e, rethrow) {
		if (ss.isNullOrUndefined(rethrow)) {
			rethrow = true;
		}
		if (ss.isValue($tab_ErrorTrace.$lastExceptionStack)) {
			if (ss.referenceEquals($tab_ErrorTrace.$lastException, e)) {
				return;
			}
			else {
				var s = $tab_ErrorTrace.$lastExceptionStack;
				$tab_ErrorTrace.$lastExceptionStack = null;
				$tab_ErrorTrace.$lastException = null;
				$tab_ErrorTrace.$queuedTraces.push(s);
			}
		}
		var stack = $tab_ErrorTrace.$getStackTraceFor(e);
		$tab_ErrorTrace.$lastExceptionStack = stack;
		$tab_ErrorTrace.$lastException = e;
		window.setTimeout(function() {
			if (ss.referenceEquals($tab_ErrorTrace.$lastException, e)) {
				$tab_ErrorTrace.$lastExceptionStack = null;
				$tab_ErrorTrace.$lastException = null;
				$tab_ErrorTrace.$queuedTraces.push(stack);
			}
		}, (stack.isIncomplete ? 2000 : 0));
		if (rethrow) {
			throw e;
		}
	};
	global.tab.ErrorTrace = $tab_ErrorTrace;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.FeatureFlags
	var $tab_FeatureFlags = function() {
	};
	$tab_FeatureFlags.__typeName = 'tab.FeatureFlags';
	$tab_FeatureFlags.isEnabled = function FeatureFlags$IsEnabled(featureFlagId) {
		if (ss.isValue(tsConfig.features) && ss.keyExists(tsConfig.features, featureFlagId)) {
			return tsConfig.features[featureFlagId];
		}
		if (ss.isValue($tab_FeatureFlags.$defaultValues) && ss.keyExists($tab_FeatureFlags.$defaultValues, featureFlagId)) {
			return $tab_FeatureFlags.$defaultValues[featureFlagId];
		}
		return false;
	};
	$tab_FeatureFlags.setDefaults = function FeatureFlags$SetDefaults(defaults) {
		$tab_FeatureFlags.$defaultValues = defaults;
	};
	global.tab.FeatureFlags = $tab_FeatureFlags;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.FeatureParam
	var $tab_FeatureParam = function() {
	};
	$tab_FeatureParam.__typeName = 'tab.FeatureParam';
	global.tab.FeatureParam = $tab_FeatureParam;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.FeatureParamsLookup
	var $tab_FeatureParamsLookup = function() {
	};
	$tab_FeatureParamsLookup.__typeName = 'tab.FeatureParamsLookup';
	$tab_FeatureParamsLookup.getBool = function FeatureParamsLookup$GetBool(param) {
		if (ss.keyExists($tab_FeatureParamsLookup.$booleanLookUp, param)) {
			return $tab_FeatureParamsLookup.$booleanLookUp[param] || false;
		}
		$tab_FeatureParamsLookup.$logger.error('Requested feature param does not exist in the bool lookup table: %s.', [param.toString()]);
		return false;
	};
	$tab_FeatureParamsLookup.getFloat = function FeatureParamsLookup$GetFloat(param) {
		if (ss.keyExists($tab_FeatureParamsLookup.$floatLookUp, param)) {
			return $tab_FeatureParamsLookup.$floatLookUp[param];
		}
		$tab_FeatureParamsLookup.$logger.error('Requested feature param param not exist in the float lookup table: %s.', [param.toString()]);
		return null;
	};
	$tab_FeatureParamsLookup.getInt = function FeatureParamsLookup$GetInt(param) {
		if (ss.keyExists($tab_FeatureParamsLookup.$intLookUp, param)) {
			return $tab_FeatureParamsLookup.$intLookUp[param];
		}
		$tab_FeatureParamsLookup.$logger.error('Requested feature param does not exist in the int lookup table: %s.', [param.toString()]);
		return null;
	};
	$tab_FeatureParamsLookup.getString = function FeatureParamsLookup$GetString(param) {
		if (ss.keyExists($tab_FeatureParamsLookup.$stringLookUp, param)) {
			return $tab_FeatureParamsLookup.$stringLookUp[param];
		}
		$tab_FeatureParamsLookup.$logger.error('Requested feature param does not exist in the string lookup table: %s.', [param.toString()]);
		return null;
	};
	$tab_FeatureParamsLookup.$registerBooleanFeatureParam = function FeatureParamsLookup$RegisterBooleanFeatureParam(urlParam, paramEnum, defaultValue) {
		$tab_FeatureParamsLookup.$booleanParams.push(paramEnum);
		$tab_FeatureParamsLookup.$stringToEnumLookup[urlParam] = paramEnum;
		$tab_FeatureParamsLookup.$booleanLookUp[paramEnum] = defaultValue;
	};
	$tab_FeatureParamsLookup.$registerIntFeatureParam = function FeatureParamsLookup$RegisterIntFeatureParam(urlParam, paramEnum) {
		$tab_FeatureParamsLookup.$intParams.push(paramEnum);
		$tab_FeatureParamsLookup.$stringToEnumLookup[urlParam] = paramEnum;
		$tab_FeatureParamsLookup.$intLookUp[paramEnum] = null;
	};
	$tab_FeatureParamsLookup.$registerStringFeatureParam = function FeatureParamsLookup$RegisterStringFeatureParam(urlParam, paramEnum) {
		$tab_FeatureParamsLookup.$stringParams.push(paramEnum);
		$tab_FeatureParamsLookup.$stringToEnumLookup[urlParam] = paramEnum;
		$tab_FeatureParamsLookup.$stringLookUp[paramEnum] = null;
	};
	$tab_FeatureParamsLookup.$parseFeatureParamsFromUrl = function FeatureParamsLookup$ParseFeatureParamsFromUrl() {
		var queryParams = $tab_MiscUtil.getUriQueryParameters(window.self.location.search);
		var $t1 = new ss.ObjectEnumerator(queryParams);
		try {
			while ($t1.moveNext()) {
				var keyValue = $t1.current();
				var key = keyValue.key.toLowerCase();
				var param = 0;
				if (ss.keyExists($tab_FeatureParamsLookup.$stringToEnumLookup, key)) {
					param = $tab_FeatureParamsLookup.$stringToEnumLookup[key];
				}
				else {
					continue;
				}
				if (keyValue.value.length > 0) {
					var strValue = keyValue.value[0];
					if (ss.contains($tab_FeatureParamsLookup.$booleanParams, param)) {
						var value = strValue.toLowerCase() === 'true';
						$tab_FeatureParamsLookup.$booleanLookUp[param] = value;
					}
					else if (ss.contains($tab_FeatureParamsLookup.$floatParams, param)) {
						var value1 = parseFloat(strValue);
						$tab_FeatureParamsLookup.$floatLookUp[param] = value1;
					}
					else if (ss.contains($tab_FeatureParamsLookup.$intParams, param)) {
						var value2 = parseInt(strValue);
						$tab_FeatureParamsLookup.$intLookUp[param] = value2;
					}
					else if (ss.contains($tab_FeatureParamsLookup.$stringParams, param)) {
						$tab_FeatureParamsLookup.$stringLookUp[param] = strValue;
					}
					else {
						$tab_FeatureParamsLookup.$logger.warn('Unknown type for param: %s.', [key]);
						continue;
					}
				}
				else {
					$tab_FeatureParamsLookup.$logger.warn('No values found for param: %s.', [key]);
					continue;
				}
			}
		}
		finally {
			$t1.dispose();
		}
	};
	global.tab.FeatureParamsLookup = $tab_FeatureParamsLookup;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.FullscreenUtil
	var $tab_FullscreenUtil = function() {
	};
	$tab_FullscreenUtil.__typeName = 'tab.FullscreenUtil';
	$tab_FullscreenUtil.add_fullscreenStateChanged = function FullscreenUtil$add_FullscreenStateChanged(value) {
		$tab_FullscreenUtil.$1$FullscreenStateChangedField = ss.delegateCombine($tab_FullscreenUtil.$1$FullscreenStateChangedField, value);
	};
	$tab_FullscreenUtil.remove_fullscreenStateChanged = function FullscreenUtil$remove_FullscreenStateChanged(value) {
		$tab_FullscreenUtil.$1$FullscreenStateChangedField = ss.delegateRemove($tab_FullscreenUtil.$1$FullscreenStateChangedField, value);
	};
	$tab_FullscreenUtil.get_$fullscreenChangeEventName = function FullscreenUtil$get_FullscreenChangeEventName() {
		return $tab_FullscreenUtil.$onfullscreenchangeProperty.substring(2);
	};
	$tab_FullscreenUtil.get_fullscreenEnabled = function FullscreenUtil$get_FullscreenEnabled() {
		if (ss.isNullOrUndefined($tab_FullscreenUtil.$fullscreenEnabledProperty)) {
			return false;
		}
		return !!document[$tab_FullscreenUtil.$fullscreenEnabledProperty];
	};
	$tab_FullscreenUtil.get_fullscreenElement = function FullscreenUtil$get_FullscreenElement() {
		if (ss.isNullOrUndefined($tab_FullscreenUtil.$fullscreenElementProperty)) {
			return null;
		}
		return ss.cast(document[$tab_FullscreenUtil.$fullscreenElementProperty], HTMLElement);
	};
	$tab_FullscreenUtil.get_inFullscreenMode = function FullscreenUtil$get_InFullscreenMode() {
		return ss.isValue($tab_FullscreenUtil.get_fullscreenElement());
	};
	$tab_FullscreenUtil.$findFirstAvailableProperty = function FullscreenUtil$FindFirstAvailableProperty(obj, candidates) {
		for (var $t1 = 0; $t1 < candidates.length; $t1++) {
			var property = candidates[$t1];
			if (property in obj || property.toLowerCase() in obj) {
				return property;
			}
		}
		return null;
	};
	$tab_FullscreenUtil.exitFullscreen = function FullscreenUtil$ExitFullscreen() {
		if (ss.isNullOrUndefined($tab_FullscreenUtil.$exitFullscreenProperty)) {
			return;
		}
		document[$tab_FullscreenUtil.$exitFullscreenProperty]();
	};
	$tab_FullscreenUtil.requestFullscreen = function FullscreenUtil$RequestFullscreen(element) {
		if (ss.isNullOrUndefined($tab_FullscreenUtil.$requestFullscreenProperty)) {
			return;
		}
		element[$tab_FullscreenUtil.$requestFullscreenProperty]();
	};
	$tab_FullscreenUtil.$handleFullscreenChange = function FullscreenUtil$HandleFullscreenChange(e) {
		document.documentElement.classList.toggle('fullscreen', $tab_FullscreenUtil.get_inFullscreenMode());
		window.setTimeout(function() {
			if (!ss.staticEquals($tab_FullscreenUtil.$1$FullscreenStateChangedField, null)) {
				$tab_FullscreenUtil.$1$FullscreenStateChangedField();
			}
		});
	};
	$tab_FullscreenUtil.centeringContainerOffset = function FullscreenUtil$CenteringContainerOffset() {
		if (!$tab_FullscreenUtil.get_inFullscreenMode()) {
			return 0;
		}
		var container = $($tab_FullscreenUtil.$centeringContainerSelector);
		return container.offset().top;
	};
	global.tab.FullscreenUtil = $tab_FullscreenUtil;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.HistoryUtil
	var $tab_HistoryUtil = function() {
	};
	$tab_HistoryUtil.__typeName = 'tab.HistoryUtil';
	$tab_HistoryUtil.pushState = function HistoryUtil$PushState(window, state, title, url) {
		if ($tab_BrowserSupport.get_historyApi()) {
			try {
				window.history.pushState(state, title, url);
			}
			catch ($t1) {
				var e = ss.Exception.wrap($t1);
				$tab_Logger.getLogger($tab_HistoryUtil).warn('Error calling history.pushState', [e]);
			}
		}
	};
	$tab_HistoryUtil.replaceState = function HistoryUtil$ReplaceState(window, state, title, url) {
		if ($tab_BrowserSupport.get_historyApi()) {
			try {
				window.history.replaceState(state, title, url);
			}
			catch ($t1) {
				var e = ss.Exception.wrap($t1);
				$tab_Logger.getLogger($tab_HistoryUtil).warn('Error calling history.replaceState', [e]);
			}
		}
	};
	global.tab.HistoryUtil = $tab_HistoryUtil;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.HttpResponseCodes
	var $tab_HttpResponseCodes = function() {
	};
	$tab_HttpResponseCodes.__typeName = 'tab.HttpResponseCodes';
	global.tab.HttpResponseCodes = $tab_HttpResponseCodes;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.IAppendableView
	var $tab_IAppendableView = function() {
	};
	$tab_IAppendableView.__typeName = 'tab.IAppendableView';
	global.tab.IAppendableView = $tab_IAppendableView;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.IBrowserViewport
	var $tab_IBrowserViewport = function() {
	};
	$tab_IBrowserViewport.__typeName = 'tab.IBrowserViewport';
	global.tab.IBrowserViewport = $tab_IBrowserViewport;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.ICommonDialogProvider
	var $tab_ICommonDialogProvider = function() {
	};
	$tab_ICommonDialogProvider.__typeName = 'tab.ICommonDialogProvider';
	global.tab.ICommonDialogProvider = $tab_ICommonDialogProvider;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.ILogAppender
	var $tab_ILogAppender = function() {
	};
	$tab_ILogAppender.__typeName = 'tab.ILogAppender';
	global.tab.ILogAppender = $tab_ILogAppender;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.IntegerRange
	var $tab_IntegerRange = function(from, to) {
		this.$from = 0;
		this.$to = 0;
		this.$from = from;
		this.$to = to;
	};
	$tab_IntegerRange.__typeName = 'tab.IntegerRange';
	$tab_IntegerRange.itemToTileRange = function IntegerRange$ItemToTileRange(itemRange, tileSize) {
		var tileRange = new $tab_IntegerRange(0, 0);
		tileRange.set_from(Math.floor(itemRange.get_from() / tileSize));
		tileRange.set_to(Math.floor(itemRange.get_to() / tileSize));
		return tileRange;
	};
	$tab_IntegerRange.pixelToItemRange = function IntegerRange$PixelToItemRange(pixelRange, itemHeight) {
		var itemRange = new $tab_IntegerRange(0, 0);
		itemRange.set_from(Math.floor(pixelRange.get_from() / itemHeight));
		itemRange.set_to(Math.floor(pixelRange.get_to() / itemHeight));
		return itemRange;
	};
	$tab_IntegerRange.pixelToTileRange = function IntegerRange$PixelToTileRange(pixelRange, itemHeight, tileSize) {
		return $tab_IntegerRange.itemToTileRange($tab_IntegerRange.pixelToItemRange(pixelRange, itemHeight), tileSize);
	};
	$tab_IntegerRange.isEqual = function IntegerRange$IsEqual(range1, range2) {
		return ss.isValue(range1) && ss.isValue(range2) && range1.get_to() === range2.get_to() && range1.get_from() === range2.get_from();
	};
	$tab_IntegerRange.union = function IntegerRange$Union(range1, range2) {
		if (ss.isNullOrUndefined(range1)) {
			return range2;
		}
		if (ss.isNullOrUndefined(range2)) {
			return range1;
		}
		var combinedRange = new $tab_IntegerRange(0, 0);
		combinedRange.set_from(Math.min(range1.get_from(), range2.get_from()));
		combinedRange.set_to(Math.max(range1.get_to(), range2.get_to()));
		return combinedRange;
	};
	global.tab.IntegerRange = $tab_IntegerRange;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.IView
	var $tab_IView$1 = function(TViewModel) {
		var $type = function() {
		};
		ss.registerGenericInterfaceInstance($type, $tab_IView$1, [TViewModel], { get_viewModel: null, get_rootElement: null }, function() {
			return [ss.IDisposable, $tab_IAppendableView];
		});
		ss.setMetadata($type, { variance: [1] });
		return $type;
	};
	$tab_IView$1.__typeName = 'tab.IView$1';
	ss.initGenericInterface($tab_IView$1, $asm, 1);
	global.tab.IView$1 = $tab_IView$1;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.IViewModel
	var $tab_IViewModel = function() {
	};
	$tab_IViewModel.__typeName = 'tab.IViewModel';
	global.tab.IViewModel = $tab_IViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.IWidget
	var $tab_IWidget = function() {
	};
	$tab_IWidget.__typeName = 'tab.IWidget';
	global.tab.IWidget = $tab_IWidget;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.JsMapPolyfill
	var $tab_JsMapPolyfill = function() {
		$tab_JsSetPolyfillImpl.call(this);
	};
	$tab_JsMapPolyfill.__typeName = 'tab.JsMapPolyfill';
	global.tab.JsMapPolyfill = $tab_JsMapPolyfill;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.JsSetPolyfillImpl
	var $tab_JsSetPolyfillImpl = function() {
		this.store = {};
		this.size = 0;
	};
	$tab_JsSetPolyfillImpl.__typeName = 'tab.JsSetPolyfillImpl';
	global.tab.JsSetPolyfillImpl = $tab_JsSetPolyfillImpl;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.Log
	var $tab_Log = function() {
	};
	$tab_Log.__typeName = 'tab.Log';
	$tab_Log.get = function Log$Get(o) {
		return $tab_Logger.lazyGetLogger(ss.getInstanceType(o));
	};
	global.tab.Log = $tab_Log;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.Logger
	var $tab_Logger = function(name) {
		this.$name = null;
		this.$name = name;
	};
	$tab_Logger.__typeName = 'tab.Logger';
	$tab_Logger.get_globalLog = function Logger$get_GlobalLog() {
		return $tab_Logger.global;
	};
	$tab_Logger.get_$appenders = function Logger$get_Appenders() {
		return ss.cast($tab_MiscUtil.lazyInitStaticField($tab_Logger, 'appenders', function() {
			return [];
		}), Array);
	};
	$tab_Logger.get_$filters = function Logger$get_Filters() {
		return ss.cast($tab_MiscUtil.lazyInitStaticField($tab_Logger, 'filters', function() {
			return [];
		}), Array);
	};
	$tab_Logger.get_$nullLog = function Logger$get_NullLog() {
		return ss.cast($tab_MiscUtil.lazyInitStaticField($tab_Logger, 'nullLog', function() {
			return new $tab_Logger('');
		}), $tab_Logger);
	};
	$tab_Logger.clearFilters = function Logger$ClearFilters() {
		var $t1 = $tab_Logger.get_$appenders();
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var logAppender = $t1[$t2];
			logAppender.clearFilters();
		}
		ss.clear($tab_Logger.get_$filters());
	};
	$tab_Logger.filterByLogger = function Logger$FilterByLogger(validLogger, minLogLevel) {
		minLogLevel = minLogLevel || 0;
		$tab_Logger.$addFilter(function(l, ll) {
			return ss.referenceEquals(l, validLogger) && ll >= minLogLevel;
		});
	};
	$tab_Logger.filterByType = function Logger$FilterByType(t, minLogLevel) {
		minLogLevel = minLogLevel || 0;
		$tab_Logger.$addFilter(function(l, ll) {
			return ll >= minLogLevel && ss.referenceEquals(l.get_name(), ss.getTypeName(t));
		});
	};
	$tab_Logger.filterByName = function Logger$FilterByName(namePattern, minLogLevel) {
		minLogLevel = minLogLevel || 0;
		var regex = new RegExp(namePattern, 'i');
		$tab_Logger.$addFilter(function(l, ll) {
			return ll >= minLogLevel && ss.isValue(l.get_name().match(regex));
		});
	};
	$tab_Logger.clearAppenders = function Logger$ClearAppenders() {
		ss.clear($tab_Logger.get_$appenders());
	};
	$tab_Logger.addAppender = function Logger$AddAppender(appender) {
		var $t1 = $tab_Logger.get_$filters();
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var filter = $t1[$t2];
			appender.addFilter(filter);
		}
		$tab_Logger.get_$appenders().push(appender);
	};
	$tab_Logger.removeAppender = function Logger$RemoveAppender(appender) {
		ss.remove($tab_Logger.get_$appenders(), appender);
	};
	$tab_Logger.lazyGetLogger = function Logger$LazyGetLogger(t) {
		return $tab_MiscUtil.lazyInitStaticField(t, '_logger', function() {
			return $tab_Logger.getLogger(t);
		});
	};
	$tab_Logger.getLogger = function Logger$GetLogger(t, ll) {
		var l = $tab_Logger.getLoggerWithName(ss.getTypeName(t));
		if (ss.isValue(ll)) {
			$tab_Logger.filterByLogger(l, ll);
		}
		return l;
	};
	$tab_Logger.getLoggerWithName = function Logger$GetLoggerWithName(name) {
		return new $tab_Logger(name);
	};
	$tab_Logger.$setupUrlFilters = function Logger$SetupUrlFilters() {
		var queryParams = $tab_MiscUtil.getUriQueryParameters(window.self.location.search);
		if (!ss.keyExists(queryParams, $tab_Logger.$logQueryParam)) {
			return;
		}
		$tab_Logger.clearFilters();
		var logParams = queryParams[$tab_Logger.$logQueryParam];
		if (logParams.length === 0) {
			$tab_Logger.filterByName('.*', 0);
		}
		for (var $t1 = 0; $t1 < logParams.length; $t1++) {
			var logParam = logParams[$t1];
			var logVals = logParam.split(String.fromCharCode(58));
			var level = 1;
			if (logVals.length > 0 && ss.isValue(logVals[1])) {
				var key = logVals[1].toLowerCase();
				var index = ss.indexOf($tab_Logger.loggerLevelNames, key);
				if (index >= 0) {
					level = index;
				}
			}
			$tab_Logger.filterByName(logVals[0], level);
		}
	};
	$tab_Logger.$addFilter = function Logger$AddFilter(filterFunc) {
		$tab_Logger.get_$filters().push(filterFunc);
		var $t1 = $tab_Logger.get_$appenders();
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var logAppender = $t1[$t2];
			logAppender.addFilter(filterFunc);
		}
	};
	global.tab.Logger = $tab_Logger;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.LoggerLevel
	var $tab_LoggerLevel = function() {
	};
	$tab_LoggerLevel.__typeName = 'tab.LoggerLevel';
	global.tab.LoggerLevel = $tab_LoggerLevel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.LoopBreakException
	var $tab_LoopBreakException = function() {
		ss.Exception.call(this);
	};
	$tab_LoopBreakException.__typeName = 'tab.LoopBreakException';
	$tab_LoopBreakException.$ctor1 = function(message) {
		ss.Exception.call(this, message);
	};
	$tab_LoopBreakException.$ctor2 = function(message, e) {
		ss.Exception.call(this, message, e);
	};
	global.tab.LoopBreakException = $tab_LoopBreakException;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.MapUtil
	var $tab_MapUtil = function() {
	};
	$tab_MapUtil.__typeName = 'tab.MapUtil';
	$tab_MapUtil.getZoomFactorForDesiredZoomLevel = function MapUtil$GetZoomFactorForDesiredZoomLevel(currentZoomLevel, desiredZoomLevel) {
		return Math.exp(-(Math.LN2 * (desiredZoomLevel - currentZoomLevel)));
	};
	$tab_MapUtil.allowZoomAtCurrentLevel = function MapUtil$AllowZoomAtCurrentLevel(currentZoomLvl, zoomFactor) {
		return currentZoomLvl + Math.log(1 / zoomFactor) / Math.LN2 >= 0;
	};
	$tab_MapUtil.allowZoomAtCurrentLevelLeaflet = function MapUtil$AllowZoomAtCurrentLevelLeaflet(currentZoomLvl, netZoomLevelDelta) {
		return currentZoomLvl - netZoomLevelDelta >= 0;
	};
	$tab_MapUtil.getVisiblePixelWidth = function MapUtil$GetVisiblePixelWidth(zoom, numWorlds, tilePixelSize) {
		var oneWorldSize = Math.pow(2, zoom) * tilePixelSize;
		var pixelWidth = Math.floor(numWorlds * oneWorldSize);
		return pixelWidth;
	};
	$tab_MapUtil.getScrollDeltaForZoomFactor = function MapUtil$GetScrollDeltaForZoomFactor(zoomFactor) {
		return Math.floor($tab_MapUtil.$scrollDeltaMultiplier * (Math.log(zoomFactor) / Math.log(2)));
	};
	$tab_MapUtil.getLeafletZoomOffsetForTileSize = function MapUtil$GetLeafletZoomOffsetForTileSize(tileSize) {
		return ((tileSize === $tab_MapUtil.$mapboxGLTileSize) ? -1 : 0);
	};
	$tab_MapUtil.calculateZoomFactor = function MapUtil$CalculateZoomFactor(scrollWheelDelta) {
		var numDegrees = ss.Int32.div(scrollWheelDelta, 8);
		var numSteps = ss.Int32.div(numDegrees, 15);
		var zoomFactor = 1;
		var exponent = Math.log(zoomFactor) / Math.log(2) + numSteps / 4;
		zoomFactor = Math.pow(2, exponent);
		return ss.round(zoomFactor, 2);
	};
	global.tab.MapUtil = $tab_MapUtil;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.CrossBrowserSupport.MapUtility
	var $tab_MapUtility = function() {
	};
	$tab_MapUtility.__typeName = 'tab.MapUtility';
	$tab_MapUtility.forEachWithInterrupt = function(TKey, TValue) {
		return function MapUtility$ForEachWithInterrupt(map, callbackFn) {
			try {
				map.forEach(callbackFn);
			}
			catch ($t1) {
				$t1 = ss.Exception.wrap($t1);
				if (ss.isInstanceOfType($t1, $tab_LoopBreakException)) {
				}
				else {
					throw $t1;
				}
			}
		};
	};
	$tab_MapUtility.forEachWithInterrupt$1 = function(TKey, TValue) {
		return function MapUtility$ForEachWithInterrupt(map, callbackFn) {
			try {
				map.forEach(function(value, key) {
					callbackFn(value, key);
				});
			}
			catch ($t1) {
				$t1 = ss.Exception.wrap($t1);
				if (ss.isInstanceOfType($t1, $tab_LoopBreakException)) {
				}
				else {
					throw $t1;
				}
			}
		};
	};
	$tab_MapUtility.createCopy = function(TKey, TValue) {
		return function MapUtility$CreateCopy(source) {
			var result = new Map();
			source.forEach(function(value, key) {
				result.set(key, value);
			});
			return result;
		};
	};
	global.tab.MapUtility = $tab_MapUtility;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.MetricsLogger
	var $tab_MetricsLogger = function() {
		this.$eventBuffer = null;
		this.$logger = null;
		this.$beaconImages = null;
		this.$beaconCleanupTimerId = null;
		this.$bufferProcessTimerId = null;
		this.$eventBuffer = [];
		this.$beaconImages = [];
		this.$bufferProcessTimerId = null;
		this.$beaconCleanupTimerId = null;
	};
	$tab_MetricsLogger.__typeName = 'tab.MetricsLogger';
	$tab_MetricsLogger.get_instance = function MetricsLogger$get_Instance() {
		if (!ss.isValue($tab_MetricsLogger.$instance)) {
			$tab_MetricsLogger.$instance = new $tab_MetricsLogger();
		}
		return $tab_MetricsLogger.$instance;
	};
	$tab_MetricsLogger.$formatEvent = function MetricsLogger$FormatEvent(evt, verbose) {
		var delimiter = (verbose ? ', ' : ',');
		var strBuilder = new ss.StringBuilder();
		strBuilder.append((verbose ? $tab_MetricsLogger.$debugEventNames[evt.eventType] : evt.eventType.toString()));
		var count = ss.getKeyCount(evt.parameters);
		if (count > 0) {
			strBuilder.append('=');
			strBuilder.append('{');
			var i = 0;
			var propSeparator = (verbose ? ': ' : ':');
			var $t1 = ss.getEnumerator(Object.keys(evt.parameters));
			try {
				while ($t1.moveNext()) {
					var key = $t1.current();
					if (key === 'id' && evt.eventType !== 'init') {
						continue;
					}
					if (i++ > 0) {
						strBuilder.append(delimiter);
					}
					strBuilder.append((verbose ? $tab_MetricsLogger.$debugParamNames[key] : key.toString()));
					strBuilder.append(propSeparator);
					var val = evt.parameters[key];
					$tab_MetricsLogger.$formatValue(strBuilder, val, verbose);
				}
			}
			finally {
				$t1.dispose();
			}
			strBuilder.append('}');
		}
		return strBuilder.toString();
	};
	$tab_MetricsLogger.$formatDictionaryValues = function MetricsLogger$FormatDictionaryValues(strBuilder, dict, verbose) {
		var delimiter = (verbose ? ', ' : ',');
		var propSeparator = (verbose ? ': ' : ':');
		var propCount = ss.getKeyCount(dict);
		var j = 0;
		var $t1 = ss.getEnumerator(Object.keys(dict));
		try {
			while ($t1.moveNext()) {
				var propertyName = $t1.current();
				if (dict.hasOwnProperty(propertyName)) {
					var propertyVal = dict[propertyName];
					strBuilder.append(propertyName);
					strBuilder.append(propSeparator);
					$tab_MetricsLogger.$formatValue(strBuilder, propertyVal, verbose);
					if (++j < propCount) {
						strBuilder.append(delimiter);
					}
				}
			}
		}
		finally {
			$t1.dispose();
		}
	};
	$tab_MetricsLogger.$formatValue = function MetricsLogger$FormatValue(strBuilder, value, verbose) {
		var type = typeof(value);
		if (type === 'number' && Math.floor(ss.unbox(ss.cast(value, Number))) !== ss.unbox(ss.cast(value, Number))) {
			strBuilder.append(ss.unbox(ss.cast(value, Number)).toFixed(1));
		}
		else if (type === 'string') {
			if (verbose) {
				strBuilder.append('"');
				strBuilder.append(value);
				strBuilder.append('"');
			}
			else {
				strBuilder.append(encodeURIComponent(ss.cast(value, String)));
			}
		}
		else if ($.isArray(value)) {
			strBuilder.append('[');
			strBuilder.append(value);
			strBuilder.append(']');
		}
		else if (type === 'object') {
			strBuilder.append('{');
			var dict = value;
			$tab_MetricsLogger.$formatDictionaryValues(strBuilder, dict, verbose);
			strBuilder.append('}');
		}
		else {
			strBuilder.append(value);
		}
	};
	global.tab.MetricsLogger = $tab_MetricsLogger;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.MiscUtil
	var $tab_MiscUtil = function() {
	};
	$tab_MiscUtil.__typeName = 'tab.MiscUtil';
	$tab_MiscUtil.get_pathName = function MiscUtil$get_PathName() {
		var window = tabBootstrap.Utility.get_locationWindow();
		return tab.WindowHelper.getLocation(window).pathname;
	};
	$tab_MiscUtil.get_urlPathnameParts = function MiscUtil$get_UrlPathnameParts() {
		var pathname = $tab_MiscUtil.get_pathName();
		var siteRoot = tsConfig.site_root;
		var index = pathname.indexOf(siteRoot, 0);
		var actualPath = pathname.substr(index + siteRoot.length);
		var pathnameParts = actualPath.split('/');
		var pathnameProps = {};
		pathnameProps[2] = pathnameParts[2];
		pathnameProps[3] = pathnameParts[3];
		pathnameProps[4] = pathnameParts[4];
		return pathnameProps;
	};
	$tab_MiscUtil.lazyInitStaticField = function MiscUtil$LazyInitStaticField(t, fieldName, initializer) {
		var value = t[fieldName];
		if (ss.isNullOrUndefined(value)) {
			value = initializer();
			t[fieldName] = value;
		}
		return value;
	};
	$tab_MiscUtil.shallowEquals = function MiscUtil$ShallowEquals(valueA, valueB) {
		if (ss.referenceEquals(valueA, valueB)) {
			return true;
		}
		if (ss.isNullOrUndefined(valueA) || ss.isNullOrUndefined(valueB)) {
			return false;
		}
		var keysA = Object.keys(valueA);
		var keysB = Object.keys(valueB);
		if (keysA.length !== keysB.length) {
			return false;
		}
		for (var i = 0; i < keysA.length; i++) {
			var key = keysA[i];
			if (!valueB.hasOwnProperty(key) || !ss.referenceEquals(valueA[key], valueB[key])) {
				return false;
			}
		}
		return true;
	};
	$tab_MiscUtil.percentEncode = function MiscUtil$PercentEncode(valueToEncode, unreservedChars) {
		valueToEncode = encodeURIComponent(valueToEncode);
		if (ss.isNullOrUndefined(unreservedChars)) {
			return valueToEncode;
		}
		var sb = new ss.StringBuilder();
		var i = 0;
		while (i < valueToEncode.length) {
			var s = valueToEncode.substr(i, 1);
			if (s === '%') {
				sb.append(valueToEncode.substr(i, 3));
				i += 2;
			}
			else if (!ss.keyExists(unreservedChars, s)) {
				sb.append('%').append(s.charCodeAt(0).toString(16).toUpperCase());
			}
			else {
				sb.append(s);
			}
			i++;
		}
		return sb.toString();
	};
	$tab_MiscUtil.encodeForWG = function MiscUtil$EncodeForWG(valueToEncode) {
		var usernameValidChars = {};
		var addCodes = function(from, to) {
			for (var i = from; i <= to; i++) {
				var s = String.fromCharCode(i);
				usernameValidChars[s] = s;
			}
		};
		addCodes(97, 122);
		addCodes(65, 90);
		addCodes(48, 57);
		addCodes(95, 95);
		addCodes(45, 45);
		valueToEncode = $tab_MiscUtil.percentEncode(valueToEncode, usernameValidChars);
		valueToEncode = $tab_MiscUtil.percentEncode(valueToEncode, null);
		return valueToEncode;
	};
	$tab_MiscUtil.isNullOrUndefined = function MiscUtil$IsNullOrUndefined(args) {
		if (ss.isNullOrUndefined(args)) {
			return true;
		}
		for (var i = 0; i < args.length; i++) {
			if (ss.isNullOrUndefined(args[i])) {
				return true;
			}
		}
		return false;
	};
	$tab_MiscUtil.isNullOrEmpty = function MiscUtil$IsNullOrEmpty(args) {
		if (ss.isNullOrUndefined(args)) {
			return true;
		}
		var dict = args;
		if (ss.isValue(dict['length']) && dict['length'] === 0) {
			return true;
		}
		return false;
	};
	$tab_MiscUtil.isNullOrEmpty$1 = function MiscUtil$IsNullOrEmpty(s) {
		return ss.isNullOrEmptyString(s);
	};
	$tab_MiscUtil.isValidIndex = function MiscUtil$IsValidIndex(index, arr) {
		return index >= 0 && index < arr.length;
	};
	$tab_MiscUtil.toBoolean = function MiscUtil$ToBoolean(value, defaultIfMissing) {
		var positiveRegex = new RegExp('^(yes|y|true|t|1)$', 'i');
		if ($tab_MiscUtil.isNullOrEmpty$1(value)) {
			return defaultIfMissing;
		}
		var match = value.match(positiveRegex);
		return !$tab_MiscUtil.isNullOrEmpty(match);
	};
	$tab_MiscUtil.getUriQueryParameters = function MiscUtil$GetUriQueryParameters(uri) {
		var parameters = {};
		if (ss.isNullOrUndefined(uri)) {
			return parameters;
		}
		var indexOfQuery = uri.indexOf('?');
		if (indexOfQuery < 0) {
			return parameters;
		}
		var query = uri.substr(indexOfQuery + 1);
		var indexOfHash = query.indexOf('#');
		if (indexOfHash >= 0) {
			query = query.substr(0, indexOfHash);
		}
		if (ss.isNullOrEmptyString(query)) {
			return parameters;
		}
		var paramPairs = query.split('&');
		for (var $t1 = 0; $t1 < paramPairs.length; $t1++) {
			var pair = paramPairs[$t1];
			var keyValue = pair.split('=');
			var key = decodeURIComponent(keyValue[0]);
			var values;
			if (ss.keyExists(parameters, key)) {
				values = parameters[key];
			}
			else {
				values = [];
				parameters[key] = values;
			}
			if (keyValue.length > 1) {
				values.push(decodeURIComponent(keyValue[1]));
			}
		}
		return parameters;
	};
	$tab_MiscUtil.replaceUriQueryParameters = function MiscUtil$ReplaceUriQueryParameters(uri, parameters) {
		if (ss.getKeyCount(parameters) === 0) {
			return uri;
		}
		var newQueryString = new ss.StringBuilder();
		var first = true;
		var appendSeparator = function() {
			newQueryString.append((first ? '?' : '&'));
			first = false;
		};
		var $t1 = _.keys(parameters);
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var key = $t1[$t2];
			var vals = parameters[key];
			var keyEncoded = encodeURIComponent(key);
			if (ss.isNullOrUndefined(vals) || vals.length === 0) {
				appendSeparator();
				newQueryString.append(keyEncoded);
			}
			else {
				for (var $t3 = 0; $t3 < vals.length; $t3++) {
					var value = vals[$t3];
					appendSeparator();
					newQueryString.append(keyEncoded).append('=').append(encodeURIComponent(value));
				}
			}
		}
		var hash = '';
		var baseUri = '';
		if (uri.length > 0) {
			var indexOfQuery = uri.indexOf('?');
			var indexOfHash = uri.indexOf('#');
			var indexOfEnd = Math.min(((indexOfQuery < 0) ? uri.length : indexOfQuery), ((indexOfHash < 0) ? uri.length : indexOfHash));
			baseUri = uri.substr(0, indexOfEnd);
			hash = ((indexOfHash < 0) ? '' : uri.substr(indexOfHash));
		}
		return baseUri + newQueryString + hash;
	};
	$tab_MiscUtil.sanatizeBoolean = function MiscUtil$SanatizeBoolean(value) {
		if (ss.isNullOrUndefined(value)) {
			return value;
		}
		return value.toString().toLowerCase() === 'true';
	};
	$tab_MiscUtil.dispose$1 = function MiscUtil$Dispose(d) {
		if (ss.isValue(d)) {
			d.dispose();
		}
		return null;
	};
	$tab_MiscUtil.dispose = function MiscUtil$Dispose(d) {
		if (ss.isValue(d)) {
			for (var $t1 = 0; $t1 < d.length; $t1++) {
				var v = d[$t1];
				if (ss.isValue(v)) {
					v.dispose();
				}
			}
			ss.clear(d);
		}
		return null;
	};
	$tab_MiscUtil.clearTimeout = function MiscUtil$ClearTimeout(handle) {
		if (ss.isValue(handle)) {
			window.clearTimeout(ss.unbox(handle));
		}
		return null;
	};
	$tab_MiscUtil.clearInterval = function MiscUtil$ClearInterval(handle) {
		if (ss.isValue(handle)) {
			window.clearInterval(ss.unbox(handle));
		}
		return null;
	};
	$tab_MiscUtil.cloneObject = function MiscUtil$CloneObject(src) {
		var objStr = JSON.stringify(src, function(k, v) {
			if (ss.isInstanceOfType(v, Uint32Array) || ss.isInstanceOfType(v, Float64Array) || ss.isInstanceOfType(v, Float32Array)) {
				return eval('Array.prototype.slice.call(v);');
			}
			return v;
		});
		return JSON.parse(objStr);
	};
	global.tab.MiscUtil = $tab_MiscUtil;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.NavigationMetricsCollector
	var $tab_NavigationMetricsCollector = function() {
	};
	$tab_NavigationMetricsCollector.__typeName = 'tab.NavigationMetricsCollector';
	$tab_NavigationMetricsCollector.collectMetrics = function NavigationMetricsCollector$CollectMetrics() {
		if (typeof(window) !== 'undefined' && typeof(window.performance) !== 'undefined' && typeof(window.performance.timing) !== 'undefined' && false) {
			$tab_NavigationMetricsCollector.$navMetrics = window.performance.timing;
			if ('navigationStart' in $tab_NavigationMetricsCollector.$navMetrics) {
				var start = $tab_NavigationMetricsCollector.$navMetrics[$tab_NavigationMetricsCollector.$navigationMetricsOrder[0]];
				var metricArray = [];
				for (var $t1 = 0; $t1 < $tab_NavigationMetricsCollector.$navigationMetricsOrder.length; $t1++) {
					var name = $tab_NavigationMetricsCollector.$navigationMetricsOrder[$t1];
					var metric = $tab_NavigationMetricsCollector.$navMetrics[name];
					metric = ((metric === 0) ? 0 : (metric - start));
					metricArray.push(metric);
				}
				var parameters = {};
				parameters['v'] = metricArray;
				var evt = new tabBootstrap.MetricsEvent('nav', 1, parameters);
				tabBootstrap.MetricsController.logEvent(evt);
			}
		}
	};
	global.tab.NavigationMetricsCollector = $tab_NavigationMetricsCollector;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Bootstrap.ObjectAccessTracker
	var $tab_ObjectAccessTracker = function(tracker, id) {
		this.$tracker = null;
		this.$id = null;
		this.$tracker = tracker;
		this.$id = id;
	};
	$tab_ObjectAccessTracker.__typeName = 'tab.ObjectAccessTracker';
	$tab_ObjectAccessTracker.$isSymbol = function ObjectAccessTracker$IsSymbol(o) {
		return typeof(o) === 'symbol';
	};
	global.tab.ObjectAccessTracker = $tab_ObjectAccessTracker;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Bootstrap.ObjectCoverage
	var $tab_ObjectCoverage = function(coverageName) {
		this.$wasCalled = {};
		this.$originalObject = null;
		this.$name = null;
		this.$name = coverageName;
		$tab_ObjectCoverage.trackedObjects[coverageName] = this;
	};
	$tab_ObjectCoverage.__typeName = 'tab.ObjectCoverage';
	$tab_ObjectCoverage.$isObject = function ObjectCoverage$IsObject(o) {
		return typeof(o) === 'object' && !ss.isInstanceOfType(o, Array);
	};
	$tab_ObjectCoverage.$isArray = function ObjectCoverage$IsArray(o) {
		return ss.isInstanceOfType(o, Array);
	};
	$tab_ObjectCoverage.shouldTrack = function ObjectCoverage$ShouldTrack(objectId) {
		if (ss.isNullOrUndefined($tab_ObjectCoverage.$coveredObjects)) {
			$tab_ObjectCoverage.$coveredObjects = {};
			var xfpData = $tab_FeatureParamsLookup.getString(47);
			if (!ss.isNullOrUndefined(xfpData)) {
				var ids = xfpData.split(',');
				for (var $t1 = 0; $t1 < ids.length; $t1++) {
					var id = ids[$t1];
					$tab_ObjectCoverage.$coveredObjects[id] = true;
				}
			}
		}
		return ss.keyExists($tab_ObjectCoverage.$coveredObjects, objectId) && $tab_ObjectCoverage.$coveredObjects[objectId];
	};
	global.tab.ObjectCoverage = $tab_ObjectCoverage;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.ObjectRegistry
	var $tab_ObjectRegistry = function() {
	};
	$tab_ObjectRegistry.__typeName = 'tab.ObjectRegistry';
	$tab_ObjectRegistry.registerType = function(TBase, TActual) {
		return function ObjectRegistry$RegisterType() {
			if (ss.isNullOrUndefined($tab_ObjectRegistry.$typeRegistry)) {
				$tab_ObjectRegistry.$typeRegistry = {};
			}
			$tab_ObjectRegistry.$typeRegistry[ss.getTypeFullName(TBase)] = TActual;
		};
	};
	$tab_ObjectRegistry.newView$1 = function(T) {
		return function ObjectRegistry$NewView(baseType, vms) {
			return $tab_ObjectRegistry.$newViewOrWidget(T).call(null, baseType, vms);
		};
	};
	$tab_ObjectRegistry.newView = function(T) {
		return function ObjectRegistry$NewView(vms) {
			return $tab_ObjectRegistry.$newViewOrWidget(T).call(null, T, vms);
		};
	};
	$tab_ObjectRegistry.newWidget$2 = function(T) {
		return function ObjectRegistry$NewWidget(baseType, vms) {
			return $tab_ObjectRegistry.$newViewOrWidget(T).call(null, baseType, vms);
		};
	};
	$tab_ObjectRegistry.newWidget = function(T) {
		return function ObjectRegistry$NewWidget() {
			return $tab_ObjectRegistry.$newViewOrWidget(T).call(null, T, []);
		};
	};
	$tab_ObjectRegistry.newWidget$1 = function(T) {
		return function ObjectRegistry$NewWidget(ctorArgs) {
			return $tab_ObjectRegistry.$newViewOrWidget(T).call(null, T, ctorArgs);
		};
	};
	$tab_ObjectRegistry.$newViewOrWidget = function(T) {
		return function ObjectRegistry$NewViewOrWidget(baseType, ctorArgs) {
			if (ss.isNullOrUndefined($tab_ObjectRegistry.$typeRegistry)) {
				throw new ss.Exception('No types registered');
			}
			var viewType = $tab_ObjectRegistry.$typeRegistry[ss.getTypeFullName(baseType)];
			if (ss.isNullOrUndefined(viewType)) {
				throw new ss.Exception('Unknown view type: ' + ss.getTypeFullName(baseType));
			}
			var view = ((ctorArgs.length === 0) ? ss.createInstance(viewType) : ss.applyConstructor(viewType, ctorArgs));
			return ($tab_ObjectRegistry.$isCastable(viewType, T) ? ss.cast(view, T) : view);
		};
	};
	$tab_ObjectRegistry.newLegacyTooltip = function(T) {
		return function ObjectRegistry$NewLegacyTooltip(baseType, tooltipContextProvider, visualId) {
			if (ss.isNullOrUndefined($tab_ObjectRegistry.$typeRegistry)) {
				throw new ss.Exception('No types registered');
			}
			var tooltipLegacyModeType = $tab_ObjectRegistry.$typeRegistry[ss.getTypeFullName(baseType)];
			if (ss.isNullOrUndefined(tooltipLegacyModeType)) {
				throw new ss.Exception('Unknown tooltip type: ' + ss.getTypeFullName(baseType));
			}
			var tooltip = new tooltipLegacyModeType(tooltipContextProvider, visualId);
			return ss.cast(tooltip, T);
		};
	};
	$tab_ObjectRegistry.newLegacyTooltipBehavior = function(T) {
		return function ObjectRegistry$NewLegacyTooltipBehavior(t, tooltip) {
			if (ss.isNullOrUndefined($tab_ObjectRegistry.$typeRegistry)) {
				throw new ss.Exception('No types registered');
			}
			var tooltipBehaviorType = $tab_ObjectRegistry.$typeRegistry[ss.getTypeFullName(t)];
			if (ss.isNullOrUndefined(tooltipBehaviorType)) {
				throw new ss.Exception('Unknown tooltip type: ' + ss.getTypeFullName(t));
			}
			var behavior = new tooltipBehaviorType(tooltip);
			return ss.cast(behavior, T);
		};
	};
	$tab_ObjectRegistry.resolve = function(T) {
		return function ObjectRegistry$Resolve(args) {
			var t = T;
			if (ss.isNullOrUndefined($tab_ObjectRegistry.$typeRegistry)) {
				throw new ss.Exception('No types registered');
			}
			var type = $tab_ObjectRegistry.$typeRegistry[ss.getTypeFullName(t)];
			if (ss.isNullOrUndefined(type)) {
				throw new ss.Exception('Unknown type: ' + ss.getTypeFullName(t));
			}
			return ss.cast(ss.applyConstructor(type, args), T);
		};
	};
	$tab_ObjectRegistry.$isCastable = function ObjectRegistry$IsCastable(sourceType, targetType) {
		return ss.isNullOrUndefined(ss.getGenericTypeDefinition(targetType)) || ss.isValue(ss.getGenericTypeDefinition(sourceType));
	};
	global.tab.ObjectRegistry = $tab_ObjectRegistry;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.Param
	var $tab_Param = function() {
	};
	$tab_Param.__typeName = 'tab.Param';
	$tab_Param.createArgumentNullOrUndefinedException = function Param$CreateArgumentNullOrUndefinedException(paramName) {
		var ex = new ss.Exception(paramName + ' is null or undefined.');
		ex.paramName = paramName;
		return ex;
	};
	$tab_Param.verifyString = function Param$VerifyString(param, paramName) {
		$tab_Param.verifyValue(param, paramName);
		if (param.trim().length === 0) {
			var ex = new ss.Exception(paramName + ' contains only white space');
			ex.paramName = paramName;
			$tab_Param.$showParameterAlert(ex);
			throw ex;
		}
	};
	$tab_Param.verifyValue = function Param$VerifyValue(param, paramName) {
		if (ss.isNullOrUndefined(param)) {
			var ex = $tab_Param.createArgumentNullOrUndefinedException(paramName);
			$tab_Param.$showParameterAlert(ex);
			throw ex;
		}
	};
	$tab_Param.$showParameterAlert = function Param$ShowParameterAlert(ex) {
		if ($tab_Param.suppressAlerts) {
			return;
		}
		try {
			throw ex;
		}
		catch ($t1) {
			var exceptionWithStack = ss.Exception.wrap($t1);
			window.alert($tab_Param.$formatExceptionMessage(exceptionWithStack));
		}
	};
	$tab_Param.$formatExceptionMessage = function Param$FormatExceptionMessage(ex) {
		var message;
		if (!!ss.isValue(ex.stack)) {
			message = ss.cast(ex.stack, String);
		}
		else {
			message = ex.get_message();
		}
		return message;
	};
	global.tab.Param = $tab_Param;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.PathnameKey
	var $tab_PathnameKey = function() {
	};
	$tab_PathnameKey.__typeName = 'tab.PathnameKey';
	global.tab.PathnameKey = $tab_PathnameKey;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.PointFUtil
	var $tab_PointFUtil = function() {
	};
	$tab_PointFUtil.__typeName = 'tab.PointFUtil';
	$tab_PointFUtil.subtract = function PointFUtil$Subtract(first, second) {
		return { x: first.x - second.x, y: first.y - second.y };
	};
	$tab_PointFUtil.timesScalar = function PointFUtil$TimesScalar(p, scalar) {
		return { x: p.x * scalar, y: p.y * scalar };
	};
	$tab_PointFUtil.round = function PointFUtil$Round(p) {
		return { x: Math.round(p.x), y: Math.round(p.y) };
	};
	global.tab.PointFUtil = $tab_PointFUtil;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.PointUtil
	var $tab_PointUtil = function() {
	};
	$tab_PointUtil.__typeName = 'tab.PointUtil';
	$tab_PointUtil.fromPresModel = function PointUtil$FromPresModel(pointPM) {
		if (ss.isNullOrUndefined(pointPM)) {
			return null;
		}
		return { x: pointPM.x, y: pointPM.y };
	};
	$tab_PointUtil.toPresModel = function PointUtil$ToPresModel(pt) {
		if (ss.isNullOrUndefined(pt)) {
			return null;
		}
		var pointPM = { x: ss.round(pt.x), y: ss.round(pt.y) };
		return pointPM;
	};
	$tab_PointUtil.fromPosition = function PointUtil$FromPosition(position) {
		return { x: $tab_DoubleUtil.roundToInt(position.left), y: $tab_DoubleUtil.roundToInt(position.top) };
	};
	$tab_PointUtil.add = function PointUtil$Add(first, second) {
		if (ss.isNullOrUndefined(first) || ss.isNullOrUndefined(second)) {
			return first;
		}
		return { x: first.x + second.x, y: first.y + second.y };
	};
	$tab_PointUtil.subtract = function PointUtil$Subtract(first, second) {
		return { x: first.x - second.x, y: first.y - second.y };
	};
	$tab_PointUtil.distance = function PointUtil$Distance(first, second) {
		$tab_Param.verifyValue(first, 'first');
		$tab_Param.verifyValue(second, 'second');
		var diffX = first.x - second.x;
		var diffY = first.y - second.y;
		return Math.sqrt(diffX * diffX + diffY * diffY);
	};
	$tab_PointUtil.isWithinDistance = function PointUtil$IsWithinDistance(first, second, distance) {
		var diffX = first.x - second.x;
		var diffY = first.y - second.y;
		return diffX * diffX + diffY * diffY <= distance * distance;
	};
	$tab_PointUtil.equals = function PointUtil$Equals(p, p2) {
		return ss.isValue(p) && ss.isValue(p2) && p2.x === p.x && p2.y === p.y;
	};
	global.tab.PointUtil = $tab_PointUtil;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.PropertyChangedEventArgs
	var $tab_PropertyChangedEventArgs = function(propertyName) {
		this.$propertyName = null;
		ss.EventArgs.call(this);
		this.$propertyName = propertyName;
	};
	$tab_PropertyChangedEventArgs.__typeName = 'tab.PropertyChangedEventArgs';
	global.tab.PropertyChangedEventArgs = $tab_PropertyChangedEventArgs;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.RecordCast
	var $tab_RecordCast = function() {
	};
	$tab_RecordCast.__typeName = 'tab.RecordCast';
	$tab_RecordCast.rectAsSize = function RecordCast$RectAsSize(r) {
		ss.Debug.assert(ss.isValue(r.w), 'Record mismatch');
		ss.Debug.assert(ss.isValue(r.h), 'Record mismatch');
		return r;
	};
	$tab_RecordCast.regionRectAsSize = function RecordCast$RegionRectAsSize(r) {
		ss.Debug.assert(ss.isValue(r.w), 'Record mismatch');
		ss.Debug.assert(ss.isValue(r.h), 'Record mismatch');
		return r;
	};
	$tab_RecordCast.rectPresModelAsRectXY = function RecordCast$RectPresModelAsRectXY(rpm) {
		if (ss.isNullOrUndefined(rpm)) {
			return null;
		}
		return { x: rpm.x, y: rpm.y, w: rpm.w, h: rpm.h };
	};
	$tab_RecordCast.doubleRectPresModelAsDoubleRectXY = function RecordCast$DoubleRectPresModelAsDoubleRectXY(rpm) {
		if (ss.isNullOrUndefined(rpm)) {
			return null;
		}
		return { x: rpm.doubleLeft, y: rpm.doubleTop, w: rpm.width, h: rpm.height };
	};
	$tab_RecordCast.sizeAsSizePresModel = function RecordCast$SizeAsSizePresModel(sz) {
		if (ss.isNullOrUndefined(sz)) {
			return null;
		}
		var spm = {};
		spm.w = sz.w;
		spm.h = sz.h;
		return spm;
	};
	global.tab.RecordCast = $tab_RecordCast;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.RectUtil
	var $tab_RectUtil = function() {
	};
	$tab_RectUtil.__typeName = 'tab.RectUtil';
	$tab_RectUtil.isEmpty = function RectUtil$IsEmpty(r) {
		return r.w === 0 || r.h === 0;
	};
	$tab_RectUtil.isEqual = function RectUtil$IsEqual(r1, r2) {
		return r1.t === r2.t && r1.l === r2.l && r1.w === r2.w && r1.h === r2.h;
	};
	$tab_RectUtil.inRect = function RectUtil$InRect(r, p) {
		return p.x >= r.l && p.x < r.l + r.w && p.y >= r.t && p.y < r.t + r.h;
	};
	global.tab.RectUtil = $tab_RectUtil;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.RectXYUtil
	var $tab_RectXYUtil = function() {
	};
	$tab_RectXYUtil.__typeName = 'tab.RectXYUtil';
	$tab_RectXYUtil.set = function RectXYUtil$Set(thisRect, other) {
		thisRect.x = other.x;
		thisRect.y = other.y;
		thisRect.w = other.w;
		thisRect.h = other.h;
	};
	$tab_RectXYUtil.set$1 = function RectXYUtil$Set(thisRect, x, y, width, height) {
		thisRect.x = x;
		thisRect.y = y;
		thisRect.w = width;
		thisRect.h = height;
	};
	$tab_RectXYUtil.isEmpty = function RectXYUtil$IsEmpty(r) {
		if (!ss.isValue(r)) {
			$tab_Log.get(r).warn('Rect should not be empty when testing IsEmpty', []);
			return true;
		}
		return r.w === 0 || r.h === 0;
	};
	$tab_RectXYUtil.isEqual = function RectXYUtil$IsEqual(r1, r2) {
		return r1.x === r2.x && r1.y === r2.y && r1.w === r2.w && r1.h === r2.h;
	};
	$tab_RectXYUtil.isNull = function RectXYUtil$IsNull(r) {
		return r.x === 0 && r.y === 0 && r.w === 0 && r.h === 0;
	};
	$tab_RectXYUtil.inRect = function RectXYUtil$InRect(r, p) {
		return p.x >= r.x && p.x < r.x + r.w && p.y >= r.y && p.y < r.y + r.h;
	};
	$tab_RectXYUtil.inRect$1 = function RectXYUtil$InRect(r, x, y) {
		return x >= r.x && x < r.x + r.w && y >= r.y && y < r.y + r.h;
	};
	$tab_RectXYUtil.inRectPointF = function RectXYUtil$InRectPointF(r, p) {
		return p.x >= r.x && p.x < r.x + r.w && p.y >= r.y && p.y < r.y + r.h;
	};
	$tab_RectXYUtil.inRectPointF$1 = function RectXYUtil$InRectPointF(r, x, y) {
		return x >= r.x && x < r.x + r.w && y >= r.y && y < r.y + r.h;
	};
	$tab_RectXYUtil.intersectsWith = function RectXYUtil$IntersectsWith(r1, r2) {
		return !(r2.x + r2.w < r1.x || r2.y + r2.h < r1.y || r2.x > r1.x + r1.w || r2.y > r1.y + r1.h);
	};
	$tab_RectXYUtil.intersectsWith$1 = function RectXYUtil$IntersectsWith(r1, x2, y2, w2, h2) {
		return !(x2 + w2 < r1.x || y2 + h2 < r1.y || x2 > r1.x + r1.w || y2 > r1.y + r1.h);
	};
	$tab_RectXYUtil.intersectsWithMoreThanSharedEdge = function RectXYUtil$IntersectsWithMoreThanSharedEdge(r1, r2) {
		return !(r2.x + r2.w <= r1.x || r2.y + r2.h <= r1.y || r2.x >= r1.x + r1.w || r2.y >= r1.y + r1.h);
	};
	$tab_RectXYUtil.clone = function RectXYUtil$Clone(r) {
		return { x: r.x, y: r.y, w: r.w, h: r.h };
	};
	$tab_RectXYUtil.nonemptyify = function RectXYUtil$Nonemptyify(r) {
		return { x: r.x, y: r.y, w: Math.max(1, r.w), h: Math.max(1, r.h) };
	};
	$tab_RectXYUtil.intersectsWithAny = function RectXYUtil$IntersectsWithAny(r1, rectangles) {
		var result = false;
		for (var $t1 = 0; $t1 < rectangles.length; $t1++) {
			var rectangle = rectangles[$t1];
			if (ss.isNullOrUndefined(rectangle)) {
				continue;
			}
			if ($tab_RectXYUtil.intersectsWith(r1, rectangle)) {
				result = true;
				break;
			}
		}
		return result;
	};
	$tab_RectXYUtil.intersectsWithAny$1 = function RectXYUtil$IntersectsWithAny(r1, r2, xOffsets) {
		if (r2.y + r2.h < r1.y || r2.y > r1.y + r1.h) {
			return false;
		}
		var rect1Left = r1.x;
		var rect1Right = r1.x + r1.w;
		for (var $t1 = 0; $t1 < xOffsets.length; $t1++) {
			var offset = xOffsets[$t1];
			var left = r2.x + offset;
			var right = left + r2.w;
			if (!(right < rect1Left || left > rect1Right)) {
				return true;
			}
		}
		return false;
	};
	$tab_RectXYUtil.completelyContains = function RectXYUtil$CompletelyContains(r1, r2) {
		return $tab_RectXYUtil.inRect(r1, { x: r2.x, y: r2.y }) && $tab_RectXYUtil.inRect(r1, { x: r2.x + r2.w - 1, y: r2.y + r2.h - 1 });
	};
	$tab_RectXYUtil.completelyContains$1 = function RectXYUtil$CompletelyContains(r1, x2, y2, w2, h2) {
		return $tab_RectXYUtil.inRect$1(r1, x2, y2) && $tab_RectXYUtil.inRect$1(r1, x2 + w2 - 1, y2 + h2 - 1);
	};
	$tab_RectXYUtil.toRect = function RectXYUtil$ToRect(r) {
		return { l: r.x, t: r.y, w: r.w, h: r.h };
	};
	$tab_RectXYUtil.offsetRect = function RectXYUtil$OffsetRect(r, p) {
		return { x: r.x + p.x, y: r.y + p.y, w: r.w, h: r.h };
	};
	$tab_RectXYUtil.offsetRectXY = function RectXYUtil$OffsetRectXY(r, offsetX, offsetY) {
		return { x: r.x + offsetX, y: r.y + offsetY, w: r.w, h: r.h };
	};
	$tab_RectXYUtil.offsetRectXYInPlace = function RectXYUtil$OffsetRectXYInPlace(r, offsetX, offsetY) {
		r.x += offsetX;
		r.y += offsetY;
	};
	$tab_RectXYUtil.offsetRectF = function RectXYUtil$OffsetRectF(r, p) {
		return { x: r.x + Math.round(p.x), y: r.y + Math.round(p.y), w: r.w, h: r.h };
	};
	$tab_RectXYUtil.outsetRect = function RectXYUtil$OutsetRect(r, dx, dy) {
		return { x: r.x - dx, y: r.y - dy, w: r.w + dx + dx, h: r.h + dy + dy };
	};
	$tab_RectXYUtil.outsetRectInPlace = function RectXYUtil$OutsetRectInPlace(r, dx, dy) {
		r.x -= dx;
		r.y -= dy;
		r.w += 2 * dx;
		r.h += 2 * dy;
	};
	$tab_RectXYUtil.outsetRectSizeF = function RectXYUtil$OutsetRectSizeF(r, d) {
		return $tab_RectXYUtil.outsetRect(r, Math.ceil(d.w), Math.ceil(d.h));
	};
	$tab_RectXYUtil.encompassCircleInPlace = function RectXYUtil$EncompassCircleInPlace(oldRect, centerX, centerY, radius) {
		var diameter = radius * 2;
		var x = Math.floor(centerX - radius + 0.5);
		var y = Math.floor(centerY - radius + 0.5);
		var size = Math.floor(diameter + 0.5);
		$tab_RectXYUtil.unionInPlace$1(oldRect, x, y, size, size);
	};
	$tab_RectXYUtil.union = function RectXYUtil$Union(bounds1, bounds2) {
		if ($tab_RectXYUtil.isEmpty(bounds1)) {
			return $tab_RectXYUtil.clone(bounds2);
		}
		if ($tab_RectXYUtil.isEmpty(bounds2)) {
			return $tab_RectXYUtil.clone(bounds1);
		}
		var newLeft = Math.min(bounds1.x, bounds2.x);
		var newTop = Math.min(bounds1.y, bounds2.y);
		var maxRight = Math.max(bounds1.x + bounds1.w, bounds2.x + bounds2.w);
		var maxBottom = Math.max(bounds1.y + bounds1.h, bounds2.y + bounds2.h);
		return { x: newLeft, y: newTop, w: maxRight - newLeft, h: maxBottom - newTop };
	};
	$tab_RectXYUtil.unionInPlace$1 = function RectXYUtil$UnionInPlace(thisRect, otherX, otherY, otherWidth, otherHeight) {
		if ($tab_RectXYUtil.isEmpty(thisRect)) {
			$tab_RectXYUtil.set$1(thisRect, otherX, otherY, otherWidth, otherHeight);
			return;
		}
		if (otherWidth === 0 || otherHeight === 0) {
			return;
		}
		var newLeft = Math.min(thisRect.x, otherX);
		var newTop = Math.min(thisRect.y, otherY);
		var maxRight = Math.max(thisRect.x + thisRect.w, otherX + otherWidth);
		var maxBottom = Math.max(thisRect.y + thisRect.h, otherY + otherHeight);
		$tab_RectXYUtil.set$1(thisRect, newLeft, newTop, maxRight - newLeft, maxBottom - newTop);
	};
	$tab_RectXYUtil.unionInPlace = function RectXYUtil$UnionInPlace(thisRect, otherRect) {
		$tab_RectXYUtil.unionInPlace$1(thisRect, otherRect.x, otherRect.y, otherRect.w, otherRect.h);
	};
	$tab_RectXYUtil.unionAll = function RectXYUtil$UnionAll(rectangles) {
		var numRects = rectangles.length;
		if (numRects === 0) {
			return { x: 0, y: 0, w: 0, h: 0 };
		}
		var rect = rectangles[0];
		var curLeft = rect.x;
		var curTop = rect.y;
		var curRight = rect.x + rect.w;
		var curBottom = rect.y + rect.h;
		for (var i = 1; i < numRects; i++) {
			rect = rectangles[i];
			curLeft = Math.min(curLeft, rect.x);
			curTop = Math.min(curTop, rect.y);
			curRight = Math.max(curRight, rect.x + rect.w);
			curBottom = Math.max(curBottom, rect.y + rect.h);
		}
		return { x: curLeft, y: curTop, w: curRight - curLeft, h: curBottom - curTop };
	};
	$tab_RectXYUtil.rectXYFromCorners = function RectXYUtil$RectXYFromCorners(corner1, corner2) {
		var left = Math.round(Math.min(corner1.x, corner2.x));
		var top = Math.round(Math.min(corner1.y, corner2.y));
		var width = Math.abs(Math.round(corner1.x - corner2.x));
		var height = Math.abs(Math.round(corner1.y - corner2.y));
		return { x: left, y: top, w: width, h: height };
	};
	$tab_RectXYUtil.rectXYFromCorners$1 = function RectXYUtil$RectXYFromCorners(x1, y1, x2, y2) {
		var left = Math.round(Math.min(x1, x2));
		var top = Math.round(Math.min(y1, y2));
		var width = Math.abs(Math.round(x1 - x2));
		var height = Math.abs(Math.round(y1 - y2));
		return { x: left, y: top, w: width, h: height };
	};
	$tab_RectXYUtil.rectXYFromBBoxRectF = function RectXYUtil$RectXYFromBBoxRectF(bounds) {
		return $tab_RectXYUtil.rectXYFromMinAndMax(bounds.minX, bounds.minY, bounds.maxX, bounds.maxY);
	};
	$tab_RectXYUtil.rectXYFromMinAndMax = function RectXYUtil$RectXYFromMinAndMax(minX, minY, maxX, maxY) {
		var fminx = Math.floor(minX);
		var fminy = Math.floor(minY);
		var fmaxx = Math.ceil(maxX);
		var fmaxy = Math.ceil(maxY);
		return { x: fminx, y: fminy, w: fmaxx - fminx, h: fmaxy - fminy };
	};
	$tab_RectXYUtil.dialate = function RectXYUtil$Dialate(r, dialation) {
		var x = r.x - dialation;
		var y = r.y - dialation;
		var width = r.w + 2 * dialation;
		var height = r.h + 2 * dialation;
		return { x: x, y: y, w: width, h: height };
	};
	$tab_RectXYUtil.intersect = function RectXYUtil$Intersect(rect1, rect2) {
		if (!$tab_RectXYUtil.intersectsWith(rect1, rect2) || $tab_RectXYUtil.isEmpty(rect2) || $tab_RectXYUtil.isEmpty(rect1)) {
			return { x: 0, y: 0, w: 0, h: 0 };
		}
		var newLeft = Math.max(rect1.x, rect2.x);
		var newTop = Math.max(rect1.y, rect2.y);
		var newRight = Math.min(rect1.x + rect1.w, rect2.x + rect2.w);
		var newBottom = Math.min(rect1.y + rect1.h, rect2.y + rect2.h);
		return { x: newLeft, y: newTop, w: newRight - newLeft, h: newBottom - newTop };
	};
	$tab_RectXYUtil.intersectInPlace = function RectXYUtil$IntersectInPlace(result, other) {
		if (!$tab_RectXYUtil.intersectsWith(result, other) || $tab_RectXYUtil.isEmpty(result) || $tab_RectXYUtil.isEmpty(other)) {
			$tab_RectXYUtil.set$1(result, 0, 0, 0, 0);
			return;
		}
		var newLeft = Math.max(result.x, other.x);
		var newTop = Math.max(result.y, other.y);
		var newRight = Math.min(result.x + result.w, other.x + other.w);
		var newBottom = Math.min(result.y + result.h, other.y + other.h);
		$tab_RectXYUtil.set$1(result, newLeft, newTop, newRight - newLeft, newBottom - newTop);
	};
	$tab_RectXYUtil.shiftCoordsTowardsCenter = function RectXYUtil$ShiftCoordsTowardsCenter(coords, rect, marginSize) {
		if (ss.isNullOrUndefined(rect)) {
			return coords;
		}
		var shiftedCoords = { x: coords.x, y: coords.y };
		shiftedCoords = $tab_RectXYUtil.horizontalShiftCoordsTowardsCenter(shiftedCoords, rect, marginSize);
		return $tab_RectXYUtil.verticalShiftCoordsTowardsCenter(shiftedCoords, rect, marginSize);
	};
	$tab_RectXYUtil.horizontalShiftCoordsTowardsCenter = function RectXYUtil$HorizontalShiftCoordsTowardsCenter(coords, rect, marginSize) {
		if (ss.isNullOrUndefined(rect)) {
			return coords;
		}
		var toRet = { x: coords.x, y: coords.y };
		if (toRet.x <= rect.x + marginSize) {
			toRet.x += marginSize;
		}
		else if (toRet.x >= rect.x + rect.w - 2 * marginSize) {
			toRet.x -= marginSize;
		}
		return toRet;
	};
	$tab_RectXYUtil.verticalShiftCoordsTowardsCenter = function RectXYUtil$VerticalShiftCoordsTowardsCenter(coords, rect, marginSize) {
		if (ss.isNullOrUndefined(rect)) {
			return coords;
		}
		var toRet = { x: coords.x, y: coords.y };
		if (toRet.y <= rect.y + marginSize) {
			toRet.y += marginSize;
		}
		else if (toRet.y >= rect.y + rect.h - 2 * marginSize) {
			toRet.y -= marginSize;
		}
		return toRet;
	};
	$tab_RectXYUtil.clampCoords = function RectXYUtil$ClampCoords(coords, rect) {
		var x = Math.min(Math.max(rect.x, coords.x), rect.x + rect.w);
		var y = Math.min(Math.max(rect.y, coords.y), rect.y + rect.h);
		return { x: x, y: y };
	};
	$tab_RectXYUtil.getChangedRects = function RectXYUtil$GetChangedRects(originalRect, newRect) {
		var addedRects = [];
		if (!ss.isValue(originalRect) || !ss.isValue(newRect) || !$tab_RectXYUtil.intersectsWith(originalRect, newRect)) {
			return addedRects;
		}
		var originalRight = originalRect.x + originalRect.w;
		var originalBottom = originalRect.y + originalRect.h;
		var newRight = newRect.x + newRect.w;
		var newBottom = newRect.y + newRect.h;
		var minLeft = Math.min(originalRect.x, newRect.x);
		var maxLeft = Math.max(originalRect.x, newRect.x);
		var minRight = Math.min(originalRight, newRight);
		var maxRight = Math.max(originalRight, newRight);
		var minTop = Math.min(originalRect.y, newRect.y);
		var maxTop = Math.max(originalRect.y, newRect.y);
		var minBottom = Math.min(originalBottom, newBottom);
		var maxBottom = Math.max(originalBottom, newBottom);
		var top = { x: minLeft, y: minTop, w: maxRight - minLeft, h: maxTop - minTop };
		var left = { x: minLeft, y: maxTop, w: maxLeft - minLeft, h: minBottom - maxTop };
		var right = { x: minRight, y: maxTop, w: maxRight - minRight, h: minBottom - maxTop };
		var bottom = { x: minLeft, y: minBottom, w: maxRight - minLeft, h: maxBottom - minBottom };
		if (!$tab_RectXYUtil.isEmpty(top)) {
			addedRects.push(top);
		}
		if (!$tab_RectXYUtil.isEmpty(left)) {
			addedRects.push(left);
		}
		if (!$tab_RectXYUtil.isEmpty(right)) {
			addedRects.push(right);
		}
		if (!$tab_RectXYUtil.isEmpty(bottom)) {
			addedRects.push(bottom);
		}
		return addedRects;
	};
	$tab_RectXYUtil.reduceRectangles = function RectXYUtil$ReduceRectangles(rects) {
		if (ss.isNullOrUndefined(rects)) {
			return null;
		}
		var rectCount = rects.length;
		if (rectCount === 1) {
			return rects;
		}
		var modifiedRects = new Array(rectCount);
		for (var i = 0; i < rectCount; i++) {
			var curRect = modifiedRects[i] || rects[i];
			modifiedRects[i] = curRect;
			if ($tab_RectXYUtil.isEmpty(curRect)) {
				continue;
			}
			for (var j = i + 1; j < rectCount; j++) {
				var compareRect = modifiedRects[j] || rects[j];
				if ($tab_RectXYUtil.isEmpty(compareRect)) {
					continue;
				}
				var intersect = $tab_RectXYUtil.intersect(curRect, compareRect);
				if ($tab_RectXYUtil.isEmpty(intersect)) {
					continue;
				}
				var modifiedCurRect = $tab_RectXYUtil.$subtractRectFromEdge(curRect, intersect);
				if (ss.referenceEquals(modifiedCurRect, curRect)) {
					compareRect = $tab_RectXYUtil.$subtractRectFromEdge(compareRect, intersect);
				}
				modifiedRects[i] = modifiedCurRect;
				modifiedRects[j] = compareRect;
			}
		}
		for (var i1 = modifiedRects.length - 1; i1 >= 0; i1--) {
			if ($tab_RectXYUtil.isEmpty(modifiedRects[i1])) {
				modifiedRects.splice(i1, 1);
			}
		}
		return modifiedRects;
	};
	$tab_RectXYUtil.$subtractRectFromEdge = function RectXYUtil$SubtractRectFromEdge(rect, toSubtract) {
		if (toSubtract.x === rect.x && toSubtract.w === rect.w) {
			if (toSubtract.y > rect.y) {
				return { x: rect.x, y: rect.y, w: rect.w, h: rect.h - toSubtract.h };
			}
			else {
				return { x: rect.x, y: rect.y + toSubtract.h, w: rect.w, h: rect.h - toSubtract.h };
			}
		}
		else if (toSubtract.y === rect.y && toSubtract.h === rect.h) {
			if (toSubtract.x > rect.x) {
				return { x: rect.x, y: rect.y, w: rect.w - toSubtract.w, h: rect.h };
			}
			else {
				return { x: rect.x + toSubtract.w, y: rect.y, w: rect.w - toSubtract.w, h: rect.h };
			}
		}
		return rect;
	};
	global.tab.RectXYUtil = $tab_RectXYUtil;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.RleDecoder
	var $tab_RleDecoder = function() {
	};
	$tab_RleDecoder.__typeName = 'tab.RleDecoder';
	$tab_RleDecoder.decode = function RleDecoder$Decode(root) {
		if (ss.isNullOrUndefined(root)) {
			return root;
		}
		return $tab_RleDecoder.$expandArraysInHierarchy(root);
	};
	$tab_RleDecoder.$expandArraysInHierarchy = function RleDecoder$ExpandArraysInHierarchy(obj) {
		if (typeof(obj) !== 'object' || !ss.isValue(obj)) {
			return obj;
		}
		if ($.isArray(obj)) {
			var arr = obj;
			for (var i = 0, len = arr.length; i < len; i++) {
				var elt = arr[i];
				if (typeof(elt) !== 'object') {
					break;
				}
				arr[i] = $tab_RleDecoder.$expandArraysInHierarchy(elt);
			}
			return $tab_RleDecoder.$ensureExpandedArray(arr);
		}
		else {
			var dict = obj;
			var keys = Object.keys(dict);
			for (var i1 = 0, len1 = keys.length; i1 < len1; i1++) {
				var key = keys[i1];
				if (typeof(dict[key]) !== 'object') {
					continue;
				}
				if (dict.hasOwnProperty(key)) {
					dict[key] = $tab_RleDecoder.$expandArraysInHierarchy(dict[key]);
				}
			}
		}
		return obj;
	};
	$tab_RleDecoder.$arrayHasRLE = function RleDecoder$ArrayHasRLE(eltArray) {
		if (eltArray.length === 0) {
			return false;
		}
		var lastElt = eltArray[eltArray.length - 1];
		if (!$.isArray(lastElt)) {
			return false;
		}
		return lastElt.length === 0;
	};
	$tab_RleDecoder.$isRleEncoding = function RleDecoder$IsRleEncoding(eltArray) {
		var length = eltArray.length;
		return length === 2 || length === 3;
	};
	$tab_RleDecoder.$expandRle = function RleDecoder$ExpandRle(valueArray, encoding) {
		var startVal = encoding[0];
		var count = encoding[1];
		var incr = ((encoding.length === 3) ? encoding[2] : 0);
		for (var j = 0, val = startVal; j < count; j++, val += incr) {
			valueArray.push(val);
		}
	};
	$tab_RleDecoder.$ensureExpandedArray = function RleDecoder$EnsureExpandedArray(arr) {
		if (!$tab_RleDecoder.$arrayHasRLE(arr)) {
			return arr;
		}
		arr.pop();
		var newArray = null;
		var prev = 0;
		var length = arr.length;
		for (var i = 0; i < length; i++) {
			var curElt = arr[i];
			var type = typeof(curElt);
			if (type === 'number') {
				continue;
			}
			if (ss.isNullOrUndefined(curElt)) {
				continue;
			}
			if (type !== 'object' || !$.isArray(curElt)) {
				return arr;
			}
			var eltArray = curElt;
			if (!$tab_RleDecoder.$isRleEncoding(eltArray)) {
				ss.Debug.assert(false, 'Encountered sub-array that is not run-length encoding');
				return arr;
			}
			newArray = newArray || [];
			for (var j = prev; j < i; j++) {
				newArray.push(arr[j]);
			}
			$tab_RleDecoder.$expandRle(newArray, eltArray);
			prev = i + 1;
		}
		if (ss.isValue(newArray)) {
			for (var j1 = prev; j1 < length; j1++) {
				newArray.push(arr[j1]);
			}
			arr = newArray;
		}
		return arr;
	};
	global.tab.RleDecoder = $tab_RleDecoder;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.SetUtilities
	var $tab_SetUtilities = function() {
	};
	$tab_SetUtilities.__typeName = 'tab.SetUtilities';
	$tab_SetUtilities.interserctWith = function(T) {
		return function SetUtilities$InterserctWith(set, other) {
			var result = new Set();
			for (var $t1 = 0; $t1 < other.length; $t1++) {
				var otherItem = other[$t1];
				if (set.has(otherItem)) {
					result.add(otherItem);
				}
			}
			set.forEach(function(item) {
				if (!result.has(item) && _.contains(other, item)) {
					result.add(item);
				}
			});
			return result;
		};
	};
	$tab_SetUtilities.getValues = function(T) {
		return function SetUtilities$GetValues(set) {
			var result = [];
			set.forEach(function(i) {
				result.push(i);
			});
			return result;
		};
	};
	$tab_SetUtilities.addAll = function(T) {
		return function SetUtilities$AddAll(set, itemsToAddToSet) {
			for (var $t1 = 0; $t1 < itemsToAddToSet.length; $t1++) {
				var i = itemsToAddToSet[$t1];
				set.add(i);
			}
		};
	};
	$tab_SetUtilities.symmetricDifferenceWith = function(T) {
		return function SetUtilities$SymmetricDifferenceWith(set, other) {
			var result = new Set();
			set.forEach(function(i) {
				if (!other.has(i)) {
					result.add(i);
				}
			});
			other.forEach(function(i1) {
				if (!set.has(i1)) {
					result.add(i1);
				}
			});
			return result;
		};
	};
	global.tab.SetUtilities = $tab_SetUtilities;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.SizeUtil
	var $tab_SizeUtil = function() {
	};
	$tab_SizeUtil.__typeName = 'tab.SizeUtil';
	$tab_SizeUtil.isEmpty = function SizeUtil$IsEmpty(s) {
		return s.w === 0 && s.h === 0;
	};
	$tab_SizeUtil.union = function SizeUtil$Union(s1, s2) {
		return { w: Math.max(s1.w, s2.w), h: Math.max(s1.h, s2.h) };
	};
	$tab_SizeUtil.unionPresModels = function SizeUtil$UnionPresModels(s1, s2) {
		var spm = {};
		spm.w = Math.max(s1.w, s2.w);
		spm.h = Math.max(s1.h, s2.h);
		return spm;
	};
	$tab_SizeUtil.add = function SizeUtil$Add(first, second) {
		if (ss.isNullOrUndefined(first) || ss.isNullOrUndefined(second)) {
			return first;
		}
		return { w: first.w + second.w, h: first.h + second.h };
	};
	$tab_SizeUtil.subtract = function SizeUtil$Subtract(first, second) {
		return { w: first.w - second.w, h: first.h - second.h };
	};
	$tab_SizeUtil.equals = function SizeUtil$Equals(p, p2) {
		return ss.isValue(p) && ss.isValue(p2) && p2.w === p.w && p2.h === p.h;
	};
	global.tab.SizeUtil = $tab_SizeUtil;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.StackLocation
	var $tab_StackLocation = function(url, lineNo) {
		this.url = null;
		this.lineNo = 0;
		this.columnNo = 0;
		this.functionName = $tab_ErrorTrace.$unknownFunctionName;
		this.context = null;
		this.url = url;
		this.lineNo = lineNo;
	};
	$tab_StackLocation.__typeName = 'tab.StackLocation';
	global.tab.StackLocation = $tab_StackLocation;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.StackTrace
	var $tab_StackTrace = function(traceMode, message) {
		this.userAgent = window.navigator.userAgent;
		this.traceMode = 'onError';
		this.message = null;
		this.url = null;
		this.locations = null;
		this.isIncomplete = false;
		this.isPartial = false;
		this.name = null;
		this.traceMode = traceMode;
		this.message = message;
		this.url = document.URL;
		this.locations = [];
	};
	$tab_StackTrace.__typeName = 'tab.StackTrace';
	global.tab.StackTrace = $tab_StackTrace;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.StackTraceAppender
	var $tab_StackTraceAppender = function() {
		$tab_BaseLogAppender.call(this);
	};
	$tab_StackTraceAppender.__typeName = 'tab.StackTraceAppender';
	$tab_StackTraceAppender.enableLogging = function StackTraceAppender$EnableLogging(filter) {
		if (ss.isNullOrUndefined($tab_StackTraceAppender.$globalAppender)) {
			$tab_StackTraceAppender.$globalAppender = new $tab_StackTraceAppender();
			$tab_Logger.addAppender($tab_StackTraceAppender.$globalAppender);
		}
		$tab_StackTraceAppender.$globalAppender.addFilter(filter || function() {
			return true;
		});
	};
	$tab_StackTraceAppender.disableLogging = function StackTraceAppender$DisableLogging() {
		if (ss.isValue($tab_StackTraceAppender.$globalAppender)) {
			$tab_Logger.removeAppender($tab_StackTraceAppender.$globalAppender);
			$tab_StackTraceAppender.$globalAppender = null;
		}
	};
	global.tab.StackTraceAppender = $tab_StackTraceAppender;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.StringTuple
	var $tab_StringTuple = function(first, second) {
		this.$first = null;
		this.$second = null;
		this.$first = first;
		this.$second = second;
	};
	$tab_StringTuple.__typeName = 'tab.StringTuple';
	global.tab.StringTuple = $tab_StringTuple;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.StyleUtil
	var $tab_StyleUtil = function() {
	};
	$tab_StyleUtil.__typeName = 'tab.StyleUtil';
	$tab_StyleUtil.appendCSSRule = function StyleUtil$AppendCSSRule(selector, declarations) {
		$tab_StyleUtil.appendCSSRuleToStyleSheet$1($tab_StyleUtil.defaultCustomStyleElementId, selector, declarations);
	};
	$tab_StyleUtil.appendCSSRuleToStyleSheet = function StyleUtil$AppendCSSRuleToStyleSheet(styleSheet, selector, declarations) {
		var cssCode = selector + ' {\n' + $tab_StyleUtil.createCSSRules(declarations) + '}\n';
		var index = styleSheet.cssRules.length;
		styleSheet.insertRule(cssCode, index);
	};
	$tab_StyleUtil.appendCSSRuleToStyleSheet$1 = function StyleUtil$AppendCSSRuleToStyleSheet(styleElementId, selector, declarations) {
		if (!ss.keyExists($tab_StyleUtil.$customStyleSheetDictionary, styleElementId)) {
			$tab_StyleUtil.$createNewStyleElement(styleElementId);
		}
		var styleSheet = $tab_StyleUtil.$customStyleSheetDictionary[styleElementId] || $tab_StyleUtil.$getStyleSheetById(styleElementId);
		$tab_StyleUtil.appendCSSRuleToStyleSheet(styleSheet, selector, declarations);
	};
	$tab_StyleUtil.createCSSRules = function StyleUtil$CreateCSSRules(declarations) {
		var styleBody = '';
		var $t1 = _.keys(declarations);
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var key = $t1[$t2];
			var value = declarations[key];
			if (!ss.isNullOrEmptyString(value)) {
				styleBody += key + ':' + value + ';\n';
			}
		}
		return styleBody;
	};
	$tab_StyleUtil.clearDefaultStyleSheet = function StyleUtil$ClearDefaultStyleSheet() {
		$tab_StyleUtil.clearStyleSheet($tab_StyleUtil.defaultCustomStyleElementId);
	};
	$tab_StyleUtil.clearStyleSheet = function StyleUtil$ClearStyleSheet(styleElementId) {
		var stylesheet = $tab_StyleUtil.$customStyleSheetDictionary[styleElementId];
		if (ss.isNullOrUndefined(stylesheet)) {
			return;
		}
		var customStyleElement = ss.cast(stylesheet.ownerNode, HTMLElement);
		if (ss.isValue(customStyleElement) && ss.isValue(customStyleElement.parentNode)) {
			customStyleElement.parentNode.removeChild(customStyleElement);
			delete $tab_StyleUtil.$customStyleSheetDictionary[styleElementId];
		}
	};
	$tab_StyleUtil.isValidCssClassName = function StyleUtil$IsValidCssClassName(cssClassName) {
		var match = cssClassName.match($tab_StyleUtil.$regexCssClassName);
		return ss.isValue(match);
	};
	$tab_StyleUtil.$createNewStyleElement = function StyleUtil$CreateNewStyleElement(styleElementId) {
		var customStyleElement = document.createElement('style');
		customStyleElement.setAttribute('type', 'text/css');
		customStyleElement.id = styleElementId;
		customStyleElement.appendChild(document.createTextNode(''));
		document.head.appendChild(customStyleElement);
		$tab_StyleUtil.$customStyleSheetDictionary[styleElementId] = $tab_StyleUtil.$getStyleSheetById(styleElementId);
		return customStyleElement;
	};
	$tab_StyleUtil.$getStyleSheetById = function StyleUtil$GetStyleSheetById(styleElementId) {
		for (var $t1 = 0; $t1 < document.styleSheets.length; $t1++) {
			var stylesheet = document.styleSheets[$t1];
			var ownerNode = ss.cast(stylesheet.ownerNode, HTMLElement);
			if (ss.isValue(ownerNode) && ss.referenceEquals(ownerNode.id, styleElementId)) {
				return stylesheet;
			}
		}
		return null;
	};
	global.tab.StyleUtil = $tab_StyleUtil;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.Transform
	var $tab_Transform = function(translateX, translateY, scale, type) {
		this.$translate = null;
		this.$scale = 0;
		this.$inverseScale = 0;
		this.$transformType = 0;
		this.$translate = { x: translateX, y: translateY };
		this.$scale = scale;
		this.$inverseScale = 1 / scale;
		this.$transformType = type;
	};
	$tab_Transform.__typeName = 'tab.Transform';
	$tab_Transform.none = function Transform$None() {
		return $tab_Transform.$nullTransform;
	};
	$tab_Transform.offset = function Transform$Offset(offsetX, offsetY) {
		return ((offsetX === 0 && offsetY === 0) ? $tab_Transform.$nullTransform : new $tab_Transform(offsetX, offsetY, 1, 3));
	};
	$tab_Transform.pixelToDomain = function Transform$PixelToDomain(translateX, translateY, scale) {
		if ($tab_DoubleUtil.isApproximatelyZero(translateX) && $tab_DoubleUtil.isApproximatelyZero(translateY) && $tab_DoubleUtil.isApproximatelyEqual(1, scale)) {
			return $tab_Transform.$nullTransform;
		}
		return new $tab_Transform(translateX, translateY, scale, 1);
	};
	$tab_Transform.domainToPixel = function Transform$DomainToPixel(translateX, translateY, scale) {
		if ($tab_DoubleUtil.isApproximatelyZero(translateX) && $tab_DoubleUtil.isApproximatelyZero(translateY) && $tab_DoubleUtil.isApproximatelyEqual(1, scale)) {
			return $tab_Transform.$nullTransform;
		}
		return new $tab_Transform(translateX, translateY, scale, 2);
	};
	global.tab.Transform = $tab_Transform;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.TransformationMatrix
	var $tab_TransformationMatrix = function() {
		this.$matrix = null;
		this.reset();
	};
	$tab_TransformationMatrix.__typeName = 'tab.TransformationMatrix';
	global.tab.TransformationMatrix = $tab_TransformationMatrix;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.TransformationType
	var $tab_TransformationType = function() {
	};
	$tab_TransformationType.__typeName = 'tab.TransformationType';
	global.tab.TransformationType = $tab_TransformationType;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.UriUtil
	var $tab_UriUtil = function() {
	};
	$tab_UriUtil.__typeName = 'tab.UriUtil';
	$tab_UriUtil.get_$helpVersion = function UriUtil$get_HelpVersion() {
		var regex = new RegExp('^(\\d+\\.\\d+)');
		var matches = regex.exec(tsConfig.version);
		if (ss.isValue(matches)) {
			return matches[1];
		}
		else {
			return '0.0';
		}
	};
	$tab_UriUtil.get_$helpEdition = function UriUtil$get_HelpEdition() {
		return (tsConfig.is_saas ? 'online' : 'server');
	};
	$tab_UriUtil.get_$helpLang = function UriUtil$get_HelpLang() {
		if (ss.isNullOrUndefined(tsConfig.language)) {
			return 'en-us';
		}
		switch (tsConfig.language.toString()) {
			case 'de': {
				return 'de-de';
			}
			case 'en': {
				return 'en-us';
			}
			case 'es': {
				return 'es-es';
			}
			case 'fr': {
				return 'fr-fr';
			}
			case 'ja': {
				return 'ja-jp';
			}
			case 'ko': {
				return 'ko-kr';
			}
			case 'pt': {
				return 'pt-br';
			}
			case 'zh': {
				return 'zh-cn';
			}
			default: {
				return 'en-us';
			}
		}
	};
	$tab_UriUtil.makeHelpUri = function UriUtil$MakeHelpUri(helpToken, helpPage) {
		var helpUri;
		if (tsConfig.useOfflineHelp) {
			ss.Debug.assert(!ss.isNullOrEmptyString(helpPage), '!string.IsNullOrEmpty(helpPage)');
			helpUri = $tab_UriUtil.getOfflineHelpHref(helpPage);
		}
		else {
			ss.Debug.assert(!ss.isNullOrEmptyString(helpToken), '!string.IsNullOrEmpty(helpToken)');
			helpUri = ss.formatString('{0}/{1}/app/{2}?edition={3}&lang={1}&version={4}', $tab_UriUtil.onlineHelpOrigin, $tab_UriUtil.get_$helpLang(), helpToken, $tab_UriUtil.get_$helpEdition(), $tab_UriUtil.get_$helpVersion());
		}
		ss.Debug.assert(!ss.isNullOrEmptyString(helpUri), '!string.IsNullOrEmpty(helpUri)');
		return helpUri;
	};
	$tab_UriUtil.getOfflineHelpHref = function UriUtil$GetOfflineHelpHref(helpPage) {
		var lang = ss.replaceAllString($tab_UriUtil.get_$helpLang(), '-', '_');
		return ss.formatString($tab_UriUtil.$offlineHelpUrl, lang, helpPage);
	};
	$tab_UriUtil.makeHelpSearchUri = function UriUtil$MakeHelpSearchUri(query) {
		var escapedQuery = encodeURIComponent(query);
		if (tsConfig.useOfflineHelp) {
			return $tab_UriUtil.getOfflineHelpHref(ss.formatString('search-{0}', escapedQuery));
		}
		else {
			var lang = $tab_UriUtil.get_$helpLang();
			return ((lang === 'en-us') ? ss.formatString('{0}/search/support/{1}', $tab_UriUtil.onlineHelpOrigin, escapedQuery) : ss.formatString('{0}/{1}/search/support/{2}', $tab_UriUtil.onlineHelpOrigin, lang, escapedQuery));
		}
	};
	global.tab.UriUtil = $tab_UriUtil;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.WindowAppender
	var $tab_WindowAppender = function() {
		this.$logDiv = null;
		$tab_BaseLogAppender.call(this);
	};
	$tab_WindowAppender.__typeName = 'tab.WindowAppender';
	$tab_WindowAppender.enableLogging = function WindowAppender$EnableLogging(filter) {
		if (ss.isNullOrUndefined($tab_WindowAppender.$globalAppender)) {
			$tab_WindowAppender.$globalAppender = new $tab_WindowAppender();
			$tab_Logger.addAppender($tab_WindowAppender.$globalAppender);
		}
		$tab_WindowAppender.$globalAppender.addFilter(filter || function() {
			return true;
		});
	};
	$tab_WindowAppender.disableLogging = function WindowAppender$DisableLogging() {
		if (ss.isNullOrUndefined($tab_WindowAppender.$globalAppender)) {
			return;
		}
		$tab_Logger.removeAppender($tab_WindowAppender.$globalAppender);
		$tab_WindowAppender.$globalAppender = null;
	};
	global.tab.WindowAppender = $tab_WindowAppender;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.Format
	var $tableau_format = function() {
	};
	$tableau_format.__typeName = 'tableau.format';
	$tableau_format.get_isO8601DateFormat = function Format$get_ISO8601DateFormat() {
		return $tableau_format.$iso8601DateFormat;
	};
	$tableau_format.get_isO8601DateTimeFormat = function Format$get_ISO8601DateTimeFormat() {
		return $tableau_format.$iso8601DateTimeFormat;
	};
	$tableau_format.get_isO8601TimeFormat = function Format$get_ISO8601TimeFormat() {
		return $tableau_format.$iso8601TimeFormat;
	};
	$tableau_format.get_defaultLocaleStrings = function Format$get_DefaultLocaleStrings() {
		return $tableau_format.$defaultLocaleStrings;
	};
	$tableau_format.get_baseTimestamp = function Format$get_BaseTimestamp() {
		return $tableau_format.$baseTimestamp;
	};
	$tableau_format.convertFullwidthNumberToAscii = function Format$ConvertFullwidthNumberToAscii(numberValue) {
		var $t1 = ss.getEnumerator(Object.keys($tableau_format.$fullwidthToAscii));
		try {
			while ($t1.moveNext()) {
				var fullwidthNumber = $t1.current();
				numberValue = ss.replaceAllString(numberValue, fullwidthNumber, $tableau_format.$fullwidthToAscii[fullwidthNumber]);
			}
		}
		finally {
			$t1.dispose();
		}
		return numberValue;
	};
	$tableau_format.formatDataValue = function Format$FormatDataValue(dv, role, format, precision, showFullDateTimes) {
		var dvs = ss.cast(dv.s, String);
		if (ss.isNullOrUndefined(dvs) || ss.referenceEquals(dvs, $tableau_types_DataSpecial.DS_NORMAL)) {
			var dvt = (!!('t' in dv) ? ss.cast(dv.t, String) : '');
			var dvv = dv.v;
			switch (dvt) {
				case 's': {
					return ss.cast(dvv, String);
				}
				case 'b': {
					return dvv.toString();
				}
				case 'i': {
					if (typeof(dvv) !== 'number') {
						dvv = parseInt(ss.cast(dvv, String), 10);
					}
					return ((role === 'd') ? $tableau_format.$formatRawInt(dvv).toString() : $tableau_format.$formatInt(dvv, ss.cast(format, Array)));
				}
				case 'r': {
					if (typeof(dvv) !== 'number') {
						dvv = parseFloat(ss.cast(dvv, String));
					}
					return $tableau_format.$formatReal(dvv, dvt, ss.cast(format, Array), precision, role);
				}
				case 't': {
					return ss.cast((_.isDate(dvv) ? $tableau_format.formatJsDateTime(ss.cast(dvv, ss.JsDate), format, showFullDateTimes, dvt) : $tableau_format.$formatOleDateTime(ss.unbox(ss.cast((!!_.isNumber(dv.v) ? dv.v : parseFloat(ss.cast(dv.v, String))), Number)), format, showFullDateTimes, dvt)), String);
				}
				case 'd': {
					return ss.cast((_.isDate(dvv) ? $tableau_format.formatJsDateTime(ss.cast(dvv, ss.JsDate), format, 0, dvt) : $tableau_format.$formatOleDateTime(ss.unbox(ss.cast((!!_.isNumber(dv.v) ? dv.v : parseFloat(ss.cast(dv.v, String))), Number)), format, 0, dvt)), String);
				}
			}
			throw new ss.Exception('Invalid Tableau Format Type');
		}
		if (ss.referenceEquals(dvs, $tableau_types_DataSpecial.DS_NULL)) {
			return 'null';
		}
		if (ss.referenceEquals(dvs, $tableau_types_DataSpecial.DS_MISSING)) {
			return tab.Strings.SpecialMissing;
		}
		return '#special:' + dvs + '#';
	};
	$tableau_format.parseQuantitativeDataValue = function Format$ParseQuantitativeDataValue(input, dataType, format, showFullDateTimes, oldValue) {
		switch (dataType) {
			case 'i': {
				return parseInt($tableau_format.reformatNumberToJsFormat(input, format), 10);
			}
			case 'r': {
				return parseFloat($tableau_format.reformatNumberToJsFormat(input, format));
			}
			case 'd':
			case 't': {
				var dateStr = $tableau_format.formatToJSCompliantFormat(input, format, showFullDateTimes, oldValue);
				return $tableau_types.OleDateFromJsDate((new Date(Date.parse(dateStr + ' GMT'))).getTime());
			}
		}
		ss.Debug.fail('Invalid Quantitative Data Type: ' + dataType);
		return (ss.isValue(oldValue) ? parseFloat(oldValue.v) : 0);
	};
	$tableau_format.reformatNumberToJsFormat = function Format$ReformatNumberToJsFormat(numberString, format) {
		var escapedSeparators = format[$tableau_format.nfGroupSeparatorChars].replace($tableau_format.$regexpMetacharacters, '\\$1');
		if (escapedSeparators.indexOf('¬†') !== -1) {
			escapedSeparators += ' ';
		}
		var escapedDecimals = format[$tableau_format.$nfDecimalPointChars].replace($tableau_format.$regexpMetacharacters, '\\$1');
		if (escapedSeparators.indexOf('.') === -1 && escapedDecimals.indexOf('.') === -1) {
			numberString = numberString.replace(new RegExp('\\.', 'g'), '?');
		}
		return numberString.replace(new RegExp('[' + escapedSeparators + ']', 'g'), '').replace(new RegExp('[' + escapedDecimals + ']', 'g'), '.');
	};
	$tableau_format.formatToJSCompliantFormat = function Format$FormatToJsCompliantFormat(dateTimeString, format, showFullDateTimes, previousValue) {
		var normalizedDateTimeFormat = $tableau_format.normalizeDateTimeFormat(format, showFullDateTimes, ss.cast(previousValue.t, String));
		var tokens = $tableau_format.tokenizeDateTime(dateTimeString, normalizedDateTimeFormat, showFullDateTimes);
		if (ss.isValue(tokens)) {
			return $tableau_format.$assembleDateString(tokens, previousValue);
		}
		else {
			return '';
		}
	};
	$tableau_format.normalizeDateTimeFormat = function Format$NormalizeDateTimeFormat(format, showFullDateTimes, dataValueType) {
		var dateTimeFormat = format.format;
		var timeFormat = format.timeFormat;
		if (dateTimeFormat.charCodeAt(0) === 42) {
			dateTimeFormat = dateTimeFormat.substr(1);
		}
		if (showFullDateTimes !== 0 && ss.isValue(timeFormat) && (ss.isNullOrUndefined(format.originalFormat) || format.originalFormat.length === 0 || format.originalFormat === 'S') && dataValueType === 't') {
			if (timeFormat.charCodeAt(0) === 42) {
				timeFormat = timeFormat.substr(1);
			}
			dateTimeFormat = dateTimeFormat + ' ' + timeFormat;
		}
		dateTimeFormat = dateTimeFormat.replace(new RegExp('ampm', 'g'), 'tt');
		dateTimeFormat = ss.replaceAllString(dateTimeFormat, 'H', 'h');
		dateTimeFormat = dateTimeFormat.replace($tableau_format.$charactersAfterDay, function(matched) {
			return matched.replace(new RegExp('m', 'gi'), 'm');
		});
		dateTimeFormat = dateTimeFormat.replace($tableau_format.$charactersAfterHour, function(matched1) {
			return matched1.replace(new RegExp('m', 'gi'), 'n');
		});
		return dateTimeFormat;
	};
	$tableau_format.tokenizeDateTime = function Format$TokenizeDateTime(dateTime, normalizedDateTimeFormat, showFullDateTimes) {
		var formatParse = normalizedDateTimeFormat;
		formatParse = formatParse.replace($tableau_format.$regexpMetacharacters, '\\$1');
		formatParse = formatParse.replace($tableau_format.$tt, '($1)');
		formatParse = formatParse.replace($tableau_format.$numericFields, '($1)');
		var formatTokens = normalizedDateTimeFormat.match(new RegExp(formatParse));
		var dateTimeParse = normalizedDateTimeFormat;
		dateTimeParse = dateTimeParse.replace($tableau_format.$regexpMetacharacters, '\\$1');
		if (showFullDateTimes === 1) {
			dateTimeParse = dateTimeParse.replace($tableau_format.$dateSpaceTime, '(?:$1 )?$2');
		}
		else {
			dateTimeParse = dateTimeParse.replace($tableau_format.$dateSpaceTime, '$1(?: $2)?');
		}
		dateTimeParse = dateTimeParse.replace($tableau_format.$secondsField, '(?:$1)?');
		dateTimeParse = dateTimeParse.replace($tableau_format.$numericFields, '(\\d+)');
		dateTimeParse = dateTimeParse.replace($tableau_format.$tt, '([^0-9\\s]+)?');
		dateTimeParse = dateTimeParse.replace($tableau_format.$spaceBetweenNumbers, function(match) {
			return match.replace(new RegExp('\\s+', 'g'), '\\s+');
		});
		dateTimeParse = dateTimeParse.replace($tableau_format.$otherWhitespace, '\\s*');
		var tokens = dateTime.match(new RegExp(dateTimeParse));
		if (ss.isNullOrUndefined(tokens)) {
			return null;
		}
		var tokenMap = {};
		for (var t = 1; t < tokens.length; ++t) {
			if (ss.isValue(tokens[t]) && tokens[t].length > 0) {
				tokenMap[formatTokens[t].substr(0, 1).toLowerCase()] = tokens[t];
			}
		}
		return tokenMap;
	};
	$tableau_format.$assembleDateString = function Format$AssembleDateString(tokens, previousValue) {
		if (!ss.keyExists(tokens, 'y') && !ss.keyExists(tokens, 'm') && !ss.keyExists(tokens, 'd')) {
			var baseDate = (!!previousValue.v ? new Date($tableau_types.JsDateFromOleDate(ss.unbox(ss.cast(previousValue.v, Number)))) : new Date($tableau_types.javaScriptOLEEpoch()));
			tokens['y'] = baseDate.getUTCFullYear().toString();
			tokens['m'] = (baseDate.getUTCMonth() + 1).toString();
			tokens['d'] = baseDate.getUTCDate().toString();
		}
		var yearToken = tokens['y'].replace(new RegExp('^(\\d{2})$'), function(m) {
			var year = parseInt(m, 10);
			return ((year < 30) ? ('20' + m) : ('19' + m));
		});
		var finalDateString = tokens['m'] + '/' + tokens['d'] + '/' + yearToken;
		if (ss.keyExists(tokens, 'h') && ss.keyExists(tokens, 'n')) {
			finalDateString += ' ' + tokens['h'] + ':' + tokens['n'] + ':';
			finalDateString += (ss.keyExists(tokens, 's') ? tokens['s'] : '00');
			if (ss.keyExists(tokens, 't')) {
				if (ss.isValue(tokens['t'].match($tableau_format.$am))) {
					finalDateString += ' am';
				}
				else if (ss.isValue(tokens['t'].match($tableau_format.$pm))) {
					finalDateString += ' pm';
				}
			}
		}
		return finalDateString;
	};
	$tableau_format.formatCustomJSDateTime = function Format$FormatCustomJsDateTime(d, format, showFullDateTimes, dataValueType, locale, originalFormat, timeFormat, localeFormattingStrings, calOpts) {
		var i = 0, lastHour = 0, len;
		if (ss.isNullOrUndefined(calOpts)) {
			calOpts = new $tab_CalendarOptions();
		}
		var hasTimeFormat = ss.isValue(timeFormat);
		var originalFormatIsAuto = ss.isNullOrUndefined(originalFormat) || originalFormat.length === 0 || originalFormat === 'S';
		var isTimeType = dataValueType === 't';
		if (ss.isValue(showFullDateTimes) && showFullDateTimes !== 0 && hasTimeFormat && originalFormatIsAuto && isTimeType) {
			if (timeFormat.charCodeAt(0) === 42) {
				timeFormat = timeFormat.substr(1);
			}
			if (showFullDateTimes === 2) {
				format = format + ' ' + timeFormat;
			}
			else {
				format = timeFormat;
			}
		}
		if (format === 'L') {
			format = '*dddd, mmmm dd, yyyy';
		}
		if (format.charCodeAt(0) === 42) {
			format = format.substr(1);
		}
		len = format.length;
		var year, yearOfWeek;
		if (calOpts.fiscalYearStart > 1) {
			year = yearOfWeek = $tableau_format.dtGetFiscalYear(d, calOpts.fiscalYearStart);
		}
		else {
			year = d.getUTCFullYear();
			yearOfWeek = (calOpts.brokenWeeks ? year : $tableau_format.$dtGetYearOfWeekOfYear(d, calOpts.startOfWeek, calOpts.minDaysInFirstWeek));
		}
		var longYearOfWeek = yearOfWeek.toString();
		var shortYearOfWeek = longYearOfWeek.substr(longYearOfWeek.length - 2);
		var longCalendarYear = year.toString();
		var shortCalendarYear = longCalendarYear.substr(longCalendarYear.length - 2);
		var tokens = [];
		tokens.push(new $tab_StringTuple('ampm', $tableau_format.$dtGetAmPm(d)));
		tokens.push(new $tab_StringTuple('tt', $tableau_format.$dtGetAmPm(d)));
		tokens.push(new $tab_StringTuple('yyyy', longCalendarYear));
		tokens.push(new $tab_StringTuple('yy', shortCalendarYear));
		tokens.push(new $tab_StringTuple('mmmm', $tableau_format.$_dtGetLongMonth(d, localeFormattingStrings)));
		tokens.push(new $tab_StringTuple('mmm', $tableau_format.$_dtGetShortMonth(d, localeFormattingStrings)));
		tokens.push(new $tab_StringTuple('dddd', $tableau_format.$_dtGetLongDay(d, localeFormattingStrings)));
		tokens.push(new $tab_StringTuple('ddd', $tableau_format.$_dtGetShortDay(d, localeFormattingStrings)));
		tokens.push(new $tab_StringTuple('mm', $tableau_format.$pad(d.getUTCMonth() + 1, 2)));
		tokens.push(new $tab_StringTuple('m', (d.getUTCMonth() + 1).toString()));
		tokens.push(new $tab_StringTuple('dd', $tableau_format.$pad(d.getUTCDate(), 2)));
		tokens.push(new $tab_StringTuple('d', d.getUTCDate().toString()));
		tokens.push(new $tab_StringTuple('hh', $tableau_format.$pad($tableau_format.$dtGetHours24(d), 2)));
		tokens.push(new $tab_StringTuple('h', $tableau_format.$dtGetHours24(d).toString()));
		tokens.push(new $tab_StringTuple('nn', $tableau_format.$pad(d.getUTCMinutes(), 2)));
		tokens.push(new $tab_StringTuple('n', d.getUTCMinutes().toString()));
		tokens.push(new $tab_StringTuple('ss', $tableau_format.$pad(d.getUTCSeconds(), 2)));
		tokens.push(new $tab_StringTuple('s', d.getUTCSeconds().toString()));
		tokens.push(new $tab_StringTuple('ww', $tableau_format.$dtGetWeekOfYear(d, calOpts).toString()));
		tokens.push(new $tab_StringTuple('y', $tableau_format.$dtGetDayOfYear(d).toString()));
		tokens.push(new $tab_StringTuple('w', (d.getUTCDay() + 1).toString()));
		tokens.push(new $tab_StringTuple('q', $tableau_format.dtGetFiscalQuarter(d, calOpts.fiscalYearStart).toString()));
		var result = [];
		var seenHours = null;
		var seenWeeks = false;
		var seenDateParts = false;
		var lastYearPlaceholder = -1;
		var lastYearIsLong = false;
		var lastTokenWasYear = false;
		var canChangeLastYear = false;
		while (i < len) {
			var matchedToken = false;
			var tokenIsYear = false;
			for (var $t1 = 0; $t1 < tokens.length; $t1++) {
				var pair = tokens[$t1];
				var pattern = pair.get_first();
				var value = pair.get_second();
				if (ss.referenceEquals(pattern, format.substr(i, pattern.length).toLowerCase())) {
					matchedToken = true;
					result.push(value);
					i += pattern.length;
					if (ss.isValue(seenHours) && pattern === 'mm') {
						result[result.length - 1] = $tableau_format.$pad(d.getUTCMinutes(), 2);
					}
					if (ss.isValue(seenHours) && pattern === 'm') {
						result[result.length - 1] = d.getUTCMinutes().toString();
					}
					if (pattern.charCodeAt(0) === 100) {
						seenHours = null;
					}
					if (pattern.charCodeAt(0) === 104) {
						seenHours = pattern;
						lastHour = result.length - 1;
					}
					if (ss.isValue(seenHours) && (pattern === 'ampm' || pattern === 'tt')) {
						result[lastHour] = ((seenHours === 'hh') ? $tableau_format.$pad($tableau_format.$dtGetHours12(d), 2) : $tableau_format.$dtGetHours12(d).toString());
					}
					switch (pattern.charCodeAt(0)) {
						case 121: {
							if (pattern.length > 1) {
								tokenIsYear = true;
								lastYearPlaceholder = result.length - 1;
								lastYearIsLong = pattern.length === 4;
								canChangeLastYear = true;
								if (seenWeeks) {
									if (!calOpts.brokenWeeks) {
										result[lastYearPlaceholder] = (lastYearIsLong ? longYearOfWeek : shortYearOfWeek);
										canChangeLastYear = false;
									}
									seenWeeks = false;
								}
							}
							break;
						}
						case 119: {
							if (pattern.length !== 2) {
								break;
							}
							var hadSeenWeeks = seenWeeks;
							seenWeeks = true;
							if (!hadSeenWeeks && !seenDateParts && canChangeLastYear) {
								if (!calOpts.brokenWeeks) {
									result[lastYearPlaceholder] = (lastYearIsLong ? longYearOfWeek : shortYearOfWeek);
									canChangeLastYear = false;
								}
								seenWeeks = false;
							}
							seenDateParts = false;
							break;
						}
						case 109:
						case 100:
						case 113: {
							if ((pattern === 'mm' || pattern === 'm') && ss.isValue(seenHours)) {
								break;
							}
							seenWeeks = false;
							seenDateParts = true;
							break;
						}
					}
					break;
				}
			}
			if (matchedToken) {
				lastTokenWasYear = tokenIsYear;
				continue;
			}
			if (format.charCodeAt(i) === 92) {
				result.push(format.substr(i + 1, 1));
				i += 2;
			}
			else if (format.charCodeAt(i) === 34) {
				var quote = format.charCodeAt(i);
				var start = ++i;
				while (i < len && format.charCodeAt(i) !== quote) {
					i += 1;
				}
				if (start < len && i > start) {
					result.push(format.substr(start, i - start));
				}
				if (i < len) {
					i += 1;
				}
			}
			else if (format.charCodeAt(i) === 91) {
				var j = ++i;
				while (j < format.length && format.charCodeAt(j) !== 93) {
					j++;
				}
				var contents = format.substring(i, j);
				if ((contents === 'y' || contents === 'Y') && lastTokenWasYear) {
					result[lastYearPlaceholder] = ((contents === 'y') ? (lastYearIsLong ? longCalendarYear : shortCalendarYear) : (lastYearIsLong ? longYearOfWeek : shortYearOfWeek));
					canChangeLastYear = false;
				}
				i = j + 1;
			}
			else {
				result.push(String.fromCharCode(format.charCodeAt(i)));
				i += 1;
			}
			lastTokenWasYear = tokenIsYear;
		}
		format = result.join('');
		return format;
	};
	$tableau_format.mapIcuToOleFormat = function Format$MapIcuToOleFormat(icuFormat) {
		return $tableau_format.$mapTokens($tableau_format.$icuToOleMap, icuFormat);
	};
	$tableau_format.$mapTokens = function Format$MapTokens(tokens, input) {
		if (ss.isNullOrUndefined(tokens) || ss.isNullOrEmptyString(input)) {
			return input;
		}
		var sb = new ss.StringBuilder();
		var start = 0;
		var end = 0;
		var token = null;
		while (++end <= input.length) {
			var tmp = tokens[input.substring(start, end)];
			if (ss.isValue(tmp)) {
				token = tmp;
			}
			else {
				if (ss.isValue(token)) {
					sb.append(token);
					--end;
				}
				else {
					sb.append(input.substring(start, start + 1));
				}
				start = end;
				token = null;
			}
		}
		if (ss.isValue(token)) {
			sb.append(token);
		}
		return sb.toString();
	};
	$tableau_format.escapeHTML = function Format$EscapeHtml(html) {
		return tab.EscapingUtil.escapeHtml(html);
	};
	$tableau_format.formatColumnDisplayName = function Format$FormatColumnDisplayName(column, suppressDSName, noEscape) {
		var caption = ss.cast(column.caption, String);
		var displayname;
		if (!(typeof(caption) === 'undefined')) {
			displayname = caption;
		}
		else {
			var name = ss.cast(column.name, Array);
			displayname = (suppressDSName ? ss.arrayExtract(name, 1).join('.') : $tableau_format.formatQualifiedName(name));
		}
		return (noEscape ? displayname : tab.EscapingUtil.escapeHtml(displayname));
	};
	$tableau_format.formatTupleDisplayName = function Format$FormatTupleDisplayName(tuple, noEscape, role) {
		if (ss.isNullOrUndefined(tuple)) {
			return ' ';
		}
		var d = ss.cast(tuple.d, String);
		var s = (ss.isValue(d) ? d : $tableau_format.formatTupleUniqueName(tuple, role));
		var toReturn = (noEscape ? s : $tableau_format.escapeHTML(s));
		return ss.coalesce(toReturn, ' ');
	};
	$tableau_format.formatTupleUniqueName = function Format$FormatTupleUniqueName(tuple, role) {
		var ret = '';
		if (!!ss.isValue(tuple)) {
			var rgdv = ss.cast(tuple.t, Array);
			if (ss.isValue(rgdv)) {
				for (var $t1 = 0; $t1 < rgdv.length; $t1++) {
					var t = rgdv[$t1];
					if (ret.length !== 0) {
						ret += ',';
					}
					ret += $tableau_format.formatDataValue(t, role);
				}
			}
		}
		return ret;
	};
	$tableau_format.formatTupleDisplayFacet = function Format$FormatTupleDisplayFacet(tuple, noEscape, role) {
		var s = $tableau_format.formatTupleFacet(tuple, role);
		return (noEscape ? s : $tableau_format.escapeHTML(s));
	};
	$tableau_format.formatTupleFacet = function Format$FormatTupleFacet(tuple, role) {
		var ret = '';
		if (!!ss.isValue(tuple)) {
			var rgdv = ss.cast(tuple.f, Array);
			if (ss.isValue(rgdv)) {
				for (var $t1 = 0; $t1 < rgdv.length; $t1++) {
					var f = rgdv[$t1];
					if (ret.length !== 0) {
						ret += ',';
					}
					ret += $tableau_format.formatDataValue(f, role);
				}
			}
		}
		return ret;
	};
	$tableau_format.formatQualifiedName = function Format$FormatQualifiedName(qname) {
		var ret = '';
		for (var $t1 = 0; $t1 < qname.length; $t1++) {
			var t = qname[$t1];
			if (ret.length !== 0) {
				ret += '.';
			}
			ret += '[' + t.replace(new RegExp('\\]', 'g'), ']]') + ']';
		}
		return ret;
	};
	$tableau_format.formatIntAuto = function Format$FormatIntAuto(v, doSeparators, separatorStr, groupingSpecStr) {
		var result = $tableau_format.$applySeparators(v, doSeparators, separatorStr, groupingSpecStr);
		return (($tableau_format.$trunc(v) >= 0) ? result : ('-' + result));
	};
	$tableau_format.isDateTimeWithNonMidnightTime = function Format$IsDateTimeWithNonMidnightTime(dv) {
		return ss.isValue(dv) && (ss.isNullOrEmptyString(dv.s) || ss.referenceEquals(dv.s, $tableau_types_DataSpecial.DS_NORMAL)) && dv.t === 't' && !$tableau_format.$isMidnight(new Date($tableau_types.JsDateFromOleDate(parseFloat(dv.v))));
	};
	$tableau_format.applyDecimalPlaces = function Format$ApplyDecimalPlaces(v, places, decimalStr) {
		if (places >= 0) {
			var fpart = v - $tableau_format.$trunc(v);
			var str = $tableau_format.$toFixedRounded(fpart, places);
			var parsedInt = parseInt(str, 10);
			if (Math.abs(parsedInt) === 1) {
				return parsedInt;
			}
			if (places === 0) {
				return '';
			}
			str = str.replace(new RegExp('^-?0\\.'), decimalStr);
			return str;
		}
		return '';
	};
	$tableau_format.formatString = function Format$FormatString(value, vizColumn) {
		var type = vizColumn.dataType;
		var formatStrings = vizColumn.formatStrings;
		var role = vizColumn.fieldRole;
		var format = formatStrings;
		var dataValueType = '';
		var dataValueValue = value.toString();
		switch (type) {
			case 'cstring': {
				dataValueType = 's';
				break;
			}
			case 'date': {
				dataValueType = 'd';
				dataValueValue = $tab_DateUtil.parsePresModelDate(value);
				format = $tableau_format._convertFormatStringsToFormattingInfo(formatStrings);
				break;
			}
			case 'datetime': {
				dataValueType = 't';
				dataValueValue = $tab_DateUtil.parsePresModelDate(value);
				format = $tableau_format._convertFormatStringsToFormattingInfo(formatStrings);
				break;
			}
			case 'integer': {
				dataValueType = 'i';
				dataValueValue = parseInt(value);
				break;
			}
			case 'real': {
				dataValueType = 'r';
				dataValueValue = parseFloat(value);
				break;
			}
			case 'tuple': {
				dataValueType = 's';
				dataValueValue = $tableau_format.$formatTupleString(value);
				break;
			}
			case 'unknown':
			default: {
				dataValueType = null;
				break;
			}
		}
		var dataValue = { t: dataValueType, v: dataValueValue };
		var tableauTypesRole;
		switch (role) {
			case 'dimension': {
				tableauTypesRole = 'd';
				break;
			}
			case 'measure': {
				tableauTypesRole = 'm';
				break;
			}
			case 'unknown':
			default: {
				tableauTypesRole = null;
				break;
			}
		}
		return $tableau_format.formatDataValue(dataValue, tableauTypesRole, format, null, 0);
	};
	$tableau_format.formatSpecial = function Format$FormatSpecial(specialValue, specialOverride) {
		if (ss.isValue(specialOverride)) {
			return specialOverride;
		}
		switch (specialValue) {
			case '%many-values%': {
				return tab.Strings.SpecialManyValues;
			}
			case '%null%': {
				return '';
			}
			case '%error%': {
				return tab.Strings.SpecialError;
			}
			case '%ragged%': {
				return tab.Strings.SpecialRagged;
			}
			case '%skipped%': {
				return tab.Strings.SpecialSkipped;
			}
			case '%missing%': {
				return '';
			}
			case '%all%': {
				return tab.Strings.SpecialAll;
			}
			case '%no-access%': {
				return tab.Strings.SpecialNoAccess;
			}
			case '%wildcard%': {
				return tab.Strings.SpecialWildcard;
			}
			default: {
				return '#Special';
			}
		}
	};
	$tableau_format.isSpecialValue = function Format$IsSpecialValue(value) {
		return $tableau_format.$specialValues[value] === true;
	};
	$tableau_format.stripFormattedText = function Format$StripFormattedText(formattedText) {
		if (ss.isNullOrUndefined(formattedText)) {
			return null;
		}
		return $(formattedText).find('run').text();
	};
	$tableau_format.deriveNumberEditingFormat = function Format$DeriveNumberEditingFormat(format) {
		if (ss.isNullOrUndefined(format)) {
			return null;
		}
		return ['', '-1', format[$tableau_format.nfUseSeparators], '', '', '', '', format[$tableau_format.$nfDecimalPointChars], format[$tableau_format.nfGroupSeparatorChars], format[$tableau_format.nfGroupingSpec]];
	};
	$tableau_format.$pad = function Format$Pad(n, d) {
		var ret = n.toString();
		while (ret.length < d) {
			ret = '0' + ret;
		}
		return ret;
	};
	$tableau_format.$isMidnight = function Format$IsMidnight(dt) {
		return ss.isValue(dt) && (dt.getUTCHours() === 0 && dt.getUTCMinutes() === 0 && dt.getUTCSeconds() === 0 || dt.getUTCHours() === 23 && dt.getUTCMinutes() === 59 && dt.getUTCSeconds() === 59);
	};
	$tableau_format.$dtGetAmPm = function Format$DtGetAmPm(d) {
		return ((d.getUTCHours() < 12) ? 'AM' : 'PM');
	};
	$tableau_format.$dtGetHours12 = function Format$DtGetHours12(d) {
		var hours = d.getUTCHours();
		if (hours < 12) {
			if (hours === 0) {
				hours = 12;
			}
		}
		else if (hours > 12) {
			hours -= 12;
		}
		return hours;
	};
	$tableau_format.$dtGetHours24 = function Format$DtGetHours24(d) {
		return d.getUTCHours();
	};
	$tableau_format.$dtGetDayOfYear = function Format$DtGetDayOfYear(d) {
		var startOfYear = new Date(d.getUTCFullYear(), 0, 1, 12);
		var today = new Date(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(), 12);
		return Math.round((today - startOfYear) / 86400000) + 1;
	};
	$tableau_format.$calendarYearContainingFiscalYearStart = function Format$CalendarYearContainingFiscalYearStart(d, fiscalYearStart) {
		return d.getUTCFullYear() + ((d.getUTCMonth() + 1 < fiscalYearStart) ? -1 : 0);
	};
	$tableau_format.$dtGetYearOfWeekOfYear = function Format$DtGetYearOfWeekOfYear(d, startOfWeek, minDaysInFirstWeek) {
		var daysSinceStartOfWeek = (d.getUTCDay() + 7 - (startOfWeek - 1)) % 7;
		var dateOffset = -daysSinceStartOfWeek + (7 - minDaysInFirstWeek);
		var newDate = new Date(Date.UTC(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate() + dateOffset));
		return newDate.getUTCFullYear();
	};
	$tableau_format.$dtGetWeekOfYear = function Format$DtGetWeekOfYear(d, calOpts) {
		var startOfYear;
		if (calOpts.fiscalYearStart <= 1) {
			var yearToUse = (calOpts.brokenWeeks ? d.getUTCFullYear() : $tableau_format.$dtGetYearOfWeekOfYear(d, calOpts.startOfWeek, calOpts.minDaysInFirstWeek));
			startOfYear = new Date(Date.UTC(yearToUse, 0, 1));
		}
		else {
			startOfYear = new Date(Date.UTC($tableau_format.$calendarYearContainingFiscalYearStart(d, calOpts.fiscalYearStart), calOpts.fiscalYearStart - 1, 1));
		}
		var truncatedDate = new Date(Date.UTC(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate()));
		var daysInFirstWeekBeforeFirstDayOfYear = (startOfYear.getUTCDay() + 7 - (calOpts.startOfWeek - 1)) % 7;
		var dayDiff = ss.Int32.div(truncatedDate - startOfYear, $tableau_format.millisPerDay) + daysInFirstWeekBeforeFirstDayOfYear;
		if (calOpts.fiscalYearStart <= 1 && 7 - daysInFirstWeekBeforeFirstDayOfYear < calOpts.minDaysInFirstWeek) {
			dayDiff -= 7;
		}
		return Math.floor(dayDiff / 7) + 1;
	};
	$tableau_format.dtGetFiscalYear = function Format$DtGetFiscalYear(d, fiscalYearStart) {
		var year = d.getUTCFullYear();
		var month = d.getUTCMonth() + 1;
		return ((month < fiscalYearStart || fiscalYearStart === 1) ? 0 : 1) + year;
	};
	$tableau_format.dtGetFiscalQuarter = function Format$DtGetFiscalQuarter(d, fiscalYearStart) {
		if (fiscalYearStart < 1) {
			fiscalYearStart = 1;
		}
		return Math.floor((d.getUTCMonth() + 1 - fiscalYearStart + 12) % 12 / 3) + 1;
	};
	$tableau_format.$_dtGetLongDay = function Format$_dtGetLongDay(d, format) {
		if (ss.isNullOrUndefined(format)) {
			return null;
		}
		return format.day[d.getUTCDay() + 1];
	};
	$tableau_format.$_dtGetShortDay = function Format$_dtGetShortDay(d, format) {
		if (ss.isNullOrUndefined(format)) {
			return null;
		}
		return format.shortDay[d.getUTCDay() + 1];
	};
	$tableau_format.$_dtGetLongMonth = function Format$_dtGetLongMonth(d, format) {
		if (ss.isNullOrUndefined(format)) {
			return null;
		}
		return format.month[d.getUTCMonth()];
	};
	$tableau_format.$_dtGetShortMonth = function Format$_dtGetShortMonth(d, format) {
		if (ss.isNullOrUndefined(format)) {
			return null;
		}
		return format.shortMonth[d.getUTCMonth()];
	};
	$tableau_format.formatJsDateTime = function Format$FormatJsDateTime(d, format, showFullDateTimes, dataValueType) {
		if (ss.isNullOrUndefined(format)) {
			if (showFullDateTimes === 2 && $tableau_format.$isMidnight(d)) {
				showFullDateTimes = 0;
			}
			return $tableau_format.formatCustomJSDateTime(d, '*M/d/yyyy', showFullDateTimes, dataValueType, 'en_US', '', 'h:nn:ss tt', null);
		}
		return $tableau_format.formatCustomJSDateTime(d, format.format, showFullDateTimes, dataValueType, format.locale, format.originalFormat, format.timeFormat, format.locale_formatting_strings, format.calOpts);
	};
	$tableau_format.$formatOleDateTime = function Format$FormatOleDateTime(v, format, showFullDateTimes, dataValueType) {
		var d = new Date($tableau_types.JsDateFromOleDate(v));
		return $tableau_format.formatJsDateTime(d, format, showFullDateTimes, dataValueType);
	};
	$tableau_format.$trunc = function Format$Trunc(v) {
		return ((v < 0) ? Math.ceil(v) : Math.floor(v));
	};
	$tableau_format.$applySeparators = function Format$ApplySeparators(v, doSeparators, separatorStr, groupingSpecStr) {
		var ipart = Math.abs($tableau_format.$trunc(v));
		var result = '';
		var groupSize = parseInt(String.fromCharCode(groupingSpecStr.charCodeAt(0)), 10) || 3;
		var ipartStr;
		if (ipart < $tableau_format.$minExponentialReal) {
			ipartStr = $tableau_format.$toFixedRounded(ipart, 0);
		}
		else {
			ipartStr = $tableau_format.$toExponentialRounded(ipart, 14);
			var matches = ipartStr.match($tableau_format.$positiveScientificNotation);
			if (ss.isValue(matches)) {
				var trailingDigits = ss.coalesce(matches[2], '');
				var numAddedZeroes = parseInt(matches[3], 10) - trailingDigits.length;
				var zerosString = '';
				for (var i = 0; i < numAddedZeroes; i++) {
					zerosString += '0';
				}
				ipartStr = matches[1] + trailingDigits + zerosString;
			}
		}
		if (doSeparators !== 't') {
			return ipartStr;
		}
		for (var i1 = ipartStr.length - 1, digitsPassed = 0; i1 >= 0; i1--, digitsPassed++) {
			if (digitsPassed >= groupSize) {
				result = separatorStr + result;
				digitsPassed = 0;
			}
			result = String.fromCharCode(ipartStr.charCodeAt(i1)) + result;
		}
		return result;
	};
	$tableau_format.$applyUnitAdjustment = function Format$ApplyUnitAdjustment(v, unitType) {
		switch (unitType) {
			case 'B':
			case 'G': {
				return v / 1000000000;
			}
			case 'M': {
				return v / 1000000;
			}
			case 'K': {
				return v / 1000;
			}
			default: {
				return v;
			}
		}
	};
	$tableau_format.$applyNegativeFormat = function Format$ApplyNegativeFormat(v, str, prefix, suffix, negativeFormat) {
		str = str.replace(new RegExp('^-'), '');
		if (v >= 0 || (new RegExp('^[.0]*$')).test(str)) {
			return prefix + str + suffix;
		}
		switch ($tableau_format.$getNegativeFormat(negativeFormat)) {
			case 'parenthesis': {
				return '(' + prefix + str + suffix + ')';
			}
			case 'outerSuffix': {
				return prefix + str + suffix + '-';
			}
			case 'innerPrefix': {
				return prefix + '-' + str + suffix;
			}
			case 'innerSuffix': {
				return prefix + str + '-' + suffix;
			}
			case 'outerPrefix':
			case 'automatic':
			default: {
				return '-' + prefix + str + suffix;
			}
		}
	};
	$tableau_format.$getNegativeFormat = function Format$GetNegativeFormat(negativeFormat) {
		var index = parseInt(negativeFormat, 10);
		var unknownNegativeFormat = index < 0 || index >= $tableau_format.$negativeFormats.length;
		ss.Debug.assert(!unknownNegativeFormat, 'Unknown negative format');
		return (unknownNegativeFormat ? 'automatic' : $tableau_format.$negativeFormats[index]);
	};
	$tableau_format.$formatRawInt = function Format$FormatRawInt(v) {
		return $tableau_format.$trunc(v);
	};
	$tableau_format.$formatNumberAutomatic = function Format$FormatNumberAutomatic(v, dataType, p, decimalStr, doSeparators, separatorStr, groupingSpecStr) {
		if (dataType === 'i') {
			return $tableau_format.$formatAuto(v, dataType, p, decimalStr, doSeparators, separatorStr, groupingSpecStr, null, null);
		}
		else {
			return $tableau_format.$formatAuto(v, dataType, p, decimalStr, doSeparators, separatorStr, groupingSpecStr, $tableau_format.$minFixedPointReal, $tableau_format.$minExponentialReal);
		}
	};
	$tableau_format.$formatNumberStandard = function Format$FormatNumberStandard(v, dataType, decimalStr, doSeparators, separatorStr, groupingSpecStr) {
		if (dataType === 'i') {
			return $tableau_format.$formatAuto(v, dataType, null, decimalStr, doSeparators, separatorStr, groupingSpecStr, null, $tableau_format.$minExponentialInteger);
		}
		else {
			return $tableau_format.$formatAuto(v, dataType, null, decimalStr, doSeparators, separatorStr, groupingSpecStr, $tableau_format.$minFixedPointReal, $tableau_format.$minExponentialReal);
		}
	};
	$tableau_format.$formatAuto = function Format$FormatAuto(v, dataType, placesNeg, decimalStr, doSeparators, separatorStr, groupingSpecStr, minFixedPoint, minExponential) {
		var places;
		var trimTrailingZeros;
		var autoExponential;
		if (ss.isValue(placesNeg) && ss.unbox(placesNeg) <= 0) {
			places = -ss.unbox(placesNeg);
			autoExponential = trimTrailingZeros = false;
		}
		else {
			places = $tableau_format.$maxPlaces(v, dataType, true);
			autoExponential = trimTrailingZeros = true;
		}
		var vabs = Math.abs(v);
		if (autoExponential && vabs !== 0 && (ss.isValue(minExponential) && ss.Nullable$1.ge(vabs, minExponential) || ss.isValue(minFixedPoint) && ss.Nullable$1.lt(vabs, minFixedPoint))) {
			var exponentialPlaces = $tableau_format.$maxPlaces(1, dataType, true);
			var expo = $tableau_format.$formatExponential(v, exponentialPlaces, decimalStr);
			if (trimTrailingZeros) {
				return expo.replace(new RegExp('[' + decimalStr + ']?0+e'), 'e');
			}
		}
		var frac = v - $tableau_format.$trunc(v);
		var intPart = $tableau_format.formatIntAuto(v, doSeparators, separatorStr, groupingSpecStr);
		var fracPart = '';
		fracPart = $tableau_format.$toFixedRounded(frac, places);
		if (Math.abs(parseFloat(fracPart)) >= 1) {
			intPart = $tableau_format.formatIntAuto($tableau_format.$trunc(v + parseFloat(fracPart)), doSeparators, separatorStr, groupingSpecStr);
			fracPart = fracPart.replace(new RegExp('1'), '0');
		}
		if (!(fracPart.indexOf('.') !== -1)) {
			return intPart;
		}
		if (trimTrailingZeros) {
			fracPart = fracPart.replace(new RegExp('0+$'), '');
			if (ss.endsWithString(fracPart, '.')) {
				return intPart;
			}
		}
		fracPart = fracPart.replace(new RegExp('^-?0\\.'), decimalStr);
		if (v < 0 && intPart === '0' && !(new RegExp('^\\.0+$')).test(fracPart)) {
			intPart = '-0';
		}
		return intPart + fracPart;
	};
	$tableau_format.$maxPlaces = function Format$MaxPlaces(v, dataType, enforceWinMax) {
		var maxSignificantDigits = ((dataType === 'i') ? $tableau_format.$maxIntegerSignificantDigits : $tableau_format.$maxSignificantDigits);
		var maxPlaces = Math.max(0, maxSignificantDigits - Math.abs($tableau_format.$trunc(v)).toString().length);
		if (enforceWinMax) {
			return Math.min(maxPlaces, $tableau_format.$windowsMaxDecimalPlaces);
		}
		else {
			return maxPlaces;
		}
	};
	$tableau_format.$formatExponential = function Format$FormatExponential(v, decimalPlaces, decimalStr) {
		if (isNaN(v) || !isFinite(v)) {
			return v.toString();
		}
		if (decimalPlaces < 0 || isNaN(decimalPlaces)) {
			decimalPlaces = 0;
		}
		if (decimalPlaces > $tableau_format.$maxSignificantDigits) {
			decimalPlaces = $tableau_format.$maxSignificantDigits;
		}
		var f = $tableau_format.$toExponentialRounded(v, decimalPlaces);
		var whereE = f.indexOf(String.fromCharCode(101));
		var exp = f.substr(whereE);
		if (exp.length < 4) {
			f = f.substr(0, whereE + 2) + '0' + f.substr(whereE + 2);
		}
		f = f.replace(new RegExp('\\.'), decimalStr);
		return f;
	};
	$tableau_format.$toExponentialRounded = function Format$ToExponentialRounded(v, decimalPlaces) {
		return $tableau_format.$toFormatRounded(v, decimalPlaces, $tableau_format.$maxSignificantDigits, function(x, places) {
			return x.toExponential(places);
		});
	};
	$tableau_format.$toFixedRounded = function Format$ToFixedRounded(v, decimalPlaces) {
		return $tableau_format.$toFormatRounded(v, decimalPlaces, $tableau_format.$maxPlaces(v, 'r', false), function(x, places) {
			return x.toFixed(places);
		});
	};
	$tableau_format.$toFormatRounded = function Format$ToFormatRounded(v, decimalPlaces, maxPlaces, converter) {
		maxPlaces = Math.max(maxPlaces - 1, decimalPlaces);
		var f = converter(v, maxPlaces);
		var whereE = f.indexOf(String.fromCharCode(101));
		if (whereE === -1) {
			whereE = f.length;
		}
		var roundPlace = whereE - (maxPlaces - decimalPlaces);
		var trailingDigit = f.charCodeAt(roundPlace);
		if (f.charCodeAt(roundPlace - 1) === $tableau_format.$decimalPoint) {
			roundPlace--;
		}
		f = f.substr(0, roundPlace) + f.substr(whereE, f.length);
		if (trailingDigit >= $tableau_format.$five && trailingDigit <= $tableau_format.$nine) {
			var roundDigit;
			do {
				roundPlace--;
				roundDigit = f.charCodeAt(roundPlace);
				if (roundDigit === $tableau_format.$decimalPoint || roundDigit === $tableau_format.$minusSign) {
					roundDigit = $tableau_format.$zero;
					continue;
				}
				roundDigit++;
				if (roundDigit > $tableau_format.$nine) {
					roundDigit = $tableau_format.$zero;
				}
				f = f.substr(0, roundPlace) + String.fromCharCode(roundDigit) + f.substr(roundPlace + 1, f.length);
			} while (roundDigit === $tableau_format.$zero && roundPlace > 0);
			if (roundDigit === $tableau_format.$zero && roundPlace === 0) {
				f = converter(v, decimalPlaces);
			}
		}
		return f;
	};
	$tableau_format.$formatPercentage = function Format$FormatPercentage(v, dataType, decimalPlaces, format) {
		if (decimalPlaces === -1) {
			return $tableau_format.$formatAuto(v * 100, dataType, null, format[$tableau_format.$nfDecimalPointChars], format[$tableau_format.nfUseSeparators], format[$tableau_format.nfGroupSeparatorChars], format[$tableau_format.nfGroupingSpec], null, null) + '%';
		}
		else {
			return $tableau_format.$formatRealCustom(v * 100, decimalPlaces, format) + '%';
		}
	};
	$tableau_format.$formatReal = function Format$FormatReal(v, dataType, format, precision, role) {
		if (ss.isNullOrUndefined(format) || format.length !== 10) {
			return $tableau_format.$formatNumberAutomatic(v, dataType, precision, '.', ((role === 'd') ? null : 't'), ',', '3;0');
		}
		var decimalPlaces = parseInt(format[$tableau_format.$nfDecimalPlaces], 10);
		switch (format[$tableau_format.$nfType]) {
			case '': {
				if (decimalPlaces === -1) {
					return $tableau_format.$formatNumberAutomatic(v, dataType, null, format[$tableau_format.$nfDecimalPointChars], format[$tableau_format.nfUseSeparators], format[$tableau_format.nfGroupSeparatorChars], format[$tableau_format.nfGroupingSpec]);
				}
				else {
					return $tableau_format.$formatNumberAutomatic(v, dataType, -decimalPlaces, format[$tableau_format.$nfDecimalPointChars], format[$tableau_format.nfUseSeparators], format[$tableau_format.nfGroupSeparatorChars], format[$tableau_format.nfGroupingSpec]);
				}
			}
			case 'N': {
				return $tableau_format.$formatNumberStandard(v, dataType, format[$tableau_format.$nfDecimalPointChars], format[$tableau_format.nfUseSeparators], format[$tableau_format.nfGroupSeparatorChars], format[$tableau_format.nfGroupingSpec]);
			}
			case 'e': {
				return $tableau_format.$formatExponential(v, decimalPlaces, format[$tableau_format.$nfDecimalPointChars]);
			}
			case 'p': {
				return $tableau_format.$formatPercentage(v, dataType, decimalPlaces, format);
			}
			default: {
				return $tableau_format.$formatRealCustom(v, decimalPlaces, format);
			}
		}
	};
	$tableau_format.$formatRealCustom = function Format$FormatRealCustom(v, decimalPlaces, format) {
		v = $tableau_format.$applyUnitAdjustment(v, format[$tableau_format.$nfUnits]);
		var combinedSuffix = format[$tableau_format.$nfUnits] + format[$tableau_format.$nfSuffix];
		var decimals = $tableau_format.applyDecimalPlaces(v, decimalPlaces, format[$tableau_format.$nfDecimalPointChars]);
		if (typeof(decimals) === 'number') {
			v += decimals;
			decimals = $tableau_format.applyDecimalPlaces(0, decimalPlaces, format[$tableau_format.$nfDecimalPointChars]);
		}
		var str = $tableau_format.$applySeparators(v, format[$tableau_format.nfUseSeparators], format[$tableau_format.nfGroupSeparatorChars], format[$tableau_format.nfGroupingSpec]) + decimals;
		return $tableau_format.$applyNegativeFormat(v, str, format[$tableau_format.$nfPrefix], combinedSuffix, format[$tableau_format.$nfNegativeFormat]);
	};
	$tableau_format.$formatInt = function Format$FormatInt(v, format) {
		return $tableau_format.$formatReal($tableau_format.$trunc(v), 'i', format, null, null);
	};
	$tableau_format._convertFormatStringsToFormattingInfo = function Format$ConvertFormatStringsToFormattingInfo(formatStrings) {
		var fi = {};
		fi.format = formatStrings[0];
		fi.locale = formatStrings[1];
		fi.originalFormat = formatStrings[2];
		fi.timeFormat = formatStrings[3];
		fi.calOpts = new $tab_CalendarOptions();
		fi.calOpts.fiscalYearStart = parseInt(formatStrings[4]);
		if (isNaN(fi.calOpts.fiscalYearStart)) {
			fi.calOpts.fiscalYearStart = 0;
		}
		fi.calOpts.startOfWeek = parseInt(formatStrings[5]);
		if (isNaN(fi.calOpts.startOfWeek)) {
			fi.calOpts.startOfWeek = 1;
		}
		fi.calOpts.minDaysInFirstWeek = parseInt(formatStrings[6]);
		if (isNaN(fi.calOpts.minDaysInFirstWeek)) {
			fi.calOpts.minDaysInFirstWeek = 1;
		}
		fi.calOpts.brokenWeeks = formatStrings[7] === '1';
		return fi;
	};
	$tableau_format.$formatTupleString = function Format$FormatTupleString(tuple) {
		var DelimiterTupleValue = 44;
		var DelimiterTupleOpen = 40;
		var DelimiterTupleClose = 41;
		var DelimiterString = 39;
		var EscapeChar = 92;
		var vals = [];
		tuple = tuple.trim();
		if (tuple.length === 0) {
			return '';
		}
		var length = tuple.length;
		var idxHead = 0;
		if (idxHead >= length || tuple.charCodeAt(idxHead) !== 40) {
			return '';
		}
		++idxHead;
		while (idxHead < length) {
			var idxTail = idxHead;
			var done = false;
			var withinString = 0;
			while (idxTail < length && !done) {
				var ch = tuple.charCodeAt(idxTail);
				if (withinString === 0 && (ch === 44 || ch === 41)) {
					done = true;
					break;
				}
				else if (ch === 92) {
					idxTail += 2;
				}
				else {
					if (ch === 39) {
						withinString = 1 - withinString;
					}
					++idxTail;
				}
			}
			if (!done) {
				return '';
			}
			var s = tuple.substring(idxHead + 1, idxTail - 1);
			s = ss.replaceAllString(s, '\\\\', '\\');
			s = ss.replaceAllString(s, '\\"', '"');
			s = ss.replaceAllString(s, '\\,', ',');
			s = ss.replaceAllString(s, '\\(', '(');
			s = ss.replaceAllString(s, '\\)', ')');
			vals.push(s);
			idxHead = idxTail;
			++idxHead;
		}
		return vals.join(', ');
	};
	global.tableau.format = $tableau_format;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.Types
	var $tableau_types = function() {
	};
	$tableau_types.__typeName = 'tableau.types';
	$tableau_types.$millisecondsPerDay = function Types$MillisecondsPerDay() {
		return ss.unbox(ss.cast($tab_MiscUtil.lazyInitStaticField($tableau_types, 'millisecondsPerDay', function() {
			return 86400000;
		}), ss.Int32));
	};
	$tableau_types.javaScriptOLEEpoch = function Types$JavaScriptOLEEpoch() {
		return ss.unbox(ss.cast($tab_MiscUtil.lazyInitStaticField($tableau_types, 'javascriptOleEpoch', function() {
			return Date.UTC(1899, 11, 30, 0, 0, 0, 0);
		}), ss.Int32));
	};
	$tableau_types.JsDateFromOleDate = function Types$JsDateFromOleDate(f) {
		var days = ((f < 0) ? Math.ceil(f) : Math.floor(f));
		var ms = Math.round(Math.abs(f - days) * $tableau_types.$millisecondsPerDay()) + days * $tableau_types.$millisecondsPerDay();
		return ms + $tableau_types.javaScriptOLEEpoch();
	};
	$tableau_types.OleDateFromJsDate = function Types$OleDateFromJsDate(ms) {
		var t = new Date(ms);
		var d = Date.UTC(t.getUTCFullYear(), t.getUTCMonth(), t.getUTCDate());
		var days = ss.Int32.div(d - $tableau_types.javaScriptOLEEpoch(), $tableau_types.$millisecondsPerDay());
		var time = (ms - d) / $tableau_types.$millisecondsPerDay();
		return days + ((days < 0) ? -1 : 1) * time;
	};
	$tableau_types.isO = function Types$IsO(field) {
		return ss.referenceEquals(field.fieldType, $tableau_types_FieldTypeTypes.FT_ORDINAL) || ss.referenceEquals(field.fieldType, $tableau_types_FieldTypeTypes.FT_NOMINAL);
	};
	$tableau_types.isMetadata = function Types$IsMetadata(field) {
		return field.column_class === 0;
	};
	$tableau_types.isOm = function Types$IsOm(field) {
		return $tableau_types.isO(field) && $tableau_types.isMetadata(field);
	};
	$tableau_types.getRegionType = function Types$GetRegionType(regionName) {
		switch (regionName) {
			case 'viz':
			case 'bottomaxis':
			case 'topaxis':
			case 'leftaxis':
			case 'rightaxis':
			case 'xheader':
			case 'yheader': {
				return $tableau_types_RegionType.table;
			}
			case 'color':
			case 'shape':
			case 'size':
			case 'map': {
				return $tableau_types_RegionType.legend;
			}
			case 'filter': {
				return $tableau_types_RegionType.filter;
			}
			case 'current-page': {
				return $tableau_types_RegionType.currentPage;
			}
			case 'title': {
				return $tableau_types_RegionType.title;
			}
			case 'text': {
				return $tableau_types_RegionType.text;
			}
			case 'bitmap': {
				return $tableau_types_RegionType.bitmap;
			}
			case 'web': {
				return $tableau_types_RegionType.web;
			}
			case 'paramctrl': {
				return $tableau_types_RegionType.parameter;
			}
			case 'draw': {
				return $tableau_types_RegionType.draw;
			}
			case 'text-block': {
				return $tableau_types_RegionType.textBlock;
			}
			case 'layout-basic':
			case 'layout-flow': {
				return $tableau_types_RegionType.layoutContainer;
			}
			default: {
				return null;
			}
		}
	};
	global.tableau.types = $tableau_types;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.UIUtil
	var $tableau_util = function() {
	};
	$tableau_util.__typeName = 'tableau.util';
	$tableau_util.assetUrl = function UIUtil$AssetUrl(res, useLocal) {
		var prefix = (useLocal ? tsConfig.local_static_asset_prefix : tsConfig.external_static_asset_prefix);
		if (res.charCodeAt(0) === 47) {
			var last_prefix_char_index = prefix.length - 1;
			if (prefix.charCodeAt(last_prefix_char_index) === 47) {
				return prefix.substring(0, last_prefix_char_index - 1) + res;
			}
			else {
				return prefix + res;
			}
		}
		else {
			return prefix + '/' + res;
		}
	};
	$tableau_util.isPrintableNonNumericKeyPressed = function UIUtil$IsPrintableNonNumericKeyPressed(e) {
		return $tableau_util.isPrintableNonNumericInput(e.which, e.shiftKey, e.ctrlKey);
	};
	$tableau_util.isPrintableNonNumericInput = function UIUtil$IsPrintableNonNumericInput(charCode, shiftKey, ctlKey) {
		var isNavigationOrNumPadkeyCode = charCode >= 91 && charCode <= 105;
		var isFunctionKeyCode = charCode >= 112 && charCode <= 123;
		var isNonPrintable = charCode < 47;
		var isNumber = !shiftKey && !ctlKey && (charCode >= 48 && charCode <= 57);
		return !isNavigationOrNumPadkeyCode && !isNonPrintable && !isNumber && !isFunctionKeyCode;
	};
	$tableau_util.preventNonNumericInput = function UIUtil$PreventNonNumericInput(e) {
		if ($tableau_util.isPrintableNonNumericKeyPressed(e)) {
			e.preventDefault();
			e.stopPropagation();
		}
	};
	$tableau_util.inputWouldOverflowMaxLength = function UIUtil$InputWouldOverflowMaxLength(inputData, currentValue, maxLength) {
		if (ss.isNullOrUndefined(inputData)) {
			inputData = '';
		}
		if (ss.isNullOrUndefined(currentValue)) {
			currentValue = '';
		}
		if (inputData.length === 1) {
			var c = inputData.charCodeAt(0);
			if (c <= 8 || c === 127 || c >= 14 && c <= 31 || c === 11 || c === 12) {
				return false;
			}
		}
		return inputData.length + currentValue.length > maxLength;
	};
	$tableau_util.maxLengthEnforcingBeforeInputHandler = function UIUtil$MaxLengthEnforcingBeforeInputHandler(maxLength) {
		return function(e) {
			if ($tableau_util.inputWouldOverflowMaxLength(e.data, ss.cast(e.target, ss.isValue(e.target) && (ss.isInstanceOfType(e.target, Element) && e.target.tagName === 'INPUT')).value, maxLength)) {
				e.preventDefault();
				e.stopPropagation();
			}
		};
	};
	$tableau_util.isElementVisible = function UIUtil$IsElementVisible(node) {
		return $(node).css('display') !== 'none';
	};
	$tableau_util.findElementByTagName = function UIUtil$FindElementByTagName(rootNode, tagName, attrMap) {
		rootNode = rootNode || $tab_DomUtil.get_documentBody();
		if ($tableau_util.isNodeMatch(rootNode, tagName, attrMap)) {
			return rootNode;
		}
		var elems = rootNode.getElementsByTagName(tagName);
		var length = elems.length;
		for (var i = 0; i < length; i += 1) {
			if ($tableau_util.isNodeMatch(elems[i], tagName, attrMap)) {
				return elems[i];
			}
		}
		return null;
	};
	$tableau_util.findDirectParentByClassName = function UIUtil$FindDirectParentByClassName(startNode, className, endNode) {
		if (ss.isNullOrUndefined(startNode) || $tab_MiscUtil.isNullOrEmpty$1(className)) {
			return null;
		}
		endNode = endNode || document.body;
		var currentNode = ss.cast(startNode.parentNode, HTMLElement);
		while (!ss.isNullOrUndefined(currentNode) && !ss.referenceEquals(currentNode, endNode)) {
			if (!$tab_MiscUtil.isNullOrEmpty$1(currentNode.className)) {
				if (ss.referenceEquals(currentNode.className.toLowerCase(), className.toLowerCase())) {
					return currentNode;
				}
				currentNode = ss.cast(currentNode.parentNode, HTMLElement);
			}
		}
		return null;
	};
	$tableau_util.isNodeMatch = function UIUtil$IsNodeMatch(node, tagName, attrMap) {
		if (ss.isNullOrUndefined(node) || !ss.referenceEquals(node.tagName.toLowerCase(), tagName.toLowerCase())) {
			return false;
		}
		if (ss.isNullOrUndefined(attrMap)) {
			return true;
		}
		var $t1 = ss.getEnumerator(Object.keys(attrMap));
		try {
			while ($t1.moveNext()) {
				var attr = $t1.current();
				if (attr in attrMap && !ss.referenceEquals(node[attr], attrMap[attr])) {
					return false;
				}
			}
		}
		finally {
			$t1.dispose();
		}
		return true;
	};
	$tableau_util.binarySearch = function(T) {
		return function UIUtil$BinarySearch(value, array, startIndex, endIndex, comparer) {
			var min = ($tab_MiscUtil.isValidIndex(ss.coalesce(startIndex, -1), array) ? ss.unbox(startIndex) : 0);
			var max = ($tab_MiscUtil.isValidIndex(ss.coalesce(endIndex, -1), array) ? ss.unbox(endIndex) : (array.length - 1));
			if (ss.isNullOrUndefined(comparer)) {
				comparer = $tableau_util.$defaultComparer(T);
			}
			var res = {};
			while (min <= max) {
				var mid = Math.floor(min + (max - min) / 2);
				var compare = comparer(array[mid], value);
				if (compare === 0) {
					res.found = true;
					res.index = mid;
					return res;
				}
				else if (compare < 0) {
					min = mid + 1;
				}
				else {
					max = mid - 1;
				}
			}
			res.found = false;
			res.index = min;
			return res;
		};
	};
	$tableau_util.$defaultComparer = function(T) {
		return function UIUtil$DefaultComparer(item1, item2) {
			if (item1 === item2) {
				return 0;
			}
			else if (item1 > item2) {
				return -1;
			}
			else {
				return 1;
			}
		};
	};
	$tableau_util.transform = function UIUtil$Transform(node, spec) {
		spec = spec || { scale: 1, scaleX: 1, scaleY: 1, translateX: 0, translateY: 0, transformOrigin: null, time: 0 };
		if (ss.isNullOrUndefined(spec.transformOrigin)) {
			spec.transformOrigin = { x: ss.Int32.div(node.offsetWidth, 2), y: ss.Int32.div(node.offsetHeight, 2) };
		}
		if (spec.scale !== 1) {
			spec.scaleX = spec.scaleY = spec.scale;
		}
		var str;
		if (window.WebKitCSSMatrix !== undefined && (new WebKitCSSMatrix()).m11 !== undefined) {
			str = ['translate3d(', spec.translateX.toString(), 'px,', spec.translateY.toString(), 'px, 0px)'].join('');
		}
		else {
			str = ['translate(', spec.translateX.toString(), 'px,', spec.translateY.toString(), 'px)'].join('');
		}
		str += [' scale(', spec.scaleX.toString(), ', ', spec.scaleY.toString(), ')'].join('');
		node.style['transitionProperty'] = 'transform';
		node.style['transitionTimingFunction'] = 'cubic-bezier(0, 0, 0.25, 1)';
		node.style['transitionDuration'] = spec.time + 'ms';
		node.style['transform'] = str;
		node.style['webkitTransitionProperty'] = '-webkit-transform';
		node.style['webkitTransitionTimingFunction'] = 'cubic-bezier(0, 0, 0.25, 1)';
		node.style['webkitTransitionDuration'] = spec.time + 'ms';
		node.style['webkitTransform'] = str;
		node.style['MozTransitionProperty'] = '-moz-transform';
		node.style['MozTransitionTimingFunction'] = 'cubic-bezier(0, 0, 0.25, 1)';
		node.style['MozTransitionDuration'] = spec.time + 'ms';
		node.style['MozTransform'] = str;
		if (ss.isValue(spec.transformOrigin)) {
			var transformOriginStr = spec.transformOrigin.x + 'px ' + spec.transformOrigin.y + 'px';
			node.style['transformOrigin'] = transformOriginStr;
			node.style['webkitTransformOrigin'] = transformOriginStr;
			node.style['MozTransformOrigin'] = transformOriginStr;
		}
	};
	$tableau_util.parseUri = function UIUtil$ParseUri(uri) {
		var $t1 = document.createElement('a');
		var a = ss.cast($t1, ss.isValue($t1) && (ss.isInstanceOfType($t1, Element) && $t1.tagName === 'A'));
		var location = a;
		if (ss.isNullOrUndefined(uri)) {
			return null;
		}
		a.href = uri;
		var parsedUri = ss.mkdict(['href', uri, 'host', location.host, 'hostname', location.hostname, 'pathname', location.pathname, 'port', location.port, 'protocol', location.protocol, 'search', location.search]);
		return parsedUri;
	};
	$tableau_util.setupTitleEllipsis = function UIUtil$SetupTitleEllipsis(domTitleBar) {
		domTitleBar.find('div').each(function(idx, elem) {
			var div = $(elem);
			var partitions = div.children('span');
			var ellipsisPart = null;
			var titleWidth = $tab_DoubleUtil.roundToInt(div.width());
			var ELLIPSIS_BUFFER = 10;
			titleWidth -= ELLIPSIS_BUFFER;
			for (var i = 0; i < partitions.length; i++) {
				var partition = partitions[i];
				var partWidth = $tab_DoubleUtil.roundToInt($(partition).width());
				ellipsisPart = partition;
				if (partWidth > titleWidth) {
					break;
				}
				titleWidth -= partWidth;
			}
			if (ss.isValue(ellipsisPart)) {
				div.css('font-family', ellipsisPart.style.fontFamily);
				div.css('font-size', ellipsisPart.style.fontSize);
				div.css('line-height', ellipsisPart.style.lineHeight);
				div.css('color', ellipsisPart.style.color);
				div.css('font-weight', ellipsisPart.style.fontWeight);
				div.css('font-style', ellipsisPart.style.fontStyle);
				div.css('text-decoration', ellipsisPart.style.textDecoration);
			}
			div.css('text-overflow', 'ellipsis');
			div.css('overflow', 'hidden');
		});
	};
	global.tableau.util = $tableau_util;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.CFStyle
	var $tableau_types_CFStyle = function() {
	};
	$tableau_types_CFStyle.__typeName = 'tableau.types.CFStyle';
	global.tableau.types.CFStyle = $tableau_types_CFStyle;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.CFType
	var $tableau_types_CFType = function() {
	};
	$tableau_types_CFType.__typeName = 'tableau.types.CFType';
	global.tableau.types.CFType = $tableau_types_CFType;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.DataSpecial
	var $tableau_types_DataSpecial = function() {
	};
	$tableau_types_DataSpecial.__typeName = 'tableau.types.DataSpecial';
	global.tableau.types.DataSpecial = $tableau_types_DataSpecial;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.DataValueType
	var $tableau_types_DataType = function() {
	};
	$tableau_types_DataType.__typeName = 'tableau.types.DataType';
	global.tableau.types.DataType = $tableau_types_DataType;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.FieldTypeTypes
	var $tableau_types_FieldTypeTypes = function() {
	};
	$tableau_types_FieldTypeTypes.__typeName = 'tableau.types.FieldTypeTypes';
	global.tableau.types.FieldTypeTypes = $tableau_types_FieldTypeTypes;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.HFStyle
	var $tableau_types_HFStyle = function() {
	};
	$tableau_types_HFStyle.__typeName = 'tableau.types.HFStyle';
	global.tableau.types.HFStyle = $tableau_types_HFStyle;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.QFDomain
	var $tableau_types_QFDomain = function() {
	};
	$tableau_types_QFDomain.__typeName = 'tableau.types.QFDomain';
	global.tableau.types.QFDomain = $tableau_types_QFDomain;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.QFFixed
	var $tableau_types_QFFixed = function() {
	};
	$tableau_types_QFFixed.__typeName = 'tableau.types.QFFixed';
	global.tableau.types.QFFixed = $tableau_types_QFFixed;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.QFInclude
	var $tableau_types_QFInclude = function() {
	};
	$tableau_types_QFInclude.__typeName = 'tableau.types.QFInclude';
	$tableau_types_QFInclude.isRange = function QFInclude$IsRange(v) {
		switch (v) {
			case 'include-all':
			case 'include-null':
			case 'include-non-null': {
				return false;
			}
			default: {
				return true;
			}
		}
	};
	global.tableau.types.QFInclude = $tableau_types_QFInclude;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.RegionType
	var $tableau_types_RegionType = function() {
	};
	$tableau_types_RegionType.__typeName = 'tableau.types.RegionType';
	global.tableau.types.RegionType = $tableau_types_RegionType;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.TableauTypesFieldRole
	var $tableau_types_TableauTypesFieldRole = function() {
	};
	$tableau_types_TableauTypesFieldRole.__typeName = 'tableau.types.TableauTypesFieldRole';
	global.tableau.types.TableauTypesFieldRole = $tableau_types_TableauTypesFieldRole;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.NoClickDelay
	var $tableau_util_NoClickDelay = function(el) {
		this.$element = null;
		this.$moved = false;
		this.$element = el;
		if ($tab_BrowserSupport.isTouch) {
			this.$element.addEventListener('touchstart'.toString(), ss.mkdel(this, this.handleEvent), false);
		}
	};
	$tableau_util_NoClickDelay.__typeName = 'tableau.util.NoClickDelay';
	global.tableau.util.NoClickDelay = $tableau_util_NoClickDelay;
	ss.initEnum($ColumnClass, $asm, { CLASS_METADATA: 0, CLASS_DATABASE: 1, CLASS_NUMERICBIN: 2, CLASS_CATEGORICALBIN: 3, CLASS_INSTANCE: 4, CLASS_MDXCALC: 5, CLASS_USERCALC: 6, CLASS_DANGLING: 7, CLASS_LOCALDATA: 8 });
	ss.initEnum($DrillState, $asm, { DRILLNONE: 0, DRILLDOWN: 1, DRILLUP: 2, DRILLBOTH: 3 });
	ss.initEnum($SelectAction, $asm, { simple: 'simple', toggle: 'toggle', range: 'range', menu: 'menu' }, true);
	ss.initClass($tab_$jQuerySelectorExtensionsImpl, $asm, {});
	ss.initInterface($tab_ILogAppender, $asm, { addFilter: null, removeFilter: null, clearFilters: null, log: null });
	ss.initClass($tab_BaseLogAppender, $asm, {
		clearFilters: function BaseLogAppender$ClearFilters() {
			ss.clear(this.$filters);
		},
		addFilter: function BaseLogAppender$AddFilter(f) {
			this.$filters.push(f);
		},
		removeFilter: function BaseLogAppender$RemoveFilter(f) {
			ss.remove(this.$filters, f);
		},
		log: function BaseLogAppender$Log(source, level, message, args) {
			for (var $t1 = 0; $t1 < this.$filters.length; $t1++) {
				var filter = this.$filters[$t1];
				if (!filter(source, level)) {
					continue;
				}
				this.logInternal(source, level, message, args);
				return;
			}
		},
		logInternal: null,
		formatMessage: function BaseLogAppender$FormatMessage(message, args) {
			if (ss.isNullOrUndefined(args) || args.length === 0) {
				return message;
			}
			var sb = new ss.StringBuilder();
			var argNum = 0;
			var prevPercent = false;
			for (var i = 0; i < message.length; i++) {
				var currChar = message.charCodeAt(i);
				if (currChar === 37) {
					if (prevPercent) {
						sb.append('%');
						prevPercent = false;
					}
					else {
						prevPercent = true;
					}
				}
				else {
					if (prevPercent) {
						switch (currChar) {
							case 98:
							case 115:
							case 100:
							case 110:
							case 111: {
								sb.append(((args.length > argNum) ? args[argNum] : ''));
								argNum++;
								break;
							}
						}
					}
					else {
						sb.appendChar(currChar);
					}
					prevPercent = false;
				}
			}
			return sb.toString();
		}
	}, null, [$tab_ILogAppender]);
	ss.initClass($tab_BrowserSupport, $asm, {});
	ss.initClass($tab_CalendarOptions, $asm, {});
	ss.initClass($tab_CallOnDispose, $asm, {
		dispose: function CallOnDispose$Dispose() {
			if (ss.isNullOrUndefined(this.$callOnDispose)) {
				return;
			}
			this.$callOnDispose();
			this.$callOnDispose = null;
		}
	}, null, [ss.IDisposable]);
	ss.initClass($tab_CircleUtil, $asm, {});
	ss.initClass($tab_ConsoleLogAppender, $asm, {
		logInternal: function ConsoleLogAppender$LogInternal(source, level, message, args) {
			if (!!(typeof(window.console) !== 'object')) {
				return;
			}
			message = source.get_name() + ': ' + message;
			var consoleArgs = [];
			if ($tab_BrowserSupport.get_consoleLogFormating()) {
				var $t1 = consoleArgs.concat(message);
				consoleArgs = $t1.concat.apply($t1, args);
			}
			else {
				consoleArgs = consoleArgs.concat(this.formatMessage(message, args));
			}
			try {
				Function.prototype.apply.call(this.$getConsoleMethod(level), window.console, consoleArgs);
			}
			catch ($t2) {
			}
		},
		$getConsoleMethod: function ConsoleLogAppender$GetConsoleMethod(level) {
			var console = window.self['console'];
			if (ss.isNullOrUndefined(this.$levelMethods)) {
				this.$levelMethods = {};
				this.$levelMethods[(1).toString()] = console.log;
				this.$levelMethods[(4).toString()] = console.error;
				this.$levelMethods[(2).toString()] = console.info;
				this.$levelMethods[(3).toString()] = console.warn;
			}
			var $t1 = this.$levelMethods[level.toString()];
			if (ss.isNullOrUndefined($t1)) {
				$t1 = console.log;
			}
			return $t1;
		}
	}, $tab_BaseLogAppender, [$tab_ILogAppender]);
	ss.initClass($tab_DataSourceConnectionAttemptErrorResponse, $asm, {});
	ss.initEnum($tab_DateTimeAutoFormatMode, $asm, { showDateOnly: 0, showTimeOnly: 1, showFullDateTime: 2 });
	ss.initClass($tab_DateUtil, $asm, {});
	ss.initClass($tab_Debouncer, $asm, {
		get_hasPendingAction: function Debouncer$get_HasPendingAction() {
			return ss.isValue(this.$timeoutHandle);
		},
		invokeActionDelayed: function Debouncer$InvokeActionDelayed() {
			ss.Debug.assert(ss.isValue(this.$action), 'invalid action');
			this.cancel();
			this.$timeoutHandle = window.setTimeout(ss.mkdel(this, function() {
				this.$timeoutHandle = null;
				this.$action();
			}), this.$timeout);
		},
		invokeActionImmediate: function Debouncer$InvokeActionImmediate() {
			ss.Debug.assert(ss.isValue(this.$action), 'invalid action');
			this.cancel();
			this.$action();
		},
		cancel: function Debouncer$Cancel() {
			this.$timeoutHandle = $tab_MiscUtil.clearTimeout(this.$timeoutHandle);
		},
		dispose: function Debouncer$Dispose() {
			this.cancel();
			this.$action = null;
		}
	}, null, [ss.IDisposable]);
	ss.initClass($tab_DisposableHolder, $asm, {
		add: function DisposableHolder$Add(a) {
			this.$disposables.push(new $tab_CallOnDispose(a));
		},
		add$1: function DisposableHolder$Add(d) {
			this.$disposables.push(d);
		},
		add$2: function DisposableHolder$Add(ds) {
			ss.arrayAddRange(this.$disposables, ds);
		},
		dispose: function DisposableHolder$Dispose() {
			for (var $t1 = 0; $t1 < this.$disposables.length; $t1++) {
				var disposable = this.$disposables[$t1];
				$tab_MiscUtil.dispose$1(disposable);
			}
			ss.clear(this.$disposables);
		}
	}, null, [ss.IDisposable]);
	ss.initClass($tab_DomUtil, $asm, {});
	ss.initClass($tab_DoubleRectXYUtil, $asm, {});
	ss.initClass($tab_DoubleUtil, $asm, {});
	ss.initClass($tab_ErrorTrace, $asm, {});
	ss.initClass($tab_FeatureFlags, $asm, {});
	ss.initEnum($tab_FeatureParam, $asm, { unknown: 0, newFilter: 4, fieldTypeConversion: 5, newToolbar: 9, buttonDelay: 11, hoverDelay: 12, maxTooltipWhitespace: 18, mapsUseLeafletForGeoSearch: 19, selectionToolsMobile: 23, mapsSearchDebugAlwaysShow: 28, analyticsObjectsDragToViz: 31, gotoMyLocationButton: 32, designTint: 33, newQFWorkbookLevelFormatting: 35, appearanceOfBlendingIcons: 36, outlineStampedShapes: 38, progressiveLoadDelay: 39, catQFDrowdown: 40, offlineMode: 41, opaqueCanvasBackground: 42, logStoryPointCacheHits: 43, dataHLMaxItems: 44, javaScriptHighlighting: 45, debugTools: 46, instrumentObjects: 47 });
	ss.initClass($tab_FeatureParamsLookup, $asm, {});
	ss.initClass($tab_FullscreenUtil, $asm, {});
	ss.initClass($tab_HistoryUtil, $asm, {});
	ss.initClass($tab_HttpResponseCodes, $asm, {});
	ss.initInterface($tab_IAppendableView, $asm, { addToDom: null, onAddedToDom: null });
	ss.initInterface($tab_IBrowserViewport, $asm, { get_dimensions: null, translatePositionToViewport: null, getVisibleRoom: null, getDocumentViewport: null });
	ss.initInterface($tab_ICommonDialogProvider, $asm, { showAlertDialog: null, showConfirmationDialog: null, showErrorDialog: null, showSheetAuthenticationOverlay: null, showGenericDataSourceErrorOverlay: null, showSheetAuthenticationDialog: null, showGenericDataSourceErrorDialog: null, showFileDownloadDialog: null });
	ss.initClass($tab_IntegerRange, $asm, {
		get_from: function IntegerRange$get_From() {
			return this.$from;
		},
		set_from: function IntegerRange$set_From(value) {
			this.$from = value;
		},
		get_to: function IntegerRange$get_To() {
			return this.$to;
		},
		set_to: function IntegerRange$set_To(value) {
			this.$to = value;
		}
	});
	ss.initInterface($tab_IViewModel, $asm, { add_disposed: null, remove_disposed: null }, [ss.IDisposable]);
	ss.initInterface($tab_IWidget, $asm, {});
	ss.initClass($tab_JsSetPolyfillImpl, $asm, {
		add: function JsSetPolyfillImpl$Add(i) {
			ss.Debug.assert(ss.isInstanceOfType(i, String) || ss.isInstanceOfType(i, ss.Int32), 'Invalid type of the dictionary key.');
			this.store[i] = i;
			this.updateSize();
			return this;
		},
		delete: function JsSetPolyfillImpl$Delete(i) {
			var result = this.has(i);
			delete this.store[i];
			this.updateSize();
			return result;
		},
		clear: function JsSetPolyfillImpl$Clear() {
			ss.clearKeys(this.store);
			this.updateSize();
		},
		has: function JsSetPolyfillImpl$Has(i) {
			return ss.keyExists(this.store, i);
		},
		forEach: function JsSetPolyfillImpl$ForEach(callbackFn) {
			var $t1 = ss.getEnumerator(Object.keys(this.store));
			try {
				while ($t1.moveNext()) {
					var key = $t1.current();
					callbackFn(this.store[key]);
				}
			}
			finally {
				$t1.dispose();
			}
		},
		updateSize: function JsSetPolyfillImpl$UpdateSize() {
			this.size = ss.getKeyCount(this.store);
		}
	});
	ss.initClass($tab_JsMapPolyfill, $asm, {
		add: function JsMapPolyfill$Add(i) {
			ss.Debug.assert(false, 'Should never be called for Map');
			return null;
		},
		set: function JsMapPolyfill$Set(key, value) {
			ss.Debug.assert(ss.isInstanceOfType(key, String) || ss.isInstanceOfType(key, ss.Int32), 'Invalid type of the dictionary key.');
			this.store[key] = value;
			this.updateSize();
			return this;
		},
		get: function JsMapPolyfill$Get(key) {
			return this.store[key];
		},
		forEach: function JsMapPolyfill$ForEach(callbackFn) {
			var $t1 = ss.getEnumerator(Object.keys(this.store));
			try {
				while ($t1.moveNext()) {
					var key = $t1.current();
					callbackFn(this.store[key], key);
				}
			}
			finally {
				$t1.dispose();
			}
		}
	}, $tab_JsSetPolyfillImpl);
	ss.initClass($tab_Log, $asm, {});
	ss.initClass($tab_Logger, $asm, {
		get_name: function Logger$get_Name() {
			return this.$name;
		},
		debug: function Logger$Debug(message, args) {
			this.$logInternal(1, message, args);
		},
		info: function Logger$Info(message, args) {
			this.$logInternal(2, message, args);
		},
		warn: function Logger$Warn(message, args) {
			this.$logInternal(3, message, args);
		},
		error: function Logger$Error(message, args) {
			this.$logInternal(4, message, args);
		},
		log: function Logger$Log(level, message, args) {
			this.$logInternal(level, message, args);
		},
		$logInternal: function Logger$LogInternal(level, message, args) {
			try {
				var $t1 = $tab_Logger.get_$appenders();
				for (var $t2 = 0; $t2 < $t1.length; $t2++) {
					var logAppender = $t1[$t2];
					logAppender.log(this, level, message, args);
				}
			}
			catch ($t3) {
			}
		}
	});
	ss.initEnum($tab_LoggerLevel, $asm, { all: 0, debug: 1, info: 2, warn: 3, error: 4, off: 5 });
	ss.initClass($tab_LoopBreakException, $asm, {}, ss.Exception);
	$tab_LoopBreakException.$ctor1.prototype = $tab_LoopBreakException.$ctor2.prototype = $tab_LoopBreakException.prototype;
	ss.initClass($tab_MapUtil, $asm, {});
	ss.initClass($tab_MapUtility, $asm, {});
	ss.initClass($tab_MetricsLogger, $asm, {
		logEvent: function MetricsLogger$LogEvent(evt) {
			if (this.$eventBuffer.length >= $tab_MetricsLogger.$maxEventBufferSize) {
				this.$eventBuffer.shift();
			}
			this.$eventBuffer.push(evt);
			this.$startProcessingTimer();
		},
		attach: function MetricsLogger$Attach() {
			tabBootstrap.MetricsController.setEventLogger(ss.mkdel(this, this.logEvent));
		},
		$startProcessingTimer: function MetricsLogger$StartProcessingTimer(delay) {
			if (ss.isValue(this.$bufferProcessTimerId)) {
				return;
			}
			delay = ss.coalesce(delay, $tab_MetricsLogger.$defaultProcessingDelay);
			this.$bufferProcessTimerId = window.setTimeout(ss.mkdel(this, this.$processBufferedEvents), delay);
		},
		$processBufferedEvents: function MetricsLogger$ProcessBufferedEvents() {
			this.$bufferProcessTimerId = null;
			var metricsToProcess;
			if (this.$eventBuffer.length > $tab_MetricsLogger.$maxEventsToProcess) {
				metricsToProcess = this.$eventBuffer.slice(0, $tab_MetricsLogger.$maxEventsToProcess);
				this.$eventBuffer = this.$eventBuffer.slice($tab_MetricsLogger.$maxEventsToProcess);
				this.$startProcessingTimer($tab_MetricsLogger.$overflowProcessingDelay);
			}
			else {
				metricsToProcess = this.$eventBuffer;
				this.$eventBuffer = [];
			}
			this.$outputEventsToConsole(metricsToProcess);
			if (tsConfig.metricsReportingEnabled) {
				try {
					this.$outputEventsToServer(metricsToProcess);
				}
				catch ($t1) {
				}
			}
		},
		$outputEventsToConsole: function MetricsLogger$OutputEventsToConsole(evts) {
			this.$logger = this.$logger || $tab_Logger.lazyGetLogger($tab_MetricsLogger);
			for (var $t1 = 0; $t1 < evts.length; $t1++) {
				var evt = evts[$t1];
				this.$logger.debug($tab_MetricsLogger.$formatEvent(evt, true), []);
			}
		},
		$outputEventsToServer: function MetricsLogger$OutputEventsToServer(evts) {
			var MaxPayloadLength = 1500;
			var numEvents = evts.length;
			var payload = '';
			if (numEvents === 0) {
				return;
			}
			for (var i = 0; i < numEvents; i++) {
				var evt = evts[i];
				if (evt.eventType === 'wps') {
					continue;
				}
				var formattedEvent = $tab_MetricsLogger.$formatEvent(evt, false);
				if (payload.length > 0 && payload.length + formattedEvent.length > MaxPayloadLength) {
					this.$sendBeacon(tsConfig.metricsServerHostname, payload);
					payload = '';
				}
				else if (payload.length > 0) {
					payload += '&';
				}
				payload += formattedEvent;
			}
			if (payload.length > 0) {
				this.$sendBeacon(tsConfig.metricsServerHostname, payload);
			}
			if (ss.isNullOrUndefined(this.$beaconCleanupTimerId)) {
				this.$beaconCleanupTimerId = window.setTimeout(ss.mkdel(this, this.$cleanupBeaconImages), $tab_MetricsLogger.$beaconCleanupDelay);
			}
		},
		$sendBeacon: function MetricsLogger$SendBeacon(hostname, payload) {
			var Version = 1;
			if ($tab_MiscUtil.isNullOrEmpty$1(hostname) || $tab_MiscUtil.isNullOrEmpty$1(payload)) {
				return;
			}
			var $t1 = document.createElement('img');
			var beaconImg = ss.cast($t1, ss.isValue($t1) && (ss.isInstanceOfType($t1, Element) && $t1.tagName === 'IMG'));
			var versionStr = 'v=' + Version.toString();
			var beaconStr = hostname;
			beaconStr += '?' + versionStr + '&' + payload;
			beaconImg.src = beaconStr;
			this.$beaconImages.push(beaconImg);
			if (this.$beaconImages.length > $tab_MetricsLogger.$maxBeaconElementArraySize) {
				this.$beaconImages.shift();
			}
		},
		$cleanupBeaconImages: function MetricsLogger$CleanupBeaconImages() {
			try {
				this.$beaconCleanupTimerId = null;
				var index = 0;
				while (index < this.$beaconImages.length) {
					if (this.$beaconImages[index].complete) {
						this.$beaconImages.splice(index, 1);
					}
					else {
						index++;
					}
				}
				if (this.$beaconImages.length > 0) {
					this.$beaconCleanupTimerId = window.setTimeout(ss.mkdel(this, this.$cleanupBeaconImages), $tab_MetricsLogger.$beaconCleanupDelay);
				}
			}
			catch ($t1) {
			}
		}
	});
	ss.initClass($tab_MiscUtil, $asm, {});
	ss.initClass($tab_NavigationMetricsCollector, $asm, {});
	ss.initClass($tab_ObjectAccessTracker, $asm, {
		get: function ObjectAccessTracker$Get(target, property, receiver) {
			if (!$tab_ObjectAccessTracker.$isSymbol(property)) {
				var lid = this.$id + '!' + property;
				if (ss.keyExists(this.$tracker, lid)) {
					this.$tracker[lid] = true;
				}
			}
			return target[property];
		}
	});
	ss.initClass($tab_ObjectCoverage, $asm, {
		instrument: function ObjectCoverage$Instrument(toInstrument, objPath) {
			if (objPath === '') {
				this.$originalObject = JSON.parse(JSON.stringify(toInstrument));
			}
			if ($tab_ObjectCoverage.$isObject(toInstrument)) {
				var xasJsDict = toInstrument;
				var $t1 = new ss.ObjectEnumerator(xasJsDict);
				try {
					while ($t1.moveNext()) {
						var k = $t1.current();
						this.$wasCalled[objPath + '!' + k.key] = false;
						if ($tab_ObjectCoverage.$isArray(k.value) || $tab_ObjectCoverage.$isObject(k.value)) {
							xasJsDict[k.key] = this.instrument(k.value, objPath + '!' + k.key);
						}
					}
				}
				finally {
					$t1.dispose();
				}
				return new Proxy(toInstrument, new $tab_ObjectAccessTracker(this.$wasCalled, objPath));
			}
			else if ($tab_ObjectCoverage.$isArray(toInstrument)) {
				var xasJsArray = toInstrument;
				for (var k1 = 0; k1 < xasJsArray.length; k1++) {
					this.$wasCalled[objPath + '!' + k1] = false;
					if ($tab_ObjectCoverage.$isArray(xasJsArray[k1]) || $tab_ObjectCoverage.$isObject(xasJsArray[k1])) {
						xasJsArray[k1] = this.instrument(xasJsArray[k1], objPath + '!' + k1);
					}
				}
				return new Proxy(toInstrument, new $tab_ObjectAccessTracker(this.$wasCalled, objPath));
			}
			return toInstrument;
		}
	});
	ss.initClass($tab_ObjectRegistry, $asm, {});
	ss.initClass($tab_Param, $asm, {});
	ss.initEnum($tab_PathnameKey, $asm, { workbookName: 2, sheetId: 3, authoringSheet: 4 });
	ss.initClass($tab_PointFUtil, $asm, {});
	ss.initClass($tab_PointUtil, $asm, {});
	ss.initClass($tab_PropertyChangedEventArgs, $asm, {
		get_propertyName: function PropertyChangedEventArgs$get_PropertyName() {
			return this.$propertyName;
		}
	}, ss.EventArgs);
	ss.initClass($tab_RecordCast, $asm, {});
	ss.initClass($tab_RectUtil, $asm, {});
	ss.initClass($tab_RectXYUtil, $asm, {});
	ss.initClass($tab_RleDecoder, $asm, {});
	ss.initClass($tab_SetUtilities, $asm, {});
	ss.initClass($tab_SizeUtil, $asm, {});
	ss.initClass($tab_StackLocation, $asm, {});
	ss.initClass($tab_StackTrace, $asm, {});
	ss.initClass($tab_StackTraceAppender, $asm, {
		logInternal: function StackTraceAppender$LogInternal(source, level, message, args) {
			message = this.formatMessage(ss.replaceAllString(message, '\\n', '<br />'), args);
			if (level > 2) {
				try {
					throw new ss.Exception('Logged(' + $tab_Logger.loggerLevelNames[level] + ', from ' + source.get_name() + '): ' + message);
				}
				catch ($t1) {
					var e = ss.Exception.wrap($t1);
					$tab_ErrorTrace.report(e, false);
				}
			}
		}
	}, $tab_BaseLogAppender, [$tab_ILogAppender]);
	ss.initClass($tab_StringTuple, $asm, {
		get_first: function StringTuple$get_First() {
			return this.$first;
		},
		get_second: function StringTuple$get_Second() {
			return this.$second;
		}
	});
	ss.initClass($tab_StyleUtil, $asm, {});
	ss.initClass($tab_Transform, $asm, {
		get_translateX: function Transform$get_TranslateX() {
			return this.$translate.x;
		},
		get_translateY: function Transform$get_TranslateY() {
			return this.$translate.y;
		},
		get_transformType: function Transform$get_TransformType() {
			return this.$transformType;
		},
		get_isNull: function Transform$get_IsNull() {
			return this.$transformType === 0;
		},
		transformBounds: function Transform$TransformBounds(bounds) {
			switch (this.$transformType) {
				case 0: {
					return { x: bounds.minX, y: bounds.minY, w: bounds.maxX - bounds.minX, h: bounds.maxY - bounds.minY };
				}
				case 2: {
					var minX = bounds.minX * this.$scale + this.$translate.x;
					var minY = bounds.minY * this.$scale + this.$translate.y;
					var maxX = bounds.maxX * this.$scale + this.$translate.x;
					var maxY = bounds.maxY * this.$scale + this.$translate.y;
					return { x: minX, y: minY, w: maxX - minX, h: maxY - minY };
				}
				default: {
					ss.Debug.fail('Cannot transform bounds for transform type: ' + this.$transformType);
					return null;
				}
			}
		},
		transformPoint: function Transform$TransformPoint(point) {
			switch (this.$transformType) {
				case 0: {
					return point;
				}
				case 1:
				case 3: {
					return { x: (point.x - this.$translate.x) * this.$inverseScale, y: (point.y - this.$translate.y) * this.$inverseScale };
				}
				default: {
					ss.Debug.fail('Cannot transform point for transform type: ' + this.$transformType);
					return null;
				}
			}
		},
		transformRect: function Transform$TransformRect(rect) {
			switch (this.$transformType) {
				case 0: {
					return { x: rect.x, y: rect.y, w: rect.w, h: rect.h };
				}
				case 1:
				case 3: {
					return { x: (rect.x - this.$translate.x) * this.$inverseScale, y: (rect.y - this.$translate.y) * this.$inverseScale, w: rect.w * this.$inverseScale, h: rect.h * this.$inverseScale };
				}
				default: {
					ss.Debug.fail('Cannot transform rect for transform type: ' + this.$transformType);
					return null;
				}
			}
		},
		transformCircle: function Transform$TransformCircle(c) {
			switch (this.$transformType) {
				case 0: {
					return c;
				}
				case 1:
				case 3: {
					var newCenterX = (c.center.x - this.$translate.x) * this.$inverseScale;
					var newCenterY = (c.center.y - this.$translate.y) * this.$inverseScale;
					return { center: { x: newCenterX, y: newCenterY }, radius: c.radius * this.$inverseScale };
				}
				default: {
					ss.Debug.fail('Cannot transform circle for transform type: ' + this.$transformType);
					return null;
				}
			}
		},
		transformPolygon: function Transform$TransformPolygon(listOfPoints) {
			switch (this.$transformType) {
				case 0: {
					return listOfPoints;
				}
				case 1:
				case 3: {
					var cnt = listOfPoints.length;
					var toRet = new Array(cnt);
					for (var i = 0; i < cnt; i = i + 2) {
						toRet[i] = (listOfPoints[i] - this.$translate.x) * this.$inverseScale;
						toRet[i + 1] = (listOfPoints[i + 1] - this.$translate.y) * this.$inverseScale;
					}
					return toRet;
				}
				default: {
					ss.Debug.fail('Cannot transform polygon for transform type: ' + this.$transformType);
					return null;
				}
			}
		}
	});
	ss.initClass($tab_TransformationMatrix, $asm, {
		get_matrix: function TransformationMatrix$get_Matrix() {
			return this.$matrix;
		},
		reset: function TransformationMatrix$Reset() {
			this.$matrix = [1, 0, 0, 1, 0, 0];
		},
		rotate: function TransformationMatrix$Rotate(rad) {
			var c = Math.cos(rad);
			var s = Math.sin(rad);
			var m11 = this.$matrix[0] * c + this.$matrix[2] * s;
			var m12 = this.$matrix[1] * c + this.$matrix[3] * s;
			var m21 = this.$matrix[0] * -s + this.$matrix[2] * c;
			var m22 = this.$matrix[1] * -s + this.$matrix[3] * c;
			this.$matrix[0] = m11;
			this.$matrix[1] = m12;
			this.$matrix[2] = m21;
			this.$matrix[3] = m22;
		},
		translate: function TransformationMatrix$Translate(dx, dy) {
			this.$matrix[4] = this.$matrix[4] + this.$matrix[0] * dx + this.$matrix[2] * dy;
			this.$matrix[5] = this.$matrix[5] + this.$matrix[1] * dx + this.$matrix[3] * dy;
		},
		scale: function TransformationMatrix$Scale(sx, sy) {
			this.$matrix[0] = this.$matrix[0] * sx;
			this.$matrix[1] = this.$matrix[1] * sx;
			this.$matrix[2] = this.$matrix[2] * sy;
			this.$matrix[3] = this.$matrix[3] * sy;
		},
		setTransform: function TransformationMatrix$SetTransform(m) {
			this.$matrix[0] = m.get_matrix()[0];
			this.$matrix[1] = m.get_matrix()[1];
			this.$matrix[2] = m.get_matrix()[2];
			this.$matrix[3] = m.get_matrix()[3];
			this.$matrix[4] = m.get_matrix()[4];
			this.$matrix[5] = m.get_matrix()[5];
		},
		isEqual: function TransformationMatrix$IsEqual(m) {
			return this.$matrix[0] === m.get_matrix()[0] && this.$matrix[1] === m.get_matrix()[1] && this.$matrix[2] === m.get_matrix()[2] && this.$matrix[3] === m.get_matrix()[3] && this.$matrix[4] === m.get_matrix()[4] && this.$matrix[5] === m.get_matrix()[5];
		},
		clone: function TransformationMatrix$Clone() {
			var clone = new $tab_TransformationMatrix();
			clone.setTransform(this);
			return clone;
		}
	});
	ss.initEnum($tab_TransformationType, $asm, { none: 0, pixelToDomain: 1, domainToPixel: 2, offset: 3 });
	ss.initClass($tab_UriUtil, $asm, {});
	ss.initClass($tab_WindowAppender, $asm, {
		logInternal: function WindowAppender$LogInternal(source, level, message, args) {
			if (ss.isNullOrUndefined(this.$logDiv)) {
				this.$buildLogDiv();
			}
			message = this.formatMessage(ss.replaceAllString(message, '\\n', '<br />'), args);
			this.$logDiv.html(message);
		},
		$buildLogDiv: function WindowAppender$BuildLogDiv() {
			this.$logDiv = $("<div class='log-window-appender'>Debug mode ON</div>");
			this.$logDiv.css(ss.mkdict(['position', 'absolute', 'bottom', '0px', 'right', '0px', 'backgroundColor', 'white', 'opacity', '.8', 'border', '1px solid black', 'minWidth', '5px', 'minHeight', '5px', 'z-index', '100']));
			$('body').append(this.$logDiv);
		}
	}, $tab_BaseLogAppender, [$tab_ILogAppender]);
	ss.initClass($tableau_format, $asm, {});
	ss.initClass($tableau_types, $asm, {});
	ss.initClass($tableau_util, $asm, {});
	ss.initClass($tableau_types_CFStyle, $asm, {});
	ss.initClass($tableau_types_CFType, $asm, {});
	ss.initClass($tableau_types_DataSpecial, $asm, {});
	ss.initClass($tableau_types_DataType, $asm, {});
	ss.initClass($tableau_types_FieldTypeTypes, $asm, {});
	ss.initClass($tableau_types_HFStyle, $asm, {});
	ss.initClass($tableau_types_QFDomain, $asm, {});
	ss.initClass($tableau_types_QFFixed, $asm, {});
	ss.initClass($tableau_types_QFInclude, $asm, {});
	ss.initClass($tableau_types_RegionType, $asm, {});
	ss.initClass($tableau_types_TableauTypesFieldRole, $asm, {});
	ss.initClass($tableau_util_NoClickDelay, $asm, {
		handleEvent: function NoClickDelay$HandleEvent(e) {
			var touchEvent = e;
			switch (e.type) {
				case 'touchstart': {
					this.$onTouchStart(touchEvent);
					break;
				}
				case 'touchmove': {
					this.$onTouchMove(touchEvent);
					break;
				}
				case 'touchend': {
					this.$onTouchEnd(touchEvent);
					break;
				}
			}
		},
		$onTouchStart: function NoClickDelay$OnTouchStart(e) {
			e.preventDefault();
			this.$moved = false;
			this.$element.addEventListener('touchmove'.toString(), ss.mkdel(this, this.handleEvent), false);
			this.$element.addEventListener('touchend'.toString(), ss.mkdel(this, this.handleEvent), false);
		},
		$onTouchMove: function NoClickDelay$OnTouchMove(e) {
			this.$moved = true;
		},
		$onTouchEnd: function NoClickDelay$OnTouchEnd(e) {
			this.$element.removeEventListener('touchmove', ss.mkdel(this, this.handleEvent), false);
			this.$element.removeEventListener('touchend', ss.mkdel(this, this.handleEvent), false);
			if (!this.$moved) {
				var theTarget = document.elementFromPoint(e.changedTouches[0].clientX, e.changedTouches[0].clientY);
				if (theTarget.nodeType === 3) {
					theTarget = ss.cast(theTarget.parentNode, HTMLElement);
				}
				var theEvent = document.createEvent('MouseEvents');
				theEvent['initEvent']('click', true, true);
				theTarget.dispatchEvent(theEvent);
			}
		}
	});
	ss.setMetadata($tab_IView$1, { variance: [1] });
	(function() {
		$tab_Logger.global = $tab_Logger.getLoggerWithName('global');
		$tab_Logger.loggerLevelNames = [];
		$tab_Logger.$logQueryParam = ':log';
		$tab_Logger.$setupUrlFilters();
		$tab_Logger.loggerLevelNames[0] = 'all';
		$tab_Logger.loggerLevelNames[1] = 'debug';
		$tab_Logger.loggerLevelNames[2] = 'info';
		$tab_Logger.loggerLevelNames[3] = 'warn';
		$tab_Logger.loggerLevelNames[4] = 'error';
		$tab_Logger.loggerLevelNames[5] = 'off';
	})();
	(function() {
		$tab_BrowserSupport.$selectStart = false;
		$tab_BrowserSupport.$fonts = 'fonts' in document;
		$tab_BrowserSupport.$postMessage = false;
		$tab_BrowserSupport.$historyApi = false;
		$tab_BrowserSupport.$consoleLogFormatting = false;
		$tab_BrowserSupport.$cssTransformName = 'transform';
		$tab_BrowserSupport.$cssTransitionName = 'transition';
		$tab_BrowserSupport.$shouldUseAlternateHitStrategy = false;
		$tab_BrowserSupport.$canvasLinePattern = false;
		$tab_BrowserSupport.$isSafari = false;
		$tab_BrowserSupport.$isChrome = false;
		$tab_BrowserSupport.$isIE = false;
		$tab_BrowserSupport.$isEdge = false;
		$tab_BrowserSupport.$internetExplorerVersion = 0;
		$tab_BrowserSupport.$googleChromeVersion = 0;
		$tab_BrowserSupport.$safariVersion = 0;
		$tab_BrowserSupport.$iosVersion = 0;
		$tab_BrowserSupport.$isFF = false;
		$tab_BrowserSupport.$isOpera = false;
		$tab_BrowserSupport.$isKhtml = false;
		$tab_BrowserSupport.$isWebKit = false;
		$tab_BrowserSupport.$isMozilla = false;
		$tab_BrowserSupport.$isIos = false;
		$tab_BrowserSupport.$isAndroid = false;
		$tab_BrowserSupport.$isMac = false;
		$tab_BrowserSupport.$isWindows = false;
		$tab_BrowserSupport.$devicePixelRatio = 1;
		$tab_BrowserSupport.$backingStoragePixelRatio = 1;
		$tab_BrowserSupport.$dateInput = false;
		$tab_BrowserSupport.$dateTimeInput = false;
		$tab_BrowserSupport.$dateTimeLocalInput = false;
		$tab_BrowserSupport.$timeInput = false;
		$tab_BrowserSupport.$setSelectionRange = false;
		$tab_BrowserSupport.isTouch = false;
		$tab_BrowserSupport.$detectBrowser();
		$($tab_BrowserSupport.detectBrowserSupport);
		$tab_BrowserSupport.$installPolyfill($tab_JsSetPolyfillImpl).call(null, 'Set');
		$tab_BrowserSupport.$installPolyfill($tab_JsMapPolyfill).call(null, 'Map');
		$tab_BrowserSupport.isTouch = 'ontouchend' in document;
	})();
	(function() {
		$tab_DoubleUtil.epsilon = Math.pow(2, -52);
		$tab_DoubleUtil.$onePlusEpsilon = 1 + $tab_DoubleUtil.epsilon;
		$tab_DoubleUtil.$upperBound = $tab_DoubleUtil.$onePlusEpsilon;
		$tab_DoubleUtil.$lowerBound = 1 / $tab_DoubleUtil.$onePlusEpsilon;
		$tab_DoubleUtil.$longMaxValue = 9.22337203685477E+18;
		$tab_DoubleUtil.$longMinValue = -9.22337203685477E+18;
	})();
	(function() {
		$tab_ConsoleLogAppender.$globalAppender = null;
		$tab_ConsoleLogAppender.enableLogging(function(l, ll) {
			return ll >= 2;
		});
	})();
	(function() {
		$tableau_types_FieldTypeTypes.FT_QUANTITATIVE = 'Q';
		$tableau_types_FieldTypeTypes.FT_ORDINAL = 'O';
		$tableau_types_FieldTypeTypes.FT_NOMINAL = 'N';
		$tableau_types_FieldTypeTypes.FT_UNKNOWN = null;
	})();
	(function() {
		$tableau_types_RegionType.table = 't';
		$tableau_types_RegionType.legend = 'l';
		$tableau_types_RegionType.filter = 'f';
		$tableau_types_RegionType.currentPage = 'p';
		$tableau_types_RegionType.title = 'i';
		$tableau_types_RegionType.text = 'x';
		$tableau_types_RegionType.bitmap = 'b';
		$tableau_types_RegionType.web = 'w';
		$tableau_types_RegionType.draw = 'd';
		$tableau_types_RegionType.textBlock = 'k';
		$tableau_types_RegionType.layoutContainer = 'c';
		$tableau_types_RegionType.parameter = 'a';
	})();
	(function() {
		$tableau_types.ExportDialogType = null;
		var exportDialogType = {};
		$tableau_types.ExportDialogType = exportDialogType;
	})();
	(function() {
		$tab_DateUtil.oneSecond = (new Date(2008, 11, 21, 1, 1, 2)).getTime() - (new Date(2008, 11, 21, 1, 1, 1)).getTime();
		$tab_DateUtil.oneMinute = (new Date(2008, 11, 21, 1, 2)).getTime() - (new Date(2008, 11, 21, 1, 1)).getTime();
		$tab_DateUtil.oneHour = (new Date(2008, 11, 21, 2)).getTime() - (new Date(2008, 11, 21, 1)).getTime();
		$tab_DateUtil.oneDay = (new Date(2008, 11, 21)).getTime() - (new Date(2008, 11, 20)).getTime();
		$tab_DateUtil.oneWeek = (new Date(2008, 11, 21)).getTime() - (new Date(2008, 11, 14)).getTime();
		$tab_DateUtil.$milisInADay = 86400000;
	})();
	(function() {
		$tab_Param.suppressAlerts = false;
	})();
	(function() {
		$tab_DomUtil.$testWaitAttributeName = 'data-tab-test-wait';
		$tab_DomUtil.$translationFuncIndexer = ss.mkdict(['matrix', 4, 'matrix3d', 12, 'translate', 0, 'translate3d', 0, 'translateX', 0, 'translateY', -1]);
		$tab_DomUtil.$uniqueId = 1;
	})();
	(function() {
		$tab_ErrorTrace.$unknownFunctionName = '?';
		$tab_ErrorTrace.$shouldReThrow = false;
		$tab_ErrorTrace.$remoteFetching = true;
		$tab_ErrorTrace.$collectWindowErrors = true;
		$tab_ErrorTrace.$getStack = false;
		$tab_ErrorTrace.$lastExceptionStack = null;
		$tab_ErrorTrace.$lastException = null;
		$tab_ErrorTrace.$sourceCache = {};
		$tab_ErrorTrace.$queuedTraces = [];
		$tab_ErrorTrace.$onErrorHandlerInstalled = false;
		$tab_ErrorTrace.$oldOnErrorHandler = null;
		$tab_ErrorTrace.$safariNativeCodeRegexp = new RegExp('^(eval@)?(\\[native code\\])?$');
		$tab_ErrorTrace.$chromeIEStackRegexp = new RegExp('^\\s*at .*(\\S+\\:\\d+|\\(native\\))', 'm');
		$tab_ErrorTrace.$throwAwayEvalRegexp = new RegExp('(\\(eval at [^\\()]*)|(\\)\\,.*$)');
		$tab_ErrorTrace.$extractLocationRegexp = new RegExp('(.+?)(?:\\:(\\d+))?(?:\\:(\\d+))?$');
		$tab_ErrorTrace.$extractLocationUrlLikeRegexp = new RegExp('[\\(\\)]', 'g');
	})();
	(function() {
		$tab_FeatureFlags.$defaultValues = null;
	})();
	(function() {
		$tab_FeatureParamsLookup.$logger = null;
		$tab_FeatureParamsLookup.$booleanParams = null;
		$tab_FeatureParamsLookup.$floatParams = null;
		$tab_FeatureParamsLookup.$intParams = null;
		$tab_FeatureParamsLookup.$stringParams = null;
		$tab_FeatureParamsLookup.$stringToEnumLookup = null;
		$tab_FeatureParamsLookup.$booleanLookUp = null;
		$tab_FeatureParamsLookup.$floatLookUp = null;
		$tab_FeatureParamsLookup.$intLookUp = null;
		$tab_FeatureParamsLookup.$stringLookUp = null;
		{
			$tab_FeatureParamsLookup.$logger = $tab_Logger.lazyGetLogger($tab_FeatureParamsLookup);
			$tab_FeatureParamsLookup.$booleanParams = [];
			$tab_FeatureParamsLookup.$floatParams = [];
			$tab_FeatureParamsLookup.$intParams = [];
			$tab_FeatureParamsLookup.$stringParams = [];
			$tab_FeatureParamsLookup.$stringToEnumLookup = {};
			$tab_FeatureParamsLookup.$booleanLookUp = {};
			$tab_FeatureParamsLookup.$floatLookUp = {};
			$tab_FeatureParamsLookup.$intLookUp = {};
			$tab_FeatureParamsLookup.$stringLookUp = {};
		}
		$tab_FeatureParamsLookup.$registerBooleanFeatureParam(':newfilter', 4, false);
		$tab_FeatureParamsLookup.$registerBooleanFeatureParam(':fieldconversion', 5, true);
		$tab_FeatureParamsLookup.$registerBooleanFeatureParam(':newtoolbar', 9, false);
		$tab_FeatureParamsLookup.$registerBooleanFeatureParam(':selectiontoolsmobile', 23, true);
		$tab_FeatureParamsLookup.$registerBooleanFeatureParam(':mapssearchdebugalwaysshow', 28, false);
		$tab_FeatureParamsLookup.$registerBooleanFeatureParam(':useleafletforgeosearch', 19, false);
		$tab_FeatureParamsLookup.$registerBooleanFeatureParam(':aodragtoviz', 31, false);
		$tab_FeatureParamsLookup.$registerBooleanFeatureParam(':gotomylocationbutton', 32, true);
		$tab_FeatureParamsLookup.$registerBooleanFeatureParam(':designtint', 33, false);
		$tab_FeatureParamsLookup.$registerBooleanFeatureParam(':newqfwolf', 35, false);
		$tab_FeatureParamsLookup.$registerBooleanFeatureParam(':appearanceofblendingicons', 36, true);
		$tab_FeatureParamsLookup.$registerBooleanFeatureParam(':outlinestampedshapes', 38, false);
		$tab_FeatureParamsLookup.$registerBooleanFeatureParam(':catqfdropdown', 40, false);
		$tab_FeatureParamsLookup.$registerBooleanFeatureParam(':offlinemode', 41, false);
		$tab_FeatureParamsLookup.$registerBooleanFeatureParam(':opaquecanvas', 42, true);
		$tab_FeatureParamsLookup.$registerBooleanFeatureParam(':logstorypointcachehits', 43, false);
		$tab_FeatureParamsLookup.$registerBooleanFeatureParam(':debugtools', 46, false);
		$tab_FeatureParamsLookup.$registerBooleanFeatureParam(':JavaScriptHighlighting', 45, false);
		$tab_FeatureParamsLookup.$registerIntFeatureParam(':buttondelay', 11);
		$tab_FeatureParamsLookup.$registerIntFeatureParam(':hoverdelay', 12);
		$tab_FeatureParamsLookup.$registerIntFeatureParam(':maxtooltipwhitespace', 18);
		$tab_FeatureParamsLookup.$registerIntFeatureParam(':datahlmaxitems', 44);
		$tab_FeatureParamsLookup.$registerIntFeatureParam(':progloaddelay', 39);
		$tab_FeatureParamsLookup.$registerStringFeatureParam(':instrumentobjects', 47);
		$tab_FeatureParamsLookup.$parseFeatureParamsFromUrl();
	})();
	(function() {
		$tab_FullscreenUtil.$fullscreenEnabledProperty = null;
		$tab_FullscreenUtil.$fullscreenElementProperty = null;
		$tab_FullscreenUtil.$exitFullscreenProperty = null;
		$tab_FullscreenUtil.$requestFullscreenProperty = null;
		$tab_FullscreenUtil.$onfullscreenchangeProperty = null;
		$tab_FullscreenUtil.$centeringContainerSelector = '#centeringContainer';
		$tab_FullscreenUtil.$1$FullscreenStateChangedField = null;
		$tab_FullscreenUtil.$fullscreenEnabledProperty = $tab_FullscreenUtil.$findFirstAvailableProperty(document, ['fullscreenEnabled', 'webkitFullscreenEnabled', 'msFullscreenEnabled', 'mozFullScreenEnabled']);
		$tab_FullscreenUtil.$fullscreenElementProperty = $tab_FullscreenUtil.$findFirstAvailableProperty(document, ['fullscreenElement', 'webkitFullscreenElement', 'msFullscreenElement', 'mozFullScreenElement']);
		$tab_FullscreenUtil.$exitFullscreenProperty = $tab_FullscreenUtil.$findFirstAvailableProperty(document, ['exitFullscreen', 'webkitExitFullscreen', 'msExitFullscreen', 'mozCancelFullScreen']);
		$tab_FullscreenUtil.$requestFullscreenProperty = $tab_FullscreenUtil.$findFirstAvailableProperty(document.documentElement, ['requestFullscreen', 'webkitRequestFullscreen', 'msRequestFullscreen', 'mozRequestFullScreen']);
		$tab_FullscreenUtil.$onfullscreenchangeProperty = $tab_FullscreenUtil.$findFirstAvailableProperty(document, ['onfullscreenchange', 'onwebkitfullscreenchange', 'onMSFullscreenChange', 'onmozfullscreenchange']);
		if (ss.isValue($tab_FullscreenUtil.$onfullscreenchangeProperty) && $tab_FullscreenUtil.get_fullscreenEnabled()) {
			document.addEventListener($tab_FullscreenUtil.get_$fullscreenChangeEventName().toString(), $tab_FullscreenUtil.$handleFullscreenChange);
		}
	})();
	(function() {
		$tab_HttpResponseCodes.httpUnauthorizedCode = 401;
		$tab_HttpResponseCodes.httpServiceUnavailable = 503;
		$tab_HttpResponseCodes.httpInternalServerError = 500;
	})();
	(function() {
		$tab_MapUtil.touchEventSamplingRate = 6;
		$tab_MapUtil.defaultWheelDeltaIncrement = 120;
		$tab_MapUtil.minimumZoomLevelIncrement = 0.25;
		$tab_MapUtil.maxWheelDelta = 360;
		$tab_MapUtil.$scrollDeltaMultiplier = 480;
		$tab_MapUtil.$mapboxGLTileSize = 512;
	})();
	(function() {
		$tab_MetricsLogger.$maxBeaconElementArraySize = 100;
		$tab_MetricsLogger.$maxEventBufferSize = 400;
		$tab_MetricsLogger.$maxEventsToProcess = 20;
		$tab_MetricsLogger.$defaultProcessingDelay = 250;
		$tab_MetricsLogger.$overflowProcessingDelay = 5;
		$tab_MetricsLogger.$beaconCleanupDelay = 250;
		$tab_MetricsLogger.$debugParamNames = null;
		$tab_MetricsLogger.$debugEventNames = null;
		$tab_MetricsLogger.$instance = null;
		$tab_MetricsLogger.$debugParamNames = {};
		$tab_MetricsLogger.$debugParamNames['d'] = 'DESC';
		$tab_MetricsLogger.$debugParamNames['t'] = 'TIME';
		$tab_MetricsLogger.$debugParamNames['id'] = 'ID';
		$tab_MetricsLogger.$debugParamNames['sid'] = 'SESSION_ID';
		$tab_MetricsLogger.$debugParamNames['e'] = 'ELAPSED';
		$tab_MetricsLogger.$debugParamNames['v'] = 'VALS';
		$tab_MetricsLogger.$debugParamNames['wb'] = 'WORKBOOK';
		$tab_MetricsLogger.$debugParamNames['s'] = 'SHEET_NAME';
		$tab_MetricsLogger.$debugParamNames['p'] = 'PROPS';
		$tab_MetricsLogger.$debugParamNames['m'] = 'MOBILE';
		$tab_MetricsLogger.$debugEventNames = {};
		$tab_MetricsLogger.$debugEventNames['nav'] = 'Navigation';
		$tab_MetricsLogger.$debugEventNames['wps'] = 'ProfileStart';
		$tab_MetricsLogger.$debugEventNames['wp'] = 'ProfileEnd';
		$tab_MetricsLogger.$debugEventNames['gen'] = 'Generic';
		$tab_MetricsLogger.$debugEventNames['init'] = 'SessionInit';
	})();
	(function() {
		$tab_NavigationMetricsCollector.$navigationMetricsOrder = ['navigationStart', 'unloadEventStart', 'unloadEventEnd', 'redirectStart', 'redirectEnd', 'fetchStart', 'domainLookupStart', 'domainLookupEnd', 'connectStart', 'connectEnd', 'secureConnectionStart', 'requestStart', 'responseStart', 'responseEnd', 'domLoading', 'domInteractive', 'domContentLoadedEventStart', 'domContentLoadedEventEnd', 'domComplete', 'loadEventStart', 'loadEventEnd'];
		$tab_NavigationMetricsCollector.$navMetrics = null;
		var w = window;
		var loadHandler = function(ev) {
			_.defer($tab_NavigationMetricsCollector.collectMetrics);
		};
		if (!!ss.isValue(w.addEventListener)) {
			window.addEventListener('load', loadHandler, false);
		}
		else if (!!ss.isValue(w.attachEvent)) {
			w.attachEvent('load', loadHandler);
		}
	})();
	(function() {
		$tab_ObjectCoverage.trackedObjects = {};
		$tab_ObjectCoverage.$coveredObjects = null;
	})();
	(function() {
		$tab_ObjectRegistry.$typeRegistry = null;
	})();
	(function() {
		$tab_StackTraceAppender.$globalAppender = null;
		$tab_StackTraceAppender.enableLogging(function(l, ll) {
			return ll > 2;
		});
	})();
	(function() {
		$tab_StyleUtil.defaultCustomStyleElementId = 'tab-appendedCustomStyle';
		$tab_StyleUtil.$regexCssClassName = new RegExp('-?[_a-zA-Z]+[_a-zA-Z0-9-]*');
		$tab_StyleUtil.$customStyleSheetDictionary = {};
	})();
	(function() {
		$tab_Transform.$nullTransform = null;
		$tab_Transform.$nullTransform = new $tab_Transform(0, 0, 1, 0);
	})();
	(function() {
		$tab_UriUtil.onlineHelpOrigin = 'http://www.tableau.com';
		$tab_UriUtil.$offlineHelpUrl = '/offline_help/{0}/help.htm#{1}';
	})();
	(function() {
		$tab_WindowAppender.$globalAppender = null;
		$tab_WindowAppender.enableLogging(function(l, ll) {
			return l.get_name() === 'WindowAppender';
		});
	})();
	(function() {
		$tableau_types_DataSpecial.DS_NORMAL = null;
		$tableau_types_DataSpecial.DS_NULL = 'n';
		$tableau_types_DataSpecial.DS_ALL = 'a';
		$tableau_types_DataSpecial.DS_WILDCARD = 'w';
		$tableau_types_DataSpecial.DS_SKIPPED = 's';
		$tableau_types_DataSpecial.DS_NOACCESS = 'p';
		$tableau_types_DataSpecial.DS_RAGGED = 'r';
		$tableau_types_DataSpecial.DS_ERROR = 'e';
		$tableau_types_DataSpecial.DS_MISSING = 'm';
	})();
	(function() {
		$tableau_format.specialManyValues = '%many-values%';
		$tableau_format.specialNull = '%null%';
		$tableau_format.specialError = '%error%';
		$tableau_format.specialRagged = '%ragged%';
		$tableau_format.specialSkipped = '%skipped%';
		$tableau_format.specialMissing = '%missing%';
		$tableau_format.specialAll = '%all%';
		$tableau_format.specialNoAccess = '%no-access%';
		$tableau_format.specialWildcard = '%wildcard%';
		$tableau_format.millisPerDay = 86400000;
		$tableau_format.$maxSignificantDigits = 15;
		$tableau_format.$maxIntegerSignificantDigits = 6;
		$tableau_format.$minExponentialReal = 1E+15;
		$tableau_format.$minExponentialInteger = 1000000;
		$tableau_format.$minFixedPointReal = 0.0001;
		$tableau_format.$windowsMaxDecimalPlaces = 9;
		$tableau_format.$decimalPoint = 46;
		$tableau_format.$minusSign = 45;
		$tableau_format.$zero = 48;
		$tableau_format.$five = 53;
		$tableau_format.$nine = 57;
		$tableau_format.$nfType = 0;
		$tableau_format.$nfDecimalPlaces = 1;
		$tableau_format.nfUseSeparators = 2;
		$tableau_format.$nfPrefix = 3;
		$tableau_format.$nfSuffix = 4;
		$tableau_format.$nfUnits = 5;
		$tableau_format.$nfNegativeFormat = 6;
		$tableau_format.$nfDecimalPointChars = 7;
		$tableau_format.nfGroupSeparatorChars = 8;
		$tableau_format.nfGroupingSpec = 9;
		$tableau_format.$negativeFormats = ['automatic', 'parenthesis', 'outerPrefix', 'outerSuffix', 'innerPrefix', 'innerSuffix'];
		$tableau_format.$iso8601DateFormat = {};
		$tableau_format.$iso8601DateTimeFormat = {};
		$tableau_format.$iso8601TimeFormat = {};
		$tableau_format.$regexpMetacharacters = new RegExp('(\\\\|\\^|\\$|\\*|\\+|\\?|\\.|\\:|\\,|\\(|\\)|\\[|\\]|\\{|\\}|\\|)', 'g');
		$tableau_format.$dateSpaceTime = new RegExp('^([yYmMdD\\W]+)\\s+([hnst\\W]+)$');
		$tableau_format.$secondsField = new RegExp('(\\\\[:.]s+)');
		$tableau_format.$tt = new RegExp('(t+)', 'g');
		$tableau_format.$numericFields = new RegExp('([yYmMdDhnswq]+)', 'g');
		$tableau_format.$spaceBetweenNumbers = new RegExp('\\(\\\\d\\+\\)(?:\\(\\?\\:)?\\s+\\(\\\\d\\+\\)', 'g');
		$tableau_format.$otherWhitespace = new RegExp('\\s', 'g');
		$tableau_format.$charactersAfterDay = new RegExp('(^|d)([^h]*)(h|$)', 'gi');
		$tableau_format.$charactersAfterHour = new RegExp('h([^d]*)(d|$)', 'gi');
		$tableau_format.$am = new RegExp('^(a|a\\.?m\\.?|„èÇ|œÄ\\.?¬µ\\.?|ÂçàÂâç)$', 'i');
		$tableau_format.$pm = new RegExp('^(p|p\\.?m\\.?|„èò|¬µ\\.?¬µ\\.?|ÂçàÂæå)$', 'i');
		$tableau_format.$positiveScientificNotation = new RegExp('(\\d)(?:\\.(\\d+))?e\\+(\\d+)');
		$tableau_format.$icuToOleMap = ss.mkdict(['yyyyy', 'yyyyy', 'yyyy', 'yyyy', 'yyy', 'yyyy', 'yy', 'yy', 'y', 'yyyy', 'L', 'm', 'LL', 'mm', 'LLL', 'mmm', 'LLLL', 'mmmm']);
		$tableau_format.$defaultLocaleStrings = null;
		$tableau_format.$baseTimestamp = ss.mkdict(['t', 't', 'v', $tableau_types.OleDateFromJsDate(Date.UTC(1918, 10, 11, 11, 11, 0))]);
		$tableau_format.$specialValues = null;
		$tableau_format.$fullwidthToAscii = ss.mkdict(['Ôºê', '0', 'Ôºë', '1', 'Ôºí', '2', 'Ôºì', '3', 'Ôºî', '4', 'Ôºï', '5', 'Ôºñ', '6', 'Ôºó', '7', 'Ôºò', '8', 'Ôºô', '9', 'Ôºç', '-', 'Ôºé', '.', '„ÄÇ', '.']);
		$tableau_format.$iso8601DateFormat.format = 'yyyy-mm-dd';
		$tableau_format.$iso8601DateFormat.timeFormat = 'hh:nn';
		$tableau_format.$iso8601DateTimeFormat.format = 'yyyy-mm-ddThh:nn';
		$tableau_format.$iso8601TimeFormat.format = 'hh:nn';
		$tableau_format.$specialValues = ss.mkdict([$tableau_format.specialManyValues, true, $tableau_format.specialNull, true, $tableau_format.specialError, true, $tableau_format.specialRagged, true, $tableau_format.specialSkipped, true, $tableau_format.specialMissing, true, $tableau_format.specialAll, true, $tableau_format.specialNoAccess, true, $tableau_format.specialWildcard, true]);
	})();
	(function() {
		if ($tab_BrowserSupport.get_isMac()) {
			$(document).addClass('tb_mac');
		}
	})();
	(function() {
		$tableau_types_CFStyle.CFS_ALL = 'all';
		$tableau_types_CFStyle.CFS_SINGLE = 'single-select';
		$tableau_types_CFStyle.CFS_MULTIPLE = 'multi-select';
	})();
	(function() {
		$tableau_types_CFType.CFT_INCLUSIVE = 'include';
		$tableau_types_CFType.CFT_EXCLUSIVE = 'exclude';
	})();
	(function() {
		$tableau_types_HFStyle.HFS_SINGLE = 'single-select';
		$tableau_types_HFStyle.HFS_MULTIPLE = 'multi-select';
	})();
	(function() {
		$tableau_types_QFDomain.QFD_ALL = 'all';
		$tableau_types_QFDomain.QFD_CONTEXT = 'context';
		$tableau_types_QFDomain.QFD_RELEVANT = 'relevant';
	})();
	(function() {
		$tableau_types_QFFixed.QFF_FIXED_START = 'start';
		$tableau_types_QFFixed.QFF_FIXED_END = 'end';
	})();
	(function() {
		$tableau_types_QFInclude.QFI_ALL = 'include-all';
		$tableau_types_QFInclude.QFI_NON_NULL = 'include-non-null';
		$tableau_types_QFInclude.QFI_NULL_ONLY = 'include-null';
		$tableau_types_QFInclude.QFI_RANGE = 'include-range';
		$tableau_types_QFInclude.QFI_RANGE_OR_NULL = 'include-range-or-null';
	})();
})();

}());

// END Core
/*! BEGIN ApiShared */

(function() {
	'dont use strict';
	var $asm = {};
	global.tab = global.tab || {};
	global.tableauSoftware = global.tableauSoftware || {};
	ss.initAssembly($asm, 'vqlapishared');
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.DeferredUtil
	var $tab_$DeferredUtil = function() {
	};
	$tab_$DeferredUtil.__typeName = 'tab.$DeferredUtil';
	$tab_$DeferredUtil.$coerceToTrustedPromise = function DeferredUtil$CoerceToTrustedPromise(promiseOrValue) {
		var promise;
		if (promiseOrValue instanceof tableauSoftware.Promise) {
			promise = ss.cast(promiseOrValue, $tab__PromiseImpl);
		}
		else {
			if (ss.isValue(promiseOrValue) && typeof(promiseOrValue['valueOf']) === 'function') {
				promiseOrValue = promiseOrValue['valueOf']();
			}
			if ($tab_$DeferredUtil.$isPromise(promiseOrValue)) {
				var deferred = new $tab__DeferredImpl();
				ss.cast(promiseOrValue, $tab__PromiseImpl).then(ss.mkdel(deferred, deferred.resolve), ss.mkdel(deferred, deferred.reject));
				promise = deferred.get_promise();
			}
			else {
				promise = $tab_$DeferredUtil.$resolved(promiseOrValue);
			}
		}
		return promise;
	};
	$tab_$DeferredUtil.$reject = function DeferredUtil$Reject(promiseOrValue) {
		return $tab_$DeferredUtil.$coerceToTrustedPromise(promiseOrValue).then(function(value) {
			return $tab_$DeferredUtil.$rejected(ss.cast(value, ss.Exception));
		}, null);
	};
	$tab_$DeferredUtil.$resolved = function DeferredUtil$Resolved(value) {
		var p = new $tab__PromiseImpl(function(callback, errback) {
			try {
				return $tab_$DeferredUtil.$coerceToTrustedPromise((ss.isValue(callback) ? callback(value) : value));
			}
			catch ($t1) {
				var e = ss.Exception.wrap($t1);
				return $tab_$DeferredUtil.$rejected(e);
			}
		});
		return p;
	};
	$tab_$DeferredUtil.$rejected = function DeferredUtil$Rejected(reason) {
		var p = new $tab__PromiseImpl(function(callback, errback) {
			try {
				return (ss.isValue(errback) ? $tab_$DeferredUtil.$coerceToTrustedPromise(errback(reason)) : $tab_$DeferredUtil.$rejected(reason));
			}
			catch ($t1) {
				var e = ss.Exception.wrap($t1);
				return $tab_$DeferredUtil.$rejected(e);
			}
		});
		return p;
	};
	$tab_$DeferredUtil.$isPromise = function DeferredUtil$IsPromise(promiseOrValue) {
		return ss.isValue(promiseOrValue) && typeof(promiseOrValue['then']) === 'function';
	};
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.DoNothingCrossDomainHandler
	var $tab_$DoNothingCrossDomainHandler = function() {
		this.$hostId = null;
		this.$1$StateReadyForQueryField = null;
	};
	$tab_$DoNothingCrossDomainHandler.__typeName = 'tab.$DoNothingCrossDomainHandler';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.ApiCommand
	var $tab__ApiCommand = function(name, commandId, hostId, parameters) {
		this.$1$NameField = null;
		this.$1$HostIdField = null;
		this.$1$CommandIdField = null;
		this.$1$ParametersField = null;
		this.set_name(name);
		this.set_commandId(commandId);
		this.set_hostId(hostId);
		this.set_parameters(parameters);
	};
	$tab__ApiCommand.__typeName = 'tab._ApiCommand';
	$tab__ApiCommand.generateNextCommandId = function ApiCommand$GenerateNextCommandId() {
		var commandId = 'cmd' + $tab__ApiCommand.$nextCommandId;
		$tab__ApiCommand.$nextCommandId++;
		return commandId;
	};
	$tab__ApiCommand.parse = function ApiCommand$Parse(serialized) {
		var name;
		var index = serialized.indexOf(String.fromCharCode(44));
		if (index < 0) {
			name = ss.cast(serialized, String);
			return new $tab__ApiCommand(name, null, null, null);
		}
		name = ss.cast(serialized.substr(0, index), String);
		var sourceId;
		var secondPart = serialized.substr(index + 1);
		index = secondPart.indexOf(String.fromCharCode(44));
		if (index < 0) {
			sourceId = secondPart;
			return new $tab__ApiCommand(name, sourceId, null, null);
		}
		sourceId = secondPart.substr(0, index);
		var hostId;
		var thirdPart = secondPart.substr(index + 1);
		index = thirdPart.indexOf(String.fromCharCode(44));
		if (index < 0) {
			hostId = thirdPart;
			return new $tab__ApiCommand(name, sourceId, hostId, null);
		}
		hostId = thirdPart.substr(0, index);
		var parameters = thirdPart.substr(index + 1);
		$tab__ApiCommand.lastResponseMessage = serialized;
		if (name === 'api.GetClientInfoCommand') {
			$tab__ApiCommand.lastClientInfoResponseMessage = serialized;
		}
		return new $tab__ApiCommand(name, sourceId, hostId, parameters);
	};
	global.tab._ApiCommand = $tab__ApiCommand;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.ApiObjectRegistry
	var $tab__ApiObjectRegistry = function() {
	};
	$tab__ApiObjectRegistry.__typeName = 'tab._ApiObjectRegistry';
	$tab__ApiObjectRegistry.registerApiMessageRouter = function ApiObjectRegistry$RegisterApiMessageRouter(objectCreationFunc) {
		return $tab__ApiObjectRegistry.$registerType(Object).call(null, objectCreationFunc);
	};
	$tab__ApiObjectRegistry.getApiMessageRouter = function ApiObjectRegistry$GetApiMessageRouter() {
		return $tab__ApiObjectRegistry.$getSingleton(Object).call(null);
	};
	$tab__ApiObjectRegistry.disposeApiMessageRouter = function ApiObjectRegistry$DisposeApiMessageRouter() {
		$tab__ApiObjectRegistry.$clearSingletonInstance(Object).call(null);
	};
	$tab__ApiObjectRegistry.$registerType = function(T) {
		return function ApiObjectRegistry$RegisterType(objectCreationFunc) {
			var creationRegistry = window._ApiObjectRegistryGlobalState.creationRegistry;
			var interfaceTypeName = ss.getTypeFullName(T);
			var previousType = creationRegistry[interfaceTypeName];
			creationRegistry[interfaceTypeName] = objectCreationFunc;
			return previousType;
		};
	};
	$tab__ApiObjectRegistry.$createType = function(T) {
		return function ApiObjectRegistry$CreateType() {
			var interfaceTypeName = ss.getTypeFullName(T);
			var creationRegistry = window._ApiObjectRegistryGlobalState.creationRegistry;
			var creationFunc = creationRegistry[interfaceTypeName];
			if (ss.isNullOrUndefined(creationFunc)) {
				throw $tab__TableauException.createInternalError("No creation function has been registered for interface type '" + interfaceTypeName + "'.");
			}
			var instance = creationFunc();
			return instance;
		};
	};
	$tab__ApiObjectRegistry.$getSingleton = function(T) {
		return function ApiObjectRegistry$GetSingleton() {
			var singletonInstanceRegistry = window._ApiObjectRegistryGlobalState.singletonInstanceRegistry;
			var interfaceTypeName = ss.getTypeFullName(T);
			var instance = ss.cast(singletonInstanceRegistry[interfaceTypeName], T);
			if (ss.isNullOrUndefined(instance)) {
				instance = $tab__ApiObjectRegistry.$createType(T).call(null);
				singletonInstanceRegistry[interfaceTypeName] = instance;
			}
			return instance;
		};
	};
	$tab__ApiObjectRegistry.$clearSingletonInstance = function(T) {
		return function ApiObjectRegistry$ClearSingletonInstance() {
			var singletonInstanceRegistry = window._ApiObjectRegistryGlobalState.singletonInstanceRegistry;
			var interfaceTypeName = ss.getTypeFullName(T);
			var instance = ss.cast(singletonInstanceRegistry[interfaceTypeName], T);
			delete singletonInstanceRegistry[interfaceTypeName];
			return instance;
		};
	};
	global.tab._ApiObjectRegistry = $tab__ApiObjectRegistry;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.ApiServerNotification
	var $tab__ApiServerNotification = function(workbookName, worksheetName, data) {
		this.$workbookName = null;
		this.$worksheetName = null;
		this.$data = null;
		this.$workbookName = workbookName;
		this.$worksheetName = worksheetName;
		this.$data = data;
	};
	$tab__ApiServerNotification.__typeName = 'tab._ApiServerNotification';
	$tab__ApiServerNotification.deserialize = function ApiServerNotification$Deserialize(json) {
		var param = JSON.parse(json);
		var workbookName = ss.cast(param['api.workbookName'], String);
		var worksheetName = ss.cast(param['api.worksheetName'], String);
		var data = param['api.commandData'];
		return new $tab__ApiServerNotification(workbookName, worksheetName, data);
	};
	global.tab._ApiServerNotification = $tab__ApiServerNotification;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.ApiServerResultParser
	var $tab__ApiServerResultParser = function(serverResult) {
		this.$commandResult = null;
		this.$commandData = null;
		var param = JSON.parse(serverResult);
		this.$commandResult = ss.cast(param['api.commandResult'], String);
		this.$commandData = param['api.commandData'];
	};
	$tab__ApiServerResultParser.__typeName = 'tab._ApiServerResultParser';
	global.tab._ApiServerResultParser = $tab__ApiServerResultParser;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.DoNotUseCollection
	var $tab__CollectionImpl = function() {
		this.$items = [];
		this.$itemMap = {};
	};
	$tab__CollectionImpl.__typeName = 'tab._CollectionImpl';
	global.tab._CollectionImpl = $tab__CollectionImpl;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.ColumnImpl
	var $tab__ColumnImpl = function(fieldName, dataType, isReferenced, index) {
		this.$fieldName = null;
		this.$dataType = null;
		this.$isReferenced = false;
		this.$index = 0;
		$tab__Param.verifyString(fieldName, 'Column Field Name');
		this.$fieldName = fieldName;
		this.$dataType = dataType;
		this.$isReferenced = ss.coalesce(isReferenced, false);
		this.$index = index;
	};
	$tab__ColumnImpl.__typeName = 'tab._ColumnImpl';
	global.tab._ColumnImpl = $tab__ColumnImpl;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.DataTableImpl
	var $tab__DataTableImpl = function(rows, isSummaryData, totalRowCount, columns) {
		this.$name = null;
		this.$rows = null;
		this.$totalRowCount = 0;
		this.$columns = null;
		this.$isSummaryData = false;
		this.$rows = rows;
		this.$totalRowCount = totalRowCount;
		this.$columns = columns;
		this.$isSummaryData = isSummaryData;
		this.$name = (isSummaryData ? 'Summary Data Table' : 'Underlying Data Table');
	};
	$tab__DataTableImpl.__typeName = 'tab._DataTableImpl';
	$tab__DataTableImpl.processGetDataPresModel = function DataTableImpl$ProcessGetDataPresModel(model) {
		var clientTable = $tab__DataTableImpl.$processUnderlyingTable(model.dataTable);
		var clientColumns = $tab__DataTableImpl.$processUnderlyingColumns(model.headers);
		var clientDataTableImpl = new $tab__DataTableImpl(clientTable, model.isSummary, clientTable.length, clientColumns);
		return new $tableauSoftware_DataTable(clientDataTableImpl);
	};
	$tab__DataTableImpl.$processUnderlyingTable = function DataTableImpl$ProcessUnderlyingTable(apiTable) {
		var clientTable = [];
		for (var $t1 = 0; $t1 < apiTable.length; $t1++) {
			var row = apiTable[$t1];
			var clientRow = [];
			for (var $t2 = 0; $t2 < row.length; $t2++) {
				var apiValue = row[$t2];
				clientRow.push($tab__Utility.getDataValue(apiValue));
			}
			clientTable.push(clientRow);
		}
		return clientTable;
	};
	$tab__DataTableImpl.$processUnderlyingColumns = function DataTableImpl$ProcessUnderlyingColumns(apiColumns) {
		var clientColumns = [];
		for (var $t1 = 0; $t1 < apiColumns.length; $t1++) {
			var apiColumn = apiColumns[$t1];
			var clientColumn = new $tab__ColumnImpl(apiColumn.fieldName, $tab_ApiEnumConverter.convertDataType(apiColumn.dataType), apiColumn.isReferenced, apiColumn.index);
			clientColumns.push(new $tableauSoftware_Column(clientColumn));
		}
		return clientColumns;
	};
	global.tab._DataTableImpl = $tab__DataTableImpl;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.DoNotUseDeferred
	var $tab__DeferredImpl = function() {
		this.$promise = null;
		this.$thenFunc = null;
		this.$listeners = [];
		this.$resolveFunc = null;
		this.$promise = new $tab__PromiseImpl(ss.mkdel(this, this.then));
		this.$thenFunc = ss.mkdel(this, this.$preResolutionThen);
		this.$resolveFunc = ss.mkdel(this, this.$transitionToFulfilled);
	};
	$tab__DeferredImpl.__typeName = 'tab._DeferredImpl';
	global.tab._DeferredImpl = $tab__DeferredImpl;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.Param
	var $tab__Param = function() {
	};
	$tab__Param.__typeName = 'tab._Param';
	$tab__Param.verifyString = function Param$VerifyString(argumentValue, argumentName) {
		if (ss.isNullOrUndefined(argumentValue) || argumentValue.length === 0) {
			throw $tab__TableauException.createInternalStringArgumentException(argumentName);
		}
	};
	$tab__Param.verifyValue = function Param$VerifyValue(argumentValue, argumentName) {
		if (ss.isNullOrUndefined(argumentValue)) {
			throw $tab__TableauException.createInternalNullArgumentException(argumentName);
		}
	};
	global.tab._Param = $tab__Param;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.DoNotUsePromise
	var $tab__PromiseImpl = function(thenFunc) {
		this.then = null;
		this.then = thenFunc;
	};
	$tab__PromiseImpl.__typeName = 'tab._PromiseImpl';
	global.tab._PromiseImpl = $tab__PromiseImpl;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.TabRect
	var $tab__Rect = function(left, top, width, height) {
		this.left = 0;
		this.top = 0;
		this.width = 0;
		this.height = 0;
		this.left = left;
		this.top = top;
		this.width = width;
		this.height = height;
	};
	$tab__Rect.__typeName = 'tab._Rect';
	global.tab._Rect = $tab__Rect;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.SharedDashboardImpl
	var $tab__SharedDashboardImpl = function(sheetInfoImpl, messagingOptions) {
		this.dashboardWorksheets = new tab._Collection();
		this.dashboardObjects = new tab._Collection();
		this.messagingOptions = null;
		$tab__SharedSheetImpl.call(this, sheetInfoImpl);
		this.messagingOptions = messagingOptions;
	};
	$tab__SharedDashboardImpl.__typeName = 'tab._SharedDashboardImpl';
	global.tab._SharedDashboardImpl = $tab__SharedDashboardImpl;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.SharedSheetImpl
	var $tab__SharedSheetImpl = function(sheetInfoImpl) {
		this.$name = null;
		this.$sheetType = null;
		this.$size = null;
		this.$name = sheetInfoImpl.name;
		this.$sheetType = sheetInfoImpl.sheetType;
		this.$size = sheetInfoImpl.size;
	};
	$tab__SharedSheetImpl.__typeName = 'tab._SharedSheetImpl';
	global.tab._SharedSheetImpl = $tab__SharedSheetImpl;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.SharedWorksheetImpl
	var $tab__SharedWorksheetImpl = function(sheetInfoImpl, messagingOptions, parentDashboardImpl) {
		this.$parentDashboardImpl = null;
		this.messagingOptions = null;
		$tab__SharedSheetImpl.call(this, sheetInfoImpl);
		this.$parentDashboardImpl = parentDashboardImpl;
		this.messagingOptions = messagingOptions;
	};
	$tab__SharedWorksheetImpl.__typeName = 'tab._SharedWorksheetImpl';
	global.tab._SharedWorksheetImpl = $tab__SharedWorksheetImpl;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.ApiSharedSheetInfoImpl
	var $tab__SheetInfoImpl = function() {
	};
	$tab__SheetInfoImpl.__typeName = 'tab._SheetInfoImpl';
	$tab__SheetInfoImpl.$ctor = function(name, sheetType, size, zoneId) {
		var $this = new Object();
		$this.name = null;
		$this.sheetType = null;
		$this.zoneId = 0;
		$this.size = null;
		$this.name = name;
		$this.sheetType = sheetType;
		$this.size = size;
		$this.zoneId = zoneId;
		return $this;
	};
	$tab__SheetInfoImpl.isInstanceOfType = function() {
		return true;
	};
	global.tab._SheetInfoImpl = $tab__SheetInfoImpl;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.TableauException
	var $tab__TableauException = function() {
	};
	$tab__TableauException.__typeName = 'tab._TableauException';
	$tab__TableauException.create = function TableauException$Create(id, message) {
		var x = new ss.Exception(message);
		x['tableauSoftwareErrorCode'] = id;
		return x;
	};
	$tab__TableauException.createInternalError = function TableauException$CreateInternalError(details) {
		if (ss.isValue(details)) {
			return $tab__TableauException.create('internalError', 'Internal error. Please contact Tableau support with the following information: ' + details);
		}
		else {
			return $tab__TableauException.create('internalError', 'Internal error. Please contact Tableau support');
		}
	};
	$tab__TableauException.createInternalNullArgumentException = function TableauException$CreateInternalNullArgumentException(argumentName) {
		return $tab__TableauException.createInternalError("Null/undefined argument '" + argumentName + "'.");
	};
	$tab__TableauException.createInternalStringArgumentException = function TableauException$CreateInternalStringArgumentException(argumentName) {
		return $tab__TableauException.createInternalError("Invalid string argument '" + argumentName + "'.");
	};
	$tab__TableauException.createServerError = function TableauException$CreateServerError(message) {
		return $tab__TableauException.create('serverError', message);
	};
	$tab__TableauException.createNotActiveSheet = function TableauException$CreateNotActiveSheet() {
		return $tab__TableauException.create('notActiveSheet', 'Operation not allowed on non-active sheet');
	};
	$tab__TableauException.createInvalidCustomViewName = function TableauException$CreateInvalidCustomViewName(customViewName) {
		return $tab__TableauException.create('invalidCustomViewName', 'Invalid custom view name: ' + customViewName);
	};
	$tab__TableauException.createInvalidParameter = function TableauException$CreateInvalidParameter(paramName) {
		return $tab__TableauException.create('invalidParameter', 'Invalid parameter: ' + paramName);
	};
	$tab__TableauException.createInvalidFilterFieldNameOrValue = function TableauException$CreateInvalidFilterFieldNameOrValue(fieldName) {
		return $tab__TableauException.create('invalidFilterFieldNameOrValue', 'Invalid filter field name or value: ' + fieldName);
	};
	$tab__TableauException.createInvalidDateParameter = function TableauException$CreateInvalidDateParameter(paramName) {
		return $tab__TableauException.create('invalidDateParameter', 'Invalid date parameter: ' + paramName);
	};
	$tab__TableauException.createNullOrEmptyParameter = function TableauException$CreateNullOrEmptyParameter(paramName) {
		return $tab__TableauException.create('nullOrEmptyParameter', 'Parameter cannot be null or empty: ' + paramName);
	};
	$tab__TableauException.createMissingMaxSize = function TableauException$CreateMissingMaxSize() {
		return $tab__TableauException.create('missingMaxSize', 'Missing maxSize for SheetSizeBehavior.ATMOST');
	};
	$tab__TableauException.createMissingMinSize = function TableauException$CreateMissingMinSize() {
		return $tab__TableauException.create('missingMinSize', 'Missing minSize for SheetSizeBehavior.ATLEAST');
	};
	$tab__TableauException.createMissingMinMaxSize = function TableauException$CreateMissingMinMaxSize() {
		return $tab__TableauException.create('missingMinMaxSize', 'Missing minSize or maxSize for SheetSizeBehavior.RANGE');
	};
	$tab__TableauException.createInvalidRangeSize = function TableauException$CreateInvalidRangeSize() {
		return $tab__TableauException.create('invalidSize', 'Missing minSize or maxSize for SheetSizeBehavior.RANGE');
	};
	$tab__TableauException.createInvalidSizeValue = function TableauException$CreateInvalidSizeValue() {
		return $tab__TableauException.create('invalidSize', 'Size value cannot be less than zero');
	};
	$tab__TableauException.createInvalidSheetSizeParam = function TableauException$CreateInvalidSheetSizeParam() {
		return $tab__TableauException.create('invalidSize', 'Invalid sheet size parameter');
	};
	$tab__TableauException.createSizeConflictForExactly = function TableauException$CreateSizeConflictForExactly() {
		return $tab__TableauException.create('invalidSize', 'Conflicting size values for SheetSizeBehavior.EXACTLY');
	};
	$tab__TableauException.createInvalidSizeBehaviorOnWorksheet = function TableauException$CreateInvalidSizeBehaviorOnWorksheet() {
		return $tab__TableauException.create('invalidSizeBehaviorOnWorksheet', 'Only SheetSizeBehavior.AUTOMATIC is allowed on Worksheets');
	};
	$tab__TableauException.createNoUrlForHiddenWorksheet = function TableauException$CreateNoUrlForHiddenWorksheet() {
		return $tab__TableauException.create('noUrlForHiddenWorksheet', 'Hidden worksheets do not have a URL.');
	};
	$tab__TableauException.createInvalidAggregationFieldName = function TableauException$CreateInvalidAggregationFieldName(fieldName) {
		return $tab__TableauException.create('invalidAggregationFieldName', "Invalid aggregation type for field '" + fieldName + "'");
	};
	$tab__TableauException.createInvalidToolbarButtonName = function TableauException$CreateInvalidToolbarButtonName(buttonName) {
		return $tab__TableauException.create('invalidToolbarButtonName', "Invalid toolbar button name: '" + buttonName + "'");
	};
	$tab__TableauException.createIndexOutOfRange = function TableauException$CreateIndexOutOfRange(index) {
		return $tab__TableauException.create('indexOutOfRange', "Index '" + index + "' is out of range.");
	};
	$tab__TableauException.createUnsupportedEventName = function TableauException$CreateUnsupportedEventName(eventName) {
		return $tab__TableauException.create('unsupportedEventName', "Unsupported event '" + eventName + "'.");
	};
	$tab__TableauException.createBrowserNotCapable = function TableauException$CreateBrowserNotCapable() {
		return $tab__TableauException.create('browserNotCapable', 'This browser is incapable of supporting the Tableau JavaScript API.');
	};
	global.tab._TableauException = $tab__TableauException;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.Utility
	var $tab__Utility = function() {
	};
	$tab__Utility.__typeName = 'tab._Utility';
	$tab__Utility.isNullOrEmpty = function Utility$IsNullOrEmpty(value) {
		return ss.isNullOrUndefined(value) || (value['length'] || 0) <= 0;
	};
	$tab__Utility.isString = function Utility$IsString(value) {
		return typeof(value) === 'string';
	};
	$tab__Utility.isNumber = function Utility$IsNumber(value) {
		return typeof(value) === 'number';
	};
	$tab__Utility.isDate = function Utility$IsDate(value) {
		if (typeof(value) === 'object' && ss.isInstanceOfType(value, ss.JsDate)) {
			return true;
		}
		else if (!!(Object.prototype.toString.call(value) !== '[object Date]')) {
			return false;
		}
		return !isNaN(ss.cast(value, ss.JsDate).getTime());
	};
	$tab__Utility.isDateValid = function Utility$IsDateValid(dt) {
		return !isNaN(dt.getTime());
	};
	$tab__Utility.indexOf = function Utility$IndexOf(array, searchElement, fromIndex) {
		if (ss.isValue(Array.prototype['indexOf'])) {
			return ss.unbox(ss.cast(array['indexOf'](searchElement, fromIndex), ss.Int32));
		}
		fromIndex = fromIndex || 0;
		var length = array.length;
		if (length > 0) {
			for (var index = fromIndex; index < length; index++) {
				if (ss.referenceEquals(array[index], searchElement)) {
					return index;
				}
			}
		}
		return -1;
	};
	$tab__Utility.contains = function Utility$Contains(array, searchElement, fromIndex) {
		var index = $tab__Utility.indexOf(array, searchElement, fromIndex);
		return index >= 0;
	};
	$tab__Utility.getTopmostWindow = function Utility$GetTopmostWindow() {
		var win = window.self;
		while (ss.isValue(win.parent) && !ss.referenceEquals(win.parent, win)) {
			win = win.parent;
		}
		return win;
	};
	$tab__Utility.toInt = function Utility$ToInt(value) {
		if ($tab__Utility.isNumber(value)) {
			return ss.Int32.trunc(value);
		}
		var number = parseInt(value.toString(), 10);
		if (isNaN(number)) {
			return 0;
		}
		return number;
	};
	$tab__Utility.hasClass = function Utility$HasClass(element, className) {
		var regexClass = new RegExp('[\\n\\t\\r]', 'g');
		return ss.isValue(element) && (' ' + element.className + ' ').replace(regexClass, ' ').indexOf(' ' + className + ' ') > -1;
	};
	$tab__Utility.findParentWithClassName = function Utility$FindParentWithClassName(element, className, stopAtElement) {
		var parent = (ss.isValue(element) ? ss.cast(element.parentNode, HTMLElement) : null);
		stopAtElement = stopAtElement || document.body;
		while (ss.isValue(parent)) {
			if ($tab__Utility.hasClass(parent, className)) {
				return parent;
			}
			if (ss.referenceEquals(parent, stopAtElement)) {
				parent = null;
			}
			else {
				parent = ss.cast(parent.parentNode, HTMLElement);
			}
		}
		return parent;
	};
	$tab__Utility.hasJsonParse = function Utility$HasJsonParse() {
		return !!(ss.isValue(JSON) && ss.isValue(JSON.parse));
	};
	$tab__Utility.hasWindowPostMessage = function Utility$HasWindowPostMessage() {
		return !!ss.isValue(window.postMessage);
	};
	$tab__Utility.isPostMessageSynchronous = function Utility$IsPostMessageSynchronous() {
		if ($tab__Utility.isIE()) {
			var msieRegEx = new RegExp('(msie) ([\\w.]+)');
			var matches = msieRegEx.exec(window.navigator.userAgent.toLowerCase());
			var versionStr = matches[2] || '0';
			var version = parseInt(versionStr, 10);
			return version <= 8;
		}
		return false;
	};
	$tab__Utility.hasDocumentAttachEvent = function Utility$HasDocumentAttachEvent() {
		return !!ss.isValue(document.attachEvent);
	};
	$tab__Utility.hasWindowAddEventListener = function Utility$HasWindowAddEventListener() {
		return !!ss.isValue(window.addEventListener);
	};
	$tab__Utility.isElementOfTag = function Utility$IsElementOfTag(element, tagName) {
		return ss.isValue(element) && element.nodeType === 1 && ss.referenceEquals(element.tagName.toLowerCase(), tagName.toLowerCase());
	};
	$tab__Utility.elementToString = function Utility$ElementToString(element) {
		var str = new ss.StringBuilder();
		str.append(element.tagName.toLowerCase());
		if (!$tab__Utility.isNullOrEmpty(element.id)) {
			str.append('#').append(element.id);
		}
		if (!$tab__Utility.isNullOrEmpty(element.className)) {
			var classes = element.className.split(' ');
			str.append('.').append(classes.join('.'));
		}
		return str.toString();
	};
	$tab__Utility.tableauGCS = function Utility$TableauGCS(e) {
		if (typeof(window['getComputedStyle']) === 'function') {
			return window.getComputedStyle(e);
		}
		else {
			return e['currentStyle'];
		}
	};
	$tab__Utility.isIE = function Utility$IsIE() {
		return !!(window.navigator.userAgent.indexOf('MSIE') > -1 && ss.isNullOrUndefined(window.opera));
	};
	$tab__Utility.isSafari = function Utility$IsSafari() {
		var ua = window.navigator.userAgent;
		var isChrome = ua.indexOf('Chrome') >= 0;
		return ua.indexOf('Safari') >= 0 && !isChrome;
	};
	$tab__Utility.mobileDetect = function Utility$MobileDetect() {
		var ua = window.navigator.userAgent;
		if (ua.indexOf('iPad') !== -1) {
			return true;
		}
		if (ua.indexOf('Android') !== -1) {
			return true;
		}
		if (ua.indexOf('AppleWebKit') !== -1 && ua.indexOf('Mobile') !== -1) {
			return true;
		}
		return false;
	};
	$tab__Utility.visibleContentRectInDocumentCoordinates = function Utility$VisibleContentRectInDocumentCoordinates(element) {
		var visibleRect = $tab__Utility.contentRectInDocumentCoordinates(element);
		for (var currentElement = element.parentElement; ss.isValue(currentElement) && ss.isValue(currentElement.parentElement); currentElement = currentElement.parentElement) {
			var overflow = $tab__Utility.$getComputedStyle(currentElement).overflow;
			if (overflow === 'auto' || overflow === 'scroll' || overflow === 'hidden') {
				visibleRect = visibleRect.intersect($tab__Utility.contentRectInDocumentCoordinates(currentElement));
			}
		}
		var viewportRect = $tab__Utility.contentRectInDocumentCoordinates(document.documentElement);
		var win = new tab.WindowHelper(window.self);
		if (win.isQuirksMode()) {
			viewportRect.height = document.body.clientHeight - viewportRect.left;
			viewportRect.width = document.body.clientWidth - viewportRect.top;
		}
		viewportRect.left += win.get_pageXOffset();
		viewportRect.top += win.get_pageYOffset();
		return visibleRect.intersect(viewportRect);
	};
	$tab__Utility.contentRectInDocumentCoordinates = function Utility$ContentRectInDocumentCoordinates(element) {
		var boundingClientRect = $tab__Utility.getBoundingClientRect(element);
		var style = $tab__Utility.$getComputedStyle(element);
		var paddingLeft = $tab__Utility.toInt(style.paddingLeft);
		var paddingTop = $tab__Utility.toInt(style.paddingTop);
		var borderLeft = $tab__Utility.toInt(style.borderLeftWidth);
		var borderTop = $tab__Utility.toInt(style.borderTopWidth);
		var contentSize = $tab__Utility.computeContentSize(element);
		var win = new tab.WindowHelper(window.self);
		var left = boundingClientRect.left + paddingLeft + borderLeft + win.get_pageXOffset();
		var top = boundingClientRect.top + paddingTop + borderTop + win.get_pageYOffset();
		return new $tab__Rect(left, top, contentSize.width, contentSize.height);
	};
	$tab__Utility.getBoundingClientRect = function Utility$GetBoundingClientRect(element) {
		var rect = element.getBoundingClientRect();
		var top = ss.Int32.trunc(rect.top);
		var left = ss.Int32.trunc(rect.left);
		var right = ss.Int32.trunc(rect.right);
		var bottom = ss.Int32.trunc(rect.bottom);
		return new $tab__Rect(left, top, right - left, bottom - top);
	};
	$tab__Utility.convertRawValue = function Utility$ConvertRawValue(rawValue, dataType) {
		if (ss.isNullOrUndefined(rawValue)) {
			return null;
		}
		switch (dataType) {
			case 'bool': {
				return rawValue;
			}
			case 'date':
			case 'number': {
				if (ss.isNullOrUndefined(rawValue)) {
					return Number.NaN;
				}
				return rawValue;
			}
			default:
			case 'string': {
				return rawValue;
			}
		}
	};
	$tab__Utility.getDataValue = function Utility$GetDataValue(dv) {
		if (ss.isNullOrUndefined(dv)) {
			return $tab_DataValue.$ctor(null, null, null);
		}
		return $tab_DataValue.$ctor($tab__Utility.convertRawValue(dv.value, dv.type), dv.formattedValue, dv.aliasedValue);
	};
	$tab__Utility.serializeDateForServer = function Utility$SerializeDateForServer(date) {
		var serializedDate = '';
		if (ss.isValue(date) && $tab__Utility.isDate(date)) {
			var year = date.getUTCFullYear();
			var month = date.getUTCMonth() + 1;
			var day = date.getUTCDate();
			var hh = date.getUTCHours();
			var mm = date.getUTCMinutes();
			var sec = date.getUTCSeconds();
			serializedDate = year + '-' + month + '-' + day + ' ' + hh + ':' + mm + ':' + sec;
		}
		return serializedDate;
	};
	$tab__Utility.computeContentSize = function Utility$ComputeContentSize(element) {
		var style = $tab__Utility.$getComputedStyle(element);
		var paddingLeft = parseFloat(style.paddingLeft);
		var paddingTop = parseFloat(style.paddingTop);
		var paddingRight = parseFloat(style.paddingRight);
		var paddingBottom = parseFloat(style.paddingBottom);
		var width = element.clientWidth - Math.round(paddingLeft + paddingRight);
		var height = element.clientHeight - Math.round(paddingTop + paddingBottom);
		return $tab_Size.$ctor(width, height);
	};
	$tab__Utility.$getComputedStyle = function Utility$GetComputedStyle(element) {
		if (typeof(window['getComputedStyle']) === 'function') {
			if (ss.isValue(element.ownerDocument.defaultView.opener)) {
				return element.ownerDocument.defaultView.getComputedStyle(element);
			}
			return window.getComputedStyle(element);
		}
		else if (ss.isValue(element['currentStyle'])) {
			return element['currentStyle'];
		}
		return element.style;
	};
	$tab__Utility.roundVizSizeInPixels = function Utility$RoundVizSizeInPixels(size) {
		if (ss.isNullOrUndefined(size) || !(size.indexOf('px') !== -1)) {
			return size;
		}
		var sizeValue = parseFloat(size.split('px')[0]);
		return Math.round(sizeValue) + 'px';
	};
	$tab__Utility.noResultPromiseHelper = function Utility$NoResultPromiseHelper(commandName, cmdParams, messagingOptions) {
		var deferred = new tab._Deferred();
		var returnHandler = new (ss.makeGenericType($tab_CommandReturnHandler$1, [Object]))(commandName, 1, function(result) {
			deferred.resolve();
		}, function(remoteError, message) {
			deferred.reject($tab__TableauException.createServerError(message));
		});
		messagingOptions.sendCommand(Object).call(messagingOptions, cmdParams, returnHandler);
		return deferred.get_promise();
	};
	$tab__Utility.clone = function(T) {
		return function Utility$Clone(src) {
			return JSON.parse(JSON.stringify(src));
		};
	};
	global.tab._Utility = $tab__Utility;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.ApiDashboardObjectType
	var $tab_ApiDashboardObjectType = function() {
	};
	$tab_ApiDashboardObjectType.__typeName = 'tab.ApiDashboardObjectType';
	global.tab.ApiDashboardObjectType = $tab_ApiDashboardObjectType;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.ApiDateRangeType
	var $tab_ApiDateRangeType = function() {
	};
	$tab_ApiDateRangeType.__typeName = 'tab.ApiDateRangeType';
	global.tab.ApiDateRangeType = $tab_ApiDateRangeType;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.ApiDeviceType
	var $tab_ApiDeviceType = function() {
	};
	$tab_ApiDeviceType.__typeName = 'tab.ApiDeviceType';
	global.tab.ApiDeviceType = $tab_ApiDeviceType;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.ApiEnumConverter
	var $tab_ApiEnumConverter = function() {
	};
	$tab_ApiEnumConverter.__typeName = 'tab.ApiEnumConverter';
	$tab_ApiEnumConverter.convertDashboardObjectType = function ApiEnumConverter$ConvertDashboardObjectType(crossDomainType) {
		switch (crossDomainType) {
			case 'blank': {
				return 'blank';
			}
			case 'image': {
				return 'image';
			}
			case 'legend': {
				return 'legend';
			}
			case 'pageFilter': {
				return 'pageFilter';
			}
			case 'parameterControl': {
				return 'parameterControl';
			}
			case 'quickFilter': {
				return 'quickFilter';
			}
			case 'text': {
				return 'text';
			}
			case 'title': {
				return 'title';
			}
			case 'webPage': {
				return 'webPage';
			}
			case 'worksheet': {
				return 'worksheet';
			}
			default: {
				throw $tab__TableauException.createInternalError('Unknown ApiCrossDomainDashboardObjectType: ' + crossDomainType);
			}
		}
	};
	$tab_ApiEnumConverter.convertDateRange = function ApiEnumConverter$ConvertDateRange(crossDomainType) {
		switch (crossDomainType) {
			case 'curr': {
				return 'curr';
			}
			case 'last': {
				return 'last';
			}
			case 'lastn': {
				return 'lastn';
			}
			case 'next': {
				return 'next';
			}
			case 'nextn': {
				return 'nextn';
			}
			case 'todate': {
				return 'todate';
			}
			default: {
				throw $tab__TableauException.createInternalError('Unknown ApiCrossDomainDateRangeType: ' + crossDomainType);
			}
		}
	};
	$tab_ApiEnumConverter.convertFieldAggregation = function ApiEnumConverter$ConvertFieldAggregation(crossDomainType) {
		switch (crossDomainType) {
			case 'ATTR': {
				return 'ATTR';
			}
			case 'AVG': {
				return 'AVG';
			}
			case 'COUNT': {
				return 'COUNT';
			}
			case 'COUNTD': {
				return 'COUNTD';
			}
			case 'DAY': {
				return 'DAY';
			}
			case 'END': {
				return 'END';
			}
			case 'HOUR': {
				return 'HOUR';
			}
			case 'INOUT': {
				return 'INOUT';
			}
			case 'KURTOSIS': {
				return 'KURTOSIS';
			}
			case 'MAX': {
				return 'MAX';
			}
			case 'MDY': {
				return 'MDY';
			}
			case 'MEDIAN': {
				return 'MEDIAN';
			}
			case 'MIN': {
				return 'MIN';
			}
			case 'MINUTE': {
				return 'MINUTE';
			}
			case 'MONTH': {
				return 'MONTH';
			}
			case 'MONTHYEAR': {
				return 'MONTHYEAR';
			}
			case 'NONE': {
				return 'NONE';
			}
			case 'PERCENTILE': {
				return 'PERCENTILE';
			}
			case 'QUART1': {
				return 'QUART1';
			}
			case 'QUART3': {
				return 'QUART3';
			}
			case 'QTR': {
				return 'QTR';
			}
			case 'SECOND': {
				return 'SECOND';
			}
			case 'SKEWNESS': {
				return 'SKEWNESS';
			}
			case 'STDEV': {
				return 'STDEV';
			}
			case 'STDEVP': {
				return 'STDEVP';
			}
			case 'SUM': {
				return 'SUM';
			}
			case 'SUM_XSQR': {
				return 'SUM_XSQR';
			}
			case 'TRUNC_DAY': {
				return 'TRUNC_DAY';
			}
			case 'TRUNC_HOUR': {
				return 'TRUNC_HOUR';
			}
			case 'TRUNC_MINUTE': {
				return 'TRUNC_MINUTE';
			}
			case 'TRUNC_MONTH': {
				return 'TRUNC_MONTH';
			}
			case 'TRUNC_QTR': {
				return 'TRUNC_QTR';
			}
			case 'TRUNC_SECOND': {
				return 'TRUNC_SECOND';
			}
			case 'TRUNC_WEEK': {
				return 'TRUNC_WEEK';
			}
			case 'TRUNC_YEAR': {
				return 'TRUNC_YEAR';
			}
			case 'USER': {
				return 'USER';
			}
			case 'VAR': {
				return 'VAR';
			}
			case 'VARP': {
				return 'VARP';
			}
			case 'WEEK': {
				return 'WEEK';
			}
			case 'WEEKDAY': {
				return 'WEEKDAY';
			}
			case 'YEAR': {
				return 'YEAR';
			}
			default: {
				throw $tab__TableauException.createInternalError('Unknown ApiCrossDomainFieldAggregationType: ' + crossDomainType);
			}
		}
	};
	$tab_ApiEnumConverter.convertFieldRole = function ApiEnumConverter$ConvertFieldRole(crossDomainType) {
		switch (crossDomainType) {
			case 'dimension': {
				return 'dimension';
			}
			case 'measure': {
				return 'measure';
			}
			case 'unknown': {
				return 'unknown';
			}
			default: {
				throw $tab__TableauException.createInternalError('Unknown ApiCrossDomainFieldRoleType: ' + crossDomainType);
			}
		}
	};
	$tab_ApiEnumConverter.convertFilterType = function ApiEnumConverter$ConvertFilterType(crossDomainType) {
		switch (crossDomainType) {
			case 'categorical': {
				return 'categorical';
			}
			case 'hierarchical': {
				return 'hierarchical';
			}
			case 'quantitative': {
				return 'quantitative';
			}
			case 'relativedate': {
				return 'relativedate';
			}
			default: {
				throw $tab__TableauException.createInternalError('Unknown ApiCrossDomainFilterType: ' + crossDomainType);
			}
		}
	};
	$tab_ApiEnumConverter.convertParameterAllowableValuesType = function ApiEnumConverter$ConvertParameterAllowableValuesType(crossDomainType) {
		switch (crossDomainType) {
			case 'all': {
				return 'all';
			}
			case 'list': {
				return 'list';
			}
			case 'range': {
				return 'range';
			}
			default: {
				throw $tab__TableauException.createInternalError('Unknown ApiCrossDomainParameterAllowableValuesType: ' + crossDomainType);
			}
		}
	};
	$tab_ApiEnumConverter.convertParameterDataType = function ApiEnumConverter$ConvertParameterDataType(crossDomainType) {
		switch (crossDomainType) {
			case 'boolean': {
				return 'boolean';
			}
			case 'date': {
				return 'date';
			}
			case 'datetime': {
				return 'datetime';
			}
			case 'float': {
				return 'float';
			}
			case 'integer': {
				return 'integer';
			}
			case 'string': {
				return 'string';
			}
			default: {
				throw $tab__TableauException.createInternalError('Unknown ApiCrossDomainParameterDataType: ' + crossDomainType);
			}
		}
	};
	$tab_ApiEnumConverter.convertPeriodType = function ApiEnumConverter$ConvertPeriodType(crossDomainType) {
		switch (crossDomainType) {
			case 'year': {
				return 'year';
			}
			case 'quarter': {
				return 'quarter';
			}
			case 'month': {
				return 'month';
			}
			case 'week': {
				return 'week';
			}
			case 'day': {
				return 'day';
			}
			case 'hour': {
				return 'hour';
			}
			case 'minute': {
				return 'minute';
			}
			case 'second': {
				return 'second';
			}
			default: {
				throw $tab__TableauException.createInternalError('Unknown ApiCrossDomainPeriodType: ' + crossDomainType);
			}
		}
	};
	$tab_ApiEnumConverter.convertSheetType = function ApiEnumConverter$ConvertSheetType(crossDomainType) {
		switch (crossDomainType) {
			case 'worksheet': {
				return 'worksheet';
			}
			case 'dashboard': {
				return 'dashboard';
			}
			case 'story': {
				return 'story';
			}
			default: {
				throw $tab__TableauException.createInternalError('Unknown ApiCrossDomainSheetType: ' + crossDomainType);
			}
		}
	};
	$tab_ApiEnumConverter.convertDataType = function ApiEnumConverter$ConvertDataType(crossDomainType) {
		switch (crossDomainType) {
			case 'boolean': {
				return 'boolean';
			}
			case 'date': {
				return 'date';
			}
			case 'datetime': {
				return 'datetime';
			}
			case 'float': {
				return 'float';
			}
			case 'integer': {
				return 'integer';
			}
			case 'string': {
				return 'string';
			}
			default: {
				throw $tab__TableauException.createInternalError('Unknown ApiCrossDomainParameterDataType: ' + crossDomainType);
			}
		}
	};
	global.tab.ApiEnumConverter = $tab_ApiEnumConverter;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.ApiErrorCode
	var $tab_ApiErrorCode = function() {
	};
	$tab_ApiErrorCode.__typeName = 'tab.ApiErrorCode';
	global.tab.ApiErrorCode = $tab_ApiErrorCode;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.ApiFieldAggregationType
	var $tab_ApiFieldAggregationType = function() {
	};
	$tab_ApiFieldAggregationType.__typeName = 'tab.ApiFieldAggregationType';
	global.tab.ApiFieldAggregationType = $tab_ApiFieldAggregationType;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.ApiFieldRoleType
	var $tab_ApiFieldRoleType = function() {
	};
	$tab_ApiFieldRoleType.__typeName = 'tab.ApiFieldRoleType';
	global.tab.ApiFieldRoleType = $tab_ApiFieldRoleType;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.ApiFilterType
	var $tab_ApiFilterType = function() {
	};
	$tab_ApiFilterType.__typeName = 'tab.ApiFilterType';
	global.tab.ApiFilterType = $tab_ApiFilterType;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.ApiFilterUpdateType
	var $tab_ApiFilterUpdateType = function() {
	};
	$tab_ApiFilterUpdateType.__typeName = 'tab.ApiFilterUpdateType';
	global.tab.ApiFilterUpdateType = $tab_ApiFilterUpdateType;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.ApiMessageHandler
	var $tab_ApiMessageHandler = function() {
	};
	$tab_ApiMessageHandler.__typeName = 'tab.ApiMessageHandler';
	global.tab.ApiMessageHandler = $tab_ApiMessageHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.ApiMessagingOptions
	var $tab_ApiMessagingOptions = function(router, handler) {
		this.$router = null;
		this.$handler = null;
		$tab__Param.verifyValue(router, 'router');
		this.$router = router;
		this.$handler = handler;
	};
	$tab_ApiMessagingOptions.__typeName = 'tab.ApiMessagingOptions';
	global.tab.ApiMessagingOptions = $tab_ApiMessagingOptions;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.ApiNullOption
	var $tab_ApiNullOption = function() {
	};
	$tab_ApiNullOption.__typeName = 'tab.ApiNullOption';
	global.tab.ApiNullOption = $tab_ApiNullOption;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.ApiParameterAllowableValuesType
	var $tab_ApiParameterAllowableValuesType = function() {
	};
	$tab_ApiParameterAllowableValuesType.__typeName = 'tab.ApiParameterAllowableValuesType';
	global.tab.ApiParameterAllowableValuesType = $tab_ApiParameterAllowableValuesType;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.ApiParameterDataType
	var $tab_ApiParameterDataType = function() {
	};
	$tab_ApiParameterDataType.__typeName = 'tab.ApiParameterDataType';
	global.tab.ApiParameterDataType = $tab_ApiParameterDataType;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.ApiPeriodType
	var $tab_ApiPeriodType = function() {
	};
	$tab_ApiPeriodType.__typeName = 'tab.ApiPeriodType';
	global.tab.ApiPeriodType = $tab_ApiPeriodType;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.ApiSelectionUpdateType
	var $tab_ApiSelectionUpdateType = function() {
	};
	$tab_ApiSelectionUpdateType.__typeName = 'tab.ApiSelectionUpdateType';
	global.tab.ApiSelectionUpdateType = $tab_ApiSelectionUpdateType;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.ApiSheetSizeBehavior
	var $tab_ApiSheetSizeBehavior = function() {
	};
	$tab_ApiSheetSizeBehavior.__typeName = 'tab.ApiSheetSizeBehavior';
	global.tab.ApiSheetSizeBehavior = $tab_ApiSheetSizeBehavior;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.ApiSheetType
	var $tab_ApiSheetType = function() {
	};
	$tab_ApiSheetType.__typeName = 'tab.ApiSheetType';
	global.tab.ApiSheetType = $tab_ApiSheetType;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.ApiTableauEventName
	var $tab_ApiTableauEventName = function() {
	};
	$tab_ApiTableauEventName.__typeName = 'tab.ApiTableauEventName';
	global.tab.ApiTableauEventName = $tab_ApiTableauEventName;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.ApiToolbarButtonName
	var $tab_ApiToolbarButtonName = function() {
	};
	$tab_ApiToolbarButtonName.__typeName = 'tab.ApiToolbarButtonName';
	global.tab.ApiToolbarButtonName = $tab_ApiToolbarButtonName;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.ApiToolbarPosition
	var $tab_ApiToolbarPosition = function() {
	};
	$tab_ApiToolbarPosition.__typeName = 'tab.ApiToolbarPosition';
	global.tab.ApiToolbarPosition = $tab_ApiToolbarPosition;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.CommandReturnHandler
	var $tab_CommandReturnHandler$1 = function(T) {
		var $type = function(commandName, successCallbackTiming, successCallback, errorCallback) {
			this.$commandName = null;
			this.$successCallbackTiming = 0;
			this.$successCallback = null;
			this.$errorCallback = null;
			this.$commandName = commandName;
			this.$successCallback = successCallback;
			this.$successCallbackTiming = successCallbackTiming;
			this.$errorCallback = errorCallback;
		};
		ss.registerGenericClassInstance($type, $tab_CommandReturnHandler$1, [T], {
			get_commandName: function CommandReturnHandler$get_CommandName() {
				return this.$commandName;
			},
			get_successCallback: function CommandReturnHandler$get_SuccessCallback() {
				return this.$successCallback;
			},
			get_successCallbackTiming: function CommandReturnHandler$get_SuccessCallbackTiming() {
				return this.$successCallbackTiming;
			},
			get_errorCallback: function CommandReturnHandler$get_ErrorCallback() {
				return this.$errorCallback;
			}
		}, function() {
			return null;
		}, function() {
			return [];
		});
		return $type;
	};
	$tab_CommandReturnHandler$1.__typeName = 'tab.CommandReturnHandler$1';
	ss.initGenericClass($tab_CommandReturnHandler$1, $asm, 1);
	global.tab.CommandReturnHandler$1 = $tab_CommandReturnHandler$1;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.CrossDomainMessager
	var $tab_CrossDomainMessager = function(legacyHandler) {
		this.$nextHandlerId = 0;
		this.$handlers = {};
		this.$commandCallbacks = {};
		this.$commandReturnAfterStateReadyQueues = {};
		this.$legacyHandler = null;
		this.$legacyHandler = legacyHandler;
		if ($tab__Utility.hasWindowAddEventListener()) {
			window.addEventListener('message', ss.mkdel(this, this.$handleCrossDomainMessage), false);
		}
		else if ($tab__Utility.hasDocumentAttachEvent()) {
			var handler = ss.mkdel(this, this.$handleCrossDomainMessage);
			document.attachEvent('onmessage', handler);
			window.attachEvent('onmessage', handler);
		}
		else {
			window.onmessage = ss.mkdel(this, this.$handleCrossDomainMessage);
		}
		this.$nextHandlerId = 0;
	};
	$tab_CrossDomainMessager.__typeName = 'tab.CrossDomainMessager';
	global.tab.CrossDomainMessager = $tab_CrossDomainMessager;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.DataType
	var $tab_DataType = function() {
	};
	$tab_DataType.__typeName = 'tab.DataType';
	global.tab.DataType = $tab_DataType;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.DataValue
	var $tab_DataValue = function() {
	};
	$tab_DataValue.__typeName = 'tab.DataValue';
	$tab_DataValue.$ctor = function(value, formattedValue, aliasedValue) {
		var $this = new Object();
		$this.value = null;
		$this.formattedValue = null;
		$this.value = value;
		if ($tab__Utility.isNullOrEmpty(aliasedValue)) {
			$this.formattedValue = formattedValue;
		}
		else {
			$this.formattedValue = aliasedValue;
		}
		return $this;
	};
	$tab_DataValue.isInstanceOfType = function() {
		return true;
	};
	global.tab.DataValue = $tab_DataValue;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.HostedApiMessageHandler
	var $tab_HostedApiMessageHandler = function() {
		this.$2$StateReadyForQueryField = null;
		$tab_ApiMessageHandler.call(this);
	};
	$tab_HostedApiMessageHandler.__typeName = 'tab.HostedApiMessageHandler';
	global.tab.HostedApiMessageHandler = $tab_HostedApiMessageHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.HostedApiMessageRouter
	var $tab_HostedApiMessageRouter = function() {
		this.$crossDomainMessager = null;
		this.$crossDomainMessager = new $tab_CrossDomainMessager(null);
	};
	$tab_HostedApiMessageRouter.__typeName = 'tab.HostedApiMessageRouter';
	global.tab.HostedApiMessageRouter = $tab_HostedApiMessageRouter;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.ITableauEvent
	var $tab_ITableauEvent = function() {
	};
	$tab_ITableauEvent.__typeName = 'tab.ITableauEvent';
	global.tab.ITableauEvent = $tab_ITableauEvent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.MarkImpl
	var $tab_MarkImpl = function(tupleIdOrPairs) {
		this.$clonedPairs = null;
		this.$collection = new tab._Collection();
		this.$tupleId = 0;
		if (typeof(tupleIdOrPairs) === 'array') {
			var pairArr = tupleIdOrPairs;
			for (var i = 0; i < pairArr.length; i++) {
				var pair = pairArr[i];
				if (!ss.isValue(pair.fieldName)) {
					throw $tab__TableauException.createInvalidParameter('pair.fieldName');
				}
				if (!ss.isValue(pair.value)) {
					throw $tab__TableauException.createInvalidParameter('pair.value');
				}
				var p = new $tableauSoftware_Pair(pair.fieldName, pair.value);
				this.$collection._add(p.fieldName, p);
			}
		}
		else {
			this.$tupleId = tupleIdOrPairs;
		}
	};
	$tab_MarkImpl.__typeName = 'tab.MarkImpl';
	$tab_MarkImpl.processActiveMarks = function MarkImpl$ProcessActiveMarks(marksPresModel) {
		var marks = new tab._Collection();
		if (ss.isNullOrUndefined(marksPresModel) || $tab__Utility.isNullOrEmpty(marksPresModel.marks)) {
			return marks;
		}
		for (var $t1 = 0; $t1 < marksPresModel.marks.length; $t1++) {
			var markPresModel = marksPresModel.marks[$t1];
			var tupleId = markPresModel.tupleId;
			var mark = new $tableauSoftware_Mark(tupleId);
			marks._add(tupleId.toString(), mark);
			for (var $t2 = 0; $t2 < markPresModel.pairs.length; $t2++) {
				var pairPresModel = markPresModel.pairs[$t2];
				var value = $tab__Utility.convertRawValue(pairPresModel.value, pairPresModel.valueDataType);
				var pair = new $tableauSoftware_Pair(pairPresModel.fieldName, value);
				pair.formattedValue = pairPresModel.formattedValue;
				if (!mark.impl.get_pairs()._has(pair.fieldName)) {
					mark.impl.$addPair(pair);
				}
			}
		}
		return marks;
	};
	global.tab.MarkImpl = $tab_MarkImpl;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.Point
	var $tab_Point = function() {
	};
	$tab_Point.__typeName = 'tab.Point';
	$tab_Point.$ctor = function(x, y) {
		var $this = new Object();
		$this.x = 0;
		$this.y = 0;
		$this.x = x;
		$this.y = y;
		return $this;
	};
	$tab_Point.isInstanceOfType = function() {
		return true;
	};
	global.tab.Point = $tab_Point;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.PublicEnums
	var $tab_PublicEnums = function() {
	};
	$tab_PublicEnums.__typeName = 'tab.PublicEnums';
	$tab_PublicEnums.tryNormalizeEnum = function(T) {
		return function PublicEnums$TryNormalizeEnum(rawValue, value) {
			if (ss.isValue(rawValue)) {
				var lookup = rawValue.toString().toUpperCase();
				var $t1 = ss.Enum.getValues(T);
				for (var $t2 = 0; $t2 < $t1.length; $t2++) {
					var name = $t1[$t2];
					var compareValue = name.toUpperCase();
					if (ss.referenceEquals(lookup, compareValue)) {
						value.$ = name;
						return true;
					}
				}
			}
			value.$ = ss.getDefaultValue(T);
			return false;
		};
	};
	$tab_PublicEnums.normalizeEnum = function(T) {
		return function PublicEnums$NormalizeEnum(rawValue, paramName) {
			var value = {};
			if (!$tab_PublicEnums.tryNormalizeEnum(T).call(null, rawValue, value)) {
				throw $tab__TableauException.createInvalidParameter(paramName);
			}
			return value.$;
		};
	};
	$tab_PublicEnums.isValidEnum = function(T) {
		return function PublicEnums$IsValidEnum(rawValue) {
			var value = {};
			var valid = $tab_PublicEnums.tryNormalizeEnum(T).call(null, rawValue, value);
			return valid;
		};
	};
	global.tab.PublicEnums = $tab_PublicEnums;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.SheetSize
	var $tab_SheetSize = function() {
	};
	$tab_SheetSize.__typeName = 'tab.SheetSize';
	$tab_SheetSize.$ctor = function(behavior, minSize, maxSize) {
		var $this = new Object();
		$this.behavior = null;
		$this.minSize = null;
		$this.maxSize = null;
		$this.behavior = ss.coalesce(behavior, 'automatic');
		if (ss.isValue(minSize)) {
			$this.minSize = minSize;
		}
		else {
			delete $this['minSize'];
		}
		if (ss.isValue(maxSize)) {
			$this.maxSize = maxSize;
		}
		else {
			delete $this['maxSize'];
		}
		return $this;
	};
	$tab_SheetSize.isInstanceOfType = function() {
		return true;
	};
	global.tab.SheetSize = $tab_SheetSize;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.SheetSizeFactory
	var $tab_SheetSizeFactory = function() {
	};
	$tab_SheetSizeFactory.__typeName = 'tab.SheetSizeFactory';
	$tab_SheetSizeFactory.createAutomatic = function SheetSizeFactory$CreateAutomatic() {
		var size = $tab_SheetSize.$ctor('automatic', null, null);
		return size;
	};
	$tab_SheetSizeFactory.fromSizeConstraints = function SheetSizeFactory$FromSizeConstraints(vizSizePresModel) {
		var minHeight = vizSizePresModel.minHeight;
		var minWidth = vizSizePresModel.minWidth;
		var maxHeight = vizSizePresModel.maxHeight;
		var maxWidth = vizSizePresModel.maxWidth;
		var behavior = 'automatic';
		var minSize = null;
		var maxSize = null;
		if (minHeight === 0 && minWidth === 0) {
			if (maxHeight === 0 && maxWidth === 0) {
			}
			else {
				behavior = 'atmost';
				maxSize = $tab_Size.$ctor(maxWidth, maxHeight);
			}
		}
		else if (maxHeight === 0 && maxWidth === 0) {
			behavior = 'atleast';
			minSize = $tab_Size.$ctor(minWidth, minHeight);
		}
		else if (maxHeight === minHeight && maxWidth === minWidth && minWidth > 0) {
			behavior = 'exactly';
			minSize = $tab_Size.$ctor(minWidth, minHeight);
			maxSize = $tab_Size.$ctor(minWidth, minHeight);
		}
		else {
			behavior = 'range';
			if (minWidth === 0 && maxWidth === 0) {
				maxWidth = 2147483647;
			}
			minSize = $tab_Size.$ctor(minWidth, minHeight);
			maxSize = $tab_Size.$ctor(maxWidth, maxHeight);
		}
		return $tab_SheetSize.$ctor(behavior, minSize, maxSize);
	};
	global.tab.SheetSizeFactory = $tab_SheetSizeFactory;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.Size
	var $tab_Size = function() {
	};
	$tab_Size.__typeName = 'tab.Size';
	$tab_Size.$ctor = function(width, height) {
		var $this = new Object();
		$this.width = 0;
		$this.height = 0;
		$this.width = width;
		$this.height = height;
		return $this;
	};
	$tab_Size.isInstanceOfType = function() {
		return true;
	};
	global.tab.Size = $tab_Size;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.Column
	var $tableauSoftware_Column = function(impl) {
		this.$impl = null;
		this.$impl = impl;
	};
	$tableauSoftware_Column.__typeName = 'tableauSoftware.Column';
	global.tableauSoftware.Column = $tableauSoftware_Column;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.DataTable
	var $tableauSoftware_DataTable = function(impl) {
		this.$impl = null;
		this.$impl = impl;
	};
	$tableauSoftware_DataTable.__typeName = 'tableauSoftware.DataTable';
	global.tableauSoftware.DataTable = $tableauSoftware_DataTable;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.Mark
	var $tableauSoftware_Mark = function(tupleId) {
		this.impl = null;
		this.impl = new $tab_MarkImpl(tupleId);
	};
	$tableauSoftware_Mark.__typeName = 'tableauSoftware.Mark';
	global.tableauSoftware.Mark = $tableauSoftware_Mark;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.Pair
	var $tableauSoftware_Pair = function(fieldName, value) {
		this.fieldName = null;
		this.value = null;
		this.formattedValue = null;
		this.fieldName = fieldName;
		this.value = value;
		this.formattedValue = (ss.isValue(value) ? value.toString() : '');
	};
	$tableauSoftware_Pair.__typeName = 'tableauSoftware.Pair';
	global.tableauSoftware.Pair = $tableauSoftware_Pair;
	ss.initClass($tab_$DeferredUtil, $asm, {});
	ss.initClass($tab_$DoNothingCrossDomainHandler, $asm, {
		add_stateReadyForQuery: function DoNothingCrossDomainHandler$add_StateReadyForQuery(value) {
			this.$1$StateReadyForQueryField = ss.delegateCombine(this.$1$StateReadyForQueryField, value);
		},
		remove_stateReadyForQuery: function DoNothingCrossDomainHandler$remove_StateReadyForQuery(value) {
			this.$1$StateReadyForQueryField = ss.delegateRemove(this.$1$StateReadyForQueryField, value);
		},
		get_iframe: function DoNothingCrossDomainHandler$get_Iframe() {
			return null;
		},
		get_hostId: function DoNothingCrossDomainHandler$get_HostId() {
			return this.$hostId;
		},
		set_hostId: function DoNothingCrossDomainHandler$set_HostId(value) {
			this.$hostId = value;
		},
		get_$serverRoot: function DoNothingCrossDomainHandler$get_ServerRoot() {
			return '*';
		},
		handleEventNotification: function DoNothingCrossDomainHandler$HandleEventNotification(eventName, parameters) {
		},
		$silenceTheCompilerWarning: function DoNothingCrossDomainHandler$SilenceTheCompilerWarning() {
			this.$1$StateReadyForQueryField(null);
		}
	});
	ss.initClass($tab__ApiCommand, $asm, {
		get_name: function ApiCommand$get_Name() {
			return this.$1$NameField;
		},
		set_name: function ApiCommand$set_Name(value) {
			this.$1$NameField = value;
		},
		get_hostId: function ApiCommand$get_HostId() {
			return this.$1$HostIdField;
		},
		set_hostId: function ApiCommand$set_HostId(value) {
			this.$1$HostIdField = value;
		},
		get_commandId: function ApiCommand$get_CommandId() {
			return this.$1$CommandIdField;
		},
		set_commandId: function ApiCommand$set_CommandId(value) {
			this.$1$CommandIdField = value;
		},
		get_parameters: function ApiCommand$get_Parameters() {
			return this.$1$ParametersField;
		},
		set_parameters: function ApiCommand$set_Parameters(value) {
			this.$1$ParametersField = value;
		},
		get_isApiCommandName: function ApiCommand$get_IsApiCommandName() {
			return this.get_rawName().indexOf('api.', 0) === 0;
		},
		get_rawName: function ApiCommand$get_RawName() {
			return this.get_name().toString();
		},
		serialize: function ApiCommand$Serialize() {
			var message = [];
			message.push(this.get_name());
			message.push(this.get_commandId());
			message.push(this.get_hostId());
			if (ss.isValue(this.get_parameters())) {
				message.push(this.get_parameters());
			}
			var serializedMessage = message.join(',');
			$tab__ApiCommand.lastRequestMessage = serializedMessage;
			return serializedMessage;
		}
	});
	ss.initClass($tab__ApiObjectRegistry, $asm, {});
	ss.initClass($tab__ApiServerNotification, $asm, {
		get_workbookName: function ApiServerNotification$get_WorkbookName() {
			return this.$workbookName;
		},
		get_worksheetName: function ApiServerNotification$get_WorksheetName() {
			return this.$worksheetName;
		},
		get_data: function ApiServerNotification$get_Data() {
			return this.$data;
		},
		serialize: function ApiServerNotification$Serialize() {
			var serialized = {};
			serialized['api.workbookName'] = this.$workbookName;
			serialized['api.worksheetName'] = this.$worksheetName;
			serialized['api.commandData'] = this.$data;
			return JSON.stringify(serialized);
		}
	});
	ss.initClass($tab__ApiServerResultParser, $asm, {
		get_result: function ApiServerResultParser$get_Result() {
			return this.$commandResult;
		},
		get_data: function ApiServerResultParser$get_Data() {
			return this.$commandData;
		}
	});
	ss.initClass($tab__CollectionImpl, $asm, {
		get__length: function DoNotUseCollection$get_Length() {
			return this.$items.length;
		},
		get__rawArray: function DoNotUseCollection$get_RawArray() {
			return this.$items;
		},
		get_item: function DoNotUseCollection$get_Item(index) {
			return this.$items[index];
		},
		_get: function DoNotUseCollection$Get(key) {
			var validKey = this.$ensureValidKey(key);
			if (ss.isValue(this.$itemMap[validKey])) {
				return this.$itemMap[validKey];
			}
			return undefined;
		},
		_has: function DoNotUseCollection$Has(key) {
			return ss.isValue(this._get(key));
		},
		_add: function DoNotUseCollection$Add(key, item) {
			this.$verifyKeyAndItemParameters(key, item);
			var validKey = this.$ensureValidKey(key);
			this.$items.push(item);
			this.$itemMap[validKey] = item;
		},
		_addToFirst: function DoNotUseCollection$AddToFirst(key, item) {
			this.$verifyKeyAndItemParameters(key, item);
			var validKey = this.$ensureValidKey(key);
			this.$items.unshift(item);
			this.$itemMap[validKey] = item;
		},
		_remove: function DoNotUseCollection$Remove(key) {
			var validKey = this.$ensureValidKey(key);
			if (ss.isValue(this.$itemMap[validKey])) {
				var item = this.$itemMap[validKey];
				delete this.$itemMap[validKey];
				for (var index = 0; index < this.$items.length; index++) {
					if (ss.referenceEquals(this.$items[index], item)) {
						this.$items.splice(index, 1);
						break;
					}
				}
			}
		},
		_toApiCollection: function DoNotUseCollection$ToApiCollection() {
			var clone = this.$items.concat();
			clone.get = ss.mkdel(this, function(key) {
				return this._get(key);
			});
			clone.has = ss.mkdel(this, function(key1) {
				return this._has(key1);
			});
			return clone;
		},
		$verifyUniqueKeyParameter: function DoNotUseCollection$VerifyUniqueKeyParameter(key) {
			if ($tab__Utility.isNullOrEmpty(key)) {
				throw new ss.Exception('Null key');
			}
			if (this._has(key)) {
				throw new ss.Exception("Duplicate key '" + key + "'");
			}
		},
		$verifyKeyAndItemParameters: function DoNotUseCollection$VerifyKeyAndItemParameters(key, item) {
			this.$verifyUniqueKeyParameter(key);
			if (ss.isNullOrUndefined(item)) {
				throw new ss.Exception('Null item');
			}
		},
		$ensureValidKey: function DoNotUseCollection$EnsureValidKey(key) {
			return '_' + key;
		}
	});
	ss.initClass($tab__ColumnImpl, $asm, {
		get_fieldName: function ColumnImpl$get_FieldName() {
			return this.$fieldName;
		},
		get_dataType: function ColumnImpl$get_DataType() {
			return this.$dataType;
		},
		get_isReferenced: function ColumnImpl$get_IsReferenced() {
			return this.$isReferenced;
		},
		get_index: function ColumnImpl$get_Index() {
			return this.$index;
		}
	});
	ss.initClass($tab__DataTableImpl, $asm, {
		get_name: function DataTableImpl$get_Name() {
			return this.$name;
		},
		get_rows: function DataTableImpl$get_Rows() {
			return this.$rows;
		},
		get_columns: function DataTableImpl$get_Columns() {
			return this.$columns;
		},
		get_totalRowCount: function DataTableImpl$get_TotalRowCount() {
			return this.$totalRowCount;
		},
		get_isSummaryData: function DataTableImpl$get_IsSummaryData() {
			return this.$isSummaryData;
		}
	});
	ss.initClass($tab__DeferredImpl, $asm, {
		get_promise: function DoNotUseDeferred$get_Promise() {
			return this.$promise;
		},
		all: function DoNotUseDeferred$All(promisesOrValues) {
			var allDone = new $tab__DeferredImpl();
			var length = promisesOrValues.length;
			var toResolve = length;
			var results = [];
			if (length === 0) {
				allDone.resolve(results);
				return allDone.get_promise();
			}
			var resolveOne = function(promiseOrValue, index) {
				var promise = $tab_$DeferredUtil.$coerceToTrustedPromise(promiseOrValue);
				promise.then(function(returnValue) {
					results[index] = returnValue;
					toResolve--;
					if (toResolve === 0) {
						allDone.resolve(results);
					}
					return null;
				}, function(e) {
					allDone.reject(e);
					return null;
				});
			};
			for (var i = 0; i < length; i++) {
				resolveOne(promisesOrValues[i], i);
			}
			return allDone.get_promise();
		},
		then: function DoNotUseDeferred$Then(callback, errback) {
			return this.$thenFunc(callback, errback);
		},
		resolve: function DoNotUseDeferred$Resolve(promiseOrValue) {
			return this.$resolveFunc(promiseOrValue);
		},
		reject: function DoNotUseDeferred$Reject(e) {
			return this.$resolveFunc($tab_$DeferredUtil.$rejected(e));
		},
		$preResolutionThen: function DoNotUseDeferred$PreResolutionThen(callback, errback) {
			var deferred = new $tab__DeferredImpl();
			this.$listeners.push(function(promise) {
				promise.then(callback, errback).then(ss.mkdel(deferred, deferred.resolve), ss.mkdel(deferred, deferred.reject));
			});
			return deferred.get_promise();
		},
		$transitionToFulfilled: function DoNotUseDeferred$TransitionToFulfilled(completed) {
			var completedPromise = $tab_$DeferredUtil.$coerceToTrustedPromise(completed);
			this.$thenFunc = completedPromise.then;
			this.$resolveFunc = $tab_$DeferredUtil.$coerceToTrustedPromise;
			for (var i = 0; i < this.$listeners.length; i++) {
				var listener = this.$listeners[i];
				listener(completedPromise);
			}
			this.$listeners = null;
			return completedPromise;
		}
	});
	ss.initClass($tab__Param, $asm, {});
	ss.initClass($tab__PromiseImpl, $asm, {
		always: function DoNotUsePromise$Always(callback) {
			return ss.cast(this.then(callback, ss.cast(callback, Function)), $tab__PromiseImpl);
		},
		otherwise: function DoNotUsePromise$Otherwise(errback) {
			return ss.cast(this.then(null, errback), $tab__PromiseImpl);
		}
	});
	ss.initClass($tab__Rect, $asm, {
		intersect: function TabRect$Intersect(other) {
			var left = Math.max(this.left, other.left);
			var top = Math.max(this.top, other.top);
			var right = Math.min(this.left + this.width, other.left + other.width);
			var bottom = Math.min(this.top + this.height, other.top + other.height);
			if (right <= left || bottom <= top) {
				return new $tab__Rect(0, 0, 0, 0);
			}
			return new $tab__Rect(left, top, right - left, bottom - top);
		}
	});
	ss.initClass($tab__SharedSheetImpl, $asm, {
		get_sheet: null,
		get_name: function SharedSheetImpl$get_Name() {
			return this.$name;
		},
		get_size: function SharedSheetImpl$get_Size() {
			return this.$size;
		},
		get_sheetType: function SharedSheetImpl$get_SheetType() {
			return this.$sheetType;
		}
	});
	ss.initClass($tab__SharedDashboardImpl, $asm, {
		get_sheet: function SharedDashboardImpl$get_Sheet() {
			return this.get_dashboard();
		},
		get_dashboard: null,
		get_worksheets: function SharedDashboardImpl$get_Worksheets() {
			return this.dashboardWorksheets;
		},
		get_objects: function SharedDashboardImpl$get_Objects() {
			return this.dashboardObjects;
		}
	}, $tab__SharedSheetImpl);
	ss.initClass($tab__SharedWorksheetImpl, $asm, {
		get_sheet: function SharedWorksheetImpl$get_Sheet() {
			return this.get_worksheet();
		},
		get_worksheet: null,
		get_parentDashboardImpl: function SharedWorksheetImpl$get_ParentDashboardImpl() {
			return this.$parentDashboardImpl;
		},
		get_parentDashboard: function SharedWorksheetImpl$get_ParentDashboard() {
			if (ss.isValue(this.$parentDashboardImpl)) {
				return this.$parentDashboardImpl.get_dashboard();
			}
			return null;
		},
		getSummaryDataAsync: function SharedWorksheetImpl$GetSummaryDataAsync(options) {
			options = options || new Object();
			var commandParams = this.$getGetDataCommandParams(ss.coalesce(options.ignoreAliases, false), ss.coalesce(options.ignoreSelection, false), ss.coalesce(options.maxRows, 0));
			return this.$getDataHelperAsync('api.GetSummaryTableCommand', commandParams);
		},
		getUnderlyingDataAsync: function SharedWorksheetImpl$GetUnderlyingDataAsync(options) {
			options = options || new Object();
			var commandParams = this.$getGetDataCommandParams(ss.coalesce(options.ignoreAliases, false), ss.coalesce(options.ignoreSelection, false), ss.coalesce(options.maxRows, 0));
			commandParams['api.includeAllColumns'] = ss.coalesce(options.includeAllColumns, false);
			return this.$getDataHelperAsync('api.GetUnderlyingTableCommand', commandParams);
		},
		getSheetLocatorParams: function SharedWorksheetImpl$GetSheetLocatorParams() {
			var commandParameters = {};
			commandParameters['api.worksheetName'] = this.get_name();
			if (ss.isValue(this.get_parentDashboardImpl())) {
				commandParameters['api.dashboardName'] = this.get_parentDashboardImpl().get_name();
			}
			return commandParameters;
		},
		getVisualIdParams: function SharedWorksheetImpl$GetVisualIdParams() {
			var commandParameters = {};
			var visualId = new Object();
			visualId.sheetPath = new Object();
			visualId.sheetPath.sheetName = this.get_name();
			visualId.sheetPath.isDashboard = false;
			if (ss.isValue(this.get_parentDashboardImpl())) {
				visualId.dashboardName = this.get_parentDashboardImpl().get_name();
				visualId.sheetPath.isDashboard = true;
			}
			commandParameters['api.visualId'] = visualId;
			return commandParameters;
		},
		$getGetDataCommandParams: function SharedWorksheetImpl$GetGetDataCommandParams(ignoreAliases, ignoreSelection, maxRows) {
			var commandParameters = this.getSheetLocatorParams();
			commandParameters['api.ignoreAliases'] = ignoreAliases;
			commandParameters['api.ignoreSelection'] = ignoreSelection;
			commandParameters['api.maxRows'] = maxRows;
			return commandParameters;
		},
		$getDataHelperAsync: function SharedWorksheetImpl$GetDataHelperAsync(commandName, commandParameters) {
			var deferred = new tab._Deferred();
			var returnHandler = new (ss.makeGenericType($tab_CommandReturnHandler$1, [Object]))(commandName, 0, function(result) {
				var dt = $tab__DataTableImpl.processGetDataPresModel(result);
				deferred.resolve(dt);
			}, function(remoteError, message) {
				deferred.reject($tab__TableauException.createServerError(message));
			});
			this.messagingOptions.sendCommand(Object).call(this.messagingOptions, commandParameters, returnHandler);
			return deferred.get_promise();
		}
	}, $tab__SharedSheetImpl);
	ss.initClass($tab__SheetInfoImpl, $asm, {}, Object);
	ss.initClass($tab__TableauException, $asm, {});
	ss.initClass($tab__Utility, $asm, {});
	ss.initEnum($tab_ApiDashboardObjectType, $asm, { blank: 'blank', worksheet: 'worksheet', quickFilter: 'quickFilter', parameterControl: 'parameterControl', pageFilter: 'pageFilter', legend: 'legend', title: 'title', text: 'text', image: 'image', webPage: 'webPage', addIn: 'addIn' }, true);
	ss.initEnum($tab_ApiDateRangeType, $asm, { last: 'last', lastn: 'lastn', next: 'next', nextn: 'nextn', curr: 'curr', todate: 'todate' }, true);
	ss.initEnum($tab_ApiDeviceType, $asm, { default: 'default', desktop: 'desktop', tablet: 'tablet', phone: 'phone' }, true);
	ss.initClass($tab_ApiEnumConverter, $asm, {});
	ss.initEnum($tab_ApiErrorCode, $asm, { internalError: 'internalError', serverError: 'serverError', invalidAggregationFieldName: 'invalidAggregationFieldName', invalidToolbarButtonName: 'invalidToolbarButtonName', invalidParameter: 'invalidParameter', invalidUrl: 'invalidUrl', staleDataReference: 'staleDataReference', vizAlreadyInManager: 'vizAlreadyInManager', noUrlOrParentElementNotFound: 'noUrlOrParentElementNotFound', invalidFilterFieldName: 'invalidFilterFieldName', invalidFilterFieldValue: 'invalidFilterFieldValue', invalidFilterFieldNameOrValue: 'invalidFilterFieldNameOrValue', filterCannotBePerformed: 'filterCannotBePerformed', notActiveSheet: 'notActiveSheet', invalidCustomViewName: 'invalidCustomViewName', missingRangeNForRelativeDateFilters: 'missingRangeNForRelativeDateFilters', missingMaxSize: 'missingMaxSize', missingMinSize: 'missingMinSize', missingMinMaxSize: 'missingMinMaxSize', invalidSize: 'invalidSize', invalidSizeBehaviorOnWorksheet: 'invalidSizeBehaviorOnWorksheet', sheetNotInWorkbook: 'sheetNotInWorkbook', indexOutOfRange: 'indexOutOfRange', downloadWorkbookNotAllowed: 'downloadWorkbookNotAllowed', nullOrEmptyParameter: 'nullOrEmptyParameter', browserNotCapable: 'browserNotCapable', unsupportedEventName: 'unsupportedEventName', invalidDateParameter: 'invalidDateParameter', invalidSelectionFieldName: 'invalidSelectionFieldName', invalidSelectionValue: 'invalidSelectionValue', invalidSelectionDate: 'invalidSelectionDate', noUrlForHiddenWorksheet: 'noUrlForHiddenWorksheet', maxVizResizeAttempts: 'maxVizResizeAttempts' }, true);
	ss.initEnum($tab_ApiFieldAggregationType, $asm, { SUM: 'SUM', AVG: 'AVG', MIN: 'MIN', MAX: 'MAX', STDEV: 'STDEV', STDEVP: 'STDEVP', VAR: 'VAR', VARP: 'VARP', COUNT: 'COUNT', COUNTD: 'COUNTD', MEDIAN: 'MEDIAN', ATTR: 'ATTR', NONE: 'NONE', PERCENTILE: 'PERCENTILE', YEAR: 'YEAR', QTR: 'QTR', MONTH: 'MONTH', DAY: 'DAY', HOUR: 'HOUR', MINUTE: 'MINUTE', SECOND: 'SECOND', WEEK: 'WEEK', WEEKDAY: 'WEEKDAY', MONTHYEAR: 'MONTHYEAR', MDY: 'MDY', END: 'END', TRUNC_YEAR: 'TRUNC_YEAR', TRUNC_QTR: 'TRUNC_QTR', TRUNC_MONTH: 'TRUNC_MONTH', TRUNC_WEEK: 'TRUNC_WEEK', TRUNC_DAY: 'TRUNC_DAY', TRUNC_HOUR: 'TRUNC_HOUR', TRUNC_MINUTE: 'TRUNC_MINUTE', TRUNC_SECOND: 'TRUNC_SECOND', QUART1: 'QUART1', QUART3: 'QUART3', SKEWNESS: 'SKEWNESS', KURTOSIS: 'KURTOSIS', INOUT: 'INOUT', SUM_XSQR: 'SUM_XSQR', USER: 'USER' }, true);
	ss.initEnum($tab_ApiFieldRoleType, $asm, { dimension: 'dimension', measure: 'measure', unknown: 'unknown' }, true);
	ss.initEnum($tab_ApiFilterType, $asm, { categorical: 'categorical', quantitative: 'quantitative', hierarchical: 'hierarchical', relativedate: 'relativedate' }, true);
	ss.initEnum($tab_ApiFilterUpdateType, $asm, { all: 'all', replace: 'replace', add: 'add', remove: 'remove' }, true);
	ss.initClass($tab_ApiMessageHandler, $asm, {
		handleEventNotification: function ApiMessageHandler$HandleEventNotification(eventName, eventParameters) {
			throw new ss.NotImplementedException();
		}
	});
	ss.initClass($tab_ApiMessagingOptions, $asm, {
		get_handler: function ApiMessagingOptions$get_Handler() {
			return this.$handler;
		},
		get_router: function ApiMessagingOptions$get_Router() {
			return this.$router;
		},
		sendCommand: function(T) {
			return function ApiMessagingOptions$SendCommand(commandParameters, returnHandler) {
				this.$router.sendCommand(T).call(this.$router, this.$handler, commandParameters, returnHandler);
			};
		},
		dispose: function ApiMessagingOptions$Dispose() {
			this.$router.unregisterHandler(this.$handler);
		}
	});
	ss.initEnum($tab_ApiNullOption, $asm, { nullValues: 'nullValues', nonNullValues: 'nonNullValues', allValues: 'allValues' }, true);
	ss.initEnum($tab_ApiParameterAllowableValuesType, $asm, { all: 'all', list: 'list', range: 'range' }, true);
	ss.initEnum($tab_ApiParameterDataType, $asm, { float: 'float', integer: 'integer', string: 'string', boolean: 'boolean', date: 'date', datetime: 'datetime' }, true);
	ss.initEnum($tab_ApiPeriodType, $asm, { year: 'year', quarter: 'quarter', month: 'month', week: 'week', day: 'day', hour: 'hour', minute: 'minute', second: 'second' }, true);
	ss.initEnum($tab_ApiSelectionUpdateType, $asm, { replace: 'replace', add: 'add', remove: 'remove' }, true);
	ss.initEnum($tab_ApiSheetSizeBehavior, $asm, { automatic: 'automatic', exactly: 'exactly', range: 'range', atleast: 'atleast', atmost: 'atmost' }, true);
	ss.initEnum($tab_ApiSheetType, $asm, { worksheet: 'worksheet', dashboard: 'dashboard', story: 'story' }, true);
	ss.initEnum($tab_ApiTableauEventName, $asm, { customviewload: 'customviewload', customviewremove: 'customviewremove', customviewsave: 'customviewsave', customviewsetdefault: 'customviewsetdefault', filterchange: 'filterchange', firstinteractive: 'firstinteractive', firstvizsizeknown: 'firstvizsizeknown', marksselection: 'marksselection', markshighlight: 'markshighlight', parametervaluechange: 'parametervaluechange', storypointswitch: 'storypointswitch', tabswitch: 'tabswitch', toolbarstatechange: 'toolbarstatechange', vizresize: 'vizresize' }, true);
	ss.initEnum($tab_ApiToolbarButtonName, $asm, { redo: 'redo', undo: 'undo' }, true);
	ss.initEnum($tab_ApiToolbarPosition, $asm, { top: 'top', bottom: 'bottom' }, true);
	ss.initClass($tab_CrossDomainMessager, $asm, {
		registerHandler: function CrossDomainMessager$RegisterHandler(handler) {
			var uniqueId = 'host' + this.$nextHandlerId;
			if (ss.isValue(handler.get_hostId()) || ss.isValue(this.$handlers[handler.get_hostId()])) {
				throw $tab__TableauException.createInternalError("Host '" + handler.get_hostId() + "' is already registered.");
			}
			this.$nextHandlerId++;
			handler.set_hostId(uniqueId);
			this.$handlers[uniqueId] = handler;
			handler.add_stateReadyForQuery(ss.mkdel(this, this.$handleStateReadyForQuery));
		},
		unregisterHandler: function CrossDomainMessager$UnregisterHandler(handler) {
			if (ss.isValue(handler.get_hostId()) || ss.isValue(this.$handlers[handler.get_hostId()])) {
				delete this.$handlers[handler.get_hostId()];
				handler.remove_stateReadyForQuery(ss.mkdel(this, this.$handleStateReadyForQuery));
			}
		},
		sendCommand: function(T) {
			return function CrossDomainMessager$SendCommand(source, commandParameters, returnHandler) {
				var iframe = source.get_iframe();
				var handlerId = source.get_hostId();
				if (!$tab__Utility.hasWindowPostMessage() || ss.isNullOrUndefined(iframe) || ss.isNullOrUndefined(iframe.contentWindow)) {
					return;
				}
				var commandId = $tab__ApiCommand.generateNextCommandId();
				var callbackMap = this.$commandCallbacks[handlerId];
				if (ss.isNullOrUndefined(callbackMap)) {
					callbackMap = {};
					this.$commandCallbacks[handlerId] = callbackMap;
				}
				callbackMap[commandId] = returnHandler;
				var commandName = returnHandler.get_commandName();
				var serializedParams = null;
				if (ss.isValue(commandParameters)) {
					serializedParams = JSON.stringify(commandParameters);
				}
				var command = new $tab__ApiCommand(commandName, commandId, handlerId, serializedParams);
				var message = command.serialize();
				if ($tab__Utility.isPostMessageSynchronous()) {
					window.setTimeout(function() {
						iframe.contentWindow.postMessage(message, '*');
					}, 0);
				}
				else {
					iframe.contentWindow.postMessage(message, '*');
				}
			};
		},
		$handleStateReadyForQuery: function CrossDomainMessager$HandleStateReadyForQuery(source) {
			var queue = this.$commandReturnAfterStateReadyQueues[source.get_hostId()];
			if ($tab__Utility.isNullOrEmpty(queue)) {
				return;
			}
			while (queue.length > 0) {
				var successCallback = queue.pop();
				if (ss.isValue(successCallback)) {
					successCallback();
				}
			}
		},
		$handleCrossDomainMessage: function CrossDomainMessager$HandleCrossDomainMessage(e) {
			var messageEvent = ss.cast(e, MessageEvent);
			if (ss.isNullOrUndefined(messageEvent.data)) {
				return;
			}
			var command = $tab__ApiCommand.parse(messageEvent.data.toString());
			var rawName = command.get_rawName();
			var hostId = command.get_hostId();
			var handler = this.$handlers[hostId];
			if (ss.isNullOrUndefined(handler) || !ss.referenceEquals(handler.get_hostId(), command.get_hostId())) {
				handler = this.$findHostIdByDomComparison(messageEvent);
			}
			if (command.get_isApiCommandName()) {
				if (ss.referenceEquals(command.get_commandId(), $tab__ApiCommand.crossDomainEventNotificationId)) {
					handler.handleEventNotification(command.get_name(), command.get_parameters());
					if (command.get_name() === 'api.FirstVizSizeKnownEvent') {
						messageEvent.source.postMessage('tableau.bootstrap', '*');
					}
				}
				else {
					this.$handleCrossDomainResponse(command);
				}
			}
			else if (!ss.isNullOrUndefined(this.$legacyHandler)) {
				this.$legacyHandler(rawName, handler);
			}
		},
		$handleCrossDomainResponse: function CrossDomainMessager$HandleCrossDomainResponse(command) {
			var commandCallbackMap = this.$commandCallbacks[command.get_hostId()];
			var returnHandler = (ss.isValue(commandCallbackMap) ? commandCallbackMap[command.get_commandId()] : null);
			if (ss.isNullOrUndefined(returnHandler)) {
				return;
			}
			delete commandCallbackMap[command.get_commandId()];
			if (command.get_name() !== returnHandler.get_commandName()) {
				return;
			}
			var crossDomainResult = new $tab__ApiServerResultParser(command.get_parameters());
			var commandResult = crossDomainResult.get_data();
			if (crossDomainResult.get_result() === 'api.success') {
				switch (returnHandler.get_successCallbackTiming()) {
					case 0: {
						if (ss.isValue(returnHandler.get_successCallback())) {
							returnHandler.get_successCallback()(commandResult);
						}
						break;
					}
					case 1: {
						var postponedCallback = function() {
							if (ss.isValue(returnHandler.get_successCallback())) {
								returnHandler.get_successCallback()(commandResult);
							}
						};
						var queue = this.$commandReturnAfterStateReadyQueues[command.get_hostId()];
						if (ss.isNullOrUndefined(queue)) {
							queue = [];
							this.$commandReturnAfterStateReadyQueues[command.get_hostId()] = queue;
						}
						queue.push(postponedCallback);
						break;
					}
					default: {
						throw $tab__TableauException.createInternalError('Unknown timing value: ' + returnHandler.get_successCallbackTiming());
					}
				}
			}
			else if (ss.isValue(returnHandler.get_errorCallback())) {
				var remoteError = crossDomainResult.get_result() === 'api.remotefailed';
				var errorMessage = (ss.isValue(commandResult) ? commandResult.toString() : '');
				returnHandler.get_errorCallback()(remoteError, errorMessage);
			}
		},
		$findHostIdByDomComparison: function CrossDomainMessager$FindHostIdByDomComparison(messageEvent) {
			var $t1 = new ss.ObjectEnumerator(this.$handlers);
			try {
				while ($t1.moveNext()) {
					var pair = $t1.current();
					if (this.$handlers.hasOwnProperty(pair.key) && ss.referenceEquals(pair.value.get_iframe().contentWindow, messageEvent.source)) {
						return pair.value;
					}
				}
			}
			finally {
				$t1.dispose();
			}
			return new $tab_$DoNothingCrossDomainHandler();
		}
	});
	ss.initEnum($tab_DataType, $asm, { float: 'float', integer: 'integer', string: 'string', boolean: 'boolean', date: 'date', datetime: 'datetime' }, true);
	ss.initClass($tab_DataValue, $asm, {}, Object);
	ss.initClass($tab_HostedApiMessageHandler, $asm, {
		add_stateReadyForQuery: function HostedApiMessageHandler$add_StateReadyForQuery(value) {
			this.$2$StateReadyForQueryField = ss.delegateCombine(this.$2$StateReadyForQueryField, value);
		},
		remove_stateReadyForQuery: function HostedApiMessageHandler$remove_StateReadyForQuery(value) {
			this.$2$StateReadyForQueryField = ss.delegateRemove(this.$2$StateReadyForQueryField, value);
		},
		get_hostId: function HostedApiMessageHandler$get_HostId() {
			return null;
		},
		set_hostId: function HostedApiMessageHandler$set_HostId(value) {
		},
		get_iframe: function HostedApiMessageHandler$get_Iframe() {
			return null;
		}
	}, $tab_ApiMessageHandler);
	ss.initClass($tab_HostedApiMessageRouter, $asm, {
		registerHandler: function HostedApiMessageRouter$RegisterHandler(handler) {
			this.$crossDomainMessager.registerHandler(handler);
		},
		unregisterHandler: function HostedApiMessageRouter$UnregisterHandler(handler) {
			this.$crossDomainMessager.unregisterHandler(handler);
		},
		sendCommand: function(T) {
			return function HostedApiMessageRouter$SendCommand(source, commandParameters, returnHandler) {
				this.$crossDomainMessager.sendCommand(T).call(this.$crossDomainMessager, source, commandParameters, returnHandler);
			};
		}
	});
	ss.initInterface($tab_ITableauEvent, $asm, { getEventName: null });
	ss.initClass($tab_MarkImpl, $asm, {
		get_pairs: function MarkImpl$get_Pairs() {
			return this.$collection;
		},
		get_tupleId: function MarkImpl$get_TupleId() {
			return this.$tupleId;
		},
		get_$clonedPairs: function MarkImpl$get_ClonedPairs() {
			if (ss.isNullOrUndefined(this.$clonedPairs)) {
				this.$clonedPairs = this.$collection._toApiCollection();
			}
			return this.$clonedPairs;
		},
		$addPair: function MarkImpl$AddPair(pair) {
			this.$collection._add(pair.fieldName, pair);
		}
	});
	ss.initClass($tab_Point, $asm, {}, Object);
	ss.initClass($tab_PublicEnums, $asm, {});
	ss.initClass($tab_SheetSize, $asm, {}, Object);
	ss.initClass($tab_SheetSizeFactory, $asm, {});
	ss.initClass($tab_Size, $asm, {}, Object);
	ss.initClass($tableauSoftware_Column, $asm, {
		getFieldName: function Column$GetFieldName() {
			return this.$impl.get_fieldName();
		},
		getDataType: function Column$GetDataType() {
			return this.$impl.get_dataType();
		},
		getIsReferenced: function Column$GetIsReferenced() {
			return this.$impl.get_isReferenced();
		},
		getIndex: function Column$GetIndex() {
			return this.$impl.get_index();
		}
	});
	ss.initClass($tableauSoftware_DataTable, $asm, {
		getName: function DataTable$GetName() {
			return this.$impl.get_name();
		},
		getData: function DataTable$GetData() {
			return this.$impl.get_rows();
		},
		getColumns: function DataTable$GetColumns() {
			return this.$impl.get_columns();
		},
		getTotalRowCount: function DataTable$GetTotalRowCount() {
			return this.$impl.get_totalRowCount();
		},
		getIsSummaryData: function DataTable$GetIsSummaryData() {
			return this.$impl.get_isSummaryData();
		}
	});
	ss.initClass($tableauSoftware_Mark, $asm, {
		getPairs: function Mark$GetPairs() {
			return this.impl.get_$clonedPairs();
		}
	});
	ss.initClass($tableauSoftware_Pair, $asm, {});
	(function() {
		$tab__ApiCommand.crossDomainEventNotificationId = 'xdomainSourceId';
		$tab__ApiCommand.lastRequestMessage = null;
		$tab__ApiCommand.lastResponseMessage = null;
		$tab__ApiCommand.lastClientInfoResponseMessage = null;
		$tab__ApiCommand.$nextCommandId = 0;
	})();
	(function() {
		var globalState = window['_ApiObjectRegistryGlobalState'];
		var $t1 = globalState;
		if (ss.isNullOrUndefined($t1)) {
			$t1 = new Object();
		}
		window['_ApiObjectRegistryGlobalState'] = $t1;
		window._ApiObjectRegistryGlobalState.creationRegistry = window._ApiObjectRegistryGlobalState.creationRegistry || {};
		window._ApiObjectRegistryGlobalState.singletonInstanceRegistry = window._ApiObjectRegistryGlobalState.singletonInstanceRegistry || {};
	})();
	(function() {
		var ns = global.tableauSoftware;
		ns.DeviceType = { DEFAULT: 'default', DESKTOP: 'desktop', TABLET: 'tablet', PHONE: 'phone' };
		ns.DashboardObjectType = { BLANK: 'blank', WORKSHEET: 'worksheet', QUICK_FILTER: 'quickFilter', PARAMETER_CONTROL: 'parameterControl', PAGE_FILTER: 'pageFilter', LEGEND: 'legend', TITLE: 'title', TEXT: 'text', IMAGE: 'image', WEB_PAGE: 'webPage', ADDIN: 'addIn' };
		ns.DataType = { FLOAT: 'float', INTEGER: 'integer', STRING: 'string', BOOLEAN: 'boolean', DATE: 'date', DATETIME: 'datetime' };
		ns.DateRangeType = { LAST: 'last', LASTN: 'lastn', NEXT: 'next', NEXTN: 'nextn', CURR: 'curr', TODATE: 'todate' };
		ns.ErrorCode = { INTERNAL_ERROR: 'internalError', SERVER_ERROR: 'serverError', INVALID_AGGREGATION_FIELD_NAME: 'invalidAggregationFieldName', INVALID_TOOLBAR_BUTTON_NAME: 'invalidToolbarButtonName', INVALID_PARAMETER: 'invalidParameter', INVALID_URL: 'invalidUrl', STALE_DATA_REFERENCE: 'staleDataReference', VIZ_ALREADY_IN_MANAGER: 'vizAlreadyInManager', NO_URL_OR_PARENT_ELEMENT_NOT_FOUND: 'noUrlOrParentElementNotFound', INVALID_FILTER_FIELDNAME: 'invalidFilterFieldName', INVALID_FILTER_FIELDVALUE: 'invalidFilterFieldValue', INVALID_FILTER_FIELDNAME_OR_VALUE: 'invalidFilterFieldNameOrValue', FILTER_CANNOT_BE_PERFORMED: 'filterCannotBePerformed', NOT_ACTIVE_SHEET: 'notActiveSheet', INVALID_CUSTOM_VIEW_NAME: 'invalidCustomViewName', MISSING_RANGEN_FOR_RELATIVE_DATE_FILTERS: 'missingRangeNForRelativeDateFilters', MISSING_MAX_SIZE: 'missingMaxSize', MISSING_MIN_SIZE: 'missingMinSize', MISSING_MINMAX_SIZE: 'missingMinMaxSize', INVALID_SIZE: 'invalidSize', INVALID_SIZE_BEHAVIOR_ON_WORKSHEET: 'invalidSizeBehaviorOnWorksheet', SHEET_NOT_IN_WORKBOOK: 'sheetNotInWorkbook', INDEX_OUT_OF_RANGE: 'indexOutOfRange', DOWNLOAD_WORKBOOK_NOT_ALLOWED: 'downloadWorkbookNotAllowed', NULL_OR_EMPTY_PARAMETER: 'nullOrEmptyParameter', BROWSER_NOT_CAPABLE: 'browserNotCapable', UNSUPPORTED_EVENT_NAME: 'unsupportedEventName', INVALID_DATE_PARAMETER: 'invalidDateParameter', INVALID_SELECTION_FIELDNAME: 'invalidSelectionFieldName', INVALID_SELECTION_VALUE: 'invalidSelectionValue', INVALID_SELECTION_DATE: 'invalidSelectionDate', NO_URL_FOR_HIDDEN_WORKSHEET: 'noUrlForHiddenWorksheet', MAX_VIZ_RESIZE_ATTEMPTS: 'maxVizResizeAttempts' };
		ns.FieldAggregationType = { SUM: 'SUM', AVG: 'AVG', MIN: 'MIN', MAX: 'MAX', STDEV: 'STDEV', STDEVP: 'STDEVP', VAR: 'VAR', VARP: 'VARP', COUNT: 'COUNT', COUNTD: 'COUNTD', MEDIAN: 'MEDIAN', ATTR: 'ATTR', NONE: 'NONE', PERCENTILE: 'PERCENTILE', YEAR: 'YEAR', QTR: 'QTR', MONTH: 'MONTH', DAY: 'DAY', HOUR: 'HOUR', MINUTE: 'MINUTE', SECOND: 'SECOND', WEEK: 'WEEK', WEEKDAY: 'WEEKDAY', MONTHYEAR: 'MONTHYEAR', MDY: 'MDY', END: 'END', TRUNC_YEAR: 'TRUNC_YEAR', TRUNC_QTR: 'TRUNC_QTR', TRUNC_MONTH: 'TRUNC_MONTH', TRUNC_WEEK: 'TRUNC_WEEK', TRUNC_DAY: 'TRUNC_DAY', TRUNC_HOUR: 'TRUNC_HOUR', TRUNC_MINUTE: 'TRUNC_MINUTE', TRUNC_SECOND: 'TRUNC_SECOND', QUART1: 'QUART1', QUART3: 'QUART3', SKEWNESS: 'SKEWNESS', KURTOSIS: 'KURTOSIS', INOUT: 'INOUT', SUM_XSQR: 'SUM_XSQR', USER: 'USER' };
		ns.FieldRoleType = { DIMENSION: 'dimension', MEASURE: 'measure', UNKNOWN: 'unknown' };
		ns.FilterUpdateType = { ALL: 'all', REPLACE: 'replace', ADD: 'add', REMOVE: 'remove' };
		ns.FilterType = { CATEGORICAL: 'categorical', QUANTITATIVE: 'quantitative', HIERARCHICAL: 'hierarchical', RELATIVEDATE: 'relativedate' };
		ns.NullOption = { NULL_VALUES: 'nullValues', NON_NULL_VALUES: 'nonNullValues', ALL_VALUES: 'allValues' };
		ns.ParameterAllowableValuesType = { ALL: 'all', LIST: 'list', RANGE: 'range' };
		ns.ParameterDataType = { FLOAT: 'float', INTEGER: 'integer', STRING: 'string', BOOLEAN: 'boolean', DATE: 'date', DATETIME: 'datetime' };
		ns.PeriodType = { YEAR: 'year', QUARTER: 'quarter', MONTH: 'month', WEEK: 'week', DAY: 'day', HOUR: 'hour', MINUTE: 'minute', SECOND: 'second' };
		ns.SelectionUpdateType = { REPLACE: 'replace', ADD: 'add', REMOVE: 'remove' };
		ns.SheetSizeBehavior = { AUTOMATIC: 'automatic', EXACTLY: 'exactly', RANGE: 'range', ATLEAST: 'atleast', ATMOST: 'atmost' };
		ns.SheetType = { WORKSHEET: 'worksheet', DASHBOARD: 'dashboard', STORY: 'story' };
		ns.TableauEventName = { CUSTOM_VIEW_LOAD: 'customviewload', CUSTOM_VIEW_REMOVE: 'customviewremove', CUSTOM_VIEW_SAVE: 'customviewsave', CUSTOM_VIEW_SET_DEFAULT: 'customviewsetdefault', FILTER_CHANGE: 'filterchange', FIRST_INTERACTIVE: 'firstinteractive', FIRST_VIZ_SIZE_KNOWN: 'firstvizsizeknown', MARKS_SELECTION: 'marksselection', MARKS_HIGHLIGHT: 'markshighlight', PARAMETER_VALUE_CHANGE: 'parametervaluechange', STORY_POINT_SWITCH: 'storypointswitch', TAB_SWITCH: 'tabswitch', TOOLBAR_STATE_CHANGE: 'toolbarstatechange', VIZ_RESIZE: 'vizresize' };
		ns.ToolbarPosition = { TOP: 'top', BOTTOM: 'bottom' };
		ns.ToolbarButtonName = { REDO: 'redo', UNDO: 'undo' };
	})();
})();
// END ApiShared
/*! BEGIN ApiDomain */

(function() {
	'dont use strict';
	var $asm = {};
	global.tab = global.tab || {};
	ss.initAssembly($asm, 'vqlapidomain');
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiDomain.CommandInputMapping
	var $tab_$CommandInputMapping = function(toDoc, param, isOptional) {
		this.$1$MappingField = null;
		this.$1$DocParamField = null;
		this.$1$IsOptionalField = false;
		this.set_$mapping(toDoc);
		this.set_$docParam(param);
		this.set_$isOptional(isOptional);
	};
	$tab_$CommandInputMapping.__typeName = 'tab.$CommandInputMapping';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiDomain.ApiCrossDomainEnumConverter
	var $tab_ApiCrossDomainEnumConverter = function() {
	};
	$tab_ApiCrossDomainEnumConverter.__typeName = 'tab.ApiCrossDomainEnumConverter';
	$tab_ApiCrossDomainEnumConverter.convertDataType = function ApiCrossDomainEnumConverter$ConvertDataType(dataType) {
		switch (dataType) {
			case 'boolean': {
				return 'bool';
			}
			case 'date':
			case 'datetime': {
				return 'date';
			}
			case 'integer':
			case 'real':
			case 'tuple': {
				return 'number';
			}
			case 'cstring': {
				return 'string';
			}
			case 'unknown':
			default: {
				return 'string';
			}
		}
	};
	$tab_ApiCrossDomainEnumConverter.convertUnderlyingDataType = function ApiCrossDomainEnumConverter$ConvertUnderlyingDataType(dataType) {
		switch (dataType) {
			case 'boolean': {
				return 'boolean';
			}
			case 'date': {
				return 'date';
			}
			case 'datetime': {
				return 'datetime';
			}
			case 'integer': {
				return 'integer';
			}
			case 'real':
			case 'tuple': {
				return 'float';
			}
			case 'cstring':
			case 'unknown':
			default: {
				return 'string';
			}
		}
	};
	$tab_ApiCrossDomainEnumConverter.convertFieldAggregation = function ApiCrossDomainEnumConverter$ConvertFieldAggregation(aggregation) {
		switch (aggregation) {
			case 'attr': {
				return 'ATTR';
			}
			case 'average': {
				return 'AVG';
			}
			case 'count': {
				return 'COUNT';
			}
			case 'count-d': {
				return 'COUNTD';
			}
			case 'day': {
				return 'DAY';
			}
			case 'end': {
				return 'END';
			}
			case 'hour': {
				return 'HOUR';
			}
			case 'in-out': {
				return 'INOUT';
			}
			case 'kurtosis': {
				return 'KURTOSIS';
			}
			case 'max': {
				return 'MAX';
			}
			case 'mdy': {
				return 'MDY';
			}
			case 'median': {
				return 'MEDIAN';
			}
			case 'min': {
				return 'MIN';
			}
			case 'minute': {
				return 'MINUTE';
			}
			case 'month': {
				return 'MONTH';
			}
			case 'month-year': {
				return 'MONTHYEAR';
			}
			case 'none': {
				return 'NONE';
			}
			case 'percentile': {
				return 'PERCENTILE';
			}
			case 'qtr': {
				return 'QTR';
			}
			case 'quart1': {
				return 'QUART1';
			}
			case 'quart3': {
				return 'QUART3';
			}
			case 'second': {
				return 'SECOND';
			}
			case 'skewness': {
				return 'SKEWNESS';
			}
			case 'std-dev': {
				return 'STDEV';
			}
			case 'std-dev-p': {
				return 'STDEVP';
			}
			case 'sum': {
				return 'SUM';
			}
			case 'sum-xsqr': {
				return 'SUM_XSQR';
			}
			case 'trunc-day': {
				return 'TRUNC_DAY';
			}
			case 'trunc-hour': {
				return 'TRUNC_HOUR';
			}
			case 'trunc-month': {
				return 'TRUNC_MONTH';
			}
			case 'trunc-qtr': {
				return 'TRUNC_QTR';
			}
			case 'trunc-second': {
				return 'TRUNC_SECOND';
			}
			case 'trunc-week': {
				return 'TRUNC_WEEK';
			}
			case 'trunc-year': {
				return 'TRUNC_YEAR';
			}
			case 'user': {
				return 'USER';
			}
			case 'var': {
				return 'VAR';
			}
			case 'var-p': {
				return 'VARP';
			}
			case 'week': {
				return 'WEEK';
			}
			case 'weekday': {
				return 'WEEKDAY';
			}
			case 'year': {
				return 'YEAR';
			}
			default: {
				throw new ss.Exception('Unknown AggType: ' + aggregation);
			}
		}
	};
	$tab_ApiCrossDomainEnumConverter.convertFieldRole = function ApiCrossDomainEnumConverter$ConvertFieldRole(role) {
		switch (role) {
			case 'dimension': {
				return 'dimension';
			}
			case 'measure': {
				return 'measure';
			}
			case 'unknown': {
				return 'unknown';
			}
			default: {
				throw new ss.Exception('Unknown FieldRole type: ' + role);
			}
		}
	};
	$tab_ApiCrossDomainEnumConverter.convertParameterDomainType = function ApiCrossDomainEnumConverter$ConvertParameterDomainType(domainType) {
		switch (domainType) {
			case 'any': {
				return 'all';
			}
			case 'list': {
				return 'list';
			}
			case 'range': {
				return 'range';
			}
			default: {
				throw new ss.Exception('Unknown ParameterTypesDomainType: ' + domainType);
			}
		}
	};
	$tab_ApiCrossDomainEnumConverter.convertPeriodType = function ApiCrossDomainEnumConverter$ConvertPeriodType(periodType) {
		switch (periodType) {
			case 'year': {
				return 'year';
			}
			case 'day': {
				return 'day';
			}
			case 'hour': {
				return 'hour';
			}
			case 'minute': {
				return 'minute';
			}
			case 'month': {
				return 'month';
			}
			case 'quarter': {
				return 'quarter';
			}
			case 'second': {
				return 'second';
			}
			case 'week': {
				return 'week';
			}
			default: {
				throw new ss.Exception('Unknown DatePeriodType: ' + periodType);
			}
		}
	};
	$tab_ApiCrossDomainEnumConverter.convertRangeType = function ApiCrossDomainEnumConverter$ConvertRangeType(relativeDateRange) {
		switch (relativeDateRange) {
			case 'curr': {
				return 'curr';
			}
			case 'last': {
				return 'last';
			}
			case 'lastn': {
				return 'lastn';
			}
			case 'next': {
				return 'next';
			}
			case 'nextn': {
				return 'nextn';
			}
			case 'todate': {
				return 'todate';
			}
			case 'invalid':
			default: {
				throw new ss.Exception('Unknown or invalid Filters.RelativeDateRangeType: ' + relativeDateRange);
			}
		}
	};
	$tab_ApiCrossDomainEnumConverter.convertZoneType = function ApiCrossDomainEnumConverter$ConvertZoneType(zoneType) {
		switch (zoneType) {
			case 'color':
			case 'shape':
			case 'size': {
				return 'legend';
			}
			case 'map': {
				return 'legend';
			}
			case 'filter': {
				return 'quickFilter';
			}
			case 'viz': {
				return 'worksheet';
			}
			case 'paramctrl': {
				return 'parameterControl';
			}
			case 'empty': {
				return 'blank';
			}
			case 'title': {
				return 'title';
			}
			case 'text': {
				return 'text';
			}
			case 'bitmap': {
				return 'image';
			}
			case 'web': {
				return 'webPage';
			}
			case 'layout-basic':
			case 'layout-flow':
			case 'layout-free-form': {
				return null;
			}
			default: {
				return 'blank';
			}
		}
	};
	global.tab.ApiCrossDomainEnumConverter = $tab_ApiCrossDomainEnumConverter;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiDomain.ApiCrossDomainPresModelsFactory
	var $tab_ApiCrossDomainPresModelsFactory = function() {
	};
	$tab_ApiCrossDomainPresModelsFactory.__typeName = 'tab.ApiCrossDomainPresModelsFactory';
	$tab_ApiCrossDomainPresModelsFactory.newClientInfo = function ApiCrossDomainPresModelsFactory$NewClientInfo(isAutoUpdate, isDownloadAllowed, workbookName, currentSheetName, instanceId, publishedSheets, dashboardZones, story) {
		var pm = new Object();
		pm.isAutoUpdate = isAutoUpdate;
		pm.isDownloadAllowed = isDownloadAllowed;
		pm.workbookName = workbookName;
		pm.instanceId = instanceId;
		pm.currentSheetName = currentSheetName;
		pm.publishedSheets = publishedSheets;
		pm.dashboardZones = dashboardZones;
		pm.story = story;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newAutoUpdateState = function ApiCrossDomainPresModelsFactory$NewAutoUpdateState(isAutoUpdate) {
		var pm = new Object();
		pm.isAutoUpdate = isAutoUpdate;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newCommandError = function ApiCrossDomainPresModelsFactory$NewCommandError(errorCode, additionalInformation) {
		var pm = new Object();
		pm.errorCode = errorCode;
		pm.additionalInformation = additionalInformation;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newSheetInfo = function ApiCrossDomainPresModelsFactory$NewSheetInfo(name, sheetType, minWidth, minHeight, maxWidth, maxHeight, repositoryUrl) {
		var sizeConstraints = new Object();
		sizeConstraints.maxHeight = maxHeight;
		sizeConstraints.maxWidth = maxWidth;
		sizeConstraints.minHeight = minHeight;
		sizeConstraints.minWidth = minWidth;
		var pm = new Object();
		pm.name = name;
		pm.sizeConstraints = sizeConstraints;
		pm.repositoryUrl = repositoryUrl;
		pm.sheetType = sheetType;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newContainedSheetInfo = function ApiCrossDomainPresModelsFactory$NewContainedSheetInfo(name, sheetType, zoneId, dashboardZones) {
		var pm = new Object();
		pm.name = name;
		pm.sheetType = sheetType;
		pm.zoneId = zoneId;
		pm.dashboardZones = dashboardZones;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newDashboardZone = function ApiCrossDomainPresModelsFactory$NewDashboardZone(name, zoneId, zoneType, height, width, x, y) {
		var pm = new Object();
		pm.name = name;
		pm.zoneId = zoneId;
		pm.zoneType = zoneType;
		pm.height = height;
		pm.width = width;
		pm.x = x;
		pm.y = y;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newStory = function ApiCrossDomainPresModelsFactory$NewStory(activeStoryPointIndex, storyPoints) {
		var pm = new Object();
		pm.activeStoryPointIndex = activeStoryPointIndex;
		pm.storyPoints = storyPoints;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newStoryPoint = function ApiCrossDomainPresModelsFactory$NewStoryPoint(caption, index, storyPointId, isUpdated, containedSheetInfo) {
		var pm = new Object();
		pm.caption = caption;
		pm.index = index;
		pm.storyPointId = storyPointId;
		pm.isUpdated = isUpdated;
		pm.containedSheetInfo = containedSheetInfo;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.$newFilter = function ApiCrossDomainPresModelsFactory$NewFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation) {
		var pm = new Object();
		pm.fieldName = fieldName;
		pm.filterType = filterType;
		pm.caption = caption;
		pm.dataSourceName = dataSourceName;
		pm.fieldRole = fieldRole;
		pm.fieldAggregation = fieldAggregation;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newCategoricalFilter = function ApiCrossDomainPresModelsFactory$NewCategoricalFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation, isExclude, appliedValues) {
		var pm = $tab_ApiCrossDomainPresModelsFactory.$newFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation);
		pm.isExclude = isExclude;
		pm.appliedValues = appliedValues;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newQuantitativeFilter = function ApiCrossDomainPresModelsFactory$NewQuantitativeFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation, domainMinValue, domainMaxValue, minValue, maxValue, includeNullValues) {
		var pm = $tab_ApiCrossDomainPresModelsFactory.$newFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation);
		pm.domainMinValue = domainMinValue;
		pm.domainMaxValue = domainMaxValue;
		pm.minValue = minValue;
		pm.maxValue = maxValue;
		pm.includeNullValues = includeNullValues;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newHierarchicalFilter = function ApiCrossDomainPresModelsFactory$NewHierarchicalFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation, levels) {
		var pm = $tab_ApiCrossDomainPresModelsFactory.$newFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation);
		pm.levels = levels;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newRelativeDateFilter = function ApiCrossDomainPresModelsFactory$NewRelativeDateFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation, periodType, rangeType, rangeN) {
		var pm = $tab_ApiCrossDomainPresModelsFactory.$newFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation);
		pm.periodType = periodType;
		pm.rangeType = rangeType;
		pm.rangeN = rangeN;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newDataSourcesForWorksheet = function ApiCrossDomainPresModelsFactory$NewDataSourcesForWorksheet(worksheetName, dataSources) {
		var pm = new Object();
		pm.worksheetName = worksheetName;
		pm.dataSources = dataSources;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newDataSource = function ApiCrossDomainPresModelsFactory$NewDataSource(name, fields, isPrimary) {
		var pm = new Object();
		pm.name = name;
		pm.fields = fields;
		pm.isPrimary = isPrimary;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newField = function ApiCrossDomainPresModelsFactory$NewField(name, role, aggregation) {
		var pm = new Object();
		pm.name = name;
		pm.role = role;
		pm.aggregation = aggregation;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newCustomViewsInfo = function ApiCrossDomainPresModelsFactory$NewCustomViewsInfo(customViewLoaded, defaultCustomViewId, currentView, customViews) {
		var pm = new Object();
		pm.customViewLoaded = customViewLoaded;
		pm.defaultCustomViewId = defaultCustomViewId;
		pm.currentView = currentView;
		pm.customViews = customViews;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newCustomView = function ApiCrossDomainPresModelsFactory$NewCustomView(id, name, urlId, url, startViewId, isPublic, owner) {
		var pm = new Object();
		pm.id = id;
		pm.name = name;
		pm.urlId = urlId;
		pm.url = url;
		pm.startViewId = startViewId;
		pm.isPublic = isPublic;
		pm.owner = owner;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newUser = function ApiCrossDomainPresModelsFactory$NewUser(id, friendlyName, username) {
		var pm = new Object();
		pm.id = id;
		pm.friendlyName = friendlyName;
		pm.username = username;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newUnderlyingDataTablePM = function ApiCrossDomainPresModelsFactory$NewUnderlyingDataTablePM(dataTable, headers, isSummary) {
		var pm = new Object();
		pm.dataTable = dataTable;
		pm.headers = headers;
		pm.isSummary = isSummary;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newUnderlyingDataColumnsPM = function ApiCrossDomainPresModelsFactory$NewUnderlyingDataColumnsPM(dataType, fieldName, isReferenced, index) {
		var pm = new Object();
		pm.dataType = dataType;
		pm.fieldName = fieldName;
		pm.isReferenced = isReferenced;
		pm.index = index;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newToolbarStatePM = function ApiCrossDomainPresModelsFactory$NewToolbarStatePM(canUndo, canRedo, canRevert, isPaused, canRefreshData, canShowCustomViews, canShowPerformance, canShowDataAlert, canShowSubscribe, canShowShare, canShowDownload) {
		var pm = new Object();
		pm.canUndo = canUndo;
		pm.canRedo = canRedo;
		pm.canRevert = canRevert;
		pm.isPaused = isPaused;
		pm.canRefreshData = canRefreshData;
		pm.canShowCustomViews = canShowCustomViews;
		pm.canShowPerformance = canShowPerformance;
		pm.canShowDataAlert = canShowDataAlert;
		pm.canShowSubscribe = canShowSubscribe;
		pm.canShowShare = canShowShare;
		pm.canShowDownload = canShowDownload;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newAddInInstancePM = function ApiCrossDomainPresModelsFactory$NewAddInInstancePM(instancePm) {
		var pm = new Object();
		pm.locator = $tab_ApiCrossDomainPresModelsFactory.newAddInLocatorPM(instancePm.addInLocatorPresModel);
		pm.url = instancePm.addInRegistrationPresModel.url;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newAddInLocatorPM = function ApiCrossDomainPresModelsFactory$NewAddInLocatorPM(locator) {
		var pm = new Object();
		pm.dashboardPath = $tab_ApiCrossDomainPresModelsFactory.newSheetPathPM(locator.sheetPath);
		pm.instanceId = locator.addInInstanceId;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newSheetPathPM = function ApiCrossDomainPresModelsFactory$NewSheetPathPM(sheetPathPm) {
		var pm = new Object();
		pm.flipboardZoneID = sheetPathPm.flipboardZoneId;
		pm.storyPointID = sheetPathPm.storyPointId;
		pm.storyboard = sheetPathPm.storyboard;
		pm.sheetName = sheetPathPm.sheetName;
		pm.isDashboard = sheetPathPm.isDashboard;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newAddInBootstrapInfoPM = function ApiCrossDomainPresModelsFactory$NewAddInBootstrapInfoPM(bootstrapPm) {
		var pm = new Object();
		pm.addinDashboardInfo = $tab_ApiCrossDomainPresModelsFactory.newAddInDashboardInfoPM(bootstrapPm.addInDashboardInfoPresModel);
		pm.addInSettingsInfo = $tab_ApiCrossDomainPresModelsFactory.newAddInSettingsInfoPM(bootstrapPm.addInSettingsInfo);
		pm.addInEnvironment = $tab_ApiCrossDomainPresModelsFactory.newAddInEnvironmentInfoPM(bootstrapPm.addInEnvironmentPresModel);
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newAddInDashboardInfoPM = function ApiCrossDomainPresModelsFactory$NewAddInDashboardInfoPM(dashboardInfoPm) {
		var pm = new Object();
		pm.name = dashboardInfoPm.dashboardPresModel.sheetPath.sheetName;
		pm.addInZoneId = dashboardInfoPm.zoneId;
		pm.zones = $tab_ApiPresModelsConverter.getApiDashboardZonePresModels(dashboardInfoPm.dashboardPresModel.zones);
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newAddInSettingsInfoPM = function ApiCrossDomainPresModelsFactory$NewAddInSettingsInfoPM(settingsInfoPm) {
		var pm = new Object();
		pm.settingsValues = settingsInfoPm.addInSettings || {};
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newAddInEnvironmentInfoPM = function ApiCrossDomainPresModelsFactory$NewAddInEnvironmentInfoPM(environmentPresModel) {
		var pm = new Object();
		pm.addInContext = environmentPresModel.addInContext;
		pm.addInMode = environmentPresModel.addInMode;
		pm.addInLanguage = environmentPresModel.addInLanguage;
		pm.addInLocale = environmentPresModel.addInLocale;
		pm.tableauVersion = environmentPresModel.tableauVersion;
		pm.operatingSystem = environmentPresModel.operatingSystem;
		pm.apiVersion = environmentPresModel.apiVersion || '0.0.1';
		return pm;
	};
	global.tab.ApiCrossDomainPresModelsFactory = $tab_ApiCrossDomainPresModelsFactory;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiDomain.ApiParamMappingRegistry
	var $tab_ApiParamMappingRegistry = function() {
		ss.makeGenericType($tab_MappingRegistryBase$2, [Object, $tab_ApiToDocParameter]).call(this);
	};
	$tab_ApiParamMappingRegistry.__typeName = 'tab.ApiParamMappingRegistry';
	global.tab.ApiParamMappingRegistry = $tab_ApiParamMappingRegistry;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiDomain.ApiPresModelsConverter
	var $tab_ApiPresModelsConverter = function() {
	};
	$tab_ApiPresModelsConverter.__typeName = 'tab.ApiPresModelsConverter';
	$tab_ApiPresModelsConverter.getApiAddInInstancePresModel = function ApiPresModelsConverter$GetApiAddInInstancePresModel(addInInstance) {
		return $tab_ApiCrossDomainPresModelsFactory.newAddInInstancePM(addInInstance);
	};
	$tab_ApiPresModelsConverter.getApiAddInBootstrapInfoPresModel = function ApiPresModelsConverter$GetApiAddInBootstrapInfoPresModel(addInBootstrapInfo) {
		return $tab_ApiCrossDomainPresModelsFactory.newAddInBootstrapInfoPM(addInBootstrapInfo);
	};
	$tab_ApiPresModelsConverter.getApiUnderlyingDataTablePresModel = function ApiPresModelsConverter$GetApiUnderlyingDataTablePresModel(underlyingDataTable, isSummary) {
		var dataDictionary = underlyingDataTable.dataDictionary;
		var columns = underlyingDataTable.underlyingDataTableColumns;
		var apiColumns = $tab_ApiPresModelsConverter.$buildHeaders(columns);
		var dataTable = $tab_ApiPresModelsConverter.$buildDataTable(dataDictionary, columns);
		var apiPM = $tab_ApiCrossDomainPresModelsFactory.newUnderlyingDataTablePM(dataTable, apiColumns, isSummary);
		return apiPM;
	};
	$tab_ApiPresModelsConverter.getApiDashboardZonePresModels = function ApiPresModelsConverter$GetApiDashboardZonePresModels(zones) {
		var zonePms = [];
		if (ss.isNullOrUndefined(zones) || ss.getKeyCount(zones) === 0) {
			return zonePms;
		}
		var zoneKeys = Object.keys(zones);
		zoneKeys.sort(function(a, b) {
			return parseInt(a, 10) - parseInt(b, 10);
		});
		for (var $t1 = 0; $t1 < zoneKeys.length; $t1++) {
			var key = zoneKeys[$t1];
			var zone = zones[key];
			if (ss.isNullOrUndefined(zone)) {
				continue;
			}
			var zoneType = $tab_ApiCrossDomainEnumConverter.convertZoneType(zone.zoneCommon.zoneType);
			if (!ss.isValue(zoneType)) {
				continue;
			}
			var name = (ss.isValue(zone.worksheet) ? zone.worksheet : null);
			var x = zone.zoneCommon.x;
			var y = zone.zoneCommon.y;
			var width = zone.zoneCommon.w;
			var height = zone.zoneCommon.h;
			var zoneId = zone.zoneCommon.zoneId;
			var pm = $tab_ApiCrossDomainPresModelsFactory.newDashboardZone(name, zoneId, ss.unbox(zoneType), height, width, x, y);
			zonePms.push(pm);
		}
		return zonePms;
	};
	$tab_ApiPresModelsConverter.processSelectedMarks = function ApiPresModelsConverter$ProcessSelectedMarks(selectionDataPm) {
		var dataDictionaryPM = selectionDataPm.dataDictionary;
		var vizData = selectionDataPm.vizData;
		return $tab_ApiPresModelsConverter.$processActiveMarks(dataDictionaryPM, vizData);
	};
	$tab_ApiPresModelsConverter.processHighlightedMarks = function ApiPresModelsConverter$ProcessHighlightedMarks(pm) {
		var selectionDataPm = pm;
		var dataDictionaryPM = selectionDataPm.dataDictionary;
		var vizData = selectionDataPm.vizData;
		return $tab_ApiPresModelsConverter.$processActiveMarks(dataDictionaryPM, vizData);
	};
	$tab_ApiPresModelsConverter.serializeDataValue = function ApiPresModelsConverter$SerializeDataValue(rawValue, dataType) {
		if (dataType === 'boolean') {
			if (_.isBoolean(rawValue)) {
				return rawValue;
			}
			return (ss.isValue(rawValue) ? (rawValue.toString().toLowerCase() === 'true') : false);
		}
		if (ss.isNullOrUndefined(rawValue)) {
			return null;
		}
		switch (dataType) {
			case 'boolean': {
				if (_.isBoolean(rawValue)) {
					return rawValue;
				}
				return (ss.isValue(rawValue) ? (rawValue.toString().toLowerCase() === 'true') : false);
			}
			case 'date':
			case 'datetime': {
				var d = null;
				if (_.isDate(rawValue)) {
					d = ss.cast(rawValue, ss.JsDate);
				}
				else if (_.isNumber(rawValue)) {
					if (isNaN(ss.unbox(ss.cast(rawValue, Number)))) {
						d = null;
					}
					else {
						d = new Date(tableau.types.JsDateFromOleDate(ss.unbox(ss.cast(rawValue, Number))));
					}
				}
				else {
					d = tab.DateUtil.parsePresModelDate(rawValue.toString());
				}
				if (ss.isNullOrUndefined(d) || isNaN(d)) {
					return null;
				}
				return d.getTime();
			}
			case 'integer': {
				if (_.isNumber(rawValue)) {
					return (isNaN(ss.unbox(ss.cast(rawValue, Number))) ? null : rawValue);
				}
				var parsedInt = parseInt(rawValue.toString(), 10);
				return (isNaN(parsedInt) ? null : parsedInt);
			}
			case 'real': {
				if (_.isNumber(rawValue)) {
					return (isNaN(ss.unbox(ss.cast(rawValue, Number))) ? null : rawValue);
				}
				var parsedFloat = parseFloat(rawValue.toString());
				return (isNaN(parsedFloat) ? null : parsedFloat);
			}
			default:
			case 'cstring':
			case 'tuple':
			case 'unknown': {
				return rawValue.toString();
			}
		}
	};
	$tab_ApiPresModelsConverter.getAddInLocatorPresModel = function ApiPresModelsConverter$GetAddInLocatorPresModel(apiAddInLocator) {
		return $tab_NativePresModelsFactory.newAddInLocatorPresModel(apiAddInLocator);
	};
	$tab_ApiPresModelsConverter.$processActiveMarks = function ApiPresModelsConverter$ProcessActiveMarks(dataDictionaryPM, vizData) {
		var returnPm = new Object();
		var dataDictionary = new tab.DataDictionaryModel(null);
		dataDictionary.update(dataDictionaryPM);
		var vizDataModel = new tab.VizDataModel(null);
		vizDataModel.update(vizData, tab.NoopModelEventsHandler.get_noopContext());
		var marks = [];
		returnPm.marks = marks;
		if (ss.isNullOrUndefined(dataDictionary) || dataDictionary.get_isEmpty()) {
			return returnPm;
		}
		vizDataModel.forEachTupleId(function(tupleId) {
			var mark = new Object();
			mark.tupleId = tupleId;
			var pairs = [];
			mark.pairs = pairs;
			marks.push(mark);
			vizDataModel.forEachVizDataField(function(dataField, colIdx) {
				var pair = new Object();
				pair.fieldName = dataField.get_fieldCaption();
				pair.formattedValue = tab.VizDataLookup.lookupAlias(tupleId, dataField, dataDictionary);
				pair.valueDataType = $tab_ApiCrossDomainEnumConverter.convertDataType(dataField.get_dataType());
				var dataValue = null;
				if (!tab.VizDataLookup.isSpecial(tupleId, dataField, dataDictionary, null) && dataField.get_hasDataValues() && dataField.isTupleIdValid(tupleId)) {
					dataValue = tab.VizDataLookup.lookupRawDataValue(tupleId, dataField, dataDictionary);
				}
				var jsonValue = $tab_ApiPresModelsConverter.serializeDataValue(dataValue, dataField.get_dataType());
				pair.value = jsonValue;
				pairs.push(pair);
				return true;
			});
			return true;
		});
		return returnPm;
	};
	$tab_ApiPresModelsConverter.$buildHeaders = function ApiPresModelsConverter$BuildHeaders(columns) {
		var apiColumns = [];
		for (var columnIndex = 0; columnIndex < columns.length; columnIndex++) {
			var column = columns[columnIndex];
			var dataType = $tab_ApiCrossDomainEnumConverter.convertUnderlyingDataType(column.dataType);
			var apiColumn = $tab_ApiCrossDomainPresModelsFactory.newUnderlyingDataColumnsPM(dataType, column.fieldCaption, column.isReferenced, columnIndex);
			apiColumns.push(apiColumn);
		}
		return apiColumns;
	};
	$tab_ApiPresModelsConverter.$buildDataTable = function ApiPresModelsConverter$BuildDataTable(dataDictionary, columns) {
		var rowCount = columns[0].formatValIdxs.length;
		var dataTable = new Array(rowCount);
		for (var rowIndex = 0; rowIndex < rowCount; rowIndex++) {
			dataTable[rowIndex] = new Array(columns.length);
		}
		for (var columnIndex = 0; columnIndex < columns.length; columnIndex++) {
			var column = columns[columnIndex];
			for (var rowIndex1 = 0; rowIndex1 < column.formatValIdxs.length; rowIndex1++) {
				var val = new Object();
				val.formattedValue = $tab_ApiPresModelsConverter.$lookUpValueFromDictionary(dataDictionary, column.formatValIdxs[rowIndex1], 'cstring');
				val.value = $tab_ApiPresModelsConverter.$lookUpValueFromDictionary(dataDictionary, column.valueIndices[rowIndex1], column.dataType);
				val.aliasedValue = val.formattedValue;
				dataTable[rowIndex1][columnIndex] = val;
			}
		}
		return dataTable;
	};
	$tab_ApiPresModelsConverter.$lookUpValueFromDictionary = function ApiPresModelsConverter$LookUpValueFromDictionary(dataDictionary, index, dataType) {
		var dataValue = null;
		var dt;
		if (index >= 0) {
			dt = dataType;
		}
		else {
			dt = 'cstring';
			index = -index - 1;
		}
		var rawValue = $tab_ApiPresModelsConverter.$getRawValue(dataDictionary, dt, index);
		if (ss.isValue(rawValue)) {
			dataValue = rawValue.toString();
		}
		return dataValue;
	};
	$tab_ApiPresModelsConverter.$getRawValue = function ApiPresModelsConverter$GetRawValue(dataDictionary, dt, index) {
		if (ss.isNullOrUndefined(dataDictionary) || ss.isNullOrUndefined(dataDictionary.dataSegments)) {
			return null;
		}
		var $t1 = ss.getEnumerator(Object.keys(dataDictionary.dataSegments));
		try {
			while ($t1.moveNext()) {
				var key = $t1.current();
				var dataSegment = dataDictionary.dataSegments[key];
				for (var $t2 = 0; $t2 < dataSegment.dataColumns.length; $t2++) {
					var dataColumn = dataSegment.dataColumns[$t2];
					if (ss.isNullOrUndefined(dataColumn) || dataColumn.dataType !== dt) {
						continue;
					}
					if (index < dataColumn.dataValues.length) {
						return dataColumn.dataValues[index];
					}
					index -= dataColumn.dataValues.length;
					break;
				}
			}
		}
		finally {
			$t1.dispose();
		}
		return null;
	};
	global.tab.ApiPresModelsConverter = $tab_ApiPresModelsConverter;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiDomain.ApiToDocParameter
	var $tab_ApiToDocParameter = function(apiParam, toDoc) {
		ss.makeGenericType($tab_ParameterMapping$1, [Object]).call(this, apiParam, toDoc);
	};
	$tab_ApiToDocParameter.__typeName = 'tab.ApiToDocParameter';
	$tab_ApiToDocParameter.create = function(TApiParameterType, TDocParameterType) {
		return function ApiToDocParameter$Create(apiParam, toDoc) {
			return new $tab_ApiToDocParameter(apiParam, ss.makeGenericType($tab_ParameterMapping$1, [Object]).buildConversionFunc(TApiParameterType, TDocParameterType).call(null, toDoc));
		};
	};
	global.tab.ApiToDocParameter = $tab_ApiToDocParameter;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiDomain.CommandMapping
	var $tab_CommandMapping = function(docId, apiId, input, output) {
		this.docCommandId = null;
		this.apiCommandId = null;
		this.$inputParameters = null;
		this.$outputParameter = null;
		this.docCommandId = docId;
		this.apiCommandId = apiId;
		this.$inputParameters = input;
		this.$outputParameter = output;
	};
	$tab_CommandMapping.__typeName = 'tab.CommandMapping';
	global.tab.CommandMapping = $tab_CommandMapping;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiDomain.CommandMappingRegistry
	var $tab_CommandMappingRegistry = function() {
		this.$apiToDocMappings = null;
		this.$docToApiMappings = null;
		ss.makeGenericType($tab_MappingRegistryBase$2, [Object, $tab_CommandMapping]).call(this);
	};
	$tab_CommandMappingRegistry.__typeName = 'tab.CommandMappingRegistry';
	global.tab.CommandMappingRegistry = $tab_CommandMappingRegistry;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiDomain.DocEventMapping
	var $tab_DocEventMapping = function(notificationId, apiCommandId, output) {
		this.docNotificationId = null;
		this.apiCommandId = null;
		this.$outputParameter = null;
		this.docNotificationId = notificationId;
		this.apiCommandId = apiCommandId;
		this.$outputParameter = output;
	};
	$tab_DocEventMapping.__typeName = 'tab.DocEventMapping';
	global.tab.DocEventMapping = $tab_DocEventMapping;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiDomain.DocEventMappingRegistry
	var $tab_DocEventMappingRegistry = function() {
		this.$docToApiMappings = null;
		ss.makeGenericType($tab_MappingRegistryBase$2, [Object, $tab_DocEventMapping]).call(this);
	};
	$tab_DocEventMappingRegistry.__typeName = 'tab.DocEventMappingRegistry';
	global.tab.DocEventMappingRegistry = $tab_DocEventMappingRegistry;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiDomain.DocParamMappingRegistry
	var $tab_DocParamMappingRegistry = function() {
		ss.makeGenericType($tab_MappingRegistryBase$2, [Object, $tab_DocToApiParameter]).call(this);
	};
	$tab_DocParamMappingRegistry.__typeName = 'tab.DocParamMappingRegistry';
	global.tab.DocParamMappingRegistry = $tab_DocParamMappingRegistry;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiDomain.DocToApiParameter
	var $tab_DocToApiParameter = function(docParam, toApi) {
		ss.makeGenericType($tab_ParameterMapping$1, [Object]).call(this, docParam, toApi);
	};
	$tab_DocToApiParameter.__typeName = 'tab.DocToApiParameter';
	$tab_DocToApiParameter.create = function(TDocParameterType, TApiParameterType) {
		return function DocToApiParameter$Create(docParam, toApi) {
			return new $tab_DocToApiParameter(docParam, ss.makeGenericType($tab_ParameterMapping$1, [Object]).buildConversionFunc(TDocParameterType, TApiParameterType).call(null, toApi));
		};
	};
	global.tab.DocToApiParameter = $tab_DocToApiParameter;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiDomain.MappingRegistryBase
	var $tab_MappingRegistryBase$2 = function(TEnumType, TMappingType) {
		var $type = function() {
			this.$mappings = null;
		};
		ss.registerGenericClassInstance($type, $tab_MappingRegistryBase$2, [TEnumType, TMappingType], {
			initialize: function MappingRegistryBase$Initialize() {
				this.$mappings = {};
				this.initialize$1(this.$mappings);
			},
			has: function MappingRegistryBase$Has(key) {
				return ss.keyExists(this.$mappings, key);
			},
			get: function MappingRegistryBase$Get(key) {
				if (this.has(key)) {
					return this.$mappings[key];
				}
				else {
					throw new ss.KeyNotFoundException('Key not found: ' + key.toString());
				}
			},
			getKeys: function MappingRegistryBase$GetKeys() {
				return Object.keys(this.$mappings);
			},
			initialize$1: null
		}, function() {
			return null;
		}, function() {
			return [];
		});
		return $type;
	};
	$tab_MappingRegistryBase$2.__typeName = 'tab.MappingRegistryBase$2';
	ss.initGenericClass($tab_MappingRegistryBase$2, $asm, 2);
	global.tab.MappingRegistryBase$2 = $tab_MappingRegistryBase$2;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiDomain.NativePresModelsFactory
	var $tab_NativePresModelsFactory = function() {
	};
	$tab_NativePresModelsFactory.__typeName = 'tab.NativePresModelsFactory';
	$tab_NativePresModelsFactory.newAddInLocatorPresModel = function NativePresModelsFactory$NewAddInLocatorPresModel(apiAddInLocator) {
		var addInLocator = new Object();
		addInLocator.addInInstanceId = apiAddInLocator.instanceId;
		addInLocator.sheetPath = new Object();
		addInLocator.sheetPath.flipboardZoneId = apiAddInLocator.dashboardPath.flipboardZoneID;
		addInLocator.sheetPath.isDashboard = apiAddInLocator.dashboardPath.isDashboard;
		addInLocator.sheetPath.sheetName = apiAddInLocator.dashboardPath.sheetName;
		addInLocator.sheetPath.storyboard = apiAddInLocator.dashboardPath.storyboard;
		addInLocator.sheetPath.storyPointId = apiAddInLocator.dashboardPath.storyPointID;
		return addInLocator;
	};
	$tab_NativePresModelsFactory.newVisualIdPresModel = function NativePresModelsFactory$NewVisualIdPresModel(apiVisualId) {
		var visualId = new Object();
		visualId.worksheet = apiVisualId.sheetPath.sheetName;
		visualId.dashboard = (apiVisualId.sheetPath.isDashboard ? apiVisualId.dashboardName : null);
		visualId.storyPointId = apiVisualId.sheetPath.storyPointID;
		visualId.flipboardZoneId = apiVisualId.sheetPath.flipboardZoneID;
		return visualId;
	};
	global.tab.NativePresModelsFactory = $tab_NativePresModelsFactory;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiDomain.ParameterMapping
	var $tab_ParameterMapping$1 = function(TParamId) {
		var $type = function(paramId, conversionFn) {
			this.conversionFn = null;
			this.paramId = ss.getDefaultValue(TParamId);
			this.paramId = paramId;
			this.conversionFn = conversionFn || function(a) {
				return a;
			};
		};
		$type.buildConversionFunc = function(TSourceType, TTargetType) {
			return function ParameterMapping$BuildConversionFunc(conversionFn) {
				if (!ss.staticEquals(conversionFn, null)) {
					return function(a) {
						return conversionFn(ss.cast(a, TSourceType));
					};
				}
				else {
					return null;
				}
			};
		};
		ss.registerGenericClassInstance($type, $tab_ParameterMapping$1, [TParamId], {}, function() {
			return null;
		}, function() {
			return [];
		});
		return $type;
	};
	$tab_ParameterMapping$1.__typeName = 'tab.ParameterMapping$1';
	ss.initGenericClass($tab_ParameterMapping$1, $asm, 1);
	global.tab.ParameterMapping$1 = $tab_ParameterMapping$1;
	ss.initClass($tab_$CommandInputMapping, $asm, {
		get_$mapping: function CommandInputMapping$get_Mapping() {
			return this.$1$MappingField;
		},
		set_$mapping: function CommandInputMapping$set_Mapping(value) {
			this.$1$MappingField = value;
		},
		get_$docParam: function CommandInputMapping$get_DocParam() {
			return this.$1$DocParamField;
		},
		set_$docParam: function CommandInputMapping$set_DocParam(value) {
			this.$1$DocParamField = value;
		},
		get_$isOptional: function CommandInputMapping$get_IsOptional() {
			return this.$1$IsOptionalField;
		},
		set_$isOptional: function CommandInputMapping$set_IsOptional(value) {
			this.$1$IsOptionalField = value;
		}
	});
	ss.initClass($tab_ApiCrossDomainEnumConverter, $asm, {});
	ss.initClass($tab_ApiCrossDomainPresModelsFactory, $asm, {});
	ss.initClass($tab_ApiParamMappingRegistry, $asm, {
		initialize$1: function ApiParamMappingRegistry$Initialize(mappingsToInitialize) {
			mappingsToInitialize['api.AddInLocator'] = $tab_ApiToDocParameter.create(Object, Object).call(null, 'api.AddInLocator', $tab_NativePresModelsFactory.newAddInLocatorPresModel);
			mappingsToInitialize['api.AddInSettings'] = $tab_ApiToDocParameter.create(Object, Object).call(null, 'api.AddInSettings', null);
			mappingsToInitialize['api.worksheetName'] = $tab_ApiToDocParameter.create(String, String).call(null, 'api.worksheetName', null);
			mappingsToInitialize['api.dashboardName'] = $tab_ApiToDocParameter.create(String, String).call(null, 'api.dashboardName', null);
			mappingsToInitialize['api.ignoreAliases'] = $tab_ApiToDocParameter.create(Boolean, Boolean).call(null, 'api.ignoreAliases', null);
			mappingsToInitialize['api.ignoreSelection'] = $tab_ApiToDocParameter.create(Boolean, Boolean).call(null, 'api.ignoreSelection', null);
			mappingsToInitialize['api.includeAllColumns'] = $tab_ApiToDocParameter.create(Boolean, Boolean).call(null, 'api.includeAllColumns', null);
			mappingsToInitialize['api.maxRows'] = $tab_ApiToDocParameter.create(ss.Int32, ss.Int32).call(null, 'api.maxRows', null);
			mappingsToInitialize['api.visualId'] = $tab_ApiToDocParameter.create(Object, Object).call(null, 'api.visualId', $tab_NativePresModelsFactory.newVisualIdPresModel);
		}
	}, ss.makeGenericType($tab_MappingRegistryBase$2, [Object, $tab_ApiToDocParameter]));
	ss.initClass($tab_ApiPresModelsConverter, $asm, {});
	ss.initClass($tab_ApiToDocParameter, $asm, {
		get_apiParamId: function ApiToDocParameter$get_ApiParamId() {
			return this.paramId;
		},
		toDocParam: function ApiToDocParameter$ToDocParam(apiPresModel) {
			return this.conversionFn(apiPresModel);
		}
	}, ss.makeGenericType($tab_ParameterMapping$1, [Object]));
	ss.initClass($tab_CommandMapping, $asm, {
		createInternalCommandParams: function CommandMapping$CreateInternalCommandParams(apiParams) {
			var internalCommandParameters = {};
			for (var $t1 = 0; $t1 < this.$inputParameters.length; $t1++) {
				var inputParam = this.$inputParameters[$t1];
				if (!ss.keyExists(apiParams, inputParam.get_$mapping().get_apiParamId())) {
					if (inputParam.get_$isOptional()) {
						throw new ss.ArgumentException('Missing parameter: ' + inputParam.get_$mapping().get_apiParamId() + ' in command: ' + this.docCommandId);
					}
					else {
						continue;
					}
				}
				var apiParam = apiParams[inputParam.get_$mapping().get_apiParamId()];
				internalCommandParameters[inputParam.get_$docParam()] = inputParam.get_$mapping().toDocParam(apiParam);
			}
			return internalCommandParameters;
		},
		processResult: function(T) {
			return function CommandMapping$ProcessResult(commandResponse) {
				if (!ss.keyExists(commandResponse, this.$outputParameter.get_docParamId())) {
					return ss.getDefaultValue(T);
				}
				var resultPm = commandResponse[this.$outputParameter.get_docParamId()];
				var apiResult = this.$outputParameter.toApiParam(resultPm);
				return apiResult;
			};
		}
	});
	ss.initClass($tab_CommandMappingRegistry, $asm, {
		initialize$1: function CommandMappingRegistry$Initialize(mappingsToInitialize) {
			this.$apiToDocMappings = new $tab_ApiParamMappingRegistry();
			this.$apiToDocMappings.initialize();
			this.$docToApiMappings = new $tab_DocParamMappingRegistry();
			this.$docToApiMappings.initialize();
			var $t1 = [];
			$t1.push(new $tab_$CommandInputMapping(this.$apiToDocMappings.get('api.AddInLocator'), 'addInLocatorPresModel', false));
			mappingsToInitialize['api.InitializeDashboard'] = new $tab_CommandMapping('initialize-add-in-instance', 'api.InitializeDashboard', $t1, this.$docToApiMappings.get('addInBootstrapInfo'));
			var $t2 = [];
			$t2.push(new $tab_$CommandInputMapping(this.$apiToDocMappings.get('api.AddInLocator'), 'addInLocatorPresModel', false));
			$t2.push(new $tab_$CommandInputMapping(this.$apiToDocMappings.get('api.AddInSettings'), 'addInSettings', false));
			mappingsToInitialize['api.SaveAddInSettings'] = new $tab_CommandMapping('save-add-in-settings', 'api.SaveAddInSettings', $t2, this.$docToApiMappings.get('addInSettingsInfo'));
			var $t3 = [];
			$t3.push(new $tab_$CommandInputMapping(this.$apiToDocMappings.get('api.worksheetName'), 'worksheet', false));
			$t3.push(new $tab_$CommandInputMapping(this.$apiToDocMappings.get('api.dashboardName'), 'dashboard', false));
			$t3.push(new $tab_$CommandInputMapping(this.$apiToDocMappings.get('api.ignoreAliases'), 'ignoreAliases', false));
			$t3.push(new $tab_$CommandInputMapping(this.$apiToDocMappings.get('api.ignoreSelection'), 'ignoreSelection', false));
			$t3.push(new $tab_$CommandInputMapping(this.$apiToDocMappings.get('api.includeAllColumns'), 'includeAllColumns', false));
			$t3.push(new $tab_$CommandInputMapping(this.$apiToDocMappings.get('api.maxRows'), 'maxRows', false));
			mappingsToInitialize['api.GetUnderlyingTableCommand'] = new $tab_CommandMapping('get-underlying-data', 'api.GetUnderlyingTableCommand', $t3, $tab_DocToApiParameter.create(Object, Object).call(null, 'underlyingDataTable', function(pm) {
				return $tab_ApiPresModelsConverter.getApiUnderlyingDataTablePresModel(pm, false);
			}));
			var $t4 = [];
			$t4.push(new $tab_$CommandInputMapping(this.$apiToDocMappings.get('api.worksheetName'), 'worksheet', false));
			$t4.push(new $tab_$CommandInputMapping(this.$apiToDocMappings.get('api.dashboardName'), 'dashboard', false));
			$t4.push(new $tab_$CommandInputMapping(this.$apiToDocMappings.get('api.ignoreAliases'), 'ignoreAliases', false));
			$t4.push(new $tab_$CommandInputMapping(this.$apiToDocMappings.get('api.ignoreSelection'), 'ignoreSelection', false));
			$t4.push(new $tab_$CommandInputMapping(this.$apiToDocMappings.get('api.includeAllColumns'), 'includeAllColumns', false));
			$t4.push(new $tab_$CommandInputMapping(this.$apiToDocMappings.get('api.maxRows'), 'maxRows', false));
			mappingsToInitialize['api.GetSummaryTableCommand'] = new $tab_CommandMapping('get-summary-data', 'api.GetSummaryTableCommand', $t4, $tab_DocToApiParameter.create(Object, Object).call(null, 'underlyingDataTable', function(pm1) {
				return $tab_ApiPresModelsConverter.getApiUnderlyingDataTablePresModel(pm1, true);
			}));
			var $t5 = [];
			$t5.push(new $tab_$CommandInputMapping(this.$apiToDocMappings.get('api.visualId'), 'visualIdPresModel', false));
			mappingsToInitialize['api.FetchSelectedMarksCommand'] = new $tab_CommandMapping('get-selection', 'api.FetchSelectedMarksCommand', $t5, this.$docToApiMappings.get('selectionData'));
		}
	}, ss.makeGenericType($tab_MappingRegistryBase$2, [Object, $tab_CommandMapping]));
	ss.initClass($tab_DocEventMapping, $asm, {
		convertToMessageHandlerNotification: function DocEventMapping$ConvertToMessageHandlerNotification(presModel) {
			var apiParam = this.$outputParameter.toApiParam(presModel);
			var serializedParam = JSON.stringify(apiParam);
			return serializedParam;
		}
	});
	ss.initClass($tab_DocEventMappingRegistry, $asm, {
		initialize$1: function DocEventMappingRegistry$Initialize(mappingsToInitialize) {
			this.$docToApiMappings = new $tab_DocParamMappingRegistry();
			this.$docToApiMappings.initialize();
			mappingsToInitialize['selection-changed-event'] = new $tab_DocEventMapping('selection-changed-event', 'api.MarksSelectionChangedEvent', this.$docToApiMappings.get('sheetPath'));
		}
	}, ss.makeGenericType($tab_MappingRegistryBase$2, [Object, $tab_DocEventMapping]));
	ss.initClass($tab_DocParamMappingRegistry, $asm, {
		initialize$1: function DocParamMappingRegistry$Initialize(mappingsToInitialize) {
			mappingsToInitialize['addInBootstrapInfo'] = $tab_DocToApiParameter.create(Object, Object).call(null, 'addInBootstrapInfo', $tab_ApiCrossDomainPresModelsFactory.newAddInBootstrapInfoPM);
			mappingsToInitialize['addInSettingsInfo'] = $tab_DocToApiParameter.create(Object, Object).call(null, 'addInSettingsInfo', $tab_ApiCrossDomainPresModelsFactory.newAddInSettingsInfoPM);
			mappingsToInitialize['sheetPath'] = $tab_DocToApiParameter.create(Object, Object).call(null, 'sheetPath', $tab_ApiCrossDomainPresModelsFactory.newSheetPathPM);
			mappingsToInitialize['selectionData'] = $tab_DocToApiParameter.create(Object, Object).call(null, 'selectionData', $tab_ApiPresModelsConverter.processSelectedMarks);
		}
	}, ss.makeGenericType($tab_MappingRegistryBase$2, [Object, $tab_DocToApiParameter]));
	ss.initClass($tab_DocToApiParameter, $asm, {
		get_docParamId: function DocToApiParameter$get_DocParamId() {
			return this.paramId;
		},
		toApiParam: function DocToApiParameter$ToApiParam(docPresModel) {
			return this.conversionFn(docPresModel);
		}
	}, ss.makeGenericType($tab_ParameterMapping$1, [Object]));
	ss.initClass($tab_NativePresModelsFactory, $asm, {});
})();
// END ApiDomain
/*! BEGIN Domain */

(function() {
	'dont use strict';
	var $asm = {};
	global.tab = global.tab || {};
	ss.initAssembly($asm, 'vqldomain');
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BaseSessionCommandHandler
	var $tab_$BaseSessionCommandHandler = function(session) {
		this.$session = null;
		this.$commandSequenceId = 0;
		this.$commandThrottlers = null;
		this.$1$CommmandSucceededField = null;
		this.$1$CommandFailedField = null;
		this.$session = session;
		this.$commandSequenceId = 0;
		this.$commandThrottlers = [];
	};
	$tab_$BaseSessionCommandHandler.__typeName = 'tab.$BaseSessionCommandHandler';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Utility.BrushingDataUtils
	var $tab_$BrushingDataUtils = function() {
	};
	$tab_$BrushingDataUtils.__typeName = 'tab.$BrushingDataUtils';
	$tab_$BrushingDataUtils.get_$log = function BrushingDataUtils$get_Log() {
		return tab.Logger.lazyGetLogger($tab_SelectionClientCommands);
	};
	$tab_$BrushingDataUtils.$buildSelectorBrushingDataValues = function BrushingDataUtils$BuildSelectorBrushingDataValues(model, modelFieldCaptions, objectIds, vizData, fieldCaptions) {
		var vizDataFieldMap = $tab_$BrushingDataUtils.$buildVizDataFieldMap(vizData, fieldCaptions);
		var values = new $tab_$BrushingDataValues(fieldCaptions);
		if (ss.isNullOrUndefined(vizDataFieldMap)) {
			return values;
		}
		var colIndices = new Array(fieldCaptions.length);
		for (var ii = 0; ii < colIndices.length; ++ii) {
			var colIdx = vizData.getColumnIndex(fieldCaptions[ii]);
			colIndices[ii] = colIdx;
		}
		var reverseLookups = {};
		for (var $t1 = 0; $t1 < objectIds.length; $t1++) {
			var objId = objectIds[$t1];
			var itemNames = model.getItemNamesFromObjectId(objId);
			if (ss.isNullOrUndefined(itemNames)) {
				continue;
			}
			var success = true;
			var indices = [];
			for (var i = 0; i < itemNames.length; i++) {
				var caption = modelFieldCaptions[i];
				var vizDataField = vizDataFieldMap[caption];
				if (ss.isNullOrUndefined(vizDataField)) {
					continue;
				}
				reverseLookups[caption] = reverseLookups[caption] || $tab_VizDataLookup.buildAliasReverseLookup(vizData, vizDataField, $tab_ApplicationModel.get_instance().get_dataDictionary());
				var reverseAliasLookup = reverseLookups[caption];
				var alias = reverseAliasLookup[itemNames[i]];
				if (!ss.isValue(alias)) {
					success = false;
					break;
				}
				indices.push(alias);
			}
			if (success) {
				values.$addValues(indices, colIndices);
			}
		}
		return values;
	};
	$tab_$BrushingDataUtils.$buildNodeSelectionDataValues = function BrushingDataUtils$BuildNodeSelectionDataValues(source, selectedNodes) {
		var results = {};
		for (var $t1 = 0; $t1 < selectedNodes.length; $t1++) {
			var node = selectedNodes[$t1];
			var fieldNames = new Array(node.columnIndices.length);
			for (var i = 0; i < fieldNames.length; i++) {
				var col = source.getVizDataFieldByIndex(node.columnIndices[i]);
				fieldNames[i] = col.get_fieldName();
			}
			var combinedName = fieldNames.join(';');
			var values;
			if (ss.keyExists(results, combinedName)) {
				values = results[combinedName];
			}
			else {
				values = new $tab_$BrushingDataValues(fieldNames);
				results[combinedName] = values;
			}
			values.$addValues(ss.cast(node.aliasIndices, Array), node.columnIndices);
		}
		return _.map(results, function(o, s) {
			return o;
		});
	};
	$tab_$BrushingDataUtils.$getFieldsForNodes = function BrushingDataUtils$GetFieldsForNodes(viz, drawGroups) {
		var fields = [];
		for (var $t1 = 0; $t1 < drawGroups.length; $t1++) {
			var drawGroup = drawGroups[$t1];
			if (ss.isNullOrUndefined(drawGroup.node)) {
				continue;
			}
			var node = drawGroup.node;
			if (ss.isValue(node.columnIndices)) {
				for (var $t2 = 0; $t2 < node.columnIndices.length; $t2++) {
					var colIndex = node.columnIndices[$t2];
					var nodeCol = viz.get_vizDataModel().getVizDataFieldByIndex(colIndex);
					var colFieldName = nodeCol.get_fieldCaption();
					if (!ss.contains(fields, colFieldName)) {
						fields.push(colFieldName);
					}
				}
			}
			if (ss.isValue(node.fn)) {
				var nodeCol1 = viz.get_vizDataModel().getVizDataField(node.fn);
				var colFieldName1 = nodeCol1.get_fieldCaption();
				if (!ss.contains(fields, colFieldName1)) {
					fields.push(colFieldName1);
				}
			}
		}
		return Array.prototype.slice.call(fields);
	};
	$tab_$BrushingDataUtils.$buildTupleSelectionDataValues = function BrushingDataUtils$BuildTupleSelectionDataValues(source, tupleIds, fields) {
		var values = new $tab_$BrushingDataValues(fields);
		var vizDataFieldMap = $tab_$BrushingDataUtils.$buildVizDataFieldMap(source, fields);
		if (ss.isNullOrUndefined(vizDataFieldMap)) {
			return values;
		}
		for (var $t1 = 0; $t1 < tupleIds.length; $t1++) {
			var tupleId = tupleIds[$t1];
			var aliasRow = [];
			var columnRow = [];
			for (var $t2 = 0; $t2 < fields.length; $t2++) {
				var field = fields[$t2];
				var vizDataField = vizDataFieldMap[field];
				var aliasIndex = vizDataField.getAliasIndex(tupleId);
				aliasRow.push(aliasIndex);
				columnRow.push(source.getColumnIndex(field));
			}
			if (aliasRow.length !== fields.length) {
				$tab_$BrushingDataUtils.get_$log().error('Alias row created has different number of elements from the specified fields.', []);
			}
			values.$addValues(aliasRow, columnRow);
		}
		return values;
	};
	$tab_$BrushingDataUtils.$buildDateTimeTupleDataValues = function BrushingDataUtils$BuildDateTimeTupleDataValues(srcVizData, targetVizData, dataDict, tupleIds) {
		var overlapIndexes = [];
		var brushAggTypes = {};
		var sourceHasAggNone = false;
		srcVizData.forEachVizDataField(function(srcCol, srcColIdx) {
			if ($tab_$BrushingDataUtils.$isDateTimeColumn(srcCol)) {
				var colAggType = srcCol.get_aggType() || 'none';
				brushAggTypes[colAggType] = srcColIdx;
				if (colAggType === 'none') {
					sourceHasAggNone = true;
				}
			}
			return true;
		});
		var onlyOneBaseCol = true;
		var baseCol = null;
		targetVizData.forEachVizDataField(function(targetCol, targetColIdx) {
			if ($tab_$BrushingDataUtils.$isDateTimeColumn(targetCol)) {
				if (ss.isNullOrUndefined(baseCol)) {
					baseCol = targetCol.get_baseColumnName();
				}
				else if (!ss.referenceEquals(baseCol, targetCol.get_baseColumnName())) {
					onlyOneBaseCol = false;
				}
			}
			return true;
		});
		var overlapColumns = [];
		if (onlyOneBaseCol) {
			var aggTypes = [];
			targetVizData.forEachVizDataField(function(targetCol1, targetColIdx1) {
				if ($tab_$BrushingDataUtils.$isDateTimeColumn(targetCol1)) {
					var aggType = targetCol1.get_aggType() || 'none';
					if (!sourceHasAggNone && aggType === 'none') {
						var $t1 = ss.getEnumerator(Object.keys(brushAggTypes));
						try {
							while ($t1.moveNext()) {
								var srcAggType = $t1.current();
								if (!ss.contains(aggTypes, srcAggType)) {
									aggTypes.push(srcAggType);
									var srcColIdx1 = brushAggTypes[srcAggType];
									overlapIndexes.push(new $tab_$DateTimePartIndexes(srcColIdx1, targetColIdx1, srcAggType, 'none'));
									var srcCol1 = srcVizData.getVizDataFieldByIndex(srcColIdx1);
									overlapColumns.push(srcCol1);
								}
							}
						}
						finally {
							$t1.dispose();
						}
					}
					else if (ss.keyExists(brushAggTypes, aggType)) {
						if (!ss.contains(aggTypes, aggType)) {
							aggTypes.push(aggType);
							var srcColIdx2 = brushAggTypes[aggType];
							overlapIndexes.push(new $tab_$DateTimePartIndexes(srcColIdx2, targetColIdx1, 'none', 'none'));
							overlapColumns.push(targetCol1);
						}
					}
					else if (sourceHasAggNone) {
						var srcColIdx3 = brushAggTypes['none'];
						overlapIndexes.push(new $tab_$DateTimePartIndexes(srcColIdx3, targetColIdx1, 'none', aggType));
						overlapColumns.push(targetCol1);
					}
				}
				return true;
			});
		}
		var targetFieldCaptions = new Array(overlapColumns.length);
		for (var $t2 = 0; $t2 < overlapColumns.length; $t2++) {
			var col = overlapColumns[$t2];
			targetFieldCaptions.push(col.get_fieldCaption());
		}
		var values = new $tab_$BrushingDataValues(targetFieldCaptions);
		for (var $t3 = 0; $t3 < tupleIds.length; $t3++) {
			var tupleId = tupleIds[$t3];
			var valueRow = [];
			var colRow = [];
			for (var $t4 = 0; $t4 < overlapIndexes.length; $t4++) {
				var indices = overlapIndexes[$t4];
				var srcColumn = srcVizData.getVizDataFieldByIndex(indices.$srcColumnIndex);
				var valIdx = srcColumn.getDataValueIndex(tupleId);
				if (ss.isValue(valIdx)) {
					var srcRawVal = dataDict.getRawValue(srcColumn.get_dataType(), ss.unbox(valIdx));
					var srcBrushVal = $tab_$BrushingDataUtils.$convertToBrushValue(srcRawVal, indices.$srcAgg, indices.$destAgg, ss.unbox(valIdx));
					valueRow.push(srcBrushVal);
					colRow.push(indices.$srcColumnIndex);
				}
			}
			values.$addValues(valueRow, colRow);
		}
		return { item1: values, item2: overlapIndexes };
	};
	$tab_$BrushingDataUtils.$findMatchingTuplesDateTimeHighlighting = function BrushingDataUtils$FindMatchingTuplesDateTimeHighlighting(values, overlapIndexes, targetVizData, dataDict) {
		var tupleIds = [];
		if (ss.isNullOrUndefined(targetVizData) || values.get_$isEmpty()) {
			return tupleIds;
		}
		targetVizData.forEachTupleId(function(tupleId) {
			var valueRow = [];
			var colRow = [];
			for (var $t1 = 0; $t1 < overlapIndexes.length; $t1++) {
				var indices = overlapIndexes[$t1];
				var targetColumn = targetVizData.getVizDataFieldByIndex(indices.$destColumnIndex);
				var valIdx = targetColumn.getDataValueIndex(tupleId);
				if (ss.isValue(valIdx)) {
					var targetRawVal = dataDict.getRawValue(targetColumn.get_dataType(), ss.unbox(valIdx));
					var targetBrushVal = $tab_$BrushingDataUtils.$convertToBrushValue(targetRawVal, indices.$destAgg, indices.$srcAgg, ss.unbox(valIdx));
					valueRow.push(targetBrushVal);
					colRow.push(indices.$destColumnIndex);
				}
			}
			if (values.$findMatch(colRow, valueRow)) {
				tupleIds.push(tupleId);
			}
			return true;
		});
		return tupleIds;
	};
	$tab_$BrushingDataUtils.$findMatchingTuples = function BrushingDataUtils$FindMatchingTuples(dvs, vizData) {
		var tupleIds = [];
		if (ss.isNullOrUndefined(vizData) || dvs.get_$isEmpty()) {
			return tupleIds;
		}
		var fieldCaptions = dvs.get_$fieldCaptions();
		var vizDataFieldMap = $tab_$BrushingDataUtils.$buildVizDataFieldMap(vizData, fieldCaptions);
		if (ss.isNullOrUndefined(vizDataFieldMap)) {
			return tupleIds;
		}
		if (!vizData.get_hasTupleIdColumn()) {
			return tupleIds;
		}
		var columnIndices = new Array(fieldCaptions.length);
		for (var jj = 0; jj < fieldCaptions.length; jj++) {
			columnIndices[jj] = vizData.getColumnIndex(fieldCaptions[jj]);
		}
		vizData.forEachTupleId(function(tupleId) {
			var tupleAliasIndices = new Array(fieldCaptions.length);
			for (var ii = 0; ii < fieldCaptions.length; ii++) {
				var field = fieldCaptions[ii];
				var vizDataField = vizDataFieldMap[field];
				var aliasIndex = vizDataField.getAliasIndex(tupleId);
				tupleAliasIndices[ii] = aliasIndex;
			}
			if (dvs.$findMatch(columnIndices, tupleAliasIndices)) {
				tupleIds.push(tupleId);
			}
			return true;
		});
		return tupleIds;
	};
	$tab_$BrushingDataUtils.$findMatchingTrendlines = function BrushingDataUtils$FindMatchingTrendlines(scene, dvs, vizData) {
		var trendlineIds = [];
		if (ss.isNullOrUndefined(scene) || ss.isNullOrUndefined(vizData) || dvs.get_$isEmpty()) {
			return trendlineIds;
		}
		var fieldCaptions = dvs.get_$fieldCaptions();
		var dvsColumnIndexes = null;
		for (var $t1 = 0; $t1 < scene.panes.length; $t1++) {
			var pane = scene.panes[$t1];
			for (var $t2 = 0; $t2 < pane.drawPane.length; $t2++) {
				var visualList = pane.drawPane[$t2];
				if (visualList.visualPart === 'trend-lines') {
					for (var $t3 = 0; $t3 < visualList.drawItems.length; $t3++) {
						var item = visualList.drawItems[$t3];
						if (item.type === 'draw-group') {
							dvsColumnIndexes = new Array(fieldCaptions.length);
							for (var jj = 0; jj < fieldCaptions.length; jj++) {
								dvsColumnIndexes[jj] = vizData.getColumnIndex(fieldCaptions[jj]);
							}
							var drawGroup = item;
							var trendlineValueDictionary = {};
							if (ss.isValue(drawGroup.columnIndices)) {
								for (var i = 0; i < drawGroup.columnIndices.length; i++) {
									trendlineValueDictionary[drawGroup.columnIndices[i]] = drawGroup.aliasIndices[i];
								}
							}
							var trendlineAliasIndices = new Array(fieldCaptions.length);
							for (var ii = 0; ii < fieldCaptions.length; ii++) {
								if (ss.keyExists(trendlineValueDictionary, dvsColumnIndexes[ii])) {
									trendlineAliasIndices[ii] = trendlineValueDictionary[dvsColumnIndexes[ii]];
								}
								else {
									trendlineAliasIndices[ii] = null;
								}
							}
							if (dvs.$findMatch(dvsColumnIndexes, trendlineAliasIndices)) {
								trendlineIds.push(drawGroup.objectId);
							}
						}
					}
				}
			}
		}
		return trendlineIds;
	};
	$tab_$BrushingDataUtils.$buildVizDataFieldMap = function BrushingDataUtils$BuildVizDataFieldMap(vizDataModel, fields) {
		var map = {};
		for (var $t1 = 0; $t1 < fields.length; $t1++) {
			var field = fields[$t1];
			var vizDataField = vizDataModel.getVizDataField(field);
			if (ss.isNullOrUndefined(vizDataField)) {
				return null;
			}
			map[field] = vizDataField;
		}
		return map;
	};
	$tab_$BrushingDataUtils.$findMatchingLegendItems = function BrushingDataUtils$FindMatchingLegendItems(dvs, vizData, legend) {
		var results = [];
		if (ss.isNullOrUndefined(vizData) || legend.get_fieldCaptions().length !== dvs.get_$fieldCaptions().length) {
			return results;
		}
		var fieldCaptions = dvs.get_$fieldCaptions();
		var legendFieldCaptions = legend.get_fieldCaptions();
		var dvsFieldIdxs = [];
		for (var $t1 = 0; $t1 < legendFieldCaptions.length; $t1++) {
			var caption = legendFieldCaptions[$t1];
			var index = ss.indexOf(fieldCaptions, caption);
			if (index === -1) {
				return results;
			}
			dvsFieldIdxs.push(index);
		}
		var dataDictionary = $tab_ApplicationModel.get_instance().get_dataDictionary();
		var columnLookup = {};
		var valueLookup = {};
		var dataValues = [];
		var $t2 = dvs.get_$values();
		for (var $t3 = 0; $t3 < $t2.length; $t3++) {
			var dataIndices = $t2[$t3];
			var valid = true;
			dataValues.length = dataIndices.length;
			for (var i = 0; i < dataValues.length; i++) {
				var dvsFieldIdx = dvsFieldIdxs[i];
				var aliasIndex = dataIndices[dvsFieldIdx];
				if (!ss.isValue(aliasIndex)) {
					valid = false;
					break;
				}
				var fieldCaption = legendFieldCaptions[i];
				columnLookup[fieldCaption] = columnLookup[fieldCaption] || vizData.getVizDataField(fieldCaption);
				var col = columnLookup[fieldCaption];
				dataValues[i] = $tab_VizDataLookup.lookupAliasFromIndex(aliasIndex, col, dataDictionary);
			}
			if (valid) {
				valueLookup[dataValues.join(',')] = true;
			}
		}
		var $t4 = legend.get_items();
		for (var $t5 = 0; $t5 < $t4.length; $t5++) {
			var legendItem = $t4[$t5];
			if (valueLookup[legendItem.itemValues.join(',')] === true) {
				results.push(legendItem.objectId);
			}
		}
		return results;
	};
	$tab_$BrushingDataUtils.$findMatchingNodes = function BrushingDataUtils$FindMatchingNodes(dvs, viz, drawGroups) {
		var matchingNodes = [];
		if (ss.isNullOrUndefined(viz.get_vizDataModel())) {
			return matchingNodes;
		}
		var fieldCaptions = dvs.get_$fieldCaptions();
		for (var $t1 = 0; $t1 < drawGroups.length; $t1++) {
			var drawGroup = drawGroups[$t1];
			if (ss.isNullOrUndefined(drawGroup.node.columnIndices) || ss.isNullOrUndefined(drawGroup.node.aliasIndices) || drawGroup.node.aliasIndices.length < fieldCaptions.length) {
				continue;
			}
			var colIdxs = [];
			var aliasIdxs = [];
			var hasLeftmostField = false;
			for (var ii = 0; ii < drawGroup.node.columnIndices.length; ++ii) {
				var colIdx = drawGroup.node.columnIndices[ii];
				var fieldCaption = viz.get_vizDataModel().getVizDataFieldByIndex(colIdx).get_fieldCaption();
				if (ss.isValue(fieldCaption) && ss.contains(fieldCaptions, fieldCaption)) {
					colIdxs.push(colIdx);
					aliasIdxs.push(drawGroup.node.aliasIndices[ii]);
					if (ii === 0) {
						hasLeftmostField = true;
					}
				}
			}
			if (hasLeftmostField && dvs.$findMatch(colIdxs, aliasIdxs)) {
				var nodeSelection = $tab_SelectionUtils.nodeSelectionFromDrawGroup(drawGroup);
				matchingNodes.push(nodeSelection);
			}
		}
		return matchingNodes;
	};
	$tab_$BrushingDataUtils.$findMatchingNodesDateTimeHighlighting = function BrushingDataUtils$FindMatchingNodesDateTimeHighlighting(dvs, overlapIndexes, viz, dataDict) {
		var matchingNodes = [];
		if (ss.isNullOrUndefined(viz.get_vizDataModel())) {
			return matchingNodes;
		}
		var $t1 = new ss.ObjectEnumerator(viz.get_sceneModel().get_visualListModels());
		try {
			while ($t1.moveNext()) {
				var listModel = $t1.current();
				var $t2 = listModel.value.get_groupItemNodes();
				for (var $t3 = 0; $t3 < $t2.length; $t3++) {
					var drawGroup = $t2[$t3];
					if (ss.isNullOrUndefined(drawGroup.node.columnIndices) || ss.isNullOrUndefined(drawGroup.node.aliasIndices) || !tab.MiscUtil.isNullOrEmpty$1(drawGroup.node.fn)) {
						continue;
					}
					var valueRow = [];
					for (var ii = 0; ii < drawGroup.node.columnIndices.length; ++ii) {
						var nodeColIndex = { $: drawGroup.node.columnIndices[ii] };
						var partIndices = _.find(overlapIndexes, ss.mkdel({ nodeColIndex: nodeColIndex }, function(indices) {
							return indices.$destColumnIndex === this.nodeColIndex.$;
						}));
						if (ss.isValue(partIndices)) {
							var aliasIdx = drawGroup.node.aliasIndices[ii];
							var targetColumn = viz.get_vizDataModel().getVizDataFieldByIndex(partIndices.$destColumnIndex);
							var targetRawVal = dataDict.getRawValue(targetColumn.get_dataType(), aliasIdx);
							if (ss.isValue(targetRawVal)) {
								var targetBrushVal = $tab_$BrushingDataUtils.$convertToBrushValue(targetRawVal, partIndices.$destAgg, partIndices.$srcAgg, aliasIdx);
								valueRow.push(targetBrushVal);
							}
						}
					}
					if (valueRow.length === drawGroup.node.aliasIndices.length) {
						if (dvs.$findMatch(drawGroup.node.columnIndices, valueRow)) {
							matchingNodes.push($tab_SelectionUtils.nodeSelectionFromDrawGroup(drawGroup));
						}
					}
				}
			}
		}
		finally {
			$t1.dispose();
		}
		return matchingNodes;
	};
	$tab_$BrushingDataUtils.$isDateTimeColumn = function BrushingDataUtils$IsDateTimeColumn(column) {
		if (ss.isNullOrUndefined(column)) {
			return false;
		}
		var type = column.get_dataType();
		if (type === 'datetime' || type === 'date') {
			return true;
		}
		var dateTimeAggTypes = ['day', 'hour', 'mdy', 'minute', 'month', 'month-year', 'qtr', 'trunc-day', 'trunc-hour', 'trunc-minute', 'trunc-month', 'trunc-qtr', 'trunc-second', 'trunc-week', 'trunc-year', 'week', 'weekday', 'year'];
		return ss.contains(dateTimeAggTypes, column.get_aggType());
	};
	$tab_$BrushingDataUtils.$convertToBrushValue = function BrushingDataUtils$ConvertToBrushValue(value, aggThis, aggOther, valIdx) {
		if (_.isNumber(value)) {
			return ss.unbox(ss.cast(value, ss.Int32));
		}
		var dv = (_.isDate(value) ? ss.cast(value, ss.JsDate) : tab.DateUtil.parsePresModelDate(ss.cast(value, String)));
		var toRet = valIdx;
		if (aggThis === 'none' && aggOther !== 'none') {
			switch (aggOther) {
				case 'year': {
					toRet = tab.DateUtil.dateAsYear(dv);
					break;
				}
				case 'qtr': {
					toRet = tab.DateUtil.dateAsQuarter(dv);
					break;
				}
				case 'month': {
					toRet = tab.DateUtil.dateAsMonth(dv);
					break;
				}
				case 'day': {
					toRet = tab.DateUtil.dateAsDay(dv);
					break;
				}
				case 'hour': {
					toRet = tab.DateUtil.dateTimeAsHour(dv);
					break;
				}
				case 'minute': {
					toRet = tab.DateUtil.dateTimeAsMinute(dv);
					break;
				}
				case 'second': {
					toRet = tab.DateUtil.dateTimeAsSecond(dv);
					break;
				}
				case 'week': {
					toRet = tab.DateUtil.dateAsWeek(dv);
					break;
				}
				case 'weekday': {
					toRet = tab.DateUtil.dateAsDayOfWeek(dv);
					break;
				}
				case 'month-year': {
					toRet = tab.DateUtil.dateAsMonthYear(dv);
					break;
				}
				case 'mdy': {
					toRet = tab.DateUtil.dateAsMonthDayYear(dv);
					break;
				}
			}
			if (ss.isNullOrUndefined(toRet)) {
			}
		}
		return toRet;
	};
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Utility.BrushingDataValues
	var $tab_$BrushingDataValues = function(fieldCaptions) {
		this.$fieldCaptions = null;
		this.$values = new Map();
		this.$colValTupleSets = [];
		this.$areValuesMissing = false;
		this.$fieldCaptions = fieldCaptions;
	};
	$tab_$BrushingDataValues.__typeName = 'tab.$BrushingDataValues';
	$tab_$BrushingDataValues.$createSortedColValPairs = function BrushingDataValues$CreateSortedColValPairs(colIndexes, valueIndexes) {
		var colValTuples = new Array(colIndexes.length);
		for (var ii = 0; ii < colIndexes.length; ++ii) {
			colValTuples[ii] = { item1: colIndexes[ii], item2: valueIndexes[ii] };
		}
		colValTuples.sort(function(tuple1, tuple2) {
			return tuple1.item1 - tuple2.item1;
		});
		return colValTuples;
	};
	$tab_$BrushingDataValues.$sortValsByColumnIndexes = function BrushingDataValues$SortValsByColumnIndexes(colIndexes, valIndexes) {
		var toRet;
		if (valIndexes.length === 1 || ss.isNullOrUndefined(colIndexes)) {
			toRet = valIndexes;
		}
		else {
			ss.Debug.assert(valIndexes.length === colIndexes.length, 'there must be the same number of columns and values');
			toRet = _.sortBy(ss.cast(valIndexes, Array), function(val, index) {
				return colIndexes[index];
			});
		}
		return toRet;
	};
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CacheRecord
	var $tab_$CacheRecord$2 = function(TKey, TValue) {
		var $type = function(key, value) {
			this.$key = ss.getDefaultValue(TKey);
			this.$value = ss.getDefaultValue(TValue);
			ss.Debug.assert(ss.isValue(key), 'Key is empty');
			ss.Debug.assert(ss.isValue(value), 'Value is empty');
			this.$key = key;
			this.$value = value;
		};
		ss.registerGenericClassInstance($type, $tab_$CacheRecord$2, [TKey, TValue], {}, function() {
			return null;
		}, function() {
			return [];
		});
		return $type;
	};
	$tab_$CacheRecord$2.__typeName = 'tab.$CacheRecord$2';
	ss.initGenericClass($tab_$CacheRecord$2, $asm, 2);
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ClientCommandQueue
	var $tab_$ClientCommandQueue = function() {
		this.$commands = null;
		this.$commands = [];
	};
	$tab_$ClientCommandQueue.__typeName = 'tab.$ClientCommandQueue';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommandThrottler
	var $tab_$CommandThrottler = function(handler, targets, rate, pendingCommandThreshold, pendingCommandDelay) {
		this.$commandHandler = null;
		this.$commandsToThrottle = null;
		this.$throttleRate = 0;
		this.$pendingCommandDelay = 0;
		this.$pendingCommandThreshold = 0;
		this.$queuedCommand = null;
		this.$queuedSuccessCallback = null;
		this.$queuedFailureCallback = null;
		this.$lastCommandTime = 0;
		this.$throttleTimer = null;
		this.$pendingCommandCount = 0;
		this.$currentlyExecuting = false;
		this.$1$CommandDroppedField = null;
		this.$commandHandler = handler;
		this.$commandsToThrottle = targets;
		this.$throttleRate = rate;
		var $t1 = pendingCommandThreshold;
		if (ss.isNullOrUndefined($t1)) {
			$t1 = $tab_$CommandThrottler.$defaultPendingCommandThreshold;
		}
		this.$pendingCommandThreshold = $t1;
		var $t2 = pendingCommandDelay;
		if (ss.isNullOrUndefined($t2)) {
			$t2 = $tab_$CommandThrottler.$defaultPendingCommandDelay;
		}
		this.$pendingCommandDelay = $t2;
	};
	$tab_$CommandThrottler.__typeName = 'tab.$CommandThrottler';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommandThrottlerResponse
	var $tab_$CommandThrottlerResponse = function() {
	};
	$tab_$CommandThrottlerResponse.__typeName = 'tab.$CommandThrottlerResponse';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Utility.DateTimePartIndexes
	var $tab_$DateTimePartIndexes = function(srcIdx, destIdx, srcA, destA) {
		this.$srcColumnIndex = 0;
		this.$destColumnIndex = 0;
		this.$srcAgg = null;
		this.$destAgg = null;
		this.$srcColumnIndex = srcIdx;
		this.$destColumnIndex = destIdx;
		this.$srcAgg = srcA || 'none';
		this.$destAgg = destA || 'none';
	};
	$tab_$DateTimePartIndexes.__typeName = 'tab.$DateTimePartIndexes';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Session.DefaultSessionErrorHandler.DataConnectionErrorCodeEnum
	var $tab_$DefaultSessionErrorHandler$DataConnectionErrorCodeEnum = function() {
	};
	$tab_$DefaultSessionErrorHandler$DataConnectionErrorCodeEnum.__typeName = 'tab.$DefaultSessionErrorHandler$DataConnectionErrorCodeEnum';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Session.DefaultSessionErrorHandler.DataSourceExceptionTypeEnum
	var $tab_$DefaultSessionErrorHandler$DataSourceExceptionTypeEnum = function() {
	};
	$tab_$DefaultSessionErrorHandler$DataSourceExceptionTypeEnum.__typeName = 'tab.$DefaultSessionErrorHandler$DataSourceExceptionTypeEnum';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DoubleLinkedList
	var $tab_$DoubleLinkedList$1 = function(TValue) {
		var $type = function() {
			this.$head = null;
			this.$tail = null;
		};
		ss.registerGenericClassInstance($type, $tab_$DoubleLinkedList$1, [TValue], {
			$addToFront: function DoubleLinkedList$AddToFront(node) {
				ss.Debug.assert(ss.isValue(node), 'Attempt to add empty node');
				var staleHead = this.$head;
				this.$head = node;
				node.$next = staleHead;
				node.$previous = null;
				if (ss.isValue(staleHead)) {
					staleHead.$previous = node;
				}
				if (ss.isNullOrUndefined(this.$tail)) {
					this.$tail = node;
				}
			},
			$delete: function DoubleLinkedList$Delete(node) {
				ss.Debug.assert(ss.isValue(node), 'Attempt to remove empty node');
				if (ss.referenceEquals(this.$head, node)) {
					this.$head = node.$next;
				}
				if (ss.referenceEquals(this.$tail, node)) {
					this.$tail = node.$previous;
				}
				if (ss.isValue(node.$previous)) {
					node.$previous.$next = node.$next;
				}
				if (ss.isValue(node.$next)) {
					node.$next.$previous = node.$previous;
				}
			}
		}, function() {
			return null;
		}, function() {
			return [];
		});
		return $type;
	};
	$tab_$DoubleLinkedList$1.__typeName = 'tab.$DoubleLinkedList$1';
	ss.initGenericClass($tab_$DoubleLinkedList$1, $asm, 1);
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.E2eAutomationTestHooks
	var $tab_$E2eAutomationTestHooks = function(worldCheckpointHolder, serverResponseQueueSizeGetter, waitingOnCommandsGetter) {
		this.$worldCheckpointHolder = null;
		this.$serverResponseQueueSizeGetter = null;
		this.$waitingOnCommandsGetter = null;
		ss.Debug.assert(ss.isValue(worldCheckpointHolder), 'Checkpoint holder is null');
		ss.Debug.assert(ss.isValue(serverResponseQueueSizeGetter), 'serverResponseQueueSizeGetter holder is null');
		ss.Debug.assert(ss.isValue(waitingOnCommandsGetter), 'waitingOnCommandsGetter holder is null');
		this.$worldCheckpointHolder = worldCheckpointHolder;
		this.$serverResponseQueueSizeGetter = serverResponseQueueSizeGetter;
		this.$waitingOnCommandsGetter = waitingOnCommandsGetter;
	};
	$tab_$E2eAutomationTestHooks.__typeName = 'tab.$E2eAutomationTestHooks';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FetchParamsBuilder
	var $tab_$FetchParamsBuilder = function() {
		this.$page = null;
		this.$order = null;
		this.$filter = null;
		this.$params = null;
		this.$page = { startIndex: 0 };
		this.$order = [{ field: 'name', ascending: true }];
	};
	$tab_$FetchParamsBuilder.__typeName = 'tab.$FetchParamsBuilder';
	$tab_$FetchParamsBuilder.$ctor2 = function(order, filter) {
		this.$page = null;
		this.$order = null;
		this.$filter = null;
		this.$params = null;
		this.$page = { startIndex: 0 };
		this.$order = [order];
		this.$filter = filter;
	};
	$tab_$FetchParamsBuilder.$ctor1 = function(order, filter) {
		this.$page = null;
		this.$order = null;
		this.$filter = null;
		this.$params = null;
		this.$page = { startIndex: 0 };
		this.$order = (!tab.MiscUtil.isNullOrEmpty(order) ? order : [{ field: 'name', ascending: true }]);
		this.$filter = filter;
	};
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetUberTipClientCommand
	var $tab_$GetUberTipClientCommand = function(doLocal, cmd, successCallback, errorCallback) {
		$tab_ClientCommand.call(this, 'none', doLocal, cmd, successCallback, errorCallback);
	};
	$tab_$GetUberTipClientCommand.__typeName = 'tab.$GetUberTipClientCommand';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LegacySessionWaitHandler
	var $tab_$LegacySessionWaitHandler = function(legacySession) {
		this.$legacySession = null;
		this.$1$IncrementCountField = 0;
		this.$legacySession = legacySession;
	};
	$tab_$LegacySessionWaitHandler.__typeName = 'tab.$LegacySessionWaitHandler';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LinkedListNode
	var $tab_$LinkedListNode$1 = function(TValue) {
		var $type = function(data) {
			this.$data = ss.getDefaultValue(TValue);
			this.$next = null;
			this.$previous = null;
			ss.Debug.assert(ss.isValue(data), 'Data must not be empty.');
			this.$data = data;
		};
		ss.registerGenericClassInstance($type, $tab_$LinkedListNode$1, [TValue], {}, function() {
			return null;
		}, function() {
			return [];
		});
		return $type;
	};
	$tab_$LinkedListNode$1.__typeName = 'tab.$LinkedListNode$1';
	ss.initGenericClass($tab_$LinkedListNode$1, $asm, 1);
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LocalClientCommand
	var $tab_$LocalClientCommand = function(doLocal) {
		$tab_ClientCommand.call(this, 'none', doLocal, null);
	};
	$tab_$LocalClientCommand.__typeName = 'tab.$LocalClientCommand';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Page
	var $tab_$Page = function() {
	};
	$tab_$Page.__typeName = 'tab.$Page';
	$tab_$Page.isInstanceOfType = function() {
		return true;
	};
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.PresetSizesContainerModel
	var $tab_$PresetSizesContainerModel = function(parent) {
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('sizeItemList'.toString()));
	};
	$tab_$PresetSizesContainerModel.__typeName = 'tab.$PresetSizesContainerModel';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SaveServerCommands.DataConnectionErrorCodeEnum
	var $tab_$SaveServerCommands$DataConnectionErrorCodeEnum = function() {
	};
	$tab_$SaveServerCommands$DataConnectionErrorCodeEnum.__typeName = 'tab.$SaveServerCommands$DataConnectionErrorCodeEnum';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SheetListItemArrayModel
	var $tab_$SheetListItemArrayModel = function(parent) {
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('sheetListItems'.toString(), 1));
	};
	$tab_$SheetListItemArrayModel.__typeName = 'tab.$SheetListItemArrayModel';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SizeItemListModel
	var $tab_$SizeItemListModel = function(parent) {
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('sizeItems'.toString(), 1));
	};
	$tab_$SizeItemListModel.__typeName = 'tab.$SizeItemListModel';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SourceSheetWithHighlightAction
	var $tab_$SourceSheetWithHighlightAction = function() {
	};
	$tab_$SourceSheetWithHighlightAction.__typeName = 'tab.$SourceSheetWithHighlightAction';
	$tab_$SourceSheetWithHighlightAction.$getTargetSheetsToBrush = function SourceSheetWithHighlightAction$GetTargetSheetsToBrush(sheetName, actions, vizData) {
		var sheetsToBrush = new Set();
		for (var $t1 = 0; $t1 < actions.length; $t1++) {
			var action = actions[$t1];
			if (ss.contains(action.sourceWorksheets, sheetName) && $tab_$SourceSheetWithHighlightAction.$shouldBrushAllTargetSheets(action, vizData)) {
				tab.SetUtilities.addAll(Object).call(null, sheetsToBrush, action.targetWorksheets);
			}
		}
		return sheetsToBrush;
	};
	$tab_$SourceSheetWithHighlightAction.$shouldBrushAllTargetSheets = function SourceSheetWithHighlightAction$ShouldBrushAllTargetSheets(action, vizData) {
		var highlightCmd = $tab_CommandSerializer.deserialize($tab_SimpleCommandsPresModelWrapper.create(action.simpleCommandModel).get_simpleCommand(), true);
		if (ss.isNullOrUndefined(vizData) || $tab_BrushingComputer.isSpecialDateTimeHighlighting(highlightCmd)) {
			return true;
		}
		var commandFieldCaptions = $tab_BrushingComputer.getHighlightFieldCaptions(highlightCmd, vizData.get_highlightCaptions(), vizData.get_fieldCaptions());
		return !tab.MiscUtil.isNullOrEmpty(commandFieldCaptions);
	};
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.StoryCacheRecord
	var $tab_$StoryCacheRecord = function(story) {
		this.$storyPoint = null;
		this.$savedZonePresModels = null;
		this.$storyPoint = story;
		if (ss.isNullOrUndefined(this.$storyPoint.dashboardPresModel)) {
			return;
		}
		var zones = {};
		var sourceZones = this.$storyPoint.dashboardPresModel.zones;
		var keys = _.keys(this.$storyPoint.dashboardPresModel.zones);
		for (var i = 0, len = keys.length; i < len; i++) {
			var key = keys[i];
			var zone = sourceZones[key];
			if (ss.isNullOrUndefined(zone) || ss.isValue($tab_ZoneModel.getContent(zone, 'imageZone'))) {
				zones[key] = null;
			}
			else {
				zones[key] = zone.presModelHolder;
			}
		}
		this.$savedZonePresModels = zones;
	};
	$tab_$StoryCacheRecord.__typeName = 'tab.$StoryCacheRecord';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.StoryState
	var $tab_$StoryState = function() {
		this.$1$IsStoryField = false;
		this.$1$StoryPointIdField = 0;
		this.$1$SheetNameField = null;
		var workbook = $tab_ApplicationModel.get_instance().get_workbook();
		this.set_$isStory(workbook.get_isCurrentSheetStoryboard() && ss.isValue(workbook.get_storyboard().get_flipboard()));
		if (this.get_$isStory()) {
			this.set_$sheetName(workbook.get_storyboard().get_sheetName());
			this.set_$storyPointId(workbook.get_storyboard().get_flipboard().get_currentStoryPointId());
		}
	};
	$tab_$StoryState.__typeName = 'tab.$StoryState';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.TransactionItem
	var $tab_$TransactionItem = function(path, presModel) {
		this.$itemPath = null;
		this.$itemModel = null;
		this.$itemPath = path;
		this.$itemModel = presModel;
	};
	$tab_$TransactionItem.__typeName = 'tab.$TransactionItem';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.VisualColumnIterator.ConstVisualColumnIterator
	var $tab_$VisualColumnIterator$ConstVisualColumnIterator = function(column) {
		$tab_VisualColumnIterator.call(this, column);
		this.c = true;
		ss.Debug.assert(this.isValid, 'ConstantColumnIterator should have valid column');
	};
	$tab_$VisualColumnIterator$ConstVisualColumnIterator.__typeName = 'tab.$VisualColumnIterator$ConstVisualColumnIterator';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.VizPortalGetItemsUtil
	var $tab_$VizPortalGetItemsUtil = function() {
	};
	$tab_$VizPortalGetItemsUtil.__typeName = 'tab.$VizPortalGetItemsUtil';
	$tab_$VizPortalGetItemsUtil.$fetchPage = function(T) {
		return function VizPortalGetItemsUtil$FetchPage(methodName, paramsBuilder, parsePageOfItems) {
			var deferred = $.Deferred();
			var options = $tab_VizPortalServer.createRequest(methodName, paramsBuilder.get_$params(), function() {
			}, function() {
			});
			options.success = function(data, status, request) {
				$tab_SessionHeartbeat.onVizportalPinged();
				var result = $tab_VizPortalServer.$getResult(data);
				if ($tab_VizPortalServer.$hasErrors(result)) {
					tab.Logger.getLogger($tab_WorkgroupServerCommands).warn('Fetch failed: %s', [result]);
					deferred.reject();
					return;
				}
				var pageOfItems = parsePageOfItems(result);
				deferred.resolve(pageOfItems);
			};
			$tab_XhrUtil.helper(options);
			return deferred.promise();
		};
	};
	$tab_$VizPortalGetItemsUtil.$resolvePageOfItems = function(T) {
		return function VizPortalGetItemsUtil$ResolvePageOfItems(result, parsePageResult) {
			var items = parsePageResult(result);
			var hasMoreItems = result['moreItems'].toString().toLowerCase() === 'true';
			return { items: items, moreItems: hasMoreItems };
		};
	};
	$tab_$VizPortalGetItemsUtil.$fetchItems = function(T) {
		return function VizPortalGetItemsUtil$FetchItems(methodName, paramsBuilder, parsePageOfItems, onComplete) {
			var d = $tab_$VizPortalGetItemsUtil.$fetchPage(T).call(null, methodName, paramsBuilder, parsePageOfItems);
			d.done(function(pageOfItems) {
				if (!pageOfItems.moreItems) {
					onComplete();
					return;
				}
				paramsBuilder.set_$index(paramsBuilder.get_$index() + pageOfItems.items.length);
				$tab_$VizPortalGetItemsUtil.$fetchItems(T).call(null, methodName, paramsBuilder, parsePageOfItems, onComplete);
			});
			d.fail(onComplete);
		};
	};
	$tab_$VizPortalGetItemsUtil.$fetchItems$1 = function(T) {
		return function VizPortalGetItemsUtil$FetchItems(methodName, paramsBuilder, parsePageOfItems, onComplete, onError) {
			var d = $tab_$VizPortalGetItemsUtil.$fetchPage(T).call(null, methodName, paramsBuilder, parsePageOfItems);
			d.done(function(pageOfItems) {
				if (!pageOfItems.moreItems) {
					onComplete();
					return;
				}
				paramsBuilder.set_$index(paramsBuilder.get_$index() + pageOfItems.items.length);
				$tab_$VizPortalGetItemsUtil.$fetchItems$1(T).call(null, methodName, paramsBuilder, parsePageOfItems, onComplete, onError);
			});
			d.fail(onError);
		};
	};
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ZonePriority
	var $tab_$ZonePriority = function() {
	};
	$tab_$ZonePriority.__typeName = 'tab.$ZonePriority';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Utility.AcceleratingRangeTransform
	var $tab_AcceleratingRangeTransform = function(min, max, inflectionFrac1, inflectionVal1, inflectionFrac2, inflectionVal2) {
		this.$min = 0;
		this.$inflectionFrac1 = 0;
		this.$inflectionVal1 = 0;
		this.$inflectionFrac2 = 0;
		this.$inflectionVal2 = 0;
		this.$a = 0;
		this.$b = 0;
		this.$c = 0;
		$tab_RangeTransform.call(this);
		if (ss.isNullOrUndefined(inflectionFrac2) && ss.isValue(inflectionVal2)) {
			inflectionFrac2 = inflectionFrac1;
			inflectionVal2 = inflectionVal1;
		}
		ss.Debug.assert(inflectionFrac1 > 0 && inflectionFrac1 <= inflectionFrac2 && inflectionFrac1 < 1, 'Inflections must be provided in order');
		ss.Debug.assert(min < inflectionVal1 && inflectionVal1 <= inflectionVal2 && inflectionVal1 < max, 'Inflections must be provided in order');
		this.$min = min;
		this.$inflectionFrac1 = inflectionFrac1;
		this.$inflectionVal1 = inflectionVal1;
		this.$inflectionFrac2 = inflectionFrac2;
		this.$inflectionVal2 = inflectionVal2;
		var m = max;
		var p = inflectionFrac2;
		var t = inflectionVal2;
		var s = inflectionVal2 / inflectionFrac2;
		this.$a = (t - s * p - m + s) / (-(p * p) + 2 * p - 1);
		this.$b = s - 2 * this.$a * p;
		this.$c = m - s + this.$a * (2 * p - 1);
		ss.Debug.assert(this.$a !== 0, 'The resulting equation is not quadratic');
	};
	$tab_AcceleratingRangeTransform.__typeName = 'tab.AcceleratingRangeTransform';
	global.tab.AcceleratingRangeTransform = $tab_AcceleratingRangeTransform;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.AckbarEventsHelper
	var $tab_AckbarEventsHelper = function() {
		this.$1$DoLaunchAuthoringField = null;
		this.$1$NewLayoutIdField = null;
		this.$1$WorkbookModifiedChangedField = null;
		this.$1$OrientationChangeField = null;
	};
	$tab_AckbarEventsHelper.__typeName = 'tab.AckbarEventsHelper';
	$tab_AckbarEventsHelper.get = function AckbarEventsHelper$Get() {
		if (ss.isNullOrUndefined($tab_AckbarEventsHelper.instance)) {
			$tab_AckbarEventsHelper.instance = new $tab_AckbarEventsHelper();
		}
		return $tab_AckbarEventsHelper.instance;
	};
	global.tab.AckbarEventsHelper = $tab_AckbarEventsHelper;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ActionType
	var $tab_ActionType = function() {
	};
	$tab_ActionType.__typeName = 'tab.ActionType';
	global.tab.ActionType = $tab_ActionType;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ActionUtils
	var $tab_ActionUtils = function() {
	};
	$tab_ActionUtils.__typeName = 'tab.ActionUtils';
	$tab_ActionUtils.get_$log = function ActionUtils$get_Log() {
		return tab.Logger.lazyGetLogger($tab_ActionUtils);
	};
	$tab_ActionUtils.isVizSourceOfAction = function ActionUtils$IsVizSourceOfAction(action, sheet) {
		return _.any(action.sourceWorksheets, function(worksheet) {
			return ss.referenceEquals(worksheet, sheet);
		});
	};
	$tab_ActionUtils.isTargetOfActionLocal = function ActionUtils$IsTargetOfActionLocal(action) {
		var vizPair = $tab_ModelUtils.getVisualModels($tab_ApplicationModel.get_instance());
		for (var $t1 = 0; $t1 < action.targetWorksheets.length; $t1++) {
			var targetName = action.targetWorksheets[$t1];
			if (ss.keyExists(vizPair, targetName)) {
				return true;
			}
		}
		return false;
	};
	$tab_ActionUtils.isFilterAction = function ActionUtils$IsFilterAction(action) {
		return ss.isValue(action.simpleCommandModel) && ss.startsWithString(action.simpleCommandModel['simpleCommand'.toString()], 'tabdoc:filter-targets');
	};
	$tab_ActionUtils.isHighlightAction = function ActionUtils$IsHighlightAction(action) {
		return ss.isValue(action.simpleCommandModel) && ss.startsWithString(action.simpleCommandModel['simpleCommand'.toString()], 'tabdoc:highlight');
	};
	$tab_ActionUtils.isFilterSource = function ActionUtils$IsFilterSource(dashboardModel, sheet) {
		var dashboardPM = dashboardModel.pm;
		var actions = dashboardPM.userActions;
		for (var $t1 = 0; $t1 < actions.length; $t1++) {
			var action = actions[$t1];
			if (!$tab_ActionUtils.isVizSourceOfAction(action, sheet)) {
				continue;
			}
			if (action.activation !== 'on-select') {
				continue;
			}
			if (ss.isNullOrUndefined(action.simpleCommandModel)) {
				continue;
			}
			var serializedCommand = ss.replaceAllString(action.simpleCommandModel['simpleCommand'.toString()], 'simpleCommand=', '');
			var cmd = $tab_CommandSerializer.deserialize(serializedCommand, true);
			if (!ss.referenceEquals(cmd.commandName, 'filter-targets'.toString())) {
				continue;
			}
			var targets = action.targetWorksheets;
			if (targets.length === 0) {
				continue;
			}
			return true;
		}
		return false;
	};
	$tab_ActionUtils.getApplicableActions = function ActionUtils$GetApplicableActions(sourceWorksheet, activationMethod, actionType) {
		var actions = $tab_ApplicationModel.get_instance().get_workbook().findContentDashboard().get_actionPresModels();
		var relatedActions = $tab_ActionUtils.$getRelatedActions(actions, sourceWorksheet, activationMethod);
		if (ss.isValue(actionType)) {
			relatedActions = _.filter(relatedActions, $tab_ActionUtils.$filterActionsByType(ss.unbox(actionType)));
		}
		relatedActions = _.filter(relatedActions, $tab_ActionUtils.$filterPossibleActions());
		return relatedActions;
	};
	$tab_ActionUtils.$filterActionsByType = function ActionUtils$FilterActionsByType(type) {
		return function(model) {
			return $tab_ActionUtils.getActionType(model) === type;
		};
	};
	$tab_ActionUtils.$filterPossibleActions = function ActionUtils$FilterPossibleActions() {
		return function(model) {
			return $tab_ActionUtils.getActionType(model) === 'url' || ss.isValue(model.targetUrl) || model.targetWorksheets.length > 0;
		};
	};
	$tab_ActionUtils.couldSheetFilterActionsModifyItself = function ActionUtils$CouldSheetFilterActionsModifyItself(worksheetName) {
		var sheetSelectFilterActions = $tab_ActionUtils.getApplicableActions(worksheetName, 'on-select', 'filter');
		var actionListIsApplicable = $tab_ActionUtils.$verifyFilterActionListIsApplicable(sheetSelectFilterActions);
		var targetsSelectedWorksheet = actionListIsApplicable && $tab_ActionUtils.$filterActionsTargetWorksheet(sheetSelectFilterActions, worksheetName);
		return targetsSelectedWorksheet;
	};
	$tab_ActionUtils.shouldFilterOnSelection = function ActionUtils$ShouldFilterOnSelection(worksheetName) {
		var sheetSelectFilterActions = $tab_ActionUtils.getApplicableActions(worksheetName, 'on-select', 'filter');
		return $tab_ActionUtils.$verifyFilterActionListIsApplicable(sheetSelectFilterActions);
	};
	$tab_ActionUtils.$verifyFilterActionListIsApplicable = function ActionUtils$VerifyFilterActionListIsApplicable(onSelectFilterActions) {
		return onSelectFilterActions.length > 0 && !$tab_ApplicationModel.get_instance().get_isOffline();
	};
	$tab_ActionUtils.$filterActionsTargetWorksheet = function ActionUtils$FilterActionsTargetWorksheet(filterActions, targetWorksheet) {
		for (var $t1 = 0; $t1 < filterActions.length; $t1++) {
			var cur = filterActions[$t1];
			for (var $t2 = 0; $t2 < cur.targetWorksheets.length; $t2++) {
				var curTarget = cur.targetWorksheets[$t2];
				if (ss.referenceEquals(curTarget, targetWorksheet)) {
					return true;
				}
			}
		}
		return false;
	};
	$tab_ActionUtils.executeActions = function ActionUtils$ExecuteActions(sheetID, activationMethod, tupleIds, t, forceHighlight) {
		var filterActions = $tab_ActionUtils.getApplicableActions(sheetID, activationMethod, 'filter');
		var highlightActions = $tab_ActionUtils.getApplicableActions(sheetID, activationMethod, 'highlight');
		var urlActions = $tab_ActionUtils.getApplicableActions(sheetID, activationMethod, 'url');
		var visualModel = $tab_ModelUtils.getVisualModel($tab_ApplicationModel.get_instance(), sheetID);
		if (ss.isValue(tupleIds)) {
			if (urlActions.length > 0 && tupleIds.length > 0) {
				$tab_ActionUtils.$executeUrlActions(urlActions, tupleIds, visualModel);
			}
			if (highlightActions.length > 0) {
				if (tupleIds.length > 0) {
					$tab_ActionUtils.$executeHighlightActions(highlightActions, tupleIds, visualModel, t);
				}
				else {
					$tab_ActionUtils.$resetAllHighlightingActions(t);
				}
			}
			else if (ss.isValue(forceHighlight) && forceHighlight) {
				$tab_ActionUtils.$executeHighlightActions(highlightActions, tupleIds, visualModel, t);
			}
		}
		if (filterActions.length > 0) {
			$tab_ActionUtils.$executeFilterActions(sheetID, filterActions, tupleIds, t, visualModel);
		}
	};
	$tab_ActionUtils.executeAction = function ActionUtils$ExecuteAction(actionPresModel, tupleIds, visualModel, t) {
		if (!ss.isValue(actionPresModel)) {
			return;
		}
		var relevantActions = [actionPresModel];
		if (!ss.isNullOrUndefined(actionPresModel.linkSpec)) {
			$tab_ActionUtils.$executeUrlActions(relevantActions, tupleIds, visualModel);
		}
		else if (true) {
			$tab_ActionUtils.$executeHighlightActions(relevantActions, tupleIds, visualModel, t);
		}
		else {
		}
	};
	$tab_ActionUtils.getActionType = function ActionUtils$GetActionType(model) {
		if (ss.isValue(model.simpleCommandModel)) {
			var c = $tab_CommandSerializer.deserialize(model.simpleCommandModel['simpleCommand'.toString()], true);
			if (ss.referenceEquals(c.commandName, 'highlight'.toString())) {
				return 'highlight';
			}
			if (ss.referenceEquals(c.commandName, 'filter-targets'.toString())) {
				return 'filter';
			}
			return null;
		}
		if (ss.isValue(model.linkSpec)) {
			return 'url';
		}
		return null;
	};
	$tab_ActionUtils.willActionCauseTabChange = function ActionUtils$WillActionCauseTabChange(sheetID, activationMethod) {
		if ($tab_ApplicationModel.get_instance().get_isOffline()) {
			return false;
		}
		var filterActions = $tab_ActionUtils.getApplicableActions(sheetID, activationMethod, 'filter');
		for (var $t1 = 0; $t1 < filterActions.length; $t1++) {
			var apm = filterActions[$t1];
			if (ss.isValue(apm.simpleCommandModel)) {
				var cmd = $tab_CommandSerializer.deserialize(apm.simpleCommandModel['simpleCommand'.toString()], true);
				var targetSheetName = ss.cast(cmd.commandParams['targetSheet'], String);
				if (ss.isValue(targetSheetName) && !_.isEqual(targetSheetName, tsConfig.current_sheet_name)) {
					return true;
				}
			}
		}
		return false;
	};
	$tab_ActionUtils.getUrlActionPm = function ActionUtils$GetUrlActionPm(actionPresModel, vizModel, tupleIds) {
		if (ss.isValue(tupleIds) && !ss.isNullOrUndefined(actionPresModel.linkSpec)) {
			var vizData = vizModel.get_vizDataModel();
			var dataDictionary = $tab_ApplicationModel.get_instance().get_dataDictionary();
			var urlTuple = $tab_VizDataUtils.constructUrl(dataDictionary, actionPresModel.linkSpec, vizData, tupleIds, vizModel.get_worksheetName());
			return { item1: $tab_ActionUtils.$createActionPresModelFromUrl(urlTuple), item2: urlTuple.item2 };
		}
		return { item1: null, item2: 'urlConstructionFail' };
	};
	$tab_ActionUtils.$createActionPresModelFromUrl = function ActionUtils$CreateActionPresModelFromUrl(urlTuple) {
		if (urlTuple.item2 !== 'success') {
			return null;
		}
		var urlActionPm = { url: urlTuple.item1 };
		var target = $tab_ModelUtils.getFirstAvailableWebZoneName($tab_ApplicationModel.get_instance());
		if (ss.isValue(target)) {
			urlActionPm.target = target;
		}
		return urlActionPm;
	};
	$tab_ActionUtils.$executeHighlightActions = function ActionUtils$ExecuteHighlightActions(relevantActions, tupleIds, visualModel, t) {
		var brushingComputer = $tab_BrushingComputer.computeFromTuples(visualModel, tupleIds, relevantActions);
		$tab_SelectionClientCommands.$updateBrushingFromComputedResults(brushingComputer, t);
	};
	$tab_ActionUtils.$resetAllHighlightingActions = function ActionUtils$ResetAllHighlightingActions(t) {
		$tab_SelectionClientCommands.$clearAllBrushing(t);
	};
	$tab_ActionUtils.$executeUrlActions = function ActionUtils$ExecuteUrlActions(relevantActions, tupleIds, visualModel) {
		if (ss.isValue(tupleIds) && tupleIds.length > 0) {
			var urlActions = [];
			for (var $t1 = 0; $t1 < relevantActions.length; $t1++) {
				var actionPresModel = relevantActions[$t1];
				var urlActionPm = $tab_ActionUtils.getUrlActionPm(actionPresModel, visualModel, tupleIds).item1;
				if (ss.isValue(urlActionPm)) {
					urlActions.push(urlActionPm);
				}
				else {
					$tab_CommandController.fireDeferredUrlActions = true;
					return;
				}
			}
			if (urlActions.length > 0) {
				$tab_CommandController.get().delayLocalUrlActions(urlActions);
			}
		}
	};
	$tab_ActionUtils.$executeFilterActions = function ActionUtils$ExecuteFilterActions(sourceSheetId, relevantActions, tupleIds, transaction, visualModel) {
		if ($tab_ApplicationModel.get_instance().get_isOffline()) {
			return;
		}
		$tab_ActionUtils.get_$log().debug('Processing %s filter actions %o', [relevantActions.length, relevantActions]);
		if (ss.isValue(relevantActions)) {
			var relevantVisualModels = $tab_ActionUtils.$getRelevantVisualModels(relevantActions);
			if (relevantVisualModels.length > 0) {
				var sourceSheetInfo = $tab_ModelUtils.getSheetInfoPresModel($tab_ApplicationModel.get_instance(), tsConfig.current_sheet_name);
				if (ss.isValue(sourceSheetInfo) && !(sourceSheetInfo.isDashboard && ss.isNullOrUndefined(sourceSheetInfo.namesOfSubsheets))) {
					var includeSourceSheet = !sourceSheetInfo.isDashboard || sourceSheetInfo.namesOfSubsheets.length === 1;
					for (var $t1 = 0; $t1 < relevantVisualModels.length; $t1++) {
						var relevantVisualModel = relevantVisualModels[$t1];
						if (includeSourceSheet || !ss.referenceEquals(relevantVisualModel.get_worksheetName(), sourceSheetId)) {
							$tab_ModelUtils.setVisualValidStateOnPresModel(transaction, relevantVisualModel);
						}
					}
				}
			}
			if (tupleIds.length > 0) {
				var urlActions = [];
				for (var $t2 = 0; $t2 < relevantActions.length; $t2++) {
					var action = relevantActions[$t2];
					if ((tupleIds.length === 1 || !action.singleSelectOnly) && ss.isValue(action.targetUrl)) {
						var urlAction = {};
						var targetURL = action.targetUrl + '&:exclude=' + $tab_CommandController.get().get_legacySession().railsEncode(sourceSheetId);
						var vizData = visualModel.get_vizDataModel();
						var dataDictionary = $tab_ApplicationModel.get_instance().get_dataDictionary();
						urlAction.url = $tab_VizDataUtils.constructUrlForFilterActionFromTargetURL(dataDictionary, targetURL, action.linkSpec, vizData, tupleIds);
						urlActions.push(urlAction);
					}
				}
				if (urlActions.length > 0) {
					$tab_CommandController.get().delayLocalUrlActions(urlActions);
				}
			}
		}
	};
	$tab_ActionUtils.$getRelevantVisualModels = function ActionUtils$GetRelevantVisualModels(actionPresModels) {
		var relevantVisualModels = {};
		if (ss.isValue(actionPresModels)) {
			for (var $t1 = 0; $t1 < actionPresModels.length; $t1++) {
				var actionPresModel = actionPresModels[$t1];
				for (var $t2 = 0; $t2 < actionPresModel.targetWorksheets.length; $t2++) {
					var worksheet = actionPresModel.targetWorksheets[$t2];
					var vm = $tab_ModelUtils.getVisualModel($tab_ApplicationModel.get_instance(), worksheet);
					if (ss.isValue(vm)) {
						relevantVisualModels[worksheet] = vm;
					}
				}
			}
		}
		var visualModelList = [];
		var $t3 = new ss.ObjectEnumerator(relevantVisualModels);
		try {
			while ($t3.moveNext()) {
				var relevantVisualModel = $t3.current();
				visualModelList.push(relevantVisualModel.value);
			}
		}
		finally {
			$t3.dispose();
		}
		return visualModelList;
	};
	$tab_ActionUtils.$isAcceptableScheme = function ActionUtils$IsAcceptableScheme(urlToValidate) {
		if (!$tab_ActionUtils.$isCustomWhitelistParsed) {
			$tab_ActionUtils.$isCustomWhitelistParsed = true;
			var schemes = tsConfig.schemeWhitelist.split(',');
			for (var $t1 = 0; $t1 < schemes.length; $t1++) {
				var s = schemes[$t1];
				var sc = s.toLowerCase().trim();
				if (!ss.endsWithString(sc, ':')) {
					sc += ':';
				}
				if (sc.length > 1) {
					$tab_ActionUtils.$schemeWhitelist.push(sc);
				}
			}
		}
		var schemeExtract = new RegExp('(^[A-Za-z][A-Za-z0-9+\\-.]*:)');
		var results = schemeExtract.exec(urlToValidate);
		if (!ss.isValue(results)) {
			return true;
		}
		var scheme = results[0].toLowerCase();
		return ss.contains($tab_ActionUtils.$schemeWhitelist, scheme);
	};
	$tab_ActionUtils.$getRelatedActions = function ActionUtils$GetRelatedActions(actions, sourceWorksheet, activationMethod) {
		var relatedActions = _.filter(actions, function(action) {
			var sourceWorksheetMatch = ss.contains(action.sourceWorksheets, sourceWorksheet);
			var activationMethodMatch = !ss.isValue(activationMethod) || ss.unbox(activationMethod) === action.activation;
			return sourceWorksheetMatch && activationMethodMatch;
		});
		return relatedActions;
	};
	$tab_ActionUtils.launchActionUrls = function ActionUtils$LaunchActionUrls(launch, commonDialogProvider) {
		var targetList = [];
		var targetUrls = {};
		if (ss.isNullOrUndefined(launch) || launch.length === 0) {
			return;
		}
		if (ss.isValue($tab_BaseSession.linkTarget) && $tab_BaseSession.linkTarget.length > 0) {
			var target = $tab_BaseSession.linkTarget;
			targetList.push({ item1: target, item2: false });
			targetUrls[target] = launch[launch.length - 1].url;
		}
		else {
			var i = 0;
			for (var $t1 = 0; $t1 < launch.length; $t1++) {
				var url = launch[$t1];
				if (!$tab_ActionUtils.$isAcceptableScheme(url.url)) {
					if (!$tab_ActionUtils.$hasShownBlockedAction) {
						$tab_ActionUtils.$hasShownBlockedAction = true;
						commonDialogProvider.showAlertDialog(tab.Strings.SecurityBlockedURLActionMessage, tab.Strings.SecurityBlockedURLActionHeader, true, null);
					}
					continue;
				}
				if (ss.isNullOrUndefined(url.target) || 't' in url) {
					url.target = url['t'];
				}
				var targetFrame;
				if (ss.isValue(url.target)) {
					targetFrame = { item1: url.target, item2: true };
				}
				else {
					var target1 = '_' + tsConfig.layoutid.toString().replace(new RegExp('[^\\w]', 'g'), '');
					if (i > 0) {
						target1 += '_' + i.toString();
					}
					targetFrame = { item1: target1, item2: false };
				}
				if (!ss.keyExists(targetUrls, targetFrame.item1)) {
					targetList.push(targetFrame);
				}
				targetUrls[targetFrame.item1] = url.url;
				i++;
			}
		}
		for (var $t2 = 0; $t2 < targetList.length; $t2++) {
			var tuple = targetList[$t2];
			var target2 = tuple.item1;
			if (tuple.item2) {
				try {
					$('[name=' + target2 + ']').prop('src', targetUrls[target2]);
				}
				catch ($t3) {
				}
			}
			else {
				window.open(targetUrls[target2], target2);
			}
		}
	};
	global.tab.ActionUtils = $tab_ActionUtils;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.AddDataServerDataSourceCmd
	var $tab_AddDataServerDataSourceCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_AddDataServerDataSourceCmd$Response]).call(this);
	};
	$tab_AddDataServerDataSourceCmd.__typeName = 'tab.AddDataServerDataSourceCmd';
	global.tab.AddDataServerDataSourceCmd = $tab_AddDataServerDataSourceCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.AddDataServerDataSourceCmd.Response
	var $tab_AddDataServerDataSourceCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_AddDataServerDataSourceCmd$Response.__typeName = 'tab.AddDataServerDataSourceCmd$Response';
	global.tab.AddDataServerDataSourceCmd$Response = $tab_AddDataServerDataSourceCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.AnalyticsPaneModel
	var $tab_AnalyticsPaneModel = function(parent) {
		this.$2$NewAnalyticsPaneField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('analyticsPane'.toString()));
	};
	$tab_AnalyticsPaneModel.__typeName = 'tab.AnalyticsPaneModel';
	global.tab.AnalyticsPaneModel = $tab_AnalyticsPaneModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ApiClientCommands
	var $tab_ApiClientCommands = function() {
	};
	$tab_ApiClientCommands.__typeName = 'tab.ApiClientCommands';
	$tab_ApiClientCommands.doApiCommand = function ApiClientCommands$DoApiCommand(c, onSuccess, onError) {
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create(c, 'immediately', onSuccess, onError));
	};
	global.tab.ApiClientCommands = $tab_ApiClientCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ApplicationModel
	var $tab_ApplicationModel = function() {
		this.$shapeManager = null;
		this.$notificationHandlers = {};
		this.$models = {};
		this.$toolbarModel = null;
		this.$workbookModel = null;
		this.$colorPalettesModel = null;
		this.$dataDictionaryModel = null;
		this.$calculationModel = null;
		this.$typeInPillCalculationModel = null;
		this.$calculationFunctionListModel = null;
		this.$compoundTableCalcModel = null;
		this.$dataAlertDialogModel = null;
		this.$2$NewWorkbookField = null;
		this.$2$ApplicationUpdateField = null;
		this.$2$ServerFontsField = null;
		$tab_Model.call(this, null, null);
		this.presModelKey = new $tab_PresModelPathItem('applicationPresModel'.toString());
		this.$toolbarModel = new $tab_ToolbarModel(this);
		this.$workbookModel = new $tab_WorkbookModel(this);
		this.$colorPalettesModel = new $tab_ColorPaletteCollectionModel(this);
		this.$dataDictionaryModel = new $tab_DataDictionaryModel(this);
		this.$calculationModel = new $tab_CalculationModel(this, false);
		this.$typeInPillCalculationModel = new $tab_CalculationModel(this, true);
		this.$calculationFunctionListModel = new $tab_CalculationFunctionListModel(this);
		this.$compoundTableCalcModel = new $tab_CompoundTableCalcModel(this);
		this.$shapeManager = new $tab_ShapeManager();
		this.$dataAlertDialogModel = new $tab_DataAlertDialogModel(this);
		this.set_serverFonts(null);
	};
	$tab_ApplicationModel.__typeName = 'tab.ApplicationModel';
	$tab_ApplicationModel.get_instance = function ApplicationModel$get_Instance() {
		if (ss.isNullOrUndefined($tab_ApplicationModel._instance)) {
			$tab_ApplicationModel._instance = new $tab_ApplicationModel();
		}
		return $tab_ApplicationModel._instance;
	};
	global.tab.ApplicationModel = $tab_ApplicationModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BaseCmd
	var $tab_BaseCmd$2 = function(TParam, TOut) {
		var $type = function() {
			this.cmdParams = {};
			this.$1$UIBlockingField = null;
			this.$1$DeferSuccessField = false;
			this.$1$DeferFailureField = false;
			this.$1$LocalWorkField = null;
			this.$1$NoExceptionDialogField = false;
			this.set_uiBlocking('none');
		};
		ss.registerGenericClassInstance($type, $tab_BaseCmd$2, [TParam, TOut], {
			get_uiBlocking: function BaseCmd$get_UIBlocking() {
				return this.$1$UIBlockingField;
			},
			set_uiBlocking: function BaseCmd$set_UIBlocking(value) {
				this.$1$UIBlockingField = value;
			},
			get_deferSuccess: function BaseCmd$get_DeferSuccess() {
				return this.$1$DeferSuccessField;
			},
			set_deferSuccess: function BaseCmd$set_DeferSuccess(value) {
				this.$1$DeferSuccessField = value;
			},
			get_deferFailure: function BaseCmd$get_DeferFailure() {
				return this.$1$DeferFailureField;
			},
			set_deferFailure: function BaseCmd$set_DeferFailure(value) {
				this.$1$DeferFailureField = value;
			},
			get_localWork: function BaseCmd$get_LocalWork() {
				return this.$1$LocalWorkField;
			},
			set_localWork: function BaseCmd$set_LocalWork(value) {
				this.$1$LocalWorkField = value;
			},
			get_noExceptionDialog: function BaseCmd$get_NoExceptionDialog() {
				return this.$1$NoExceptionDialogField;
			},
			set_noExceptionDialog: function BaseCmd$set_NoExceptionDialog(value) {
				this.$1$NoExceptionDialogField = value;
			},
			invoke: null,
			invoke$1: function BaseCmd$Invoke(cmd) {
				this.validateInvokeParams();
				cmd.noExceptionDialog = this.get_noExceptionDialog();
				cmd.preserveRootResult = true;
				var deferred = $.Deferred();
				var successHandler = function(pm) {
					deferred.resolve(new TOut(pm));
				};
				var failureHandler = function(e) {
					deferred.reject();
				};
				$tab_CommandController.SendCommand(new $tab_ClientCommand(this.get_uiBlocking(), this.get_localWork(), cmd, (this.get_deferSuccess() ? $tab_CommandController.deferredSuccessHandler(Object).call(null, $.Deferred().done(successHandler)) : successHandler), (this.get_deferFailure() ? $tab_CommandController.$deferredFailureHandler($.Deferred().fail(failureHandler)) : failureHandler)));
				return deferred.promise();
			},
			validateInvokeParams: null
		}, function() {
			return null;
		}, function() {
			return [];
		});
		return $type;
	};
	$tab_BaseCmd$2.__typeName = 'tab.BaseCmd$2';
	ss.initGenericClass($tab_BaseCmd$2, $asm, 2);
	global.tab.BaseCmd$2 = $tab_BaseCmd$2;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BaseSession
	var $tab_BaseSession = function(urlRoot, commonDialogProvider) {
		this.defaultSessionErrorHandler = null;
		this.$commonDialogProvider = null;
		this.$errorHandlerChain = null;
		this.$urlRoot = null;
		this.$siteRoot = null;
		this.$commandRequestId = 0;
		this.$pendingCommandRequests = null;
		this.fileDownloadHelper = null;
		tab.Param.verifyValue(commonDialogProvider, 'commonDialogProvider');
		this.$commonDialogProvider = commonDialogProvider;
		var baseUrl = tabBootstrap.BaseUrlFormatter.formatBaseUrl();
		if (ss.isValue(urlRoot)) {
			this.$urlRoot = urlRoot;
		}
		else {
			this.$urlRoot = tabBootstrap.BaseUrlFormatter.formatUrlRoot(baseUrl);
		}
		if (ss.isValue(tsConfig.site_root)) {
			this.$siteRoot = tsConfig.site_root;
		}
		else {
			this.$siteRoot = baseUrl;
		}
		this.defaultSessionErrorHandler = new $tab_DefaultSessionErrorHandler(commonDialogProvider, urlRoot);
		if (tab.FeatureFlags.isEnabled('SkipConnectionsDuringLoad')) {
			this.$errorHandlerChain = new $tab_ErrorHandlerChain([new $tab_DeferredConnectionsSessionErrorHandler(), this.defaultSessionErrorHandler]);
		}
		else {
			this.$errorHandlerChain = new $tab_ErrorHandlerChain([this.defaultSessionErrorHandler]);
		}
		this.$commandRequestId = 0;
		this.$pendingCommandRequests = {};
		this.fileDownloadHelper = new $tab_FileDownloadHelper(commonDialogProvider, this);
	};
	$tab_BaseSession.__typeName = 'tab.BaseSession';
	$tab_BaseSession.add_stateChanged = function BaseSession$add_StateChanged(value) {
		$tab_BaseSession.$1$StateChangedField = ss.delegateCombine($tab_BaseSession.$1$StateChangedField, value);
	};
	$tab_BaseSession.remove_stateChanged = function BaseSession$remove_StateChanged(value) {
		$tab_BaseSession.$1$StateChangedField = ss.delegateRemove($tab_BaseSession.$1$StateChangedField, value);
	};
	$tab_BaseSession.fireStateChanged = function BaseSession$FireStateChanged(data) {
		if (ss.isValue($tab_BaseSession.$1$StateChangedField)) {
			$tab_BaseSession.$1$StateChangedField(data);
		}
	};
	global.tab.BaseSession = $tab_BaseSession;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BorderDefinition
	var $tab_BorderDefinition = function(width, style, color, side) {
		this.width = 0;
		this.style = null;
		this.color = null;
		this.side = 0;
		this.width = width;
		this.style = style;
		this.color = color;
		this.side = side;
	};
	$tab_BorderDefinition.__typeName = 'tab.BorderDefinition';
	$tab_BorderDefinition.borderStyleToCss = function BorderDefinition$BorderStyleToCss(borderStyle) {
		return ss.coalesce($tab_BorderDefinition.$borderLookup[borderStyle], 'none');
	};
	$tab_BorderDefinition.$createBorderStyleLookup = function BorderDefinition$CreateBorderStyleLookup() {
		var result = {};
		result['bs-none'] = 'none';
		result['bs-hidden'] = 'hidden';
		result['bs-dotted'] = 'dotted';
		result['bs-dashed'] = 'dashed';
		result['bs-solid'] = 'solid';
		result['bs-double'] = 'double';
		result['bs-groove'] = 'groove';
		result['bs-ridge'] = 'ridge';
		result['bs-inset'] = 'inset';
		result['bs-outset'] = 'outset';
		return result;
	};
	global.tab.BorderDefinition = $tab_BorderDefinition;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BorderDefinition.BorderSide
	var $tab_BorderDefinition$BorderSide = function() {
	};
	$tab_BorderDefinition$BorderSide.__typeName = 'tab.BorderDefinition$BorderSide';
	global.tab.BorderDefinition$BorderSide = $tab_BorderDefinition$BorderSide;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BrushingComputer
	var $tab_BrushingComputer = function() {
		this.$tupleBrushing = {};
		this.$trendLineBrushing = {};
		this.$legendBrushing = {};
		this.$nodeBrushing = {};
		this.$isBrushingComputed = true;
	};
	$tab_BrushingComputer.__typeName = 'tab.BrushingComputer';
	$tab_BrushingComputer.get_$log = function BrushingComputer$get_Log() {
		return tab.Logger.lazyGetLogger($tab_BrushingComputer);
	};
	$tab_BrushingComputer.createBrushingComputer = function BrushingComputer$CreateBrushingComputer(model, visualModel, selectedItemsIds, modelFieldCaptions, isOneWayHighlighting) {
		var toRet = new $tab_BrushingComputer();
		var vizDataModel = visualModel.get_vizDataModel();
		var brushingDataValues = $tab_$BrushingDataUtils.$buildSelectorBrushingDataValues(model, modelFieldCaptions, selectedItemsIds, vizDataModel, modelFieldCaptions);
		for (var $t1 = 0; $t1 < modelFieldCaptions.length; $t1++) {
			var caption = modelFieldCaptions[$t1];
			if (visualModel.vizDataContainsDuplicateCaption(caption)) {
				$tab_BrushingComputer.get_$log().debug('Duplicate caption, not going to calculate brushing: %s', [caption]);
				toRet.$isBrushingComputed = false;
				return toRet;
			}
		}
		var modelsToProcess;
		if (isOneWayHighlighting) {
			modelsToProcess = $tab_ModelUtils.getVisualModels($tab_ApplicationModel.get_instance());
		}
		else {
			modelsToProcess = {};
			var relevantActions = $tab_ActionUtils.getApplicableActions(visualModel.get_worksheetName(), 'on-select', 'highlight');
			for (var $t2 = 0; $t2 < relevantActions.length; $t2++) {
				var actionPresModel = relevantActions[$t2];
				if (ss.isNullOrUndefined(actionPresModel.targetWorksheets)) {
					continue;
				}
				for (var $t3 = 0; $t3 < actionPresModel.targetWorksheets.length; $t3++) {
					var targetWorksheet = actionPresModel.targetWorksheets[$t3];
					var targetVisualModel = $tab_ModelUtils.getVisualModel($tab_ApplicationModel.get_instance(), targetWorksheet);
					modelsToProcess[targetWorksheet] = targetVisualModel;
				}
			}
		}
		var contentDashboard = $tab_ModelUtils.findContentDashboard();
		var $t4 = _.keys(modelsToProcess);
		for (var $t5 = 0; $t5 < $t4.length; $t5++) {
			var targetSheetName = $t4[$t5];
			var targetVisualModel1 = modelsToProcess[targetSheetName];
			if (ss.isNullOrUndefined(targetVisualModel1)) {
				continue;
			}
			var targetVizData = targetVisualModel1.get_vizDataModel();
			toRet.$tupleBrushing[targetSheetName] = $tab_$BrushingDataUtils.$findMatchingTuples(brushingDataValues, targetVizData);
			toRet.$trendLineBrushing[targetSheetName] = $tab_$BrushingDataUtils.$findMatchingTrendlines(targetVisualModel1.get_scenePresModel(), brushingDataValues, targetVizData);
			var brushedNodes = [];
			var $t6 = new ss.ObjectEnumerator($tab_BrushingComputer.$getNodeGroups(targetVisualModel1));
			try {
				while ($t6.moveNext()) {
					var partDrawGroups = $t6.current();
					var nodes = partDrawGroups.value;
					var nodeFields = $tab_$BrushingDataUtils.$getFieldsForNodes(targetVisualModel1, nodes);
					var commonFieldsForNodes = _.intersection(nodeFields, modelFieldCaptions);
					if (commonFieldsForNodes.length > 0) {
						var nodeDvs = $tab_$BrushingDataUtils.$buildSelectorBrushingDataValues(model, modelFieldCaptions, selectedItemsIds, vizDataModel, commonFieldsForNodes);
						brushedNodes = brushedNodes.concat.apply(brushedNodes, $tab_$BrushingDataUtils.$findMatchingNodes(nodeDvs, targetVisualModel1, nodes));
					}
				}
			}
			finally {
				$t6.dispose();
			}
			toRet.$nodeBrushing[targetSheetName] = brushedNodes;
			var $t7 = $tab_ModelUtils.getModelsForViz($tab_CategoricalLegendModel).call(null, contentDashboard, targetVisualModel1);
			for (var $t8 = 0; $t8 < $t7.length; $t8++) {
				var legend = $t7[$t8];
				if (!legend.get_isHighlightEnabled()) {
					continue;
				}
				var legendsToBrush = $tab_$BrushingDataUtils.$findMatchingLegendItems(brushingDataValues, targetVizData, legend);
				$tab_BrushingComputer.get_$log().debug('Brushing legend items: %s, %o', [legend.get_id(), legendsToBrush]);
				if (!ss.keyExists(toRet.$legendBrushing, targetVisualModel1.get_worksheetName())) {
					toRet.$legendBrushing[targetVisualModel1.get_worksheetName()] = {};
				}
				toRet.$legendBrushing[targetVisualModel1.get_worksheetName()][$tab_BrushingComputer.$calculateLegendKey(legend.get_legendTypeEnum(), legend.get_legendNames())] = legendsToBrush;
			}
		}
		return toRet;
	};
	$tab_BrushingComputer.getTuplesAssociatedWithSelectedNodes = function BrushingComputer$GetTuplesAssociatedWithSelectedNodes(visualModel, selectedNodes) {
		if (ss.isNullOrUndefined(visualModel.get_vizDataModel()) || ss.isNullOrUndefined($tab_ApplicationModel.get_instance().get_dataDictionary())) {
			return [];
		}
		var nonQuantitativeNodes = [];
		for (var $t1 = 0; $t1 < selectedNodes.length; $t1++) {
			var node = selectedNodes[$t1];
			if ($tab_SelectionUtils.isCategoricalAndTupleAssociatedHeader(node)) {
				nonQuantitativeNodes.push(node);
			}
		}
		if (nonQuantitativeNodes.length === 0) {
			return [];
		}
		var results = $tab_$BrushingDataUtils.$buildNodeSelectionDataValues(visualModel.get_vizDataModel(), nonQuantitativeNodes);
		var tupleIds = $tab_BrushingComputer.$findTuplesWithValues(results, visualModel);
		return tupleIds;
	};
	$tab_BrushingComputer.computeFromTuples = function BrushingComputer$ComputeFromTuples(visualModel, tupleIDs, relatedActions) {
		var toRet = new $tab_BrushingComputer();
		for (var $t1 = 0; $t1 < relatedActions.length; $t1++) {
			var actionPresModel = relatedActions[$t1];
			if (ss.isNullOrUndefined(actionPresModel.targetWorksheets)) {
				continue;
			}
			var highlightCmd = $tab_CommandSerializer.deserialize(actionPresModel.simpleCommandModel['simpleCommand'.toString()], true);
			for (var $t2 = 0; $t2 < actionPresModel.targetWorksheets.length; $t2++) {
				var targetWorksheet = actionPresModel.targetWorksheets[$t2];
				var targetVisualModel = $tab_ModelUtils.getVisualModel($tab_ApplicationModel.get_instance(), targetWorksheet);
				if (ss.isNullOrUndefined(targetVisualModel)) {
					$tab_BrushingComputer.get_$log().debug('Target worksheet not present: %s', [targetWorksheet]);
					continue;
				}
				var targetVizData = targetVisualModel.get_vizDataModel();
				if (ss.isNullOrUndefined(targetVizData)) {
					$tab_BrushingComputer.get_$log().error('Target viz data not found: %s.', [targetWorksheet]);
					continue;
				}
				if ($tab_BrushingComputer.isSpecialDateTimeHighlighting(highlightCmd)) {
					var dataDict = $tab_ApplicationModel.get_instance().get_dataDictionary();
					var dvsOverlapIndicesPair = $tab_$BrushingDataUtils.$buildDateTimeTupleDataValues(visualModel.get_vizDataModel(), targetVizData, dataDict, tupleIDs);
					var dvs = dvsOverlapIndicesPair.item1;
					var overlapIndexes = dvsOverlapIndicesPair.item2;
					toRet.$tupleBrushing[targetWorksheet] = $tab_$BrushingDataUtils.$findMatchingTuplesDateTimeHighlighting(dvs, overlapIndexes, targetVizData, dataDict);
					toRet.$nodeBrushing[targetWorksheet] = $tab_$BrushingDataUtils.$findMatchingNodesDateTimeHighlighting(dvs, overlapIndexes, targetVisualModel, dataDict);
					toRet.$calculateLegendsForViz(targetVisualModel, visualModel, tupleIDs, highlightCmd, actionPresModel.name);
				}
				else {
					var commonFields = $tab_BrushingComputer.getHighlightFieldCaptions(highlightCmd, visualModel.get_vizDataModel().get_highlightCaptions(), visualModel.get_vizDataModel().get_fieldCaptions());
					if (!ss.referenceEquals(visualModel, targetVisualModel)) {
						commonFields = _.intersection(commonFields, targetVizData.get_fieldCaptions());
					}
					if (tab.MiscUtil.isNullOrEmpty(commonFields)) {
						$tab_BrushingComputer.get_$log().debug('Ignoring a highlight action on a field that is not in play.', []);
						continue;
					}
					for (var $t3 = 0; $t3 < commonFields.length; $t3++) {
						var caption = commonFields[$t3];
						if (visualModel.vizDataContainsDuplicateCaption(caption)) {
							$tab_BrushingComputer.get_$log().debug('Duplicate caption, not going to calculate brushing: %s', [caption]);
							toRet.$isBrushingComputed = false;
							return toRet;
						}
					}
					var tupleDvs = $tab_$BrushingDataUtils.$buildTupleSelectionDataValues(visualModel.get_vizDataModel(), tupleIDs, commonFields);
					toRet.$tupleBrushing[targetWorksheet] = $tab_$BrushingDataUtils.$findMatchingTuples(tupleDvs, targetVizData);
					var brushedNodes = [];
					var nodeGroups = $tab_BrushingComputer.$getNodeGroups(targetVisualModel);
					var $t4 = _.keys(nodeGroups);
					for (var $t5 = 0; $t5 < $t4.length; $t5++) {
						var key = $t4[$t5];
						var nodes = nodeGroups[key];
						var nodeFields = $tab_$BrushingDataUtils.$getFieldsForNodes(targetVisualModel, nodes);
						var commonFieldsForNodes = _.intersection(nodeFields, commonFields);
						if (commonFieldsForNodes.length > 0) {
							var nodeDvs = $tab_$BrushingDataUtils.$buildTupleSelectionDataValues(visualModel.get_vizDataModel(), tupleIDs, commonFieldsForNodes);
							brushedNodes = brushedNodes.concat.apply(brushedNodes, $tab_$BrushingDataUtils.$findMatchingNodes(nodeDvs, targetVisualModel, nodes));
						}
					}
					toRet.$nodeBrushing[targetWorksheet] = brushedNodes;
					toRet.$calculateLegendsForViz(targetVisualModel, visualModel, tupleIDs, highlightCmd, actionPresModel.name);
				}
			}
		}
		return toRet;
	};
	$tab_BrushingComputer.$getNodeGroups = function BrushingComputer$GetNodeGroups(targetVisualModel) {
		var toRet = {};
		var visualListModels = targetVisualModel.get_sceneModel().get_visualListModels();
		var $t1 = new ss.ObjectEnumerator(visualListModels);
		try {
			while ($t1.moveNext()) {
				var pair = $t1.current();
				toRet[pair.key] = pair.value.get_groupItemNodes();
			}
		}
		finally {
			$t1.dispose();
		}
		var xlabels = toRet['x-labels'] || [];
		ss.arrayAddRange(xlabels, toRet['bottom-axis'] || []);
		toRet['x-labels'] = xlabels;
		delete toRet['bottom-axis'];
		return toRet;
	};
	$tab_BrushingComputer.isSpecialDateTimeHighlighting = function BrushingComputer$IsSpecialDateTimeHighlighting(highlightCmd) {
		if (ss.isNullOrUndefined(highlightCmd) || ss.isNullOrUndefined(highlightCmd.commandParams)) {
			return false;
		}
		var commandSpecialFieldsValue = ss.cast(highlightCmd.commandParams['specialFields'], String);
		return ss.isValue(commandSpecialFieldsValue) && ss.referenceEquals(commandSpecialFieldsValue, $tab_BrushingComputer.$dateTimeHighlightCommandParamValue);
	};
	$tab_BrushingComputer.getHighlightFieldCaptions = function BrushingComputer$GetHighlightFieldCaptions(highlightCmd, vizHighlightCaptions, commonFieldCaptions) {
		var commandFields = [];
		if (ss.isNullOrUndefined(highlightCmd) || ss.isNullOrUndefined(highlightCmd.commandParams)) {
			return commandFields;
		}
		var commandFieldCaptions = ss.cast(highlightCmd.commandParams['fieldCaptions'], String);
		if (!ss.isNullOrUndefined(commandFieldCaptions)) {
			commandFields = ss.cast(JSON.parse(commandFieldCaptions), Array);
		}
		else {
			var commandSpecialFieldsValue = ss.cast(highlightCmd.commandParams['specialFields'], String);
			if (ss.isNullOrUndefined(commandSpecialFieldsValue) || !ss.referenceEquals(commandSpecialFieldsValue, $tab_BrushingComputer.$allFieldsHighlightCommandParamValue)) {
				$tab_BrushingComputer.get_$log().debug('Warning: Processing a highlight action with no information on what field it is highlighting on. Taking the highlight captions of the source sheet as default.', []);
			}
			commandFields = vizHighlightCaptions;
		}
		if (ss.isValue(commonFieldCaptions)) {
			commandFields = _.intersection(commonFieldCaptions, commandFields);
		}
		return commandFields;
	};
	$tab_BrushingComputer.$calculateLegendKey = function BrushingComputer$CalculateLegendKey(legendType, legendNames) {
		return 'LegendType:' + legendType.toString() + ' LegendNames:' + legendNames.join(';');
	};
	$tab_BrushingComputer.$findTuplesWithValues = function BrushingComputer$FindTuplesWithValues(values, visualModel) {
		var tuples = [];
		if (ss.isNullOrUndefined(visualModel.get_vizDataModel())) {
			return tuples;
		}
		for (var $t1 = 0; $t1 < values.length; $t1++) {
			var result = values[$t1];
			tuples = _.union(tuples, $tab_$BrushingDataUtils.$findMatchingTuples(result, visualModel.get_vizDataModel()));
		}
		return tuples;
	};
	global.tab.BrushingComputer = $tab_BrushingComputer;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BuildCaptionContextMenuCmd
	var $tab_BuildCaptionContextMenuCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_BuildCaptionContextMenuCmd$Response]).call(this);
	};
	$tab_BuildCaptionContextMenuCmd.__typeName = 'tab.BuildCaptionContextMenuCmd';
	global.tab.BuildCaptionContextMenuCmd = $tab_BuildCaptionContextMenuCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BuildCaptionContextMenuCmd.Response
	var $tab_BuildCaptionContextMenuCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_BuildCaptionContextMenuCmd$Response.__typeName = 'tab.BuildCaptionContextMenuCmd$Response';
	global.tab.BuildCaptionContextMenuCmd$Response = $tab_BuildCaptionContextMenuCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BuildLayoutTreeContextMenuCmd
	var $tab_BuildLayoutTreeContextMenuCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_BuildLayoutTreeContextMenuCmd$Response]).call(this);
	};
	$tab_BuildLayoutTreeContextMenuCmd.__typeName = 'tab.BuildLayoutTreeContextMenuCmd';
	global.tab.BuildLayoutTreeContextMenuCmd = $tab_BuildLayoutTreeContextMenuCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BuildLayoutTreeContextMenuCmd.Response
	var $tab_BuildLayoutTreeContextMenuCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_BuildLayoutTreeContextMenuCmd$Response.__typeName = 'tab.BuildLayoutTreeContextMenuCmd$Response';
	global.tab.BuildLayoutTreeContextMenuCmd$Response = $tab_BuildLayoutTreeContextMenuCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BuildSheetListContextMenuCmd
	var $tab_BuildSheetListContextMenuCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_BuildSheetListContextMenuCmd$Response]).call(this);
	};
	$tab_BuildSheetListContextMenuCmd.__typeName = 'tab.BuildSheetListContextMenuCmd';
	global.tab.BuildSheetListContextMenuCmd = $tab_BuildSheetListContextMenuCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BuildSheetListContextMenuCmd.Response
	var $tab_BuildSheetListContextMenuCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_BuildSheetListContextMenuCmd$Response.__typeName = 'tab.BuildSheetListContextMenuCmd$Response';
	global.tab.BuildSheetListContextMenuCmd$Response = $tab_BuildSheetListContextMenuCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BuildTitleContextMenuCmd
	var $tab_BuildTitleContextMenuCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_BuildTitleContextMenuCmd$Response]).call(this);
	};
	$tab_BuildTitleContextMenuCmd.__typeName = 'tab.BuildTitleContextMenuCmd';
	global.tab.BuildTitleContextMenuCmd = $tab_BuildTitleContextMenuCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BuildTitleContextMenuCmd.Response
	var $tab_BuildTitleContextMenuCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_BuildTitleContextMenuCmd$Response.__typeName = 'tab.BuildTitleContextMenuCmd$Response';
	global.tab.BuildTitleContextMenuCmd$Response = $tab_BuildTitleContextMenuCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CalculationAutoCompleteCmd
	var $tab_CalculationAutoCompleteCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_CalculationAutoCompleteCmd$Response]).call(this);
	};
	$tab_CalculationAutoCompleteCmd.__typeName = 'tab.CalculationAutoCompleteCmd';
	global.tab.CalculationAutoCompleteCmd = $tab_CalculationAutoCompleteCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CalculationAutoCompleteCmd.Response
	var $tab_CalculationAutoCompleteCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_CalculationAutoCompleteCmd$Response.__typeName = 'tab.CalculationAutoCompleteCmd$Response';
	global.tab.CalculationAutoCompleteCmd$Response = $tab_CalculationAutoCompleteCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CalculationFunctionListModel
	var $tab_CalculationFunctionListModel = function(parent) {
		this.$2$FunctionListUpdatedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('expressionFuncPm'.toString()));
		this.pm = {};
	};
	$tab_CalculationFunctionListModel.__typeName = 'tab.CalculationFunctionListModel';
	global.tab.CalculationFunctionListModel = $tab_CalculationFunctionListModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CalculationModel
	var $tab_CalculationModel = function(parent, isAdHoc) {
		this.$isAdhoc = false;
		this.$2$CalculationUpdatedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem((isAdHoc ? 'typeInPill' : 'calculation').toString()));
		this.pm = {};
		this.$isAdhoc = isAdHoc;
	};
	$tab_CalculationModel.__typeName = 'tab.CalculationModel';
	global.tab.CalculationModel = $tab_CalculationModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CategoricalFilterModel
	var $tab_CategoricalFilterModel = function(parent) {
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('categoricalFilter'.toString()));
	};
	$tab_CategoricalFilterModel.__typeName = 'tab.CategoricalFilterModel';
	global.tab.CategoricalFilterModel = $tab_CategoricalFilterModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CategoricalLegendModel
	var $tab_CategoricalLegendModel = function(parent, contentType, legendType) {
		this.$legendType = null;
		this.$2$LegendChangedField = null;
		this.$2$LegendNameChangedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem(contentType));
		this.$legendType = legendType;
	};
	$tab_CategoricalLegendModel.__typeName = 'tab.CategoricalLegendModel';
	$tab_CategoricalLegendModel.$getPresModelItems = function CategoricalLegendModel$GetPresModelItems(type, pm) {
		var items;
		switch (type) {
			case 'color':
			case 'map': {
				items = pm.colorLegendItems;
				break;
			}
			case 'size': {
				items = pm.sizeLegendItems;
				break;
			}
			case 'shape': {
				items = pm.shapeLegendItems;
				break;
			}
			default: {
				tab.Logger.lazyGetLogger($tab_CategoricalLegendModel).warn('Unsupported legend type: %o', [type]);
				return null;
			}
		}
		return items;
	};
	global.tab.CategoricalLegendModel = $tab_CategoricalLegendModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CategoricalQuickFilterModel
	var $tab_CategoricalQuickFilterModel = function(parent) {
		this.$categoricalQuickFilterPresModel = null;
		this.$3$CategoricalFilterField = null;
		$tab_QuickFilterModel.call(this, parent, new $tab_PresModelPathItem('categoricalQuickFilter'.toString()));
		this.set_categoricalFilter(new $tab_CategoricalFilterModel(this));
	};
	$tab_CategoricalQuickFilterModel.__typeName = 'tab.CategoricalQuickFilterModel';
	global.tab.CategoricalQuickFilterModel = $tab_CategoricalQuickFilterModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ChangeWorkbookUIModeCmd
	var $tab_ChangeWorkbookUIModeCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ChangeWorkbookUIModeCmd$Response]).call(this);
	};
	$tab_ChangeWorkbookUIModeCmd.__typeName = 'tab.ChangeWorkbookUIModeCmd';
	global.tab.ChangeWorkbookUIModeCmd = $tab_ChangeWorkbookUIModeCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ChangeWorkbookUIModeCmd.Response
	var $tab_ChangeWorkbookUIModeCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_ChangeWorkbookUIModeCmd$Response.__typeName = 'tab.ChangeWorkbookUIModeCmd$Response';
	global.tab.ChangeWorkbookUIModeCmd$Response = $tab_ChangeWorkbookUIModeCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ClientCommand
	var $tab_ClientCommand = function(uiBlockType, doLocal, remoteCommand, successCallback, errorCallback) {
		this.doRemoteWork = null;
		this.doLocalWork = null;
		this.$uiBlockType = null;
		this.$sequence = null;
		this.$commandRecords = null;
		this.$processedCommandRecords = null;
		this.$commandName = 'Unknown';
		this.hasLocalComponent = false;
		this.hasRemoteComponent = false;
		this.$uiBlockType = uiBlockType;
		this.$sequence = 'remoteFirst';
		this.hasLocalComponent = ss.isValue(doLocal);
		this.hasRemoteComponent = ss.isValue(remoteCommand) && !$tab_ApplicationModel.get_instance().get_isOffline();
		this.doLocalWork = doLocal;
		this.$commandRecords = new Array();
		if (this.hasRemoteComponent) {
			this.$commandRecords.push(new $tab_CommandRecord(remoteCommand, successCallback, errorCallback));
			this.$commandName = remoteCommand.commandName;
		}
		this.doRemoteWork = ss.mkdel(this, this.$executeNextRemoteCommand);
	};
	$tab_ClientCommand.__typeName = 'tab.ClientCommand';
	global.tab.ClientCommand = $tab_ClientCommand;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ClipCase
	var $tab_ClipCase = function() {
	};
	$tab_ClipCase.__typeName = 'tab.ClipCase';
	global.tab.ClipCase = $tab_ClipCase;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CloseDataAlertDialogCmd
	var $tab_CloseDataAlertDialogCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_CloseDataAlertDialogCmd$Response]).call(this);
	};
	$tab_CloseDataAlertDialogCmd.__typeName = 'tab.CloseDataAlertDialogCmd';
	global.tab.CloseDataAlertDialogCmd = $tab_CloseDataAlertDialogCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CloseDataAlertDialogCmd.Response
	var $tab_CloseDataAlertDialogCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_CloseDataAlertDialogCmd$Response.__typeName = 'tab.CloseDataAlertDialogCmd$Response';
	global.tab.CloseDataAlertDialogCmd$Response = $tab_CloseDataAlertDialogCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ColorModel
	var $tab_ColorModel = function(r, g, b, a) {
		this.$r = 0;
		this.$g = 0;
		this.$b = 0;
		this.$a = 0;
		this.$rgbStr = '';
		this.$cachedStr = '';
		this.$r = r;
		this.$g = g;
		this.$b = b;
		this.$a = a;
	};
	$tab_ColorModel.__typeName = 'tab.ColorModel';
	$tab_ColorModel.fromArgbInt = function ColorModel$FromArgbInt(color) {
		var r = (color & 16711680) >>> 16;
		var g = (color & 65280) >>> 8;
		var b = color & 255;
		var a = (color & 4278190080) >>> 24;
		return new $tab_ColorModel(r, g, b, a / 255);
	};
	$tab_ColorModel.fromColorCode = function ColorModel$FromColorCode(colorCode) {
		var cachedColor = $tab_ColorModel.$parsedColorStrCache.cl[colorCode];
		if (ss.isValue(cachedColor)) {
			return cachedColor;
		}
		var cap = function(i) {
			return Math.min(Math.max(i, 0), 255);
		};
		var r;
		var g;
		var b;
		var a = $tab_ColorModel.defaultAlpha;
		var matches = $tab_ColorModel.$hexFormat.exec(colorCode);
		if (ss.isValue(matches)) {
			r = cap(parseInt(matches[1], 16));
			g = cap(parseInt(matches[2], 16));
			b = cap(parseInt(matches[3], 16));
			var retVal = new $tab_ColorModel(r, g, b, a);
			$tab_ColorModel.$parsedColorStrCache.add(colorCode, retVal);
			return retVal;
		}
		matches = $tab_ColorModel.$rgbFormat.exec(colorCode);
		if (ss.isValue(matches)) {
			r = cap(parseInt(matches[1], 10));
			g = cap(parseInt(matches[2], 10));
			b = cap(parseInt(matches[3], 10));
			var retVal1 = new $tab_ColorModel(r, g, b, a);
			retVal1.setRGBStr(colorCode);
			$tab_ColorModel.$parsedColorStrCache.add(colorCode, retVal1);
			return retVal1;
		}
		matches = $tab_ColorModel.$rgbaFormat.exec(colorCode);
		if (ss.isValue(matches)) {
			r = cap(parseInt(matches[1], 10));
			g = cap(parseInt(matches[2], 10));
			b = cap(parseInt(matches[3], 10));
			a = parseFloat(matches[4]);
			if (a <= 1) {
				a = a * 255;
			}
			if (a > 255) {
				a = 255;
			}
			if (a < 0) {
				a = 0;
			}
			a = $tab_ColorModel.alpha255ToFraction(a);
			var retVal2 = new $tab_ColorModel(r, g, b, a);
			$tab_ColorModel.$parsedColorStrCache.add(colorCode, retVal2);
			return retVal2;
		}
		throw new ss.Exception('Unknown color format: ' + colorCode);
	};
	$tab_ColorModel.alpha255ToFraction = function ColorModel$Alpha255ToFraction(a) {
		return tab.DoubleUtil.truncateTwoDecimalPlaces($tab_ColorModel.$untruncatedAlpha255ToFraction(a));
	};
	$tab_ColorModel.$untruncatedAlpha255ToFraction = function ColorModel$UntruncatedAlpha255ToFraction(a) {
		return (a + 1) / 256;
	};
	$tab_ColorModel.alphaFractionTo255 = function ColorModel$AlphaFractionTo255(a) {
		var percentA = ss.Int32.trunc(tab.DoubleUtil.multiplyBy100(a));
		for (var i = 0; i < 256; i++) {
			var newA = ss.Int32.trunc(tab.DoubleUtil.multiplyBy100($tab_ColorModel.alpha255ToFraction(i)));
			if (newA === percentA) {
				return i;
			}
		}
		return 255;
	};
	$tab_ColorModel.fromColorModelPlusAlpha = function ColorModel$FromColorModelPlusAlpha(rgb, a) {
		return new $tab_ColorModel(rgb.get_r(), rgb.get_g(), rgb.get_b(), a);
	};
	$tab_ColorModel.convertColorForCanvas = function ColorModel$ConvertColorForCanvas(colorFromBackend) {
		if (colorFromBackend.charCodeAt(3) === 40) {
			return colorFromBackend;
		}
		$tab_ColorModel.$initConversionCache();
		var convertedColor = $tab_ColorModel.$conversionCache[colorFromBackend];
		if (ss.isValue(convertedColor)) {
			return convertedColor;
		}
		var cm = $tab_ColorModel.fromColorCode(colorFromBackend);
		convertedColor = cm.toString();
		return convertedColor;
	};
	$tab_ColorModel.isEqual = function ColorModel$IsEqual(m1, m2, compareAlpha) {
		if (ss.isNullOrUndefined(m1) || ss.isNullOrUndefined(m2)) {
			return false;
		}
		if (compareAlpha && m1.$a !== m2.$a) {
			return false;
		}
		return m1.$r === m2.$r && m1.$g === m2.$g && m1.$b === m2.$b;
	};
	$tab_ColorModel.alphaBlend = function ColorModel$AlphaBlend(transparentColor, opaqueColor) {
		if (transparentColor.get_a() < 1) {
			var weightOfOpaqueColor = $tab_ColorModel.alphaToTransparency(transparentColor.get_a());
			var red = opaqueColor.get_r() * weightOfOpaqueColor + transparentColor.get_r() * transparentColor.get_a();
			var green = opaqueColor.get_g() * weightOfOpaqueColor + transparentColor.get_g() * transparentColor.get_a();
			var blue = opaqueColor.get_b() * weightOfOpaqueColor + transparentColor.get_b() * transparentColor.get_a();
			return new $tab_ColorModel(ss.Int32.trunc(red), ss.Int32.trunc(green), ss.Int32.trunc(blue), $tab_ColorModel.defaultAlpha);
		}
		else {
			return transparentColor;
		}
	};
	$tab_ColorModel.isFullyTransparent = function ColorModel$IsFullyTransparent(colorModel) {
		return colorModel.get_a() === 0;
	};
	$tab_ColorModel.alphaComposite = function ColorModel$AlphaComposite(src, dst) {
		if (dst.get_a() >= $tab_ColorModel.$closeToOne) {
			return $tab_ColorModel.alphaCompositeSolidDest(src, dst);
		}
		var transparencyA = $tab_ColorModel.alphaToTransparency(src.get_a());
		var finalAlpha = src.get_a() + dst.get_a() * transparencyA;
		return new $tab_ColorModel($tab_ColorModel.$alphaBlendChannelHelper(src.get_r(), src.get_a(), dst.get_r(), dst.get_a(), finalAlpha), $tab_ColorModel.$alphaBlendChannelHelper(src.get_g(), src.get_a(), dst.get_g(), dst.get_a(), finalAlpha), $tab_ColorModel.$alphaBlendChannelHelper(src.get_b(), src.get_a(), dst.get_b(), dst.get_a(), finalAlpha), finalAlpha);
	};
	$tab_ColorModel.alphaCompositeSolidDest = function ColorModel$AlphaCompositeSolidDest(src, dst) {
		ss.Debug.assert(dst.get_a() >= $tab_ColorModel.$closeToOne, 'Assuming a solid destination alpha ' + dst.get_a());
		return new $tab_ColorModel($tab_ColorModel.$alphaBlendSolidDestChannelHelper(src.get_r(), src.get_a(), dst.get_r()), $tab_ColorModel.$alphaBlendSolidDestChannelHelper(src.get_g(), src.get_a(), dst.get_g()), $tab_ColorModel.$alphaBlendSolidDestChannelHelper(src.get_b(), src.get_a(), dst.get_b()), $tab_ColorModel.defaultAlpha);
	};
	$tab_ColorModel.$luminance = function ColorModel$Luminance(r, g, b) {
		return 0.2126 * $tab_ColorModel.$pow2point2[r] + 0.7152 * $tab_ColorModel.$pow2point2[g] + 0.0722 * $tab_ColorModel.$pow2point2[b];
	};
	$tab_ColorModel.$getApparentAlphaPercent = function ColorModel$GetApparentAlphaPercent(alpha) {
		return Math.min(1, (255 - alpha) / 255 * $tab_ColorModel.alphaMultiplier);
	};
	$tab_ColorModel.$toHex = function ColorModel$ToHex(input, padding) {
		var result = input.toString(16);
		while (result.length < padding) {
			result = '0' + result;
		}
		return result;
	};
	$tab_ColorModel.$alphaBlendChannelHelper = function ColorModel$AlphaBlendChannelHelper(srcVal, srcAlpha, dstVal, dstAlpha, finalAlpha) {
		return Math.round((srcVal * srcAlpha + dstVal * dstAlpha * $tab_ColorModel.alphaToTransparency(srcAlpha)) / finalAlpha);
	};
	$tab_ColorModel.$alphaBlendSolidDestChannelHelper = function ColorModel$AlphaBlendSolidDestChannelHelper(srcVal, srcAlpha, dstVal) {
		return Math.round(srcVal * srcAlpha + dstVal * $tab_ColorModel.alphaToTransparency(srcAlpha));
	};
	$tab_ColorModel.$labTransform = function ColorModel$LabTransform(XYZcomponent) {
		if (XYZcomponent > 0.00885639991611242) {
			return Math.pow(XYZcomponent, 0.333333313465118);
		}
		else {
			return 7.78703689575195 * XYZcomponent + 0.137931004166603;
		}
	};
	$tab_ColorModel.$initConversionCache = function ColorModel$InitConversionCache() {
		if (ss.isValue($tab_ColorModel.$conversionCache)) {
			return;
		}
		$tab_ColorModel.$conversionCache = {};
		$tab_ColorModel.$conversionCache['rgba(0,0,0,255)'] = 'rgba(0,0,0,1)';
		$tab_ColorModel.$conversionCache['rgba(0,0,0,0)'] = 'rgba(0,0,0,0)';
		$tab_ColorModel.$conversionCache['rgba(255,255,255,255)'] = 'rgba(255,255,255,1)';
		$tab_ColorModel.$conversionCache['rgba(255,255,255,0)'] = 'rgba(255,255,255,0)';
	};
	$tab_ColorModel.transparencyToAlpha = function ColorModel$TransparencyToAlpha(transparency) {
		return Math.min(Math.max(1 - transparency, 0), 1);
	};
	$tab_ColorModel.alphaToTransparency = function ColorModel$AlphaToTransparency(alpha) {
		return $tab_ColorModel.transparencyToAlpha(alpha);
	};
	global.tab.ColorModel = $tab_ColorModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ColorPaletteCollectionModel
	var $tab_ColorPaletteCollectionModel = function(parent) {
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('colorPalettes'.toString()));
	};
	$tab_ColorPaletteCollectionModel.__typeName = 'tab.ColorPaletteCollectionModel';
	global.tab.ColorPaletteCollectionModel = $tab_ColorPaletteCollectionModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommandController
	var $tab_CommandController = function(session, commonDialogProvider) {
		this.$commandHandler = null;
		this.$commonDialogProvider = null;
		this.$executingCommands = [];
		this.$waitingCommands = new $tab_$ClientCommandQueue();
		this.$transactor = new $tab_Transactor();
		this.$deferredServerResponseQueue = {};
		this.$invalidations = [];
		this.$deferredLayoutInfo = null;
		this.$waitIndicator = null;
		this.$worldCheckpoint = null;
		this.$shouldResetWorld = false;
		this.$session = null;
		this.$progressiveLoader = null;
		this.$getViewportFunc = null;
		this.$callOnProgLoadComplete = null;
		this.$postUpdateWorldActions = [];
		this.$deferredConnectionsCommandHandler = null;
		this.$bootstrapComplete = false;
		this.$delayedLocalUrlActions = [];
		this.$allContentReady = false;
		this.$cancelling = false;
		this.$1$OnUrlActionsResponseField = null;
		this.$1$OnInvalidationField = null;
		this.$1$TabChangeCompletedField = null;
		this.$1$NewLayoutIdField = null;
		this.$1$OnPrimaryBootstrapSuccessField = null;
		this.$1$DestroyViewField = null;
		this.$1$CommandQueueCompleteField = null;
		this.$1$UndoCommandField = null;
		this.$1$ModelsUpdatedField = null;
		this.$1$IntermediateUpdateField = null;
		this.$1$RemoteCommandFailureField = null;
		this.e2eAutomationTestHooks = null;
		this.processingRenderModeChange = false;
		this.processingStoryPointChange = false;
		this.$session = session;
		this.$commonDialogProvider = commonDialogProvider;
		window.window.onerror = ss.mkdel(this, this.$onGlobalError);
		this.$worldCheckpoint = new $tab_WorldCheckpointHolder(this.$commonDialogProvider);
		this.$waitIndicator = new $tab_$LegacySessionWaitHandler(this.$session);
		var baseSessionCommandHandler = new $tab_$BaseSessionCommandHandler(session);
		baseSessionCommandHandler.$installCommandThrottling$1('tabsrv'.toString(), 'render-tooltip-server'.toString(), $tab_CommandController.$defaultMinimumThrottleTime);
		var $t1 = new $tab_CommandThrottlerTarget();
		$t1.commandNamespace = 'tabdoc'.toString();
		$t1.commandName = 'highlight-items'.toString();
		var $t2 = new $tab_CommandThrottlerTarget();
		$t2.commandNamespace = 'tabdoc'.toString();
		$t2.commandName = 'clear-highlighting'.toString();
		var $t3 = new $tab_CommandThrottlerTarget();
		$t3.commandNamespace = 'tabdoc'.toString();
		$t3.commandName = 'highlight-items-by-pattern-match'.toString();
		var dataHighlighterCommandThrottlerTargets = [$t1, $t2, $t3];
		baseSessionCommandHandler.$installCommandThrottling(dataHighlighterCommandThrottlerTargets, $tab_CommandController.$defaultMinimumThrottleTime);
		this.$commandHandler = baseSessionCommandHandler;
		this.$commandHandler.add_commmandSucceeded(ss.mkdel(this, this.$handleRemoteCommandSuccess));
		this.$commandHandler.add_commandFailed(ss.mkdel(this, this.$handleRemoteCommandFailure));
		this.$deferredConnectionsCommandHandler = new $tab_DeferredConnectionsCommandHandler(commonDialogProvider);
		this.$initializeProgressiveLoader();
		this.e2eAutomationTestHooks = new $tab_$E2eAutomationTestHooks(this.$worldCheckpoint, ss.mkdel(this, function() {
			return ss.getKeyCount(this.$deferredServerResponseQueue);
		}), ss.mkdel(this, this.$isWaitingOnCommands));
		this.$allContentReady = false;
	};
	$tab_CommandController.__typeName = 'tab.CommandController';
	$tab_CommandController.add_sheetNameChanged = function CommandController$add_SheetNameChanged(value) {
		$tab_CommandController.$1$SheetNameChangedField = ss.delegateCombine($tab_CommandController.$1$SheetNameChangedField, value);
	};
	$tab_CommandController.remove_sheetNameChanged = function CommandController$remove_SheetNameChanged(value) {
		$tab_CommandController.$1$SheetNameChangedField = ss.delegateRemove($tab_CommandController.$1$SheetNameChangedField, value);
	};
	$tab_CommandController.get_hasInstance = function CommandController$get_HasInstance() {
		return ss.isValue($tab_CommandController._instance);
	};
	$tab_CommandController.get_$log = function CommandController$get_Log() {
		return tab.Logger.lazyGetLogger($tab_CommandController);
	};
	$tab_CommandController.isAllContentReady = function CommandController$IsAllContentReady() {
		return (ss.isNullOrUndefined($tab_CommandController._instance) ? false : $tab_CommandController._instance.$allContentReady);
	};
	$tab_CommandController.create = function CommandController$Create(session, commonDialogProvider) {
		if (ss.isNullOrUndefined($tab_CommandController._instance)) {
			$tab_CommandController._instance = new $tab_CommandController(session, commonDialogProvider);
		}
		return $tab_CommandController._instance;
	};
	$tab_CommandController.clearInstance = function CommandController$ClearInstance() {
		$tab_CommandController._instance = null;
		window.window.onerror = null;
	};
	$tab_CommandController.get = function CommandController$Get() {
		if (!ss.isValue($tab_CommandController._instance)) {
			throw new ss.Exception('Attempted to use CommandController before creating it.');
		}
		return $tab_CommandController._instance;
	};
	$tab_CommandController.handleBootstrapException = function CommandController$HandleBootstrapException(e, commonDialogProvider) {
		$tab_CommandController.get_$log().error('Bootstrap error: %s', [e.toString()]);
		if ($tab_CommandController.$handledBootstrapException) {
			return;
		}
		var sb = new ss.StringBuilder();
		if (ss.isValue(e['name'])) {
			sb.append(e['name']).append(': ');
		}
		sb.append(e.get_message());
		if ('stack' in e) {
			sb.appendLine().append(e['stack']);
		}
		commonDialogProvider.showAlertDialog(tab.Strings.UnhandledExceptionMessage(tsConfig.sessionid, sb.toString()), tab.Strings.UnhandledExceptionTitle, true, null);
		$tab_CommandController.sendParentCompletedMessage();
		$tab_CommandController.$handledBootstrapException = true;
	};
	$tab_CommandController.sendParentCompletedMessage = function CommandController$SendParentCompletedMessage() {
		if ($tab_CommandController.$parentCompletedSent) {
			return;
		}
		$tab_CommandController.$parentCompletedSent = true;
		tab.BrowserSupport.doPostMessageWithContext('tableau.completed'.toString());
		$tab_CommandController.get_$log().debug('PostMessage ' + 'tableau.completed'.toString() + ' fired', []);
	};
	$tab_CommandController.$isCommandBlocking = function CommandController$IsCommandBlocking(command) {
		return command.get_isBlocking();
	};
	$tab_CommandController.SendCommand = function CommandController$SendCommand(newlyMadeClientCommand) {
		var singleton = $tab_CommandController.get();
		if (singleton.$cancelling && tab.FeatureFlags.isEnabled('CommandCancellation')) {
			ss.Debug.assert(false, 'Attempting to send new command during cancellation');
			return;
		}
		if ($tab_ProgressiveLoader.get_progressiveLoadEnabled()) {
			singleton.$abortLoadForCommandIfAppropriate(newlyMadeClientCommand);
		}
		singleton.$waitingCommands.$enqueue(newlyMadeClientCommand);
		singleton.$kickTheQueue();
	};
	$tab_CommandController.SendCommandWithDeferredReturn = function CommandController$SendCommandWithDeferredReturn(c, blocking) {
		var deferred = $.Deferred();
		var successHandler = $tab_CommandController.deferredSuccessHandler(Object).call(null, $.Deferred().done(function(pm) {
			deferred.resolve(pm);
		}));
		var failureHandler = $tab_CommandController.$deferredFailureHandler($.Deferred().fail(function(e) {
			deferred.reject();
		}));
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create(c, blocking, successHandler, failureHandler));
		return deferred.promise();
	};
	$tab_CommandController.deferredSuccessHandler = function(T) {
		return function CommandController$DeferredSuccessHandler(deferred) {
			return $tab_CommandController.DeferredSuccessHandler(deferred);
		};
	};
	$tab_CommandController.DeferredSuccessHandler = function CommandController$DeferredSuccessHandler(deferred) {
		return function(pm) {
			var controller = $tab_CommandController.get();
			var handleStateUpdated = null;
			handleStateUpdated = function() {
				controller.remove_commandQueueComplete(handleStateUpdated);
				deferred.resolve(pm);
			};
			controller.add_commandQueueComplete(handleStateUpdated);
		};
	};
	$tab_CommandController.$deferredFailureHandler = function CommandController$DeferredFailureHandler(deferred) {
		return $tab_CommandController.deferredFailureHandler(deferred);
	};
	$tab_CommandController.deferredFailureHandler = function CommandController$DeferredFailureHandler(deferred) {
		return function(e) {
			var controller = $tab_CommandController.get();
			var handleStateUpdated = null;
			handleStateUpdated = function() {
				controller.remove_commandQueueComplete(handleStateUpdated);
				deferred.reject(e);
			};
			controller.add_commandQueueComplete(handleStateUpdated);
		};
	};
	$tab_CommandController.$formatSessionMethod = function CommandController$FormatSessionMethod(method, session) {
		return tabBootstrap.BaseUrlFormatter.formatSessionMethod(method, session.get_id(), session.get_urlRoot());
	};
	$tab_CommandController.$appendErrorLinksToMessageIfPresent = function CommandController$AppendErrorLinksToMessageIfPresent(sessionId, message, err) {
		var links = [];
		if (!tab.MiscUtil.isNullOrEmpty$1(tsConfig.clientOpenBugUrl)) {
			var checkBugText = tsConfig.clientCheckBugText;
			var checkBugUrl = tsConfig.clientCheckBugUrl;
			var openBugText = tsConfig.clientOpenBugText;
			var openBugUrl = tsConfig.clientOpenBugUrl;
			var errorMessageToken = encodeURIComponent('{errorMessage}');
			var sessionIdToken = encodeURIComponent('{sessionId}');
			var stackToken = encodeURIComponent('{stack}');
			var urlToken = encodeURIComponent('{url}');
			if (!ss.isNullOrEmptyString(checkBugText) && !ss.isNullOrEmptyString(checkBugUrl)) {
				var messageWithoutQuotes = ss.replaceAllString(ss.replaceAllString(ss.replaceAllString(message, '"', ''), "'", ''), ':', '');
				checkBugUrl = ss.replaceAllString(checkBugUrl, errorMessageToken, encodeURIComponent(messageWithoutQuotes));
				links.push({ url: checkBugUrl, displayText: checkBugText });
			}
			if (!ss.isNullOrEmptyString(openBugText) && !ss.isNullOrEmptyString(openBugUrl)) {
				var stack = 'search splunk for stack.';
				try {
					stack = err.stack;
					stack = stack.substr(0, 400);
				}
				catch ($t1) {
				}
				openBugUrl = ss.replaceAllString(openBugUrl, errorMessageToken, encodeURIComponent(ss.replaceAllString(message, ':', '')));
				openBugUrl = ss.replaceAllString(openBugUrl, sessionIdToken, encodeURIComponent(sessionId));
				openBugUrl = ss.replaceAllString(openBugUrl, stackToken, encodeURIComponent(stack));
				var loc = ((ss.isValue(window.parent) && ss.isValue(window.parent.location)) ? window.parent.location : window.location);
				openBugUrl = ss.replaceAllString(openBugUrl, urlToken, encodeURIComponent(loc.href));
				openBugUrl = ss.replaceAllString(ss.replaceAllString(openBugUrl, '"', ''), "'", '');
				links.push({ url: openBugUrl, displayText: openBugText });
			}
		}
		return links;
	};
	$tab_CommandController.$logClientFullyLoaded = function CommandController$LogClientFullyLoaded() {
		var parameters = {};
		parameters['t'] = tabBootstrap.MetricsController.getTiming();
		parameters['d'] = 'CLNTLD'.toString();
		var evt = new tabBootstrap.MetricsEvent('gen', 2, parameters);
		tabBootstrap.MetricsController.logEvent(evt);
	};
	$tab_CommandController.$getStoryPointIdFromUpdate = function CommandController$GetStoryPointIdFromUpdate(appModel) {
		var InvalidStoryId = 0;
		if (ss.isNullOrUndefined(appModel) || ss.isNullOrUndefined(appModel.workbookPresModel) || ss.isNullOrUndefined(appModel.workbookPresModel.dashboardPresModel)) {
			return null;
		}
		if (!appModel.workbookPresModel.dashboardPresModel.isStory) {
			return InvalidStoryId;
		}
		var zones = appModel.workbookPresModel.dashboardPresModel.zones;
		var $t1 = _.keys(zones);
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var key = $t1[$t2];
			var zonePM = zones[key];
			if (ss.isNullOrUndefined(zonePM)) {
				continue;
			}
			var flipboardPM = $tab_ZoneModel.getContent(zonePM, 'flipboard');
			if (ss.isValue(flipboardPM)) {
				return flipboardPM.activeStoryPointId;
			}
		}
		return null;
	};
	$tab_CommandController.$getSheetNameFromUpdate = function CommandController$GetSheetNameFromUpdate(appModel) {
		if (ss.isNullOrUndefined(appModel) || ss.isNullOrUndefined(appModel.workbookPresModel) || ss.isNullOrUndefined(appModel.workbookPresModel.dashboardPresModel) || ss.isNullOrUndefined(appModel.workbookPresModel.dashboardPresModel.sheetPath)) {
			return '';
		}
		return appModel.workbookPresModel.dashboardPresModel.sheetPath.sheetName;
	};
	global.tab.CommandController = $tab_CommandController;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommandControllerTelemetry
	var $tab_CommandControllerTelemetry = function() {
	};
	$tab_CommandControllerTelemetry.__typeName = 'tab.CommandControllerTelemetry';
	$tab_CommandControllerTelemetry.$bootstrapCompleteTelemetry = function CommandControllerTelemetry$BootstrapCompleteTelemetry() {
		if ($tab_OnlineAnalyticsClient.get_telemetryEnabled() && tab.FeatureFlags.isEnabled('WebAuthoringOnlineTelemetry')) {
			_.defer(function() {
				var screen = window.screen;
				var worksheetInfo = $tab_ModelUtils.getSheetInfoPresModel($tab_ApplicationModel.get_instance(), tsConfig.current_sheet_name);
				var bootstrapPropertyNameValuePairs = ['Authoring', tsConfig.is_authoring, 'Embedded', tsConfig.embedded, 'HighDpi', tsConfig.highDpi, 'Mobile', tsConfig.is_mobile, 'MobileApp', tsConfig.is_mobile_app, 'MobileDevice', tsConfig.is_mobile_device, 'Version', tsConfig.version, 'LocalRender', $tab_ApplicationModel.get_instance().get_isLocalRenderMode(), 'Android', tab.BrowserSupport.get_isAndroid(), 'Chrome', tab.BrowserSupport.get_isChrome(), 'ChromeVersion', tab.BrowserSupport.get_googleChromeVersion(), 'DevicePixelRatio', tab.BrowserSupport.get_devicePixelRatio(), 'Edge', tab.BrowserSupport.get_isEdge(), 'Firefox', tab.BrowserSupport.get_isFF(), 'Geolocation', tab.BrowserSupport.get_isGeolocationSupported(), 'IE', tab.BrowserSupport.get_isIE(), 'IEVersion', tab.BrowserSupport.get_browserVersion(), 'IOS', tab.BrowserSupport.get_isIos(), 'IOSVersion', tab.BrowserSupport.get_iosVersion(), 'Ipad', tab.BrowserSupport.get_isIpad(), 'Mac', tab.BrowserSupport.get_isMac(), 'Opera', tab.BrowserSupport.get_isOpera(), 'Safari', tab.BrowserSupport.get_isSafari(), 'SafariVersion', tab.BrowserSupport.get_safariVersion(), 'Touch', tab.BrowserSupport.isTouch, 'Windows', tab.BrowserSupport.get_isWindows(), 'EmbedMode', tabBootstrap.Utility.get_embedMode(), 'ScreenWidth', screen.width, 'ScreenHeight', screen.height, 'Dashboard', worksheetInfo.isDashboard, 'Published', worksheetInfo.isPublished, 'Story', ss.isValue(worksheetInfo.isStory) && worksheetInfo.isStory, 'Worksheets', (ss.isValue(worksheetInfo.namesOfSubsheets) ? worksheetInfo.namesOfSubsheets.length : 0), 'Tabs', (_.isArray(tsConfig.visible_sheets) ? tsConfig.visible_sheets.length : 0)];
				$tab_OnlineAnalyticsClient.logEvent('Bootstrap', bootstrapPropertyNameValuePairs);
				$tab_CommandControllerTelemetry.$bootstrapEvents.push(ss.mkdict(bootstrapPropertyNameValuePairs));
				$(window).data('Bootstrap', $tab_CommandControllerTelemetry.$bootstrapEvents);
			});
		}
	};
	global.tab.CommandControllerTelemetry = $tab_CommandControllerTelemetry;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommandExecutionResult
	var $tab_CommandExecutionResult = function(succeeded, error) {
		this.succeeded = false;
		this.error = null;
		this.succeeded = succeeded;
		ss.Debug.assert((succeeded ? ss.isNullOrUndefined(error) : true), 'When command succeeded, no exception should be passed');
		this.error = error;
	};
	$tab_CommandExecutionResult.__typeName = 'tab.CommandExecutionResult';
	global.tab.CommandExecutionResult = $tab_CommandExecutionResult;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommandInterceptorResult
	var $tab_CommandInterceptorResult = function() {
	};
	$tab_CommandInterceptorResult.__typeName = 'tab.CommandInterceptorResult';
	global.tab.CommandInterceptorResult = $tab_CommandInterceptorResult;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommandItemBasedUbertipButtonModel
	var $tab_CommandItemBasedUbertipButtonModel = function() {
		$tab_UbertipButtonModel.call(this);
	};
	$tab_CommandItemBasedUbertipButtonModel.__typeName = 'tab.CommandItemBasedUbertipButtonModel';
	global.tab.CommandItemBasedUbertipButtonModel = $tab_CommandItemBasedUbertipButtonModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommandItemWrapper
	var $tab_CommandItemWrapper = function(itemModel) {
		this.$item = null;
		if (ss.isValue(itemModel)) {
			this.$item = itemModel;
		}
		else {
			this.$item = {};
			this.set_commandsType('item');
		}
	};
	$tab_CommandItemWrapper.__typeName = 'tab.CommandItemWrapper';
	$tab_CommandItemWrapper.create = function CommandItemWrapper$Create(item) {
		if (!ss.isValue(item)) {
			return null;
		}
		var command = item['command'.toString()];
		var actualCommand = $tab_CommandSerializer.deserialize(command);
		if (ss.isValue(actualCommand) && $tab_WebCommandRegistry.hasCommand(actualCommand.commandName)) {
			return new $tab_WebCommandItemWrapper.$ctor1(item);
		}
		return new $tab_CommandItemWrapper(item);
	};
	global.tab.CommandItemWrapper = $tab_CommandItemWrapper;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommandModel
	var $tab_CommandModel = function() {
		this.command = null;
		this.description = null;
		this.imageRes = null;
		this.status = 'enabled';
		this.$1$CommandTypeField = 0;
		this.$1$NameField = null;
	};
	$tab_CommandModel.__typeName = 'tab.CommandModel';
	global.tab.CommandModel = $tab_CommandModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommandModelBasedUbertipButtonModel
	var $tab_CommandModelBasedUbertipButtonModel = function() {
		$tab_UbertipButtonModel.call(this);
	};
	$tab_CommandModelBasedUbertipButtonModel.__typeName = 'tab.CommandModelBasedUbertipButtonModel';
	global.tab.CommandModelBasedUbertipButtonModel = $tab_CommandModelBasedUbertipButtonModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommandPermission
	var $tab_CommandPermission = function(availableTypes) {
		this.$availableCommands = null;
		this.$availableCommands = {};
		var $t1 = ss.getEnumerator(availableTypes);
		try {
			while ($t1.moveNext()) {
				var availableType = $t1.current();
				this.$availableCommands[availableType] = $tab_CommandPermission.$permissionGranted;
			}
		}
		finally {
			$t1.dispose();
		}
	};
	$tab_CommandPermission.__typeName = 'tab.CommandPermission';
	global.tab.CommandPermission = $tab_CommandPermission;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommandRecord
	var $tab_CommandRecord = function(remoteCommand, successCallback, errorCallback) {
		this.$command = null;
		this.$successCallback = null;
		this.$errorCallback = null;
		this.$command = remoteCommand;
		this.$successCallback = successCallback;
		this.$errorCallback = errorCallback;
	};
	$tab_CommandRecord.__typeName = 'tab.CommandRecord';
	global.tab.CommandRecord = $tab_CommandRecord;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommandRedirectRegistry
	var $tab_CommandRedirectRegistry = function() {
	};
	$tab_CommandRedirectRegistry.__typeName = 'tab.CommandRedirectRegistry';
	$tab_CommandRedirectRegistry.checkpointRegistry = function CommandRedirectRegistry$CheckpointRegistry() {
		var toResore = $tab_CommandRedirectRegistry.$registry;
		$tab_CommandRedirectRegistry.$registry = $.extend(false, {}, toResore);
		return function() {
			$tab_CommandRedirectRegistry.$registry = toResore;
		};
	};
	$tab_CommandRedirectRegistry.registerHandler = function CommandRedirectRegistry$RegisterHandler(commandRedirectType, handler) {
		tab.Param.verifyValue(commandRedirectType, 'commandRedirectType');
		tab.Param.verifyValue(handler, 'handler');
		if (ss.isNullOrUndefined($tab_CommandRedirectRegistry.$registry)) {
			$tab_CommandRedirectRegistry.$registry = {};
		}
		$tab_CommandRedirectRegistry.$registry[commandRedirectType] = handler;
	};
	$tab_CommandRedirectRegistry.handleRedirect = function CommandRedirectRegistry$HandleRedirect(type, model) {
		if (ss.isNullOrUndefined($tab_CommandRedirectRegistry.$registry) || !ss.keyExists($tab_CommandRedirectRegistry.$registry, type)) {
			throw new ss.Exception('No command redirect registerd for type: ' + type);
		}
		var handler = $tab_CommandRedirectRegistry.$registry[type];
		return handler(model);
	};
	global.tab.CommandRedirectRegistry = $tab_CommandRedirectRegistry;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommandResponseEventArgs
	var $tab_CommandResponseEventArgs = function() {
		this.$2$ApplicationPresModelField = null;
		this.$2$WorldUpdateCommandField = null;
		this.$2$SheetChangedField = false;
		this.$2$RebuildTheWorldField = false;
		ss.EventArgs.call(this);
	};
	$tab_CommandResponseEventArgs.__typeName = 'tab.CommandResponseEventArgs';
	global.tab.CommandResponseEventArgs = $tab_CommandResponseEventArgs;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommandSerializer
	var $tab_CommandSerializer = function() {
	};
	$tab_CommandSerializer.__typeName = 'tab.CommandSerializer';
	$tab_CommandSerializer.get_$log = function CommandSerializer$get_Log() {
		return tab.Logger.lazyGetLogger($tab_CommandSerializer);
	};
	$tab_CommandSerializer.buildDocCommandName = function CommandSerializer$BuildDocCommandName(command) {
		return $tab_CommandSerializer.buildQualifiedCommandName('tabdoc'.toString(), command.toString());
	};
	$tab_CommandSerializer.buildQualifiedCommandName = function CommandSerializer$BuildQualifiedCommandName(commandNamespace, command) {
		return commandNamespace + ':' + command;
	};
	$tab_CommandSerializer.deserialize = function CommandSerializer$Deserialize(serializedCommand, cacheable) {
		var command;
		cacheable = cacheable || false;
		if (cacheable) {
			command = $tab_CommandSerializer.$deserializedCommandCache[serializedCommand];
			if (ss.isValue(command)) {
				return command;
			}
		}
		var commandRegex = new RegExp('^(\\w+):([\\w-]+)( ((.|\n)*))?$');
		var matches = commandRegex.exec(serializedCommand);
		if (ss.isNullOrUndefined(matches) || matches.length === 0) {
			$tab_CommandSerializer.get_$log().debug(tab.Strings.noLoc('Unable to parse command: %s'), [serializedCommand]);
			return null;
		}
		command = { commandNamespace: matches[1], commandName: matches[2] };
		$tab_CommandSerializer.$deserializeParams(command, matches[4]);
		if (cacheable) {
			$tab_CommandSerializer.$addCommandToCache(serializedCommand, command);
		}
		$tab_CommandSerializer.get_$log().debug('Deserialized a command: %s:%s params=%o', [command.commandNamespace, command.commandName, command.commandParams]);
		return command;
	};
	$tab_CommandSerializer.getCommandType = function CommandSerializer$GetCommandType(command) {
		if (ss.keyExists($tab_CommandSerializer.$typesByName, command.commandName)) {
			return $tab_CommandSerializer.$typesByName[command.commandName];
		}
		else {
			return null;
		}
	};
	$tab_CommandSerializer.$addCommandToCache = function CommandSerializer$AddCommandToCache(commandStr, deserializedCommand) {
		if ($tab_CommandSerializer.$deserializedCommandCacheKeys.length >= $tab_CommandSerializer.$commandCacheSize) {
			var purgedCommand = $tab_CommandSerializer.$deserializedCommandCacheKeys.shift();
			delete $tab_CommandSerializer.$deserializedCommandCache[purgedCommand];
		}
		$tab_CommandSerializer.$deserializedCommandCache[commandStr] = deserializedCommand;
		$tab_CommandSerializer.$deserializedCommandCacheKeys.push(commandStr);
	};
	$tab_CommandSerializer.$deserializeParams = function CommandSerializer$DeserializeParams(command, paramsString) {
		if (ss.isNullOrEmptyString(paramsString)) {
			$tab_CommandSerializer.get_$log().debug(tab.Strings.noLoc('Empty paramters'), []);
			return;
		}
		var sb = new ss.StringBuilder();
		var paramChars = new Array();
		for (var i = paramsString.length - 1; i >= 0; i--) {
			paramChars.push(paramsString.substr(i, 1));
		}
		while (paramChars.length > 0) {
			var paramName = $tab_CommandSerializer.$parseParamName(paramChars, sb);
			if (!ss.isValue(paramName)) {
				return;
			}
			var paramValue = $tab_CommandSerializer.$parseParamValue(paramChars, sb);
			if (ss.isNullOrUndefined(paramValue)) {
				return;
			}
			if (paramValue === '{}') {
				$tab_CommandSerializer.get_$log().debug(tab.Strings.noLoc('Skipping empty parameter value: %s=%s'), [paramName, paramValue]);
				continue;
			}
			if (ss.isNullOrUndefined(command.commandParams)) {
				command.commandParams = {};
			}
			command.commandParams[ss.unbox(paramName)] = paramValue;
		}
	};
	$tab_CommandSerializer.$parseParamName = function CommandSerializer$ParseParamName(paramString, sb) {
		sb.clear();
		var nextLetterIsCapital = false;
		while (paramString.length > 0) {
			var value = paramString.pop();
			switch (value) {
				case '=': {
					return sb.toString().trim();
				}
				case '-': {
					nextLetterIsCapital = true;
					break;
				}
				default: {
					if (nextLetterIsCapital) {
						sb.append(value.toUpperCase());
						nextLetterIsCapital = false;
					}
					else {
						sb.append(value);
					}
					break;
				}
			}
		}
		return null;
	};
	$tab_CommandSerializer.$parseParamValue = function CommandSerializer$ParseParamValue(paramString, sb) {
		sb.clear();
		var context = new Array();
		var safePeek = function() {
			return ((context.length > 0) ? ss.arrayPeekBack(context) : '');
		};
		var valIsString = paramString.length > 1 && ss.arrayPeekBack(paramString) === '"';
		while (paramString.length > 0) {
			var value = paramString.pop();
			var keepValue = true;
			switch (value) {
				case '\\': {
					if (valIsString) {
						if (safePeek() !== '\\') {
							context.push('\\');
							keepValue = false;
						}
						else {
							context.pop();
						}
					}
					break;
				}
				case '"': {
					if (safePeek() === '\\') {
						context.pop();
					}
					else if (safePeek() === '"') {
						context.pop();
						if (context.length === 0) {
							keepValue = false;
						}
					}
					else {
						if (context.length === 0) {
							keepValue = false;
						}
						context.push('"');
					}
					break;
				}
				case '[': {
					if (safePeek() === '"') {
						$tab_CommandSerializer.get_$log().debug(tab.Strings.noLoc('Ignoring [ inside a string'), []);
					}
					else {
						context.push('[');
					}
					break;
				}
				case ']': {
					if (safePeek() === '"') {
						$tab_CommandSerializer.get_$log().debug(tab.Strings.noLoc('Ignoring ] inside a string'), []);
					}
					else if (safePeek() !== '[') {
						$tab_CommandSerializer.get_$log().debug(tab.Strings.noLoc('Mismatched ]'), []);
					}
					else {
						context.pop();
					}
					break;
				}
				case '{': {
					if (safePeek() === '"') {
						$tab_CommandSerializer.get_$log().debug(tab.Strings.noLoc('Ignoring { inside a string'), []);
					}
					else {
						context.push('{');
					}
					break;
				}
				case '}': {
					if (safePeek() === '"') {
						$tab_CommandSerializer.get_$log().debug(tab.Strings.noLoc('Ignoring } inside a string'), []);
					}
					else if (safePeek() !== '{') {
						$tab_CommandSerializer.get_$log().debug(tab.Strings.noLoc('Mismatched }'), []);
					}
					else {
						context.pop();
					}
					break;
				}
				default: {
					if (safePeek() === '\\') {
						context.pop();
					}
					break;
				}
			}
			if (keepValue) {
				sb.append(value);
			}
			if (context.length === 0) {
				return sb.toString();
			}
		}
		return null;
	};
	global.tab.CommandSerializer = $tab_CommandSerializer;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Models.CommandsModel
	var $tab_CommandsModel = function(parent) {
		this.$shouldUpdate = true;
		this.$2$CommandsChangedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('commands'.toString()));
	};
	$tab_CommandsModel.__typeName = 'tab.CommandsModel';
	global.tab.CommandsModel = $tab_CommandsModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommandsPresModelWrapper
	var $tab_CommandsPresModelWrapper = function() {
		$tab_CommandsPresModelWrapper.$ctor1.call(this, {});
	};
	$tab_CommandsPresModelWrapper.__typeName = 'tab.CommandsPresModelWrapper';
	$tab_CommandsPresModelWrapper.$ctor1 = function(commandsPM) {
		this.$model = null;
		this.$model = commandsPM;
		if (ss.isNullOrUndefined(this.get_commandItems())) {
			this.set_commandItems([]);
		}
	};
	$tab_CommandsPresModelWrapper.create = function CommandsPresModelWrapper$Create(pm) {
		if (!ss.isValue(pm)) {
			return null;
		}
		return new $tab_CommandsPresModelWrapper.$ctor1(pm);
	};
	global.tab.CommandsPresModelWrapper = $tab_CommandsPresModelWrapper;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommandThrottlerTarget
	var $tab_CommandThrottlerTarget = function() {
		this.commandNamespace = '';
		this.commandName = '';
	};
	$tab_CommandThrottlerTarget.__typeName = 'tab.CommandThrottlerTarget';
	global.tab.CommandThrottlerTarget = $tab_CommandThrottlerTarget;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommandUtils
	var $tab_CommandUtils = function() {
	};
	$tab_CommandUtils.__typeName = 'tab.CommandUtils';
	$tab_CommandUtils.newCommand = function CommandUtils$NewCommand(commandName, cmdParams) {
		var c = { commandName: commandName, commandNamespace: 'tabdoc' };
		if (ss.isValue(cmdParams)) {
			c.commandParams = cmdParams;
		}
		return c;
	};
	$tab_CommandUtils.newCommand$1 = function CommandUtils$NewCommand(commandName, cmdParams) {
		var c = { commandName: commandName, commandNamespace: 'tabsrv' };
		if (ss.isValue(cmdParams)) {
			c.commandParams = cmdParams;
		}
		return c;
	};
	$tab_CommandUtils.addVisualIdToCommand = function CommandUtils$AddVisualIdToCommand(cmdParams, visualId) {
		if (tab.MiscUtil.isNullOrEmpty$1(visualId.storyboard)) {
			cmdParams['worksheet'] = visualId.worksheet;
			if (ss.isValue(visualId.dashboard) && visualId.dashboard.toString().length > 0) {
				cmdParams['dashboard'] = visualId.dashboard;
			}
		}
		else {
			cmdParams['visualIdPresModel'] = JSON.stringify(visualId);
		}
	};
	$tab_CommandUtils.addStoryPointToCommand = function CommandUtils$AddStoryPointToCommand(cmdParams, sheetPath) {
		if (ss.isValue(sheetPath.storyboard)) {
			cmdParams['storyboard'] = sheetPath.storyboard;
			cmdParams['flipboardZoneId'] = sheetPath.flipboardZoneId.toString();
			cmdParams['storyPointId'] = sheetPath.storyPointId.toString();
		}
	};
	$tab_CommandUtils.duplicateCommand = function CommandUtils$DuplicateCommand(command) {
		var copy = {};
		$.extend(true, copy, command);
		return copy;
	};
	$tab_CommandUtils.createCommandRedirectSuccessHandler = function CommandUtils$CreateCommandRedirectSuccessHandler(deferred) {
		deferred = deferred || $.Deferred();
		var commandDeferred = $.Deferred();
		commandDeferred.promise().pipe(function(pm) {
			if (_.isObject(pm) && 'commandRedirectType'.toString() in pm) {
				var action = pm['commandRedirectType'.toString()];
				var redirectDeferred = $tab_CommandRedirectRegistry.handleRedirect(action, pm);
				redirectDeferred.pipe(function() {
					deferred.resolve(pm);
					return pm;
				}, function() {
					deferred.reject();
					return pm;
				});
			}
			else {
				deferred.resolve(pm);
			}
			return pm;
		}, function() {
			deferred.reject();
			return null;
		});
		return $tab_CommandController.deferredSuccessHandler(Object).call(null, commandDeferred);
	};
	$tab_CommandUtils.executeSimpleCommand$1 = function(T) {
		return function CommandUtils$ExecuteSimpleCommand(simpleCommand, uiBlocking) {
			var deferred = $.Deferred();
			var redirectDeferred = $.Deferred().done([function(pm) {
				deferred.resolve(ss.cast(pm, T));
			}]).fail([function(pm1) {
				deferred.reject.apply(deferred, null);
			}]);
			$tab_ServerCommands.executeServerCommand($tab_CommandSerializer.deserialize($tab_SimpleCommandsPresModelWrapper.create(simpleCommand).get_simpleCommand()), uiBlocking, $tab_CommandUtils.createCommandRedirectSuccessHandler(redirectDeferred), function(e) {
				deferred.reject.apply(deferred, null);
			});
			return deferred;
		};
	};
	$tab_CommandUtils.executeSimpleCommand = function CommandUtils$ExecuteSimpleCommand(simpleCommand, uiBlocking) {
		return $tab_CommandUtils.executeSimpleCommand$1(Object).call(null, simpleCommand, uiBlocking);
	};
	global.tab.CommandUtils = $tab_CommandUtils;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommentingServer
	var $tab_CommentingServer = function(createVizportalRequest, baseSession) {
		this.$createVizportalRequest = null;
		this.$baseSession = null;
		this.$createVizportalRequest = createVizportalRequest;
		this.$baseSession = baseSession;
	};
	$tab_CommentingServer.__typeName = 'tab.CommentingServer';
	global.tab.CommentingServer = $tab_CommentingServer;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CompoundTableCalcModel
	var $tab_CompoundTableCalcModel = function(parent) {
		this.$primaryTableCalcModel = null;
		this.$secondaryTableCalcModel = null;
		this.$2$CompoundTableCalcUpdatedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('compoundTableCalculationPresModel'.toString()));
		this.$primaryTableCalcModel = new $tab_TableCalcModel(this);
		this.$secondaryTableCalcModel = new $tab_TableCalcModel(this);
		this.$secondaryTableCalcModel.get_tableCalcIdentifier().update({ calcNestingLevel: 'secondary', fn: '' });
	};
	$tab_CompoundTableCalcModel.__typeName = 'tab.CompoundTableCalcModel';
	$tab_CompoundTableCalcModel.$getPresModelTableCalc = function CompoundTableCalcModel$GetPresModelTableCalc(thePresModel, index) {
		if (ss.isValue(thePresModel) && ss.isValue(thePresModel.tableCalculationPresModels) && thePresModel.tableCalculationPresModels.length > index) {
			return thePresModel.tableCalculationPresModels[index];
		}
		return null;
	};
	global.tab.CompoundTableCalcModel = $tab_CompoundTableCalcModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CreateDashboardTitleRichTextEditorCmd
	var $tab_CreateDashboardTitleRichTextEditorCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_CreateDashboardTitleRichTextEditorCmd$Response]).call(this);
	};
	$tab_CreateDashboardTitleRichTextEditorCmd.__typeName = 'tab.CreateDashboardTitleRichTextEditorCmd';
	global.tab.CreateDashboardTitleRichTextEditorCmd = $tab_CreateDashboardTitleRichTextEditorCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CreateDashboardTitleRichTextEditorCmd.Response
	var $tab_CreateDashboardTitleRichTextEditorCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_CreateDashboardTitleRichTextEditorCmd$Response.__typeName = 'tab.CreateDashboardTitleRichTextEditorCmd$Response';
	global.tab.CreateDashboardTitleRichTextEditorCmd$Response = $tab_CreateDashboardTitleRichTextEditorCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CreateDataSourceFromFileUploadCmd
	var $tab_CreateDataSourceFromFileUploadCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_CreateDataSourceFromFileUploadCmd$Response]).call(this);
	};
	$tab_CreateDataSourceFromFileUploadCmd.__typeName = 'tab.CreateDataSourceFromFileUploadCmd';
	global.tab.CreateDataSourceFromFileUploadCmd = $tab_CreateDataSourceFromFileUploadCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CreateDataSourceFromFileUploadCmd.Response
	var $tab_CreateDataSourceFromFileUploadCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_CreateDataSourceFromFileUploadCmd$Response.__typeName = 'tab.CreateDataSourceFromFileUploadCmd$Response';
	global.tab.CreateDataSourceFromFileUploadCmd$Response = $tab_CreateDataSourceFromFileUploadCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CreateTextObjectRichTextEditorCmd
	var $tab_CreateTextObjectRichTextEditorCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_CreateTextObjectRichTextEditorCmd$Response]).call(this);
	};
	$tab_CreateTextObjectRichTextEditorCmd.__typeName = 'tab.CreateTextObjectRichTextEditorCmd';
	global.tab.CreateTextObjectRichTextEditorCmd = $tab_CreateTextObjectRichTextEditorCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CreateTextObjectRichTextEditorCmd.Response
	var $tab_CreateTextObjectRichTextEditorCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_CreateTextObjectRichTextEditorCmd$Response.__typeName = 'tab.CreateTextObjectRichTextEditorCmd$Response';
	global.tab.CreateTextObjectRichTextEditorCmd$Response = $tab_CreateTextObjectRichTextEditorCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CubeDimensionModel
	var $tab_CubeDimensionModel = function(parent) {
		this.$hierarchies = null;
		this.$folders = null;
		this.$attributes = null;
		$tab_FieldModel.call(this, parent);
	};
	$tab_CubeDimensionModel.__typeName = 'tab.CubeDimensionModel';
	global.tab.CubeDimensionModel = $tab_CubeDimensionModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CubeFolderModel
	var $tab_CubeFolderModel = function(parent) {
		this.$hierarchies = null;
		this.$columns = null;
		$tab_FieldModel.call(this, parent);
	};
	$tab_CubeFolderModel.__typeName = 'tab.CubeFolderModel';
	global.tab.CubeFolderModel = $tab_CubeFolderModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CubeHierarchyModel
	var $tab_CubeHierarchyModel = function(parent) {
		this.$levels = null;
		$tab_FieldModel.call(this, parent);
	};
	$tab_CubeHierarchyModel.__typeName = 'tab.CubeHierarchyModel';
	global.tab.CubeHierarchyModel = $tab_CubeHierarchyModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CumulativeTableCalcModel
	var $tab_CumulativeTableCalcModel = function(parent) {
		this.$3$ModelUpdatedField = null;
		$tab_TypeSpecificTableCalcModel.call(this, parent, new $tab_PresModelPathItem('cumulativeTableCalcPresModel'.toString()));
	};
	$tab_CumulativeTableCalcModel.__typeName = 'tab.CumulativeTableCalcModel';
	global.tab.CumulativeTableCalcModel = $tab_CumulativeTableCalcModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CustomizedViewSession
	var $tab_CustomizedViewSession = function(baseSession) {
		this.$baseSession = null;
		this.$baseSession = baseSession;
	};
	$tab_CustomizedViewSession.__typeName = 'tab.CustomizedViewSession';
	$tab_CustomizedViewSession.buildUrl = function CustomizedViewSession$BuildUrl(cv, removeQueryParams) {
		var vizUriModel = $tab_VizUriModel.createForViewingSheet(tsConfig.repositoryUrl);
		if (ss.isValue(cv)) {
			vizUriModel.updateForCustomizedView(cv);
		}
		else {
			vizUriModel.set_originalView(true);
		}
		vizUriModel.removeHash();
		if (removeQueryParams) {
			vizUriModel.removeAllQueryParams();
		}
		return vizUriModel.get_absoluteUri();
	};
	$tab_CustomizedViewSession.$genericErrorCallback = function CustomizedViewSession$GenericErrorCallback(handler) {
		var onError = function(xhr, status, e) {
			$tab_CustomizedViewSession.$log.debug('Error in request: %o', [e]);
			if (!ss.isValue(handler)) {
				return;
			}
			var msg = $tab_CustomizedViewSession.$getMessageFromResponse(xhr);
			handler((ss.isValue(msg) ? msg : (e.toString() || '')));
		};
		return onError;
	};
	$tab_CustomizedViewSession.$getMessageFromResponse = function CustomizedViewSession$GetMessageFromResponse(xhr) {
		if (ss.isValue(xhr.responseText)) {
			try {
				var o = JSON.parse(xhr.responseText);
				if ('msg' in o) {
					return o['msg'];
				}
			}
			catch ($t1) {
				var e = ss.Exception.wrap($t1);
				$tab_CustomizedViewSession.$log.debug('Error parsing response as JSON: %o', [e]);
			}
		}
		return null;
	};
	global.tab.CustomizedViewSession = $tab_CustomizedViewSession;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CustomTableCalcModel
	var $tab_CustomTableCalcModel = function(parent) {
		this.$3$ModelUpdatedField = null;
		this.$3$ReferenceModelField = null;
		$tab_TypeSpecificTableCalcModel.call(this, parent, new $tab_PresModelPathItem('customTableCalcPresModel'.toString()));
		this.set_referenceModel(new $tab_TableCalcReferenceModel(this));
	};
	$tab_CustomTableCalcModel.__typeName = 'tab.CustomTableCalcModel';
	global.tab.CustomTableCalcModel = $tab_CustomTableCalcModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DashboardCommands
	var $tab_DashboardCommands = function() {
	};
	$tab_DashboardCommands.__typeName = 'tab.DashboardCommands';
	$tab_DashboardCommands.dropSheetOnDashboard = function DashboardCommands$DropSheetOnDashboard(sheet, dropPos, addAsFloating) {
		var c = $tab_CommandUtils.newCommand('drop-on-dashboard', null);
		c.commandParams = {};
		c.commandParams['worksheet'] = sheet;
		c.commandParams['addAsFloating'] = ss.coalesce(addAsFloating, false);
		c.commandParams['dashboard'] = tsConfig.current_sheet_name;
		c.commandParams['zoneType'] = 'viz';
		c.commandParams['dropLocation'] = { x: dropPos.x | 0, y: dropPos.y | 0 };
		return $tab_CommandController.SendCommandWithDeferredReturn(c, 'immediately');
	};
	$tab_DashboardCommands.dropNewZoneObjectOnDashboard = function DashboardCommands$DropNewZoneObjectOnDashboard(zoneType, isHorizontal, addAsFloating, dropPos, formattedText, zoneParam) {
		var c = $tab_CommandUtils.newCommand('drop-on-dashboard', null);
		c.commandParams = {};
		c.commandParams['addAsFloating'] = ss.coalesce(addAsFloating, false);
		c.commandParams['dashboard'] = tsConfig.current_sheet_name;
		c.commandParams['zoneType'] = zoneType;
		c.commandParams['isHorizontal'] = isHorizontal;
		c.commandParams['dropLocation'] = { x: dropPos.x | 0, y: dropPos.y | 0 };
		if (ss.isValue(zoneParam)) {
			c.commandParams['zoneParam'] = zoneParam;
		}
		if (ss.isValue(formattedText)) {
			c.commandParams['formattedText'] = formattedText;
		}
		return $tab_CommandController.SendCommandWithDeferredReturn(c, 'immediately');
	};
	$tab_DashboardCommands.setDashboardDeviceLayout = function DashboardCommands$SetDashboardDeviceLayout(deviceLayout) {
		var $t1 = new $tab_SetDashboardCurrentLayoutCmd();
		$t1.cmdParams['dashboard'] = tsConfig.current_sheet_name;
		$t1.cmdParams['dashboardDeviceLayout'] = deviceLayout;
		$t1.cmdParams['allowPreviewSizeChange'] = true;
		$t1.set_uiBlocking('immediately');
		$t1.invoke();
	};
	$tab_DashboardCommands.getSheetDragDropTargets = function DashboardCommands$GetSheetDragDropTargets(movingZoneID) {
		var $t1 = new $tab_GetDashboardDragDropCmd();
		$t1.cmdParams['dashboard'] = tsConfig.current_sheet_name;
		$t1.set_uiBlocking('none');
		var cmd = $t1;
		if (ss.isValue(movingZoneID)) {
			cmd.cmdParams['zoneId'] = ss.unbox(movingZoneID) | 0;
		}
		return cmd.invoke();
	};
	$tab_DashboardCommands.getThumbnailImage = function DashboardCommands$GetThumbnailImage(sheetName) {
		var $t1 = new $tab_GetThumbnailCmd();
		$t1.cmdParams['worksheet'] = sheetName;
		$t1.set_uiBlocking('none');
		var cmd = $t1;
		return cmd.invoke();
	};
	$tab_DashboardCommands.addNewObjectToDashboard = function DashboardCommands$AddNewObjectToDashboard(zoneType, isHorizontal, addAsFloating, formattedText, zoneParam) {
		var c = $tab_CommandUtils.newCommand('add-object-to-dashboard', null);
		c.commandParams = {};
		c.commandParams['dashboard'] = tsConfig.current_sheet_name;
		c.commandParams['zoneType'] = zoneType;
		c.commandParams['isHorizontal'] = isHorizontal;
		c.commandParams['addAsFloating'] = ss.coalesce(addAsFloating, false);
		if (ss.isValue(zoneParam)) {
			c.commandParams['zoneParam'] = zoneParam;
		}
		if (ss.isValue(formattedText)) {
			c.commandParams['formattedText'] = formattedText;
		}
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create(c, 'immediately'));
	};
	$tab_DashboardCommands.addSheetToDashboard = function DashboardCommands$AddSheetToDashboard(worksheetName, addAsFloating) {
		var c = $tab_CommandUtils.newCommand('add-sheet-to-dashboard', null);
		c.commandParams = {};
		c.commandParams['worksheet'] = worksheetName;
		c.commandParams['addAsFloating'] = ss.coalesce(addAsFloating, false);
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create(c, 'immediately'));
	};
	$tab_DashboardCommands.getCurrentSheetSizeConstraints = function DashboardCommands$GetCurrentSheetSizeConstraints() {
		var result = $.Deferred();
		if (tsConfig.current_sheet_type === 'worksheet') {
			result.resolve({ sizeMode: 'size-mode-auto', dashboardSizingMode: 'automatic' });
		}
		else {
			var $t1 = new $tab_GetDashboardSizingCmd();
			$t1.cmdParams['dashboard'] = tsConfig.current_sheet_name;
			$t1.set_uiBlocking('none');
			$t1.invoke().pipe(function(r) {
				return result.resolve(r.$$cmdParams['dashboardSizePresModel']);
			}, function(o) {
				return result.reject();
			});
		}
		return result.promise();
	};
	$tab_DashboardCommands.setDashboardSizeFixed = function DashboardCommands$SetDashboardSizeFixed(dashboard, changedDimension, width, height, model) {
		var localWork = function(t) {
			var sizeModel = t.makeMutablePresModel(model, false);
			var newSize = { dashboardSizingMode: 'fixed', h: height, w: width };
			sizeModel.dashboardSizePresModel = newSize;
		};
		$tab_DashboardCommands.$setDashboardSizeWithValidation(dashboard, changedDimension, 'fixed', width, height, width, height, localWork);
	};
	$tab_DashboardCommands.setDashboardSizeAutomatic = function DashboardCommands$SetDashboardSizeAutomatic(dashboard, model) {
		var localWork = function(t) {
			var sizeModel = t.makeMutablePresModel(model, false);
			var newSize = { dashboardSizingMode: 'automatic' };
			sizeModel.dashboardSizePresModel = newSize;
		};
		$tab_DashboardCommands.$setDashboardSizeWithValidation(dashboard, 'no', 'automatic', 0, 0, 0, 0, localWork);
	};
	$tab_DashboardCommands.setDashboardSizeRange = function DashboardCommands$SetDashboardSizeRange(dashboard, changedDimension, minWidth, minHeight, maxWidth, maxHeight, model) {
		var localWork = function(t) {
			var sizeModel = t.makeMutablePresModel(model, false);
			var newSize = { dashboardSizingMode: 'range', maxHeight: ss.coalesce(maxHeight, 0), maxWidth: ss.coalesce(maxWidth, 0), minHeight: ss.coalesce(minHeight, 0), minWidth: ss.coalesce(minWidth, 0) };
			sizeModel.dashboardSizePresModel = newSize;
		};
		$tab_DashboardCommands.$setDashboardSizeWithValidation(dashboard, changedDimension, 'range', ss.coalesce(minWidth, 0), ss.coalesce(minHeight, 0), ss.coalesce(maxWidth, 0), ss.coalesce(maxHeight, 0), localWork);
	};
	$tab_DashboardCommands.$setDashboardSizeWithValidation = function DashboardCommands$SetDashboardSizeWithValidation(dashboard, changedDimension, sizeMode, minWidth, minHeight, maxWidth, maxHeight, localWork) {
		var $t1 = new $tab_SetDashboardSizingWithValidationCmd();
		$t1.cmdParams['dashboardSizingDimension'] = changedDimension;
		$t1.cmdParams['dashboard'] = dashboard;
		$t1.cmdParams['minWidth'] = minWidth | 0;
		$t1.cmdParams['minHeight'] = minHeight | 0;
		$t1.cmdParams['maxWidth'] = maxWidth | 0;
		$t1.cmdParams['maxHeight'] = maxHeight | 0;
		$t1.cmdParams['dashboardSizingMode'] = sizeMode;
		$t1.set_localWork(localWork);
		$t1.set_uiBlocking('immediately');
		$t1.invoke();
	};
	$tab_DashboardCommands.showDashboardTitle = function DashboardCommands$ShowDashboardTitle(dashboard) {
		var $t1 = new $tab_ShowDashboardTitleCmd();
		$t1.cmdParams['dashboard'] = dashboard;
		$t1.set_uiBlocking('immediately');
		var cmd = $t1;
		cmd.invoke();
	};
	$tab_DashboardCommands.getUrlSubstitutionParameters = function DashboardCommands$GetUrlSubstitutionParameters() {
		var $t1 = new $tab_GetURLSubstitutionKeywordsCmd();
		$t1.cmdParams['dashboard'] = tsConfig.current_sheet_name;
		return $t1.invoke();
	};
	$tab_DashboardCommands.isWebZoneUrlValid = function DashboardCommands$IsWebZoneUrlValid(url) {
		var $t1 = new $tab_IsWebZoneUrlValidCmd();
		$t1.cmdParams['urlString'] = url;
		$t1.set_uiBlocking('immediately');
		return $t1.invoke();
	};
	global.tab.DashboardCommands = $tab_DashboardCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DashboardModel
	var $tab_DashboardModel = function(parent) {
		this.$viewSessions = {};
		this.$dashboardSizeControlModel = null;
		this.$readyZoneId = 0;
		this.$oldRenderMode = null;
		this.$storyContentDashboard = null;
		this.$zonePlaceholderColor = null;
		this.$portSize = null;
		this.$2$NewDashboardField = null;
		this.$2$ActiveZoneChangedField = null;
		this.$2$ReadyZoneChangedField = null;
		this.$2$RenderModeChangedField = null;
		this.$2$PortSizeChangedField = null;
		this.$2$SizeChangedField = null;
		this.$2$FormatsChangedField = null;
		this.$2$TitleVisibilityChangedField = null;
		this.$2$CurrentDeviceLayoutChangedField = null;
		this.$2$CurrentDeviceLayoutListChangedField = null;
		this.$2$DashboardNameChangedField = null;
		this.zonesModel = null;
		this.sheetListModel = null;
		this.layoutTreeModel = null;
		this.autoUpdate = false;
		this.invalid = false;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('dashboardPresModel'.toString()));
		this.invalid = false;
		this.zonesModel = new $tab_ZonesModel(this);
		this.$readyZoneId = 0;
	};
	$tab_DashboardModel.__typeName = 'tab.DashboardModel';
	$tab_DashboardModel.add_modifiedSheetsChanged = function DashboardModel$add_ModifiedSheetsChanged(value) {
		$tab_DashboardModel.$2$ModifiedSheetsChangedField = ss.delegateCombine($tab_DashboardModel.$2$ModifiedSheetsChangedField, value);
	};
	$tab_DashboardModel.remove_modifiedSheetsChanged = function DashboardModel$remove_ModifiedSheetsChanged(value) {
		$tab_DashboardModel.$2$ModifiedSheetsChangedField = ss.delegateRemove($tab_DashboardModel.$2$ModifiedSheetsChangedField, value);
	};
	$tab_DashboardModel.$getSheetsToBrushFromActions = function DashboardModel$GetSheetsToBrushFromActions(sheetNames, vizModelLookup) {
		var numSheets = sheetNames.length;
		var sheetsToBrush = new Set();
		for (var $t1 = 0; $t1 < sheetNames.length; $t1++) {
			var sheetName = sheetNames[$t1];
			var vizModel = vizModelLookup[sheetName];
			var actionsForSourceSheet = [];
			if (!vizModel.get_selectionsModel().tupleSelection.isEmpty || vizModel.get_selectionsModel().get_brushVizForNodeSelection()) {
				ss.arrayAddRange(actionsForSourceSheet, $tab_ActionUtils.getApplicableActions(sheetName, 'on-select', 'highlight'));
				ss.arrayAddRange(actionsForSourceSheet, $tab_ActionUtils.getApplicableActions(sheetName, 'explicitly', 'highlight'));
			}
			if (!vizModel.get_brushingsModel().tupleSelection.isEmpty) {
				ss.arrayAddRange(actionsForSourceSheet, $tab_ActionUtils.getApplicableActions(sheetName, 'on-hover', 'highlight'));
			}
			if (!tab.MiscUtil.isNullOrEmpty(actionsForSourceSheet)) {
				var targetSheetsToBrush = $tab_$SourceSheetWithHighlightAction.$getTargetSheetsToBrush(sheetName, actionsForSourceSheet, vizModel.get_vizDataModel());
				tab.SetUtilities.addAll(Object).call(null, sheetsToBrush, tab.SetUtilities.getValues(Object).call(null, targetSheetsToBrush));
				if (sheetsToBrush.size === numSheets) {
					return sheetsToBrush;
				}
			}
		}
		return sheetsToBrush;
	};
	$tab_DashboardModel.$fireModifiedSheetsChanged = function DashboardModel$FireModifiedSheetsChanged() {
		if (!ss.staticEquals($tab_DashboardModel.$2$ModifiedSheetsChangedField, null)) {
			$tab_DashboardModel.$2$ModifiedSheetsChangedField();
		}
	};
	global.tab.DashboardModel = $tab_DashboardModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DashboardNewObjectsModel
	var $tab_DashboardNewObjectsModel = function() {
		this.$addNewZoneAsFloating = false;
		$tab_Model.call(this, null, null);
		this.$addNewZoneAsFloating = false;
	};
	$tab_DashboardNewObjectsModel.__typeName = 'tab.DashboardNewObjectsModel';
	global.tab.DashboardNewObjectsModel = $tab_DashboardNewObjectsModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DashboardSizeControlModel
	var $tab_DashboardSizeControlModel = function(parent) {
		this.$2$SizeInfoUpdatedField = null;
		this.dashboardSizeModel = null;
		this.layoutInfoModel = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('dashboardSizeControl'.toString()));
	};
	$tab_DashboardSizeControlModel.__typeName = 'tab.DashboardSizeControlModel';
	global.tab.DashboardSizeControlModel = $tab_DashboardSizeControlModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DashboardSizeModel
	var $tab_DashboardSizeModel = function(parent) {
		this.$2$SizeUpdatedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('dashboardSizePresModel'.toString()));
	};
	$tab_DashboardSizeModel.__typeName = 'tab.DashboardSizeModel';
	global.tab.DashboardSizeModel = $tab_DashboardSizeModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DataAlert
	var $tab_DataAlert = function() {
		var $t1 = [];
		$t1.push($tab_UserFactory.currentUser());
		$tab_DataAlert.$ctor2.call(this, {}, {}, $t1);
	};
	$tab_DataAlert.__typeName = 'tab.DataAlert';
	$tab_DataAlert.$ctor2 = function(alertMeasurePresModel, alertConditionPresModel, recipients) {
		this.$threshold = null;
		this.$title = null;
		this.$notificationInterval = $tab_DataAlertNotificationInterval.daily;
		this.$measurePresModel = null;
		this.$conditionPresModel = null;
		this.$1$NotificationIntervalChangedField = null;
		this.$1$TitleChangedField = null;
		this.$1$MeasureChangedField = null;
		this.$1$ConditionChangedField = null;
		this.$1$RecipientsChangedField = null;
		this.$1$RecipientsField = null;
		this.$1$SelectionCaptionField = null;
		this.$1$ThresholdIsValidField = false;
		this.$1$AlertConditionMetField = false;
		this.$measurePresModel = alertMeasurePresModel;
		this.$conditionPresModel = alertConditionPresModel;
		this.set_recipients(recipients);
	};
	$tab_DataAlert.$ctor1 = function(dialogPresModel) {
		this.$threshold = null;
		this.$title = null;
		this.$notificationInterval = $tab_DataAlertNotificationInterval.daily;
		this.$measurePresModel = null;
		this.$conditionPresModel = null;
		this.$1$NotificationIntervalChangedField = null;
		this.$1$TitleChangedField = null;
		this.$1$MeasureChangedField = null;
		this.$1$ConditionChangedField = null;
		this.$1$RecipientsChangedField = null;
		this.$1$RecipientsField = null;
		this.$1$SelectionCaptionField = null;
		this.$1$ThresholdIsValidField = false;
		this.$1$AlertConditionMetField = false;
		this.set_selectionCaption(dialogPresModel.fieldName);
		this.set_measurePresModel(dialogPresModel.dataAlertMeasure);
		this.set_conditionPresModel({ dataAlertConditionOp: dialogPresModel.dataAlertConditionOp, dataAlertThresholdText: dialogPresModel.dataAlertThresholdText, dataType: dialogPresModel.dataType });
		this.set_threshold(dialogPresModel.dataAlertThresholdText);
		this.set_alertConditionMet(dialogPresModel.isDataAlertConditionMet);
		var $t1 = [];
		$t1.push($tab_UserFactory.currentUser());
		this.set_recipients($t1);
	};
	global.tab.DataAlert = $tab_DataAlert;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ClientCommands.DataAlertCommands
	var $tab_DataAlertCommands = function() {
	};
	$tab_DataAlertCommands.__typeName = 'tab.DataAlertCommands';
	$tab_DataAlertCommands.newDataAlert = function DataAlertCommands$NewDataAlert(onFailCallback) {
		(new $tab_StartNewDataAlertCmd()).invoke().fail(function() {
			tab.Logger.getLogger($tab_DataAlertCommands).error('Failed to fetch alert measures for selection', []);
			onFailCallback();
		});
	};
	$tab_DataAlertCommands.updateDataAlert = function DataAlertCommands$UpdateDataAlert(dataAlert) {
		var result = $.Deferred();
		if (dataAlert.get_thresholdIsValid()) {
			var $t1 = new $tab_UpdateDataAlertCmd();
			$t1.cmdParams['dataAlertThresholdText'] = dataAlert.get_conditionPresModel().dataAlertThresholdText;
			$t1.cmdParams['dataAlertConditionOp'] = dataAlert.get_conditionPresModel().dataAlertConditionOp;
			$t1.invoke().done(function(response) {
				result.resolve(response.$$cmdParams['isDataAlertConditionMet']);
			}).fail(function() {
				throw new ss.Exception('Failed to update reference line position and shading');
			});
		}
		else {
			result.resolve(dataAlert.get_alertConditionMet());
		}
		return result;
	};
	$tab_DataAlertCommands.closeDataAlertDialog = function DataAlertCommands$CloseDataAlertDialog() {
		(new $tab_CloseDataAlertDialogCmd()).invoke().done(function(response) {
		}).fail(function() {
			throw new ss.Exception('Failed to close the dialog');
		});
	};
	global.tab.DataAlertCommands = $tab_DataAlertCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DataAlertConditionOperation
	var $tab_DataAlertConditionOperation = function() {
	};
	$tab_DataAlertConditionOperation.__typeName = 'tab.DataAlertConditionOperation';
	$tab_DataAlertConditionOperation.supportedOperations = function DataAlertConditionOperation$SupportedOperations() {
		var $t1 = [];
		$t1.push('greater-than-equal');
		$t1.push('greater-than');
		$t1.push('less-than-equal');
		$t1.push('less-than');
		$t1.push('equals');
		return $t1;
	};
	$tab_DataAlertConditionOperation.displayString = function DataAlertConditionOperation$DisplayString(operationType) {
		switch (operationType) {
			case 'equals': {
				return tab.Strings.OperatorEqual;
			}
			case 'greater-than': {
				return tab.Strings.OperatorAbove;
			}
			case 'greater-than-equal': {
				return tab.Strings.OperatorAboveOrEqual;
			}
			case 'less-than': {
				return tab.Strings.OperatorBelow;
			}
			case 'less-than-equal': {
				return tab.Strings.OperatorBelowOrEqual;
			}
			default: {
				return '';
			}
		}
	};
	global.tab.DataAlertConditionOperation = $tab_DataAlertConditionOperation;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DataAlertDialogModel
	var $tab_DataAlertDialogModel = function(parent) {
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('dataAlertDialogPresModel'.toString()));
	};
	$tab_DataAlertDialogModel.__typeName = 'tab.DataAlertDialogModel';
	global.tab.DataAlertDialogModel = $tab_DataAlertDialogModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DataAlertNotificationInterval
	var $tab_DataAlertNotificationInterval = function() {
	};
	$tab_DataAlertNotificationInterval.__typeName = 'tab.DataAlertNotificationInterval';
	$tab_DataAlertNotificationInterval.convertToString = function DataAlertNotificationInterval$ConvertToString(notificationIntervalInMinutes) {
		switch (notificationIntervalInMinutes) {
			case 0: {
				return tab.Strings.NotificationIntervalEveryTime;
			}
			case 2147483647: {
				return tab.Strings.NotificationIntervalOnlyOnce;
			}
			case 60: {
				return tab.Strings.NotificationIntervalHourly;
			}
			case 1440: {
				return tab.Strings.NotificationIntervalDaily;
			}
			case 10080: {
				return tab.Strings.NotificationIntervalWeekly;
			}
			default: {
				return '';
			}
		}
	};
	$tab_DataAlertNotificationInterval.supportedIntervals = function DataAlertNotificationInterval$SupportedIntervals() {
		var $t1 = [];
		$t1.push($tab_DataAlertNotificationInterval.onlyOnce);
		$t1.push($tab_DataAlertNotificationInterval.everyTime);
		$t1.push($tab_DataAlertNotificationInterval.hourly);
		$t1.push($tab_DataAlertNotificationInterval.daily);
		$t1.push($tab_DataAlertNotificationInterval.weekly);
		return $t1;
	};
	global.tab.DataAlertNotificationInterval = $tab_DataAlertNotificationInterval;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DataConnectionAreaModel
	var $tab_DataConnectionAreaModel = function(parent) {
		this.$serverDataSources = null;
		this.$2$ShowField = null;
		this.$2$ServerDataSourcesUpdatedField = null;
		this.$2$ServerDataSourcesAppendedField = null;
		$tab_Model.call(this, parent, null);
		this.$serverDataSources = [];
	};
	$tab_DataConnectionAreaModel.__typeName = 'tab.DataConnectionAreaModel';
	global.tab.DataConnectionAreaModel = $tab_DataConnectionAreaModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DataConnectionCommands
	var $tab_DataConnectionCommands = function() {
	};
	$tab_DataConnectionCommands.__typeName = 'tab.DataConnectionCommands';
	$tab_DataConnectionCommands.acceptConnectionVariables = function DataConnectionCommands$AcceptConnectionVariables(connectionName) {
		var $t1 = new $tab_SetVariablesPromptRespondedCmd();
		$t1.cmdParams['connectionName'] = connectionName;
		$t1.set_uiBlocking('immediately');
		$t1.invoke();
	};
	$tab_DataConnectionCommands.editVariableByIndex = function DataConnectionCommands$EditVariableByIndex(connectionName, variableGuid, valueIndex, operation, firstValueIndex, secondValueIndex) {
		var cmdParams = {};
		cmdParams['connectionName'] = connectionName;
		cmdParams['variableGuid'] = variableGuid;
		cmdParams['valueIndex'] = valueIndex;
		cmdParams['variableValueOperation'] = operation;
		cmdParams['firstValueIndex'] = firstValueIndex;
		cmdParams['secondValueIndex'] = secondValueIndex;
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create($tab_CommandUtils.newCommand('set-variable-value-by-index', cmdParams), 'immediately'));
	};
	$tab_DataConnectionCommands.editVariableByInput = function DataConnectionCommands$EditVariableByInput(connectionName, variableGuid, valueIndex, operation, input) {
		var cmdParams = {};
		cmdParams['connectionName'] = connectionName;
		cmdParams['variableGuid'] = variableGuid;
		cmdParams['valueIndex'] = valueIndex;
		cmdParams['variableValueOperation'] = operation;
		cmdParams['valueString'] = input;
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create($tab_CommandUtils.newCommand('set-variable-value-shim', cmdParams), 'immediately'));
	};
	$tab_DataConnectionCommands.addVariable = function DataConnectionCommands$AddVariable(connectionName, variableGuid) {
		var deferred = $.Deferred();
		var cmdParams = {};
		cmdParams['connectionName'] = connectionName;
		cmdParams['variableGuid'] = variableGuid;
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create($tab_CommandUtils.newCommand('add-new-variable-value', cmdParams), 'immediately', $tab_CommandController.deferredSuccessHandler(ss.Int32).call(null, deferred), function(exception) {
			deferred.reject();
		}));
		return deferred.promise();
	};
	$tab_DataConnectionCommands.deleteVariable = function DataConnectionCommands$DeleteVariable(connectionName, variableGuid, valueIndex, successCallback) {
		var cmdParams = {};
		cmdParams['connectionName'] = connectionName;
		cmdParams['variableGuid'] = variableGuid;
		cmdParams['valueIndex'] = valueIndex;
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create($tab_CommandUtils.newCommand('delete-variable-value', cmdParams), 'immediately', function(resp) {
			successCallback();
		}));
	};
	$tab_DataConnectionCommands.openDataConnectionArea = function DataConnectionCommands$OpenDataConnectionArea() {
		$tab_Model.nonWorldUpdate(function(ctx) {
			$tab_ApplicationModel.get_instance().get_workbook().get_dataConnectionModel().update(ctx);
		});
	};
	$tab_DataConnectionCommands.addPublishedDataSourceConnection = function DataConnectionCommands$AddPublishedDataSourceConnection(dataSource, successHandler, errorHandler) {
		var $t1 = new $tab_AddDataServerDataSourceCmd();
		$t1.cmdParams['repositoryUrl'] = dataSource.get_repositoryUrl();
		$t1.cmdParams['datasourceDatabaseName'] = dataSource.get_name();
		$t1.set_uiBlocking('immediatelySubtle');
		$t1.invoke().fail(errorHandler).done(function(response) {
			$tab_CommandController.SendCommand(new $tab_$LocalClientCommand(function(t) {
				$tab_ApplicationModel.get_instance().get_workbook().get_dataSchema().notifyNewDataSourceAdded(t.modelUpdateContext, response.$$cmdParams['datasource']);
			}));
			successHandler();
		});
	};
	$tab_DataConnectionCommands.setActiveConnectionName = function DataConnectionCommands$SetActiveConnectionName(newConnName, topPresModel) {
		var commandParams = {};
		commandParams['connectionName'] = newConnName;
		var docCmd = 'set-active-connection-name';
		var cmd = $tab_CommandUtils.newCommand(docCmd, commandParams);
		var localWork = null;
		localWork = function(t) {
			topPresModel.connectionName = newConnName;
		};
		$tab_CommandController.SendCommand(new $tab_ClientCommand('afterDelay', localWork, cmd));
	};
	$tab_DataConnectionCommands.connectionAddNewTable = function DataConnectionCommands$ConnectionAddNewTable(connectionName, tableName) {
		var commandParams = {};
		commandParams['connectionName'] = connectionName;
		commandParams['tableName'] = tableName;
		var docCmd = 'connection-add-new-table';
		var cmd = $tab_CommandUtils.newCommand(docCmd, commandParams);
		$tab_CommandController.SendCommand(new $tab_ClientCommand('immediatelySubtle', null, cmd));
	};
	$tab_DataConnectionCommands.connectionDeleteTable = function DataConnectionCommands$ConnectionDeleteTable(tableAlias) {
		var commandParams = {};
		commandParams['tableAlias'] = tableAlias;
		var docCmd = 'connection-delete-table';
		var cmd = $tab_CommandUtils.newCommand(docCmd, commandParams);
		$tab_CommandController.SendCommand(new $tab_ClientCommand('immediatelySubtle', null, cmd));
	};
	$tab_DataConnectionCommands.connectionChangeTableProperty = function DataConnectionCommands$ConnectionChangeTableProperty(tableAlias, propertyName, value) {
		var commandParams = {};
		commandParams['tableAlias'] = tableAlias;
		commandParams['propertyName'] = propertyName;
		commandParams['valueString'] = value;
		var docCmd = 'connection-change-table-property';
		var cmd = $tab_CommandUtils.newCommand(docCmd, commandParams);
		$tab_CommandController.SendCommand(new $tab_ClientCommand('immediatelySubtle', null, cmd));
	};
	$tab_DataConnectionCommands.buildFileTableInfoPresModel = function DataConnectionCommands$BuildFileTableInfoPresModel(tableAlias) {
		var commandParams = {};
		commandParams['tableAlias'] = tableAlias;
		var docCmd = 'build-file-table-info-pres-model';
		var cmd = $tab_CommandUtils.newCommand(docCmd, commandParams);
		$tab_CommandController.SendCommand(new $tab_ClientCommand('immediatelySubtle', null, cmd));
	};
	$tab_DataConnectionCommands.getDataSourceDataPresModel = function DataConnectionCommands$GetDataSourceDataPresModel(dataSource, errorCallback) {
		var $t1 = new $tab_GetDataSourceDataPresModelCmd();
		$t1.cmdParams['datasource'] = dataSource;
		$t1.cmdParams['cacheOnly'] = false;
		$t1.cmdParams['useNotificationReturn'] = true;
		$t1.invoke().fail(errorCallback);
	};
	$tab_DataConnectionCommands.getConnectionTypeGroupPresModel = function DataConnectionCommands$GetConnectionTypeGroupPresModel(type, successCallback, errorCallback) {
		var cmdParams = {};
		cmdParams['connectionTypeGroup'] = type;
		var cmd = $tab_CommandUtils.newCommand$1('get-supported-connection-types', cmdParams);
		$tab_ServerCommands.executeServerCommand(cmd, 'none', function(pm) {
			successCallback(pm);
		}, errorCallback);
	};
	$tab_DataConnectionCommands.setDataSourceDataRowCount = function DataConnectionCommands$SetDataSourceDataRowCount(dataSource, rowCount, errorCallback) {
		var $t1 = new $tab_SetDataSourceDataRowCountCmd();
		$t1.cmdParams['datasource'] = dataSource;
		$t1.cmdParams['rowCount'] = rowCount | 0;
		$t1.invoke().fail(errorCallback).done(function() {
			$tab_DataConnectionCommands.getDataSourceDataPresModel(dataSource, errorCallback);
		});
	};
	$tab_DataConnectionCommands.toggleDataInterpreter = function DataConnectionCommands$ToggleDataInterpreter(connectionName) {
		var commandParams = {};
		commandParams['connectionName'] = connectionName;
		var docCmd = 'connection-toggle-table-cleaning';
		var cmd = $tab_CommandUtils.newCommand(docCmd, commandParams);
		$tab_CommandController.SendCommand(new $tab_ClientCommand('immediately', null, cmd));
	};
	$tab_DataConnectionCommands.changeJoinType = function DataConnectionCommands$ChangeJoinType(tableAlias, joinType) {
		var commandParams = {};
		commandParams['tableAlias'] = tableAlias;
		commandParams['joinType'] = joinType;
		var docCmd = 'connection-edit-join-type';
		var cmd = $tab_CommandUtils.newCommand(docCmd, commandParams);
		$tab_CommandController.SendCommand(new $tab_ClientCommand('immediately', null, cmd));
	};
	$tab_DataConnectionCommands.changeJoinClauses = function DataConnectionCommands$ChangeJoinClauses(tableAlias, joinClauses) {
		var commandParams = {};
		commandParams['tableAlias'] = tableAlias;
		commandParams['joinClauses'] = joinClauses;
		var docCmd = 'connection-edit-join-clauses';
		var cmd = $tab_CommandUtils.newCommand(docCmd, commandParams);
		$tab_CommandController.SendCommand(new $tab_ClientCommand('immediately', null, cmd));
	};
	global.tab.DataConnectionCommands = $tab_DataConnectionCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DataConnectionPromptModel
	var $tab_DataConnectionPromptModel = function(parent) {
		this.$connectionVariableModels = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('variablePromptDialog'.toString()));
	};
	$tab_DataConnectionPromptModel.__typeName = 'tab.DataConnectionPromptModel';
	global.tab.DataConnectionPromptModel = $tab_DataConnectionPromptModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DataConnectionVariableArrayModel
	var $tab_DataConnectionVariableArrayModel = function(parent) {
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('promptVariables'.toString(), 1));
	};
	$tab_DataConnectionVariableArrayModel.__typeName = 'tab.DataConnectionVariableArrayModel';
	global.tab.DataConnectionVariableArrayModel = $tab_DataConnectionVariableArrayModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DataConnectionVariableModel
	var $tab_DataConnectionVariableModel = function(parent, index) {
		this.$valueModels = null;
		this.$defaultValue = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem(index.toString()));
	};
	$tab_DataConnectionVariableModel.__typeName = 'tab.DataConnectionVariableModel';
	global.tab.DataConnectionVariableModel = $tab_DataConnectionVariableModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DataConnectionVariableValueArrayModel
	var $tab_DataConnectionVariableValueArrayModel = function(parent) {
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('variableValues'.toString(), 1));
	};
	$tab_DataConnectionVariableValueArrayModel.__typeName = 'tab.DataConnectionVariableValueArrayModel';
	global.tab.DataConnectionVariableValueArrayModel = $tab_DataConnectionVariableValueArrayModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DataConnectionVariableValueModel
	var $tab_DataConnectionVariableValueModel = function(parent, index) {
		$tab_Model.call(this, parent, new $tab_PresModelPathItem(index.toString()));
	};
	$tab_DataConnectionVariableValueModel.__typeName = 'tab.DataConnectionVariableValueModel';
	global.tab.DataConnectionVariableValueModel = $tab_DataConnectionVariableValueModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DataDictionaryModel
	var $tab_DataDictionaryModel = function(parent) {
		this.$numSegments = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('dataDictionary'.toString()));
	};
	$tab_DataDictionaryModel.__typeName = 'tab.DataDictionaryModel';
	global.tab.DataDictionaryModel = $tab_DataDictionaryModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DataHighlighterModel
	var $tab_DataHighlighterModel = function(parent) {
		this.$brushingLookupTable = null;
		this.$2$NewDataHighlighterPresModelField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('dataHighlighter'.toString()));
	};
	$tab_DataHighlighterModel.__typeName = 'tab.DataHighlighterModel';
	global.tab.DataHighlighterModel = $tab_DataHighlighterModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DataSchemaModel
	var $tab_DataSchemaModel = function(parent) {
		this.$parametersDSName = null;
		this.$2$NewActiveDataSourceField = null;
		this.$2$NewDataSchemaField = null;
		this.$2$NewDataSourceAddedField = null;
		this.dataSources = null;
		this.currentBlendingFields = null;
		this.blendingFieldCandidates = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('dataSchema'.toString()));
		this.dataSources = null;
	};
	$tab_DataSchemaModel.__typeName = 'tab.DataSchemaModel';
	global.tab.DataSchemaModel = $tab_DataSchemaModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DataSourceDataModel
	var $tab_DataSourceDataModel = function(parent) {
		this.$2$ModelUpdatedField = null;
		this.$2$StopNotifyingField = null;
		this.numRows = 0;
		this.isEmpty = false;
		this.isExtract = false;
		this.columnInfoLookup = null;
		this.dataDictionaryModel = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('', 0));
		this.numRows = 0;
		this.isEmpty = true;
		this.isExtract = false;
		this.columnInfoLookup = null;
		this.dataDictionaryModel = new $tab_DataDictionaryModel(this);
	};
	$tab_DataSourceDataModel.__typeName = 'tab.DataSourceDataModel';
	global.tab.DataSourceDataModel = $tab_DataSourceDataModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DataSourceModel
	var $tab_DataSourceModel = function(parent, name) {
		this.$columnInstancesModel = null;
		this.$2$CaptionChangedField = null;
		this.baseColumnsModel = null;
		this.$2$SpecifiedWidthField = 0;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem(name, 0));
		this.baseColumnsModel = new $tab_FieldsModel('fieldList', this);
	};
	$tab_DataSourceModel.__typeName = 'tab.DataSourceModel';
	$tab_DataSourceModel.splitGlobalFieldName = function DataSourceModel$SplitGlobalFieldName(fn) {
		return $tab_DataSourceModel.$stripBrackets(fn).split('].[');
	};
	$tab_DataSourceModel.$stripBrackets = function DataSourceModel$StripBrackets(name) {
		var s = name;
		if (s.length >= 2 && s.charCodeAt(0) === 91 && s.charCodeAt(s.length - 1) === 93) {
			return s.substr(1, s.length - 2);
		}
		return s;
	};
	global.tab.DataSourceModel = $tab_DataSourceModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DataSourcesModel
	var $tab_DataSourcesModel = function(parent) {
		this.$dataSourceModels = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('dataSources'.toString()));
		this.$dataSourceModels = {};
	};
	$tab_DataSourcesModel.__typeName = 'tab.DataSourcesModel';
	global.tab.DataSourcesModel = $tab_DataSourcesModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Session.DefaultSessionErrorHandler
	var $tab_DefaultSessionErrorHandler = function(commonDialogProvider, urlRoot) {
		this.$commonDialogProvider = null;
		this.$urlRoot = null;
		this.$commonDialogProvider = commonDialogProvider;
		this.$urlRoot = urlRoot;
	};
	$tab_DefaultSessionErrorHandler.__typeName = 'tab.DefaultSessionErrorHandler';
	global.tab.DefaultSessionErrorHandler = $tab_DefaultSessionErrorHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DeferLayoutImpl
	var $tab_DeferLayoutImpl = function() {
		this.$shouldDeferLayoutUpdates = false;
		this.$isZoomin = false;
	};
	$tab_DeferLayoutImpl.__typeName = 'tab.DeferLayoutImpl';
	$tab_DeferLayoutImpl.get_instance = function DeferLayoutImpl$get_Instance() {
		if (ss.isNullOrUndefined($tab_DeferLayoutImpl.$instance)) {
			$tab_DeferLayoutImpl.$instance = new $tab_DeferLayoutImpl();
		}
		return $tab_DeferLayoutImpl.$instance;
	};
	global.tab.DeferLayoutImpl = $tab_DeferLayoutImpl;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DeferredConnectionsCommandHandler
	var $tab_DeferredConnectionsCommandHandler = function(commonDialogProvider) {
		this.$commonDialogProvider = null;
		this.$lazyConnectionsEnabled = tab.FeatureFlags.isEnabled('SkipConnectionsDuringLoad');
		this.$commonDialogProvider = commonDialogProvider;
	};
	$tab_DeferredConnectionsCommandHandler.__typeName = 'tab.DeferredConnectionsCommandHandler';
	$tab_DeferredConnectionsCommandHandler.shouldHandleWithGivenStatus = function DeferredConnectionsCommandHandler$ShouldHandleWithGivenStatus(httpResponseStatus) {
		switch (httpResponseStatus) {
			case 401:
			case 503:
			case 500: {
				return true;
			}
			default: {
				return false;
			}
		}
	};
	$tab_DeferredConnectionsCommandHandler.$createRedirectPath = function DeferredConnectionsCommandHandler$CreateRedirectPath(attemptInfo) {
		var map = {};
		map['exception'] = 'DataSourceException';
		map['name'] = attemptInfo.datasourceCaption;
		map['message'] = attemptInfo.exceptionMessage;
		map['type'] = attemptInfo.exceptionType;
		map['authoring'] = tsConfig.is_authoring;
		map['attributes'] = attemptInfo.exceptionAttrs;
		var path = ss.formatString('{0}/{1}/embeddedVizAuthentication.html?', tab.BrowserSupport.getOrigin(document.location), tsConfig.language);
		path = ss.formatString('{0}path={1}', path, encodeURIComponent(tsConfig.requestURI));
		path = ss.formatString('{0}&attributes={1}', path, encodeURIComponent(JSON.stringify(map)));
		return path;
	};
	$tab_DeferredConnectionsCommandHandler.$isBadPasswordError = function DeferredConnectionsCommandHandler$IsBadPasswordError(exceptionType) {
		exceptionType = exceptionType.toLowerCase();
		var isBadPasswordError = ss.equalsT($tab_DeferredConnectionsCommandHandler.$badPasswordError, exceptionType) || ss.equalsT($tab_DeferredConnectionsCommandHandler.$badOauthPasswordError, exceptionType) || ss.equalsT($tab_DeferredConnectionsCommandHandler.$noAssociatedCustomOAuthKeyError.toLowerCase(), exceptionType);
		return isBadPasswordError;
	};
	global.tab.DeferredConnectionsCommandHandler = $tab_DeferredConnectionsCommandHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Session.DeferredConnectionsSessionErrorHandler
	var $tab_DeferredConnectionsSessionErrorHandler = function() {
		this.$lazyConnectionsEnabled = tab.FeatureFlags.isEnabled('SkipConnectionsDuringLoad');
	};
	$tab_DeferredConnectionsSessionErrorHandler.__typeName = 'tab.DeferredConnectionsSessionErrorHandler';
	global.tab.DeferredConnectionsSessionErrorHandler = $tab_DeferredConnectionsSessionErrorHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DeferredModelEventHandler
	var $tab_DeferredModelEventHandler = function() {
		this.$deferredEvents = null;
		this.exceptionHandler = null;
	};
	$tab_DeferredModelEventHandler.__typeName = 'tab.DeferredModelEventHandler';
	global.tab.DeferredModelEventHandler = $tab_DeferredModelEventHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DeviceLayoutInfoItemModel
	var $tab_DeviceLayoutInfoItemModel = function(parent) {
		this.$presetSizes = null;
		this.$presetSizesArray = null;
		this.$2$LayoutInfoUpdatedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('deviceLayoutInfoItem'.toString()));
		this.$presetSizes = [];
		this.$presetSizesArray = new $tab_$SizeItemListModel(new $tab_$PresetSizesContainerModel(this));
	};
	$tab_DeviceLayoutInfoItemModel.__typeName = 'tab.DeviceLayoutInfoItemModel';
	global.tab.DeviceLayoutInfoItemModel = $tab_DeviceLayoutInfoItemModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DialogLifetimeManager
	var $tab_DialogLifetimeManager = function() {
		this.$commandList = [];
		this.$closeAction = null;
	};
	$tab_DialogLifetimeManager.__typeName = 'tab.DialogLifetimeManager';
	global.tab.DialogLifetimeManager = $tab_DialogLifetimeManager;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Plugin.DialogPlugins
	var $tab_DialogPlugins = function() {
	};
	$tab_DialogPlugins.__typeName = 'tab.DialogPlugins';
	$tab_DialogPlugins.$addHybridDialog = function DialogPlugins$AddHybridDialog(moduleName, notification) {
		$tab_ModuleManager.registerRawJsModule(moduleName, moduleName + '.min', moduleName).andLoadOnDemandIf(true).moduleBeingConfigured.addDependency($tab_DialogPlugins.$dialogContractModule);
		$tab_NotificationHandlerLauncher.registerHandlerFromJsModule(moduleName, notification, function(m) {
			return new $tab_PluginDialogNotificationHandler(m, notification, document.body);
		});
	};
	global.tab.DialogPlugins = $tab_DialogPlugins;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DifferenceTableCalcModel
	var $tab_DifferenceTableCalcModel = function(parent) {
		this.$3$ModelUpdatedField = null;
		this.$3$ReferenceModelField = null;
		$tab_TypeSpecificTableCalcModel.call(this, parent, new $tab_PresModelPathItem('differenceTableCalcPresModel'.toString()));
		this.set_referenceModel(new $tab_TableCalcReferenceModel(this));
	};
	$tab_DifferenceTableCalcModel.__typeName = 'tab.DifferenceTableCalcModel';
	global.tab.DifferenceTableCalcModel = $tab_DifferenceTableCalcModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DrawItemFontExtractor
	var $tab_DrawItemFontExtractor = function() {
	};
	$tab_DrawItemFontExtractor.__typeName = 'tab.DrawItemFontExtractor';
	global.tab.DrawItemFontExtractor = $tab_DrawItemFontExtractor;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DrillPathModel
	var $tab_DrillPathModel = function(parent) {
		this.$levels = null;
		$tab_FieldModel.call(this, parent);
	};
	$tab_DrillPathModel.__typeName = 'tab.DrillPathModel';
	global.tab.DrillPathModel = $tab_DrillPathModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DSColumnInfoModel
	var $tab_DSColumnInfoModel = function(parent) {
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('', 0));
	};
	$tab_DSColumnInfoModel.__typeName = 'tab.DSColumnInfoModel';
	global.tab.DSColumnInfoModel = $tab_DSColumnInfoModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Models.EditValueWidgetModel
	var $tab_EditValueWidgetModel = function(parent, propertyPath) {
		this.$2$ModelUpdatedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem(propertyPath.toString()));
	};
	$tab_EditValueWidgetModel.__typeName = 'tab.EditValueWidgetModel';
	global.tab.EditValueWidgetModel = $tab_EditValueWidgetModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Session.ErrorHandlerChain
	var $tab_ErrorHandlerChain = function(errorHandlers) {
		this.$errorHandlers = null;
		ss.Debug.assert(!ss.isNullOrUndefined(errorHandlers), 'No error handlers passed.');
		ss.Debug.assert(errorHandlers.length !== 0, 'errorHandlers.Length != 0');
		this.$errorHandlers = errorHandlers.slice(0);
	};
	$tab_ErrorHandlerChain.__typeName = 'tab.ErrorHandlerChain';
	global.tab.ErrorHandlerChain = $tab_ErrorHandlerChain;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ExportServerCommands
	var $tab_ExportServerCommands = function() {
	};
	$tab_ExportServerCommands.__typeName = 'tab.ExportServerCommands';
	$tab_ExportServerCommands.exportImage = function ExportServerCommands$ExportImage(sheetName, storyPointId, dialogData, sheetNames, scrollOffsets) {
		var cmdParams = {};
		if (ss.isValue(sheetName)) {
			cmdParams['sheet'] = sheetName;
		}
		cmdParams['storyPointId'] = storyPointId;
		cmdParams['scrollOffsetSheets'] = JSON.stringify(sheetNames);
		var numPoints = scrollOffsets.length;
		var pointsPresModel = new Array(numPoints);
		for (var i = 0; i < numPoints; i++) {
			var pointPresModel = {};
			pointPresModel.x = ss.round(scrollOffsets[i].x);
			pointPresModel.y = ss.round(scrollOffsets[i].y);
			pointsPresModel[i] = pointPresModel;
		}
		cmdParams['scrollOffsetPoints'] = JSON.stringify(pointsPresModel);
		var cmd = $tab_CommandUtils.newCommand$1('png-export-server', cmdParams);
		$tab_ServerCommands.executeServerCommand(cmd, 'immediately', function(result) {
			var exportPM = result;
			var session = $tab_CommandController.get().get_legacySession();
			session.fileDownloadHelper.openDownload(session.formatSessionTempfileReference(exportPM.tempfileKey, true, true), dialogData);
		}, null);
	};
	global.tab.ExportServerCommands = $tab_ExportServerCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Utility.ExtraHtmlMarkupRemover
	var $tab_ExtraHtmlMarkupRemover = function() {
	};
	$tab_ExtraHtmlMarkupRemover.__typeName = 'tab.ExtraHtmlMarkupRemover';
	$tab_ExtraHtmlMarkupRemover.stripOutMarkup = function ExtraHtmlMarkupRemover$StripOutMarkup(info) {
		if (ss.isNullOrEmptyString(info)) {
			return info;
		}
		var $t1 = [];
		$t1.push(new RegExp('<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>', 'gi'));
		$t1.push(new RegExp('<html.*?>.+?</html.*?>', 'gi'));
		var markupRegexes = $t1;
		for (var $t2 = 0; $t2 < markupRegexes.length; $t2++) {
			var markupRegex = markupRegexes[$t2];
			info = info.replace(markupRegex, '');
		}
		return info;
	};
	global.tab.ExtraHtmlMarkupRemover = $tab_ExtraHtmlMarkupRemover;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FailureHandler
	var $tab_FailureHandler = function() {
	};
	$tab_FailureHandler.__typeName = 'tab.FailureHandler';
	$tab_FailureHandler.reportFailures = function FailureHandler$ReportFailures() {
		if (tab.ErrorTrace.hasTraces()) {
			var outgoing = tab.ErrorTrace.dequeueTraces();
			var entries = {};
			var url = outgoing[0].url;
			var userAgent = outgoing[0].userAgent;
			var errorNo = 0;
			for (var $t1 = 0; $t1 < outgoing.length; $t1++) {
				var failure = outgoing[$t1];
				entries['Error #' + errorNo.toString()] = $tab_FailureHandler.postContentForStackTrace(failure);
				errorNo++;
			}
			$tab_CommandController.get().get_legacySession().$informServer(url, userAgent, entries);
		}
	};
	$tab_FailureHandler.postContentForStackTrace = function FailureHandler$PostContentForStackTrace(stack) {
		var sb = new ss.StringBuilder();
		sb.appendLine('name: ' + stack.name);
		sb.appendLine('message: ' + stack.message);
		sb.appendLine('error-mode: ' + stack.traceMode.toString());
		if (ss.isValue(stack.locations)) {
			sb.appendLine('stack:');
			for (var $t1 = 0; $t1 < stack.locations.length; $t1++) {
				var loc = stack.locations[$t1];
				if (ss.isNullOrUndefined(loc.url) && ss.isNullOrUndefined(loc.lineNo) && ss.isNullOrUndefined(loc.functionName)) {
					continue;
				}
				sb.appendLine();
				sb.append(loc.url + ':' + loc.lineNo + ',' + loc.columnNo + ' ' + loc.functionName);
				if (ss.isValue(loc.context) && loc.context.length > 0) {
					for (var $t2 = 0; $t2 < loc.context.length; $t2++) {
						var contextItem = loc.context[$t2];
						var truncatedContext = contextItem;
						if (contextItem.length > $tab_FailureHandler.$sourceLineLengthLimit) {
							if (ss.isValue(loc.functionName) && contextItem.indexOf(loc.functionName) > 0) {
								var index = contextItem.indexOf(loc.functionName);
								var start = Math.max(0, index - 60);
								var end = Math.min(start + $tab_FailureHandler.$sourceLineLengthLimit, contextItem.length - 1);
								truncatedContext = contextItem.substring(start, end);
							}
							else {
								truncatedContext = contextItem.substr(0, $tab_FailureHandler.$sourceLineLengthLimit);
							}
						}
						sb.append('    ' + truncatedContext.trim());
					}
				}
			}
		}
		return sb.toString();
	};
	$tab_FailureHandler.dispose = function FailureHandler$Dispose() {
		$tab_FailureHandler.reportFailures();
		window.clearInterval($tab_FailureHandler.$intervalID);
		$tab_FailureHandler.$intervalID = -1;
	};
	global.tab.FailureHandler = $tab_FailureHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FieldColumnModel
	var $tab_FieldColumnModel = function(parent) {
		$tab_FieldModel.call(this, parent);
	};
	$tab_FieldColumnModel.__typeName = 'tab.FieldColumnModel';
	global.tab.FieldColumnModel = $tab_FieldColumnModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FieldInstanceType
	var $tab_FieldInstanceType = function() {
	};
	$tab_FieldInstanceType.__typeName = 'tab.FieldInstanceType';
	global.tab.FieldInstanceType = $tab_FieldInstanceType;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FieldModel
	var $tab_FieldModel = function(parent) {
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('field'.toString()));
	};
	$tab_FieldModel.__typeName = 'tab.FieldModel';
	global.tab.FieldModel = $tab_FieldModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FieldsModel
	var $tab_FieldsModel = function(pathName, parent) {
		this.$allFields = null;
		this.$tableLookup = null;
		this.$folderLookup = null;
		this.$drillPathLookup = null;
		this.$allFieldsArray = null;
		this.$dataSourceModel = null;
		this.fieldsChanged = null;
		this.rootFields = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem(pathName, 0));
		this.$dataSourceModel = parent;
		this.$allFields = {};
		this.$tableLookup = {};
		this.$folderLookup = {};
		this.$drillPathLookup = {};
	};
	$tab_FieldsModel.__typeName = 'tab.FieldsModel';
	global.tab.FieldsModel = $tab_FieldsModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FifoCache
	var $tab_FifoCache = function(size) {
		this.$size = 0;
		this.$keyArray = null;
		this.cl = {};
		this.$nextIndex = 0;
		this.$size = size;
		this.$keyArray = new Array(size);
	};
	$tab_FifoCache.__typeName = 'tab.FifoCache';
	global.tab.FifoCache = $tab_FifoCache;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FileDownloadHelper
	var $tab_FileDownloadHelper = function(commonDialogProvider, session) {
		this.$commonDialogProvider = null;
		this.$session = null;
		this.$commonDialogProvider = commonDialogProvider;
		this.$session = session;
	};
	$tab_FileDownloadHelper.__typeName = 'tab.FileDownloadHelper';
	global.tab.FileDownloadHelper = $tab_FileDownloadHelper;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FilterClientCommands
	var $tab_FilterClientCommands = function() {
	};
	$tab_FilterClientCommands.__typeName = 'tab.FilterClientCommands';
	$tab_FilterClientCommands.setQuantitativeFilterRange = function FilterClientCommands$SetQuantitativeFilterRange(visualId, filterField, filterMin, filterMax, includeMode) {
		var cmd = $tab_CommandUtils.newCommand('range-filter', {});
		$tab_CommandUtils.addVisualIdToCommand(cmd.commandParams, visualId);
		cmd.commandParams['globalFieldName'] = filterField;
		if (ss.isValue(filterMin)) {
			cmd.commandParams['filterRangeMin'] = filterMin.toString();
		}
		if (ss.isValue(filterMax)) {
			cmd.commandParams['filterRangeMax'] = filterMax.toString();
		}
		cmd.commandParams['included'] = includeMode.toString();
		$tab_ServerCommands.executeServerCommand(cmd, 'immediately');
	};
	$tab_FilterClientCommands.setCategoricalFilterValues = function FilterClientCommands$SetCategoricalFilterValues(visualId, filterField, updateType, aliases, heuristicCommandReinterpretation) {
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		cmdParams['globalFieldName'] = filterField;
		cmdParams['filterValues'] = JSON.stringify(aliases || []);
		cmdParams['filterUpdateType'] = updateType.toString();
		cmdParams['heuristicCommandReinterpretation'] = heuristicCommandReinterpretation;
		$tab_ServerCommands.executeServerCommand($tab_CommandUtils.newCommand('categorical-filter', cmdParams), 'immediately');
	};
	$tab_FilterClientCommands.setCategoricalFilterValuesByIndex = function FilterClientCommands$SetCategoricalFilterValuesByIndex(visualId, filterField, updateType, indexes) {
		if (!ss.isValue(updateType)) {
			updateType = 'filter-replace';
		}
		if (!ss.isValue(indexes)) {
			indexes = [];
		}
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		cmdParams['globalFieldName'] = filterField;
		cmdParams['filterIndices'] = JSON.stringify(indexes);
		cmdParams['filterUpdateType'] = updateType.toString();
		$tab_ServerCommands.executeServerCommand($tab_CommandUtils.newCommand('categorical-filter-by-index', cmdParams), 'immediately');
	};
	$tab_FilterClientCommands.modifyCategoricalFilterValues = function FilterClientCommands$ModifyCategoricalFilterValues(visualId, filterField, addAliases, removeAliases, isTypeInList) {
		if ((!ss.isValue(addAliases) || addAliases.length === 0) && (!ss.isValue(removeAliases) || removeAliases.length === 0)) {
			return;
		}
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		cmdParams['globalFieldName'] = filterField;
		if (ss.isValue(addAliases) && addAliases.length > 0) {
			cmdParams['filterAdd'] = JSON.stringify(addAliases);
		}
		if (ss.isValue(removeAliases) && removeAliases.length > 0) {
			cmdParams['filterRemove'] = JSON.stringify(removeAliases);
		}
		cmdParams['filterUpdateType'] = 'filter-delta'.toString();
		if (isTypeInList) {
			cmdParams['filterUpdateQualifierType'] = 'filter-update-custom-domain'.toString();
		}
		$tab_ServerCommands.executeServerCommand($tab_CommandUtils.newCommand('categorical-filter', cmdParams), 'immediately');
	};
	$tab_FilterClientCommands.modifyCategoricalFilterValuesByIndex = function FilterClientCommands$ModifyCategoricalFilterValuesByIndex(visualId, filterField, addIndexes, removeIndexes) {
		if ((!ss.isValue(addIndexes) || addIndexes.length === 0) && (!ss.isValue(removeIndexes) || removeIndexes.length === 0)) {
			return;
		}
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		cmdParams['globalFieldName'] = filterField;
		if (ss.isValue(addIndexes)) {
			cmdParams['filterAddIndices'] = JSON.stringify(addIndexes);
		}
		if (ss.isValue(removeIndexes)) {
			cmdParams['filterRemoveIndices'] = JSON.stringify(removeIndexes);
		}
		cmdParams['filterUpdateType'] = 'filter-delta'.toString();
		$tab_ServerCommands.executeServerCommand($tab_CommandUtils.newCommand('categorical-filter-by-index', cmdParams), 'immediately');
	};
	$tab_FilterClientCommands.setCategoricalQuickFilterMode = function FilterClientCommands$SetCategoricalQuickFilterMode(visualId, fieldName, mode) {
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		cmdParams['categoricalMode'] = mode.toString();
		cmdParams['fn'] = fieldName;
		$tab_ServerCommands.executeServerCommand($tab_CommandUtils.newCommand('categorical-quick-filter-mode', cmdParams), 'immediately');
	};
	$tab_FilterClientCommands.setCategoricalQuickFilterDomain = function FilterClientCommands$SetCategoricalQuickFilterDomain(visualId, fieldName, domain) {
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		cmdParams['filterDomainType'] = domain.toString();
		cmdParams['fn'] = fieldName;
		$tab_ServerCommands.executeServerCommand($tab_CommandUtils.newCommand('domain-quick-filter', cmdParams), 'immediately');
	};
	$tab_FilterClientCommands.setPatternFilterState = function FilterClientCommands$SetPatternFilterState(visualId, fieldName, pattern) {
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		cmdParams['patternFilterString'] = pattern;
		cmdParams['fn'] = fieldName;
		$tab_ServerCommands.executeServerCommand($tab_CommandUtils.newCommand('categorical-quick-filter-pattern', cmdParams), 'immediately');
	};
	$tab_FilterClientCommands.addManualFilterItems = function FilterClientCommands$AddManualFilterItems(visualId, fieldName, data) {
		var stringCollation = { charsetId: 0, name: '' };
		var dataCol1 = { dataType: 'cstring', stringCollation: stringCollation };
		var tuples = data['tuples'];
		var searchStrings = [];
		for (var $t1 = 0; $t1 < tuples.length; $t1++) {
			var t = tuples[$t1];
			searchStrings.push(t['d']);
		}
		dataCol1.dataValues = searchStrings;
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		cmdParams['dataColumn'] = JSON.stringify(dataCol1);
		cmdParams['fn'] = fieldName;
		$tab_ServerCommands.executeServerCommand($tab_CommandUtils.newCommand('add-manual-items-to-filter', cmdParams), 'immediately');
	};
	$tab_FilterClientCommands.levelDrill = function FilterClientCommands$LevelDrill(visualId, position, shelfType, isDrillDown) {
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		cmdParams['boolAggregateDrillUp'] = isDrillDown.toString();
		cmdParams['shelfType'] = shelfType.toString();
		cmdParams['position'] = position.toString();
		$tab_ServerCommands.executeServerCommand($tab_CommandUtils.newCommand('level-drill-up-down', cmdParams), 'immediately');
	};
	$tab_FilterClientCommands.updateCategoricalFilter = function FilterClientCommands$UpdateCategoricalFilter(filterData) {
		if (!$tab_ApplicationModel.get_instance().get_isLocalRenderMode()) {
			return;
		}
		var isCurrentlyWithinLocalFilterDomain = function() {
			return true;
		};
		var isFilteredOut = function(fieldData, tupleId) {
			var alias = $tab_VizDataLookup.lookupAlias(tupleId, fieldData, $tab_ApplicationModel.get_instance().get_dataDictionary());
			return !filterData.includesValue(alias);
		};
		$tab_FilterClientCommands.$updateFilter(filterData.get_filterField(), filterData.get_targetSheets(), isCurrentlyWithinLocalFilterDomain, isFilteredOut, true);
	};
	$tab_FilterClientCommands.updateQuantitativeFilter = function FilterClientCommands$UpdateQuantitativeFilter(filterData) {
		if (!$tab_ApplicationModel.get_instance().get_isLocalRenderMode()) {
			return;
		}
		var isCurrentlyWithinLocalFilterDomain = function() {
			var minWithinRange = !ss.isValue(filterData.get_currentMinVal()) || ss.isValue(filterData.get_previousMinVal()) && tab.DoubleUtil.isGreaterThanOrApproximatelyEqual(ss.unbox(filterData.get_currentMinVal()), ss.unbox(filterData.get_previousMinVal()));
			var maxWithinRange = !ss.isValue(filterData.get_currentMaxVal()) || ss.isValue(filterData.get_previousMaxVal()) && tab.DoubleUtil.isLessThanOrApproximatelyEqual(ss.unbox(filterData.get_currentMaxVal()), ss.unbox(filterData.get_previousMaxVal()));
			return minWithinRange && maxWithinRange;
		};
		var isFilteredOut = function(fieldData, tupleId) {
			var dataValue = $tab_VizDataLookup.lookupRawDataValue(tupleId, fieldData, $tab_ApplicationModel.get_instance().get_dataDictionary());
			if (ss.isNullOrUndefined(dataValue) || ss.referenceEquals(dataValue, tableau.format.specialNull)) {
				return false;
			}
			if (fieldData.get_dataType() === 'date' || fieldData.get_dataType() === 'datetime') {
				var date = tab.DateUtil.parsePresModelDate(dataValue);
				return !filterData.valueInRange(tab.DateUtil.dateTimeAsOleDate(date));
			}
			else {
				return !filterData.valueInRange(parseFloat(dataValue));
			}
		};
		$tab_FilterClientCommands.$updateFilter(filterData.get_filterField(), filterData.get_targetSheets(), isCurrentlyWithinLocalFilterDomain, isFilteredOut, false);
	};
	$tab_FilterClientCommands.applyFilter = function FilterClientCommands$ApplyFilter(visModel, filterField, isFilteredOut) {
		var vizData = visModel.get_vizDataModel();
		var fieldData = vizData.getVizDataField(filterField);
		var isTupleFilteredOut = function(tupleId) {
			return isFilteredOut(fieldData, tupleId);
		};
		return fieldData.tupleIdsThatPass(isTupleFilteredOut);
	};
	$tab_FilterClientCommands.doRelativeDateQuickFilter = function FilterClientCommands$DoRelativeDateQuickFilter(visualId, fieldName, periodType, rangeType, range) {
		var cmdParams = $tab_FilterClientCommands.createDoRelativeDateQuickFilterParams(visualId, fieldName, periodType, rangeType, range);
		$tab_ServerCommands.executeServerCommand($tab_CommandUtils.newCommand('relative-date-filter', cmdParams), 'immediately');
	};
	$tab_FilterClientCommands.doLevelHierarchialFilter = function FilterClientCommands$DoLevelHierarchialFilter(visualId, fieldName, addLevels, removeLevels, updateType) {
		var cmdParams = $tab_FilterClientCommands.$createDoLevelHierarchialFilterParams(visualId, fieldName, addLevels, removeLevels, updateType);
		$tab_ServerCommands.executeServerCommand($tab_CommandUtils.newCommand('hierarchical-filter', cmdParams), 'immediately');
	};
	$tab_FilterClientCommands.doMemberHierarchialFilter = function FilterClientCommands$DoMemberHierarchialFilter(visualId, fieldName, addMember, removeMember, updateType) {
		var cmdParams = $tab_FilterClientCommands.$createDoMemberHierarchialFilterParams(visualId, fieldName, addMember, removeMember, updateType);
		$tab_ServerCommands.executeServerCommand($tab_CommandUtils.newCommand('hierarchical-filter', cmdParams), 'immediately');
	};
	$tab_FilterClientCommands.doRangeHierarchialFilter = function FilterClientCommands$DoRangeHierarchialFilter(visualId, fieldName, rangeAddMembers, rangeRemoveMembers, updateType) {
		var cmdParams = $tab_FilterClientCommands.$createDoRangeHierarchialFilterParams(visualId, fieldName, rangeAddMembers, rangeRemoveMembers, updateType);
		$tab_ServerCommands.executeServerCommand($tab_CommandUtils.newCommand('hierarchical-filter', cmdParams), 'immediately');
	};
	$tab_FilterClientCommands.resetQuantitativeFilter = function FilterClientCommands$ResetQuantitativeFilter(filterField, targetSheets) {
		for (var $t1 = 0; $t1 < targetSheets.length; $t1++) {
			var sheetName = targetSheets[$t1];
			var visModel = $tab_ModelUtils.getVisualModel($tab_ApplicationModel.get_instance(), sheetName);
			if (ss.isNullOrUndefined(visModel)) {
				continue;
			}
			if ($tab_FilterClientCommands.$canFilterLocally(filterField, sheetName)) {
				var filteredTuples = [];
				visModel.setFilteredTuples(filterField, filteredTuples);
				visModel.setHiddenTuples(filterField, filteredTuples);
			}
			$tab_VizClientCommands.validateVisualModel(visModel);
		}
	};
	$tab_FilterClientCommands.createDoRelativeDateQuickFilterParams = function FilterClientCommands$CreateDoRelativeDateQuickFilterParams(visualId, fieldName, periodType, rangeType, range, anchorDate, includedValues) {
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		cmdParams['globalFieldName'] = fieldName;
		cmdParams['datePeriodType'] = periodType;
		cmdParams['dateRangeType'] = rangeType;
		if (rangeType === 'lastn' || rangeType === 'nextn') {
			cmdParams['rangeN'] = range;
		}
		if (ss.isValue(anchorDate)) {
			cmdParams['anchorDate'] = anchorDate;
		}
		if (ss.isValue(includedValues)) {
			cmdParams['included'] = includedValues;
		}
		return cmdParams;
	};
	$tab_FilterClientCommands.$createDoLevelHierarchialFilterParams = function FilterClientCommands$CreateDoLevelHierarchialFilterParams(visualId, fieldName, addLevels, removeLevels, updateType) {
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		var filterOptions = {};
		filterOptions['filterLevelAdd'] = addLevels;
		filterOptions['filterLevelRemove'] = removeLevels;
		cmdParams['globalFieldName'] = fieldName;
		cmdParams['filterOptions'] = filterOptions;
		cmdParams['filterUpdateType'] = updateType;
		return cmdParams;
	};
	$tab_FilterClientCommands.$createDoMemberHierarchialFilterParams = function FilterClientCommands$CreateDoMemberHierarchialFilterParams(visualId, fieldName, addMember, removeMember, updateType) {
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		var filterOptions = {};
		filterOptions['filterAdd'] = addMember;
		filterOptions['filterRemove'] = removeMember;
		cmdParams['globalFieldName'] = fieldName;
		cmdParams['filterOptions'] = filterOptions;
		cmdParams['filterUpdateType'] = updateType;
		return cmdParams;
	};
	$tab_FilterClientCommands.$createDoRangeHierarchialFilterParams = function FilterClientCommands$CreateDoRangeHierarchialFilterParams(visualId, fieldName, rangeAddMembers, rangeRemoveMembers, updateType) {
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		var filterOptions = {};
		filterOptions['filterRangeAdd'] = rangeAddMembers;
		filterOptions['filterRangeRemove'] = rangeRemoveMembers;
		cmdParams['globalFieldName'] = fieldName;
		cmdParams['filterOptions'] = filterOptions;
		cmdParams['filterUpdateType'] = updateType;
		return cmdParams;
	};
	$tab_FilterClientCommands.$canFilterLocally = function FilterClientCommands$CanFilterLocally(filterField, sheetName) {
		var visModel = $tab_ModelUtils.getVisualModel($tab_ApplicationModel.get_instance(), sheetName);
		return $tab_FilterClientCommands.$canFilterLocally$1(visModel, filterField);
	};
	$tab_FilterClientCommands.$canFilterLocally$1 = function FilterClientCommands$CanFilterLocally(visModel, filterField) {
		if (ss.isValue(visModel)) {
			return visModel.get_shouldUpdate() && visModel.hasFilterFieldData(filterField);
		}
		return false;
	};
	$tab_FilterClientCommands.$updateFilter = function FilterClientCommands$UpdateFilter(filterField, targetSheets, isCurrentlyWithinLocalFilterDomain, isFilteredOut, isCategorical) {
		var c = new $tab_$LocalClientCommand(function(t) {
			for (var $t1 = 0; $t1 < targetSheets.length; $t1++) {
				var sheetName = targetSheets[$t1];
				var visModel = $tab_ModelUtils.getVisualModel($tab_ApplicationModel.get_instance(), sheetName);
				if (ss.isNullOrUndefined(visModel)) {
					continue;
				}
				var canFilterLocally = $tab_FilterClientCommands.$canFilterLocally$1(visModel, filterField);
				if (!canFilterLocally || !isCurrentlyWithinLocalFilterDomain() || ss.isNullOrUndefined(visModel.get_vizDataModel().getVizDataField(filterField))) {
					if (!isCategorical) {
						$tab_ModelUtils.setVisualValidStateOnModel(t, visModel, false);
					}
				}
				else {
					var filteredTuples = [];
					filteredTuples = $tab_FilterClientCommands.applyFilter(visModel, filterField, isFilteredOut);
					visModel.setFilteredTuples(filterField, filteredTuples);
					if (!isCategorical) {
						visModel.setHiddenTuples(filterField, filteredTuples);
					}
					$tab_ModelUtils.setVisualValidStateOnModel(t, visModel, true);
				}
			}
		});
		c.set_commandName((isCategorical ? 'categorical-filter'.toString() : 'range-filter'.toString()));
		$tab_CommandController.SendCommand(c);
	};
	global.tab.FilterClientCommands = $tab_FilterClientCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FlipboardModel
	var $tab_FlipboardModel = function(parent) {
		this.$storyPointsModel = null;
		this.$2$InvalidateZoneField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('flipboard'.toString()));
		this.$storyPointsModel = new $tab_StoryPointsModel(this);
		if ((!tsConfig.is_authoring || tab.FeatureFlags.isEnabled('StoryPointCache')) && ss.isNullOrUndefined($tab_FlipboardModel.presModelCache)) {
			$tab_FlipboardModel.presModelCache = new $tab_StoryPointsPresModelCache();
		}
	};
	$tab_FlipboardModel.__typeName = 'tab.FlipboardModel';
	global.tab.FlipboardModel = $tab_FlipboardModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FlipboardNavigatorModel
	var $tab_FlipboardNavigatorModel = function(parent) {
		this.$pointsCaptured = null;
		this.$2$NewFlipboardNavField = null;
		this.$2$PointWasCapturedField = null;
		this.$2$NavArrowVisibilityChangedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('flipboardNav'.toString()));
		this.$pointsCaptured = [];
	};
	$tab_FlipboardNavigatorModel.__typeName = 'tab.FlipboardNavigatorModel';
	global.tab.FlipboardNavigatorModel = $tab_FlipboardNavigatorModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FloatingToolbarClientCommands
	var $tab_FloatingToolbarClientCommands = function() {
	};
	$tab_FloatingToolbarClientCommands.__typeName = 'tab.FloatingToolbarClientCommands';
	$tab_FloatingToolbarClientCommands.setDefaultMapToolSelectionCommand = function FloatingToolbarClientCommands$SetDefaultMapToolSelectionCommand(selection) {
		var c = $tab_CommandUtils.newCommand('default-map-tool-selection', null);
		c.commandParams = {};
		c.commandParams['defaultMapToolEnum'] = selection;
		$tab_CommandController.SendCommand(new $tab_RemoteClientCommand(c, 'immediately', null, null));
	};
	global.tab.FloatingToolbarClientCommands = $tab_FloatingToolbarClientCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FolderModel
	var $tab_FolderModel = function(parent) {
		this.$fields = null;
		$tab_FieldModel.call(this, parent);
	};
	$tab_FolderModel.__typeName = 'tab.FolderModel';
	global.tab.FolderModel = $tab_FolderModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FontNotificationUtil
	var $tab_FontNotificationUtil = function() {
	};
	$tab_FontNotificationUtil.__typeName = 'tab.FontNotificationUtil';
	$tab_FontNotificationUtil.add_fontPropertiesIdentified = function FontNotificationUtil$add_FontPropertiesIdentified(value) {
		$tab_FontNotificationUtil.$1$FontPropertiesIdentifiedField = ss.delegateCombine($tab_FontNotificationUtil.$1$FontPropertiesIdentifiedField, value);
	};
	$tab_FontNotificationUtil.remove_fontPropertiesIdentified = function FontNotificationUtil$remove_FontPropertiesIdentified(value) {
		$tab_FontNotificationUtil.$1$FontPropertiesIdentifiedField = ss.delegateRemove($tab_FontNotificationUtil.$1$FontPropertiesIdentifiedField, value);
	};
	$tab_FontNotificationUtil.add_allFontsFound = function FontNotificationUtil$add_AllFontsFound(value) {
		$tab_FontNotificationUtil.$1$AllFontsFoundField = ss.delegateCombine($tab_FontNotificationUtil.$1$AllFontsFoundField, value);
	};
	$tab_FontNotificationUtil.remove_allFontsFound = function FontNotificationUtil$remove_AllFontsFound(value) {
		$tab_FontNotificationUtil.$1$AllFontsFoundField = ss.delegateRemove($tab_FontNotificationUtil.$1$AllFontsFoundField, value);
	};
	$tab_FontNotificationUtil.notifyFontsFromVisualListPresModel = function FontNotificationUtil$NotifyFontsFromVisualListPresModel(presModel) {
		if (ss.isNullOrUndefined(presModel)) {
			return;
		}
		var groupFontExtractor = new $tab_GroupFontExtractor();
		var drawItem = { type: 'draw-group', drawItems: presModel.drawItems };
		$tab_FontNotificationUtil.$raiseFontIdentified(groupFontExtractor.extractFontFromPresModel(drawItem));
	};
	$tab_FontNotificationUtil.notifyFontsFromTextRegionPresModel = function FontNotificationUtil$NotifyFontsFromTextRegionPresModel(presModel) {
		if (ss.isNullOrUndefined(presModel)) {
			return;
		}
		$tab_FontNotificationUtil.$raiseFontIdentified($tab_FontNotificationUtil.$fontPropertiesFromHtml(presModel.html));
	};
	$tab_FontNotificationUtil.getFontsFromUberTipDataPresModel = function FontNotificationUtil$GetFontsFromUberTipDataPresModel(presModel) {
		if (ss.isNullOrUndefined(presModel)) {
			return [];
		}
		var uniqueFonts = {};
		for (var $t1 = 0; $t1 < presModel.ubertipPaneDatas.length; $t1++) {
			var panePresModel = presModel.ubertipPaneDatas[$t1];
			var properties = $tab_FontNotificationUtil.$fontPropertiesFromHtml(panePresModel.htmlTooltip);
			for (var $t2 = 0; $t2 < properties.length; $t2++) {
				var property = properties[$t2];
				$tab_FontNotificationUtil.$appendFontIntoDictionary(uniqueFonts, property);
			}
		}
		return _.values(uniqueFonts);
	};
	$tab_FontNotificationUtil.notifyFontsFromUberTipDataPresModel = function FontNotificationUtil$NotifyFontsFromUberTipDataPresModel(presModel) {
		$tab_FontNotificationUtil.$raiseFontIdentified($tab_FontNotificationUtil.getFontsFromUberTipDataPresModel(presModel));
	};
	$tab_FontNotificationUtil.notifyFontsFromPagePresModel = function FontNotificationUtil$NotifyFontsFromPagePresModel(presModel) {
		if (ss.isNullOrUndefined(presModel)) {
			return;
		}
		$tab_FontNotificationUtil.$raiseFontIdentified($tab_FontNotificationUtil.$fontPropertiesFromHtml(presModel.titleHtml));
	};
	$tab_FontNotificationUtil.notifyFontsFromQuantitativeColorLegendPresModel = function FontNotificationUtil$NotifyFontsFromQuantitativeColorLegendPresModel(presModel) {
		if (ss.isNullOrUndefined(presModel)) {
			return;
		}
		var uniqueProperties = {};
		$tab_FontNotificationUtil.$appendFontIntoDictionary(uniqueProperties, $tab_FontNotificationUtil.$fontPropertiesFromTextStylePresModel(presModel.labelTextStyle));
		$tab_FontNotificationUtil.$appendFontIntoDictionaryFromHtml(uniqueProperties, presModel.titleHtml);
		$tab_FontNotificationUtil.$raiseFontIdentified(_.values(uniqueProperties));
	};
	$tab_FontNotificationUtil.notifyFontsFromCategoricalLegendPresModel = function FontNotificationUtil$NotifyFontsFromCategoricalLegendPresModel(catLegendPresModel) {
		if (ss.isNullOrUndefined(catLegendPresModel)) {
			return;
		}
		var uniqueProperties = {};
		$tab_FontNotificationUtil.$appendFontIntoDictionary(uniqueProperties, $tab_FontNotificationUtil.$fontPropertiesFromTextStylePresModel(catLegendPresModel.textStyle));
		$tab_FontNotificationUtil.$appendFontIntoDictionary(uniqueProperties, $tab_FontNotificationUtil.$fontPropertiesFromTextStylePresModel(catLegendPresModel.titleStyleModel));
		$tab_FontNotificationUtil.$appendFontIntoDictionary(uniqueProperties, $tab_FontNotificationUtil.$fontPropertiesFromTextStylePresModel(catLegendPresModel.selectedTextStyleModel));
		$tab_FontNotificationUtil.$appendFontIntoDictionaryFromHtml(uniqueProperties, catLegendPresModel.titleHtml);
		$tab_FontNotificationUtil.$raiseFontIdentified(_.values(uniqueProperties));
	};
	$tab_FontNotificationUtil.notifyFontsFromServerRenderedLegendPresModel = function FontNotificationUtil$NotifyFontsFromServerRenderedLegendPresModel(serverLegendPresModel) {
		if (ss.isNullOrUndefined(serverLegendPresModel)) {
			return;
		}
		var uniqueProperties = {};
		$tab_FontNotificationUtil.$appendFontIntoDictionaryFromHtml(uniqueProperties, serverLegendPresModel.titleHtml);
		$tab_FontNotificationUtil.$raiseFontIdentified(_.values(uniqueProperties));
	};
	$tab_FontNotificationUtil.notifyFontsFromUberTipPresModel = function FontNotificationUtil$NotifyFontsFromUberTipPresModel(presModel) {
		if (ss.isNullOrUndefined(presModel)) {
			return;
		}
		$tab_FontNotificationUtil.$raiseFontIdentified($tab_FontNotificationUtil.$fontPropertiesFromHtml(presModel.htmlTooltip));
	};
	$tab_FontNotificationUtil.$fontPropertiesFromHtml = function FontNotificationUtil$FontPropertiesFromHtml(html) {
		var uniqueProperties = {};
		$tab_FontNotificationUtil.$appendFontIntoDictionaryFromHtml(uniqueProperties, html);
		return _.values(uniqueProperties);
	};
	$tab_FontNotificationUtil.$fontPropertiesFromTextStylePresModel = function FontNotificationUtil$FontPropertiesFromTextStylePresModel(presModel) {
		if (ss.isNullOrUndefined(presModel) || ss.isNullOrUndefined(presModel.fontName)) {
			return new $tab_FontProperties();
		}
		var $t1 = new $tab_FontProperties();
		$t1.set_fontFamily(presModel.fontName);
		$t1.set_weight(ss.coalesce(presModel.fontWeight, ''));
		$t1.set_style(ss.coalesce(presModel.fontStyle, ''));
		return $t1;
	};
	$tab_FontNotificationUtil.notifyFontsFromTextStylePresModel = function FontNotificationUtil$NotifyFontsFromTextStylePresModel(presModel) {
		var fonts = [];
		var fontProperty = $tab_FontNotificationUtil.$fontPropertiesFromTextStylePresModel(presModel);
		if (!ss.isNullOrEmptyString(fontProperty.get_fontFamily())) {
			fonts.push(fontProperty);
		}
		$tab_FontNotificationUtil.$raiseFontIdentified(fonts);
	};
	$tab_FontNotificationUtil.notifyFontsFromPDMarksPresModel = function FontNotificationUtil$NotifyFontsFromPDMarksPresModel(presModel) {
		if (ss.isValue(presModel) && ss.isValue(presModel.textStyleColumns)) {
			var textStyles = presModel.textStyleColumns;
			var fontCol = textStyles['font'];
			var numStyles = fontCol.dataValues.length;
			var properties = {};
			for (var i = 0; i < numStyles; i++) {
				$tab_FontNotificationUtil.$appendFontFromDataColumnIntoDictionary(properties, textStyles, i);
			}
			if (ss.getKeyCount(properties) > 0) {
				$tab_FontNotificationUtil.$raiseFontIdentified(_.values(properties));
			}
		}
	};
	$tab_FontNotificationUtil.$appendFontIntoDictionary = function FontNotificationUtil$AppendFontIntoDictionary(fontPropsDict, properties) {
		if (ss.isNullOrEmptyString(properties.get_fontFamily())) {
			return;
		}
		fontPropsDict[properties.get_hash()] = properties;
	};
	$tab_FontNotificationUtil.$appendFontIntoDictionaryFromHtml = function FontNotificationUtil$AppendFontIntoDictionaryFromHtml(fontPropsDict, html) {
		if (ss.isNullOrEmptyString(html)) {
			return;
		}
		var elementsWithFontSet = $(html).find('[style]').addBack();
		for (var i = 0; i < elementsWithFontSet.length; i++) {
			var fontName = elementsWithFontSet[i].style.fontFamily;
			var fontWeight = elementsWithFontSet[i].style.fontWeight;
			if (ss.isNullOrEmptyString(fontName)) {
				continue;
			}
			var $t1 = new $tab_FontProperties();
			$t1.set_fontFamily(fontName);
			$t1.set_weight(fontWeight);
			$tab_FontNotificationUtil.$appendFontIntoDictionary(fontPropsDict, $t1);
		}
	};
	$tab_FontNotificationUtil.$appendFontFromDataColumnIntoDictionary = function FontNotificationUtil$AppendFontFromDataColumnIntoDictionary(fontPropsDict, textStyles, styleNum) {
		var weight = '';
		var style = '';
		var fontName = '';
		if (ss.keyExists(textStyles, 'font_style') && parseInt(textStyles['font_style'].dataValues[styleNum].toString()) === 1) {
			style = 'italic';
		}
		if (ss.keyExists(textStyles, 'font_weight') && parseInt(textStyles['font_weight'].dataValues[styleNum].toString()) === 1) {
			weight = 'bold';
		}
		if (ss.keyExists(textStyles, 'font')) {
			fontName = textStyles['font'].dataValues[styleNum].toString();
		}
		if (ss.isNullOrEmptyString(fontName)) {
			return;
		}
		var $t1 = new $tab_FontProperties();
		$t1.set_fontFamily(fontName);
		$t1.set_weight(weight);
		$t1.set_style(style);
		var currentFontProperty = $t1;
		$tab_FontNotificationUtil.$appendFontIntoDictionary(fontPropsDict, currentFontProperty);
	};
	$tab_FontNotificationUtil.$raiseFontIdentified = function FontNotificationUtil$RaiseFontIdentified(fontProperties) {
		if (!ss.staticEquals($tab_FontNotificationUtil.$1$FontPropertiesIdentifiedField, null) && !tab.MiscUtil.isNullOrEmpty(fontProperties)) {
			$tab_FontNotificationUtil.$1$FontPropertiesIdentifiedField(fontProperties);
		}
	};
	$tab_FontNotificationUtil.$raiseAllFontsFound = function FontNotificationUtil$RaiseAllFontsFound() {
		if (!ss.staticEquals($tab_FontNotificationUtil.$1$AllFontsFoundField, null)) {
			$tab_FontNotificationUtil.$1$AllFontsFoundField();
		}
	};
	global.tab.FontNotificationUtil = $tab_FontNotificationUtil;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FontProperties
	var $tab_FontProperties = function() {
		this.$internalStyle = $tab_FontProperties.defaultStyle;
		this.$internalWeight = $tab_FontProperties.defaultWeight;
		this.$internalFamily = '';
		this.$hash = '';
	};
	$tab_FontProperties.__typeName = 'tab.FontProperties';
	global.tab.FontProperties = $tab_FontProperties;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FormatContainerModel
	var $tab_FormatContainerModel = function(parent) {
		this.$children = null;
		this.$isVisible = false;
		this.$blacklistedWidgetIds = ss.mkdict(['line-drop', 1]);
		this.$3$PreviewPropertiesField = null;
		$tab_FormatItemModel.call(this, parent);
	};
	$tab_FormatContainerModel.__typeName = 'tab.FormatContainerModel';
	$tab_FormatContainerModel.get_formatPaneModel = function FormatContainerModel$get_FormatPaneModel() {
		return $tab_ApplicationModel.get_instance().get_workbook().get_formatPaneModel();
	};
	global.tab.FormatContainerModel = $tab_FormatContainerModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FormatControlModel
	var $tab_FormatControlModel = function(parent) {
		$tab_FormatItemModel.call(this, parent);
	};
	$tab_FormatControlModel.__typeName = 'tab.FormatControlModel';
	global.tab.FormatControlModel = $tab_FormatControlModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FormatItemExtensions
	var $tab_FormatItemExtensions = function() {
	};
	$tab_FormatItemExtensions.__typeName = 'tab.FormatItemExtensions';
	$tab_FormatItemExtensions.hasPreview = function FormatItemExtensions$HasPreview(type) {
		return type === 'compositeContainer' || type === 'tabGroup';
	};
	global.tab.FormatItemExtensions = $tab_FormatItemExtensions;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FormatItemModel
	var $tab_FormatItemModel = function(parent) {
		this.$2$UpdatedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('formatItem'.toString()));
	};
	$tab_FormatItemModel.__typeName = 'tab.FormatItemModel';
	$tab_FormatItemModel.createModel = function FormatItemModel$CreateModel(parent, itemPresModel, context) {
		switch (itemPresModel.typeOfFormatItem) {
			case 'formatContainer': {
				var containerModel = new $tab_FormatContainerModel(parent);
				containerModel.update(itemPresModel, context);
				return containerModel;
			}
			case 'formatControl': {
				var controlModel = new $tab_FormatControlModel(parent);
				controlModel.update(itemPresModel, context);
				return controlModel;
			}
			default: {
				ss.Debug.fail('Attempted to create a FormatItemModel from an incompatible presentation model.');
				return null;
			}
		}
	};
	global.tab.FormatItemModel = $tab_FormatItemModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetAlertMeasuresFromSelectionCmd
	var $tab_GetAlertMeasuresFromSelectionCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetAlertMeasuresFromSelectionCmd$Response]).call(this);
	};
	$tab_GetAlertMeasuresFromSelectionCmd.__typeName = 'tab.GetAlertMeasuresFromSelectionCmd';
	global.tab.GetAlertMeasuresFromSelectionCmd = $tab_GetAlertMeasuresFromSelectionCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetAlertMeasuresFromSelectionCmd.Response
	var $tab_GetAlertMeasuresFromSelectionCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_GetAlertMeasuresFromSelectionCmd$Response.__typeName = 'tab.GetAlertMeasuresFromSelectionCmd$Response';
	global.tab.GetAlertMeasuresFromSelectionCmd$Response = $tab_GetAlertMeasuresFromSelectionCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetDashboardDragDropCmd
	var $tab_GetDashboardDragDropCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetDashboardDragDropCmd$Response]).call(this);
	};
	$tab_GetDashboardDragDropCmd.__typeName = 'tab.GetDashboardDragDropCmd';
	global.tab.GetDashboardDragDropCmd = $tab_GetDashboardDragDropCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetDashboardDragDropCmd.Response
	var $tab_GetDashboardDragDropCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_GetDashboardDragDropCmd$Response.__typeName = 'tab.GetDashboardDragDropCmd$Response';
	global.tab.GetDashboardDragDropCmd$Response = $tab_GetDashboardDragDropCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetDashboardSizingCmd
	var $tab_GetDashboardSizingCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetDashboardSizingCmd$Response]).call(this);
	};
	$tab_GetDashboardSizingCmd.__typeName = 'tab.GetDashboardSizingCmd';
	global.tab.GetDashboardSizingCmd = $tab_GetDashboardSizingCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetDashboardSizingCmd.Response
	var $tab_GetDashboardSizingCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_GetDashboardSizingCmd$Response.__typeName = 'tab.GetDashboardSizingCmd$Response';
	global.tab.GetDashboardSizingCmd$Response = $tab_GetDashboardSizingCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetDataSourceDataPresModelCmd
	var $tab_GetDataSourceDataPresModelCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetDataSourceDataPresModelCmd$Response]).call(this);
	};
	$tab_GetDataSourceDataPresModelCmd.__typeName = 'tab.GetDataSourceDataPresModelCmd';
	global.tab.GetDataSourceDataPresModelCmd = $tab_GetDataSourceDataPresModelCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetDataSourceDataPresModelCmd.Response
	var $tab_GetDataSourceDataPresModelCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_GetDataSourceDataPresModelCmd$Response.__typeName = 'tab.GetDataSourceDataPresModelCmd$Response';
	global.tab.GetDataSourceDataPresModelCmd$Response = $tab_GetDataSourceDataPresModelCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetThumbnailCmd
	var $tab_GetThumbnailCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetThumbnailCmd$Response]).call(this);
	};
	$tab_GetThumbnailCmd.__typeName = 'tab.GetThumbnailCmd';
	global.tab.GetThumbnailCmd = $tab_GetThumbnailCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetThumbnailCmd.Response
	var $tab_GetThumbnailCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_GetThumbnailCmd$Response.__typeName = 'tab.GetThumbnailCmd$Response';
	global.tab.GetThumbnailCmd$Response = $tab_GetThumbnailCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetURLSubstitutionKeywordsCmd
	var $tab_GetURLSubstitutionKeywordsCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetURLSubstitutionKeywordsCmd$Response]).call(this);
	};
	$tab_GetURLSubstitutionKeywordsCmd.__typeName = 'tab.GetURLSubstitutionKeywordsCmd';
	global.tab.GetURLSubstitutionKeywordsCmd = $tab_GetURLSubstitutionKeywordsCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetURLSubstitutionKeywordsCmd.Response
	var $tab_GetURLSubstitutionKeywordsCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_GetURLSubstitutionKeywordsCmd$Response.__typeName = 'tab.GetURLSubstitutionKeywordsCmd$Response';
	global.tab.GetURLSubstitutionKeywordsCmd$Response = $tab_GetURLSubstitutionKeywordsCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetWebCategoricalColorDialogCmd
	var $tab_GetWebCategoricalColorDialogCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetWebCategoricalColorDialogCmd$Response]).call(this);
	};
	$tab_GetWebCategoricalColorDialogCmd.__typeName = 'tab.GetWebCategoricalColorDialogCmd';
	global.tab.GetWebCategoricalColorDialogCmd = $tab_GetWebCategoricalColorDialogCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetWebCategoricalColorDialogCmd.Response
	var $tab_GetWebCategoricalColorDialogCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_GetWebCategoricalColorDialogCmd$Response.__typeName = 'tab.GetWebCategoricalColorDialogCmd$Response';
	global.tab.GetWebCategoricalColorDialogCmd$Response = $tab_GetWebCategoricalColorDialogCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetWebQuantitativeColorDialogCmd
	var $tab_GetWebQuantitativeColorDialogCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetWebQuantitativeColorDialogCmd$Response]).call(this);
	};
	$tab_GetWebQuantitativeColorDialogCmd.__typeName = 'tab.GetWebQuantitativeColorDialogCmd';
	global.tab.GetWebQuantitativeColorDialogCmd = $tab_GetWebQuantitativeColorDialogCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetWebQuantitativeColorDialogCmd.Response
	var $tab_GetWebQuantitativeColorDialogCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_GetWebQuantitativeColorDialogCmd$Response.__typeName = 'tab.GetWebQuantitativeColorDialogCmd$Response';
	global.tab.GetWebQuantitativeColorDialogCmd$Response = $tab_GetWebQuantitativeColorDialogCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GroupFontExtractor
	var $tab_GroupFontExtractor = function() {
	};
	$tab_GroupFontExtractor.__typeName = 'tab.GroupFontExtractor';
	global.tab.GroupFontExtractor = $tab_GroupFontExtractor;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GroupModel
	var $tab_GroupModel = function(parent) {
		$tab_FieldColumnModel.call(this, parent);
	};
	$tab_GroupModel.__typeName = 'tab.GroupModel';
	global.tab.GroupModel = $tab_GroupModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.HighlightItemsByPatternMatchCmd
	var $tab_HighlightItemsByPatternMatchCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_HighlightItemsByPatternMatchCmd$Response]).call(this);
	};
	$tab_HighlightItemsByPatternMatchCmd.__typeName = 'tab.HighlightItemsByPatternMatchCmd';
	global.tab.HighlightItemsByPatternMatchCmd = $tab_HighlightItemsByPatternMatchCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.HighlightItemsByPatternMatchCmd.Response
	var $tab_HighlightItemsByPatternMatchCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_HighlightItemsByPatternMatchCmd$Response.__typeName = 'tab.HighlightItemsByPatternMatchCmd$Response';
	global.tab.HighlightItemsByPatternMatchCmd$Response = $tab_HighlightItemsByPatternMatchCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.HistoryManager
	var $tab_HistoryManager = function() {
	};
	$tab_HistoryManager.__typeName = 'tab.HistoryManager';
	$tab_HistoryManager.setInitialState = function HistoryManager$SetInitialState(undo) {
		var item = $tab_HistoryManager.$createHistoryStackItem(undo, null);
		tab.HistoryUtil.replaceState(window.self, item.associatedState, null, null);
	};
	$tab_HistoryManager.addToHistory = function HistoryManager$AddToHistory(undo, redo) {
		var item = $tab_HistoryManager.$createHistoryStackItem(undo, redo);
		tab.HistoryUtil.pushState(window.self, item.associatedState, null, null);
		return item;
	};
	$tab_HistoryManager.$createHistoryStackItem = function HistoryManager$CreateHistoryStackItem(undo, redo) {
		$tab_HistoryManager.$cleanUnreachableStates();
		var state = { id: $tab_HistoryManager.$stateIdCounter, key: $tab_HistoryManager.$statePrefix };
		var undoRedoActionsItem = { onBack: undo, onForward: redo, id: $tab_HistoryManager.$stateIdCounter, associatedState: state };
		$tab_HistoryManager.$stateIdCounter++;
		$tab_HistoryManager.$historyStates.set(undoRedoActionsItem.id, undoRedoActionsItem);
		$tab_HistoryManager.$lastProcessedStateId = $tab_HistoryManager.$stateIdCounter;
		return undoRedoActionsItem;
	};
	$tab_HistoryManager.$cleanUnreachableStates = function HistoryManager$CleanUnreachableStates() {
		if ($tab_HistoryManager.$lastProcessedStateId < $tab_HistoryManager.$stateIdCounter) {
			for (var i = $tab_HistoryManager.$lastProcessedStateId + 1; i <= $tab_HistoryManager.$stateIdCounter; i++) {
				$tab_HistoryManager.$historyStates.delete(i);
			}
		}
	};
	$tab_HistoryManager.$handlePopStateEvent = function HistoryManager$HandlePopStateEvent(e) {
		if (ss.isNullOrUndefined(e)) {
			return;
		}
		var stateWrapper = e;
		if (ss.isNullOrUndefined(stateWrapper.state) || ss.isNullOrUndefined(stateWrapper.state.key) || !ss.referenceEquals(stateWrapper.state.key, $tab_HistoryManager.$statePrefix)) {
			return;
		}
		$tab_HistoryManager.$handleStateChange(stateWrapper.state);
	};
	$tab_HistoryManager.$handleStateChange = function HistoryManager$HandleStateChange(state) {
		var isBack = state.id < $tab_HistoryManager.$lastProcessedStateId;
		var lastState = $tab_HistoryManager.$historyStates.get(state.id);
		if (ss.isNullOrUndefined(lastState)) {
			return;
		}
		$tab_HistoryManager.$fireUndoRedo(isBack, lastState);
		$tab_HistoryManager.$lastProcessedStateId = state.id;
	};
	$tab_HistoryManager.$fireUndoRedo = function HistoryManager$FireUndoRedo(isBack, stateItem) {
		if (isBack) {
			if (!ss.staticEquals(stateItem.onBack, null)) {
				stateItem.onBack();
			}
		}
		else if (!ss.staticEquals(stateItem.onForward, null)) {
			stateItem.onForward();
		}
	};
	global.tab.HistoryManager = $tab_HistoryManager;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.HitTestSceneCmd
	var $tab_HitTestSceneCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_HitTestSceneCmd$Response]).call(this);
	};
	$tab_HitTestSceneCmd.__typeName = 'tab.HitTestSceneCmd';
	global.tab.HitTestSceneCmd = $tab_HitTestSceneCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.HitTestSceneCmd.Response
	var $tab_HitTestSceneCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_HitTestSceneCmd$Response.__typeName = 'tab.HitTestSceneCmd$Response';
	global.tab.HitTestSceneCmd$Response = $tab_HitTestSceneCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Utility.HTMLEscape
	var $tab_HTMLEscape = function() {
	};
	$tab_HTMLEscape.__typeName = 'tab.HTMLEscape';
	global.tab.HTMLEscape = $tab_HTMLEscape;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.IBrushingModelInfo
	var $tab_IBrushingModelInfo = function() {
	};
	$tab_IBrushingModelInfo.__typeName = 'tab.IBrushingModelInfo';
	global.tab.IBrushingModelInfo = $tab_IBrushingModelInfo;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ICommandModel
	var $tab_ICommandModel = function() {
	};
	$tab_ICommandModel.__typeName = 'tab.ICommandModel';
	global.tab.ICommandModel = $tab_ICommandModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.IContinuousRangeModel
	var $tab_IContinuousRangeModel = function() {
	};
	$tab_IContinuousRangeModel.__typeName = 'tab.IContinuousRangeModel';
	global.tab.IContinuousRangeModel = $tab_IContinuousRangeModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.IDataSourceDataNotification
	var $tab_IDataSourceDataNotification = function() {
	};
	$tab_IDataSourceDataNotification.__typeName = 'tab.IDataSourceDataNotification';
	global.tab.IDataSourceDataNotification = $tab_IDataSourceDataNotification;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Utility.IDetachableNotificationHandler
	var $tab_IDetachableNotificationHandler = function() {
	};
	$tab_IDetachableNotificationHandler.__typeName = 'tab.IDetachableNotificationHandler';
	global.tab.IDetachableNotificationHandler = $tab_IDetachableNotificationHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.IDrawItemFontExtractor
	var $tab_IDrawItemFontExtractor = function() {
	};
	$tab_IDrawItemFontExtractor.__typeName = 'tab.IDrawItemFontExtractor';
	global.tab.IDrawItemFontExtractor = $tab_IDrawItemFontExtractor;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.IExportImageHelper
	var $tab_IExportImageHelper = function() {
	};
	$tab_IExportImageHelper.__typeName = 'tab.IExportImageHelper';
	global.tab.IExportImageHelper = $tab_IExportImageHelper;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.IExportPdfHelper
	var $tab_IExportPdfHelper = function() {
	};
	$tab_IExportPdfHelper.__typeName = 'tab.IExportPdfHelper';
	global.tab.IExportPdfHelper = $tab_IExportPdfHelper;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.IHandleNotifications
	var $tab_IHandleNotifications = function() {
	};
	$tab_IHandleNotifications.__typeName = 'tab.IHandleNotifications';
	global.tab.IHandleNotifications = $tab_IHandleNotifications;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ImageTileTracker
	var $tab_ImageTileTracker = function() {
		this.$pendingCount = 0;
		this.$loadedCallbacks = null;
		this.$pendingCount = 0;
		this.$loadedCallbacks = [];
	};
	$tab_ImageTileTracker.__typeName = 'tab.ImageTileTracker';
	$tab_ImageTileTracker.get_$instance = function ImageTileTracker$get_Instance() {
		$tab_ImageTileTracker.$instance = $tab_ImageTileTracker.$instance || new $tab_ImageTileTracker();
		return $tab_ImageTileTracker.$instance;
	};
	$tab_ImageTileTracker.get_$log = function ImageTileTracker$get_Log() {
		return tab.Logger.lazyGetLogger($tab_ImageTileTracker);
	};
	$tab_ImageTileTracker.incrementPendingCount = function ImageTileTracker$IncrementPendingCount() {
		$tab_ImageTileTracker.get_$instance().$pendingCount++;
	};
	$tab_ImageTileTracker.decrementPendingCount = function ImageTileTracker$DecrementPendingCount() {
		var localInstance = $tab_ImageTileTracker.get_$instance();
		if (localInstance.$pendingCount > 0) {
			--localInstance.$pendingCount;
			if (localInstance.$pendingCount === 0) {
				for (var $t1 = 0; $t1 < localInstance.$loadedCallbacks.length; $t1++) {
					var callback = localInstance.$loadedCallbacks[$t1];
					try {
						callback();
					}
					catch ($t2) {
						var e = ss.Exception.wrap($t2);
						$tab_ImageTileTracker.get_$log().debug('Exception caught in ImageTileTracker callback: ' + e.get_message(), []);
					}
				}
				$tab_ImageTileTracker.reset();
			}
		}
		else {
			ss.Debug.assert(false, 'Decrementing refcount when zero');
		}
	};
	$tab_ImageTileTracker.callWhenImagesLoaded = function ImageTileTracker$CallWhenImagesLoaded(callback) {
		if ($tab_ImageTileTracker.get_$instance().$pendingCount === 0) {
			try {
				callback();
			}
			catch ($t1) {
				var e = ss.Exception.wrap($t1);
				$tab_ImageTileTracker.get_$log().debug('Exception caught in ImageTileTracker callback: ' + e.get_message(), []);
			}
		}
		else {
			$tab_ImageTileTracker.get_$instance().$loadedCallbacks.push(callback);
		}
	};
	$tab_ImageTileTracker.reset = function ImageTileTracker$Reset() {
		$tab_ImageTileTracker.$instance = null;
	};
	global.tab.ImageTileTracker = $tab_ImageTileTracker;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ImageZoneModel
	var $tab_ImageZoneModel = function(parent) {
		this.$zoneModel = null;
		this.$2$NewImageZoneField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('imageZone'.toString()));
		this.$zoneModel = parent.get_zone();
	};
	$tab_ImageZoneModel.__typeName = 'tab.ImageZoneModel';
	global.tab.ImageZoneModel = $tab_ImageZoneModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.IModelEventHandler
	var $tab_IModelEventHandler = function() {
	};
	$tab_IModelEventHandler.__typeName = 'tab.IModelEventHandler';
	global.tab.IModelEventHandler = $tab_IModelEventHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.InvalidationInfo
	var $tab_InvalidationInfo = function() {
		this.primarySheet = null;
		this.suppressActivation = null;
		this.layoutStatus = null;
		this.cmdResult = null;
	};
	$tab_InvalidationInfo.__typeName = 'tab.InvalidationInfo';
	global.tab.InvalidationInfo = $tab_InvalidationInfo;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.IRemoteCommandHandler
	var $tab_IRemoteCommandHandler = function() {
	};
	$tab_IRemoteCommandHandler.__typeName = 'tab.IRemoteCommandHandler';
	global.tab.IRemoteCommandHandler = $tab_IRemoteCommandHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Session.ISessionErrorHandler
	var $tab_ISessionErrorHandler = function() {
	};
	$tab_ISessionErrorHandler.__typeName = 'tab.ISessionErrorHandler';
	global.tab.ISessionErrorHandler = $tab_ISessionErrorHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.IsWebZoneUrlValidCmd
	var $tab_IsWebZoneUrlValidCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_IsWebZoneUrlValidCmd$Response]).call(this);
	};
	$tab_IsWebZoneUrlValidCmd.__typeName = 'tab.IsWebZoneUrlValidCmd';
	global.tab.IsWebZoneUrlValidCmd = $tab_IsWebZoneUrlValidCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.IsWebZoneUrlValidCmd.Response
	var $tab_IsWebZoneUrlValidCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_IsWebZoneUrlValidCmd$Response.__typeName = 'tab.IsWebZoneUrlValidCmd$Response';
	global.tab.IsWebZoneUrlValidCmd$Response = $tab_IsWebZoneUrlValidCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.JsModuleConfigurationBuilder
	var $tab_JsModuleConfigurationBuilder = function(moduleInfo) {
		this.moduleBeingConfigured = null;
		this.moduleBeingConfigured = moduleInfo;
	};
	$tab_JsModuleConfigurationBuilder.__typeName = 'tab.JsModuleConfigurationBuilder';
	global.tab.JsModuleConfigurationBuilder = $tab_JsModuleConfigurationBuilder;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.JsModuleInfo
	var $tab_JsModuleInfo = function(moduleName, assemblyName) {
		this.moduleName = null;
		this.assemblyName = null;
		this.loadingMethod = null;
		this.isRawJavaScriptModule = false;
		this.shouldExportResult = false;
		this.exportResultName = null;
		this.$dependencies = [];
		this.$stylesheetDependencies = [];
		tab.Param.verifyString(moduleName, 'moduleName');
		this.moduleName = moduleName;
		this.assemblyName = ss.coalesce(assemblyName, moduleName);
		this.loadingMethod = 'asynchronous';
	};
	$tab_JsModuleInfo.__typeName = 'tab.JsModuleInfo';
	global.tab.JsModuleInfo = $tab_JsModuleInfo;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LayerEncodingModel
	var $tab_LayerEncodingModel = function(parent, paneSpecId) {
		this.$markSizeModel = null;
		this.$2$NewLayerEncodingField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('layer-encoding[' + paneSpecId + ']'));
		this.$markSizeModel = new $tab_MarkSizeModel(this);
	};
	$tab_LayerEncodingModel.__typeName = 'tab.LayerEncodingModel';
	global.tab.LayerEncodingModel = $tab_LayerEncodingModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LayoutSession
	var $tab_LayoutSession = function(urlRoot, layoutid, commonDialogProvider) {
		this.layoutid = null;
		$tab_BaseSession.call(this, urlRoot, commonDialogProvider);
		this.layoutid = layoutid;
	};
	$tab_LayoutSession.__typeName = 'tab.LayoutSession';
	global.tab.LayoutSession = $tab_LayoutSession;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LayoutTreeItem
	var $tab_LayoutTreeItem = function(zoneCommonPresModel) {
		this.$children = null;
		this.parent = null;
		this.$dataPresModel = null;
		this.$dataPresModel = zoneCommonPresModel;
		this.$children = [];
	};
	$tab_LayoutTreeItem.__typeName = 'tab.LayoutTreeItem';
	global.tab.LayoutTreeItem = $tab_LayoutTreeItem;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LayoutTreeModel
	var $tab_LayoutTreeModel = function(parent) {
		this.$layoutTreeItemDictionary = null;
		this.$expandedStateDictionary = null;
		this.$2$LayoutTreeUpdatedField = null;
		this.rootNodes = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('dashboardZoneHierarchy'.toString()));
		this.$layoutTreeItemDictionary = {};
		this.$expandedStateDictionary = {};
		this.rootNodes = [];
	};
	$tab_LayoutTreeModel.__typeName = 'tab.LayoutTreeModel';
	$tab_LayoutTreeModel.$createLayoutTreeItemLookUpTable = function LayoutTreeModel$CreateLayoutTreeItemLookUpTable(zoneCommonList) {
		var dictionary = {};
		if (ss.isValue(zoneCommonList)) {
			for (var $t1 = 0; $t1 < zoneCommonList.length; $t1++) {
				var zoneCommon = zoneCommonList[$t1];
				dictionary[zoneCommon.zoneId] = new $tab_LayoutTreeItem(zoneCommon);
			}
		}
		return dictionary;
	};
	global.tab.LayoutTreeModel = $tab_LayoutTreeModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LegacyCategoricalQuickFilterData
	var $tab_LegacyCategoricalQuickFilterData = function(sheets, filterField, exclude, filterValues) {
		this.$targetSheets = null;
		this.$fieldName = null;
		this.$values = null;
		this.$includeAll = false;
		this.$isExclude = false;
		this.$targetSheets = sheets;
		this.$fieldName = filterField;
		this.$isExclude = exclude;
		if (ss.isValue(filterValues)) {
			this.$values = filterValues;
		}
		else {
			this.$values = [];
		}
	};
	$tab_LegacyCategoricalQuickFilterData.__typeName = 'tab.LegacyCategoricalQuickFilterData';
	global.tab.LegacyCategoricalQuickFilterData = $tab_LegacyCategoricalQuickFilterData;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LegacyCategoricalQuickFilterModel
	var $tab_LegacyCategoricalQuickFilterModel = function(parent, presModel) {
		$tab_LegacyFilterModel.call(this, parent, presModel);
	};
	$tab_LegacyCategoricalQuickFilterModel.__typeName = 'tab.LegacyCategoricalQuickFilterModel';
	global.tab.LegacyCategoricalQuickFilterModel = $tab_LegacyCategoricalQuickFilterModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LegacyFilterModel
	var $tab_LegacyFilterModel = function(parent, presModel) {
		this.$2$FilterUpdatedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('filter[' + presModel.name.join('_') + ']'));
		this.pm = presModel;
	};
	$tab_LegacyFilterModel.__typeName = 'tab.LegacyFilterModel';
	$tab_LegacyFilterModel.$isNonMidnightTimestampValue = function LegacyFilterModel$IsNonMidnightTimestampValue(val) {
		if (ss.isValue(val)) {
			var dv = { t: val.t, v: val.v };
			tableau.format.isDateTimeWithNonMidnightTime(dv);
		}
		return false;
	};
	$tab_LegacyFilterModel.isQuantitativeTimestampFilter = function LegacyFilterModel$IsQuantitativeTimestampFilter(filterState, min, max) {
		var ret = $tab_LegacyFilterModel.$isNonMidnightTimestampValue(min) || $tab_LegacyFilterModel.$isNonMidnightTimestampValue(max);
		if (!ret && ss.isValue(filterState)) {
			if (ss.isValue(filterState.data)) {
				ret = ret || $tab_LegacyFilterModel.$isNonMidnightTimestampValue(filterState.data.min) || $tab_LegacyFilterModel.$isNonMidnightTimestampValue(filterState.data.max);
			}
			if (!ret && ss.isValue(filterState.range)) {
				ret = ret || $tab_LegacyFilterModel.$isNonMidnightTimestampValue(filterState.range.min) || $tab_LegacyFilterModel.$isNonMidnightTimestampValue(filterState.range.max);
			}
		}
		return ret;
	};
	$tab_LegacyFilterModel.$isDateOrTimestamp = function LegacyFilterModel$IsDateOrTimestamp(val) {
		return val.t === 't' || val.t === 'd';
	};
	$tab_LegacyFilterModel.isQuantitativeDateFilter = function LegacyFilterModel$IsQuantitativeDateFilter(filterState, min, max) {
		if (ss.isValue(min)) {
			return $tab_LegacyFilterModel.$isDateOrTimestamp(min);
		}
		else if (ss.isValue(max)) {
			return $tab_LegacyFilterModel.$isDateOrTimestamp(max);
		}
		else if (ss.isValue(filterState)) {
			if (ss.isValue(filterState.data)) {
				if (ss.isValue(filterState.data.min)) {
					return $tab_LegacyFilterModel.$isDateOrTimestamp(filterState.data.min);
				}
				else if (ss.isValue(filterState.data.max)) {
					return $tab_LegacyFilterModel.$isDateOrTimestamp(filterState.data.max);
				}
			}
			if (ss.isValue(filterState.range)) {
				if (ss.isValue(filterState.range.min)) {
					return $tab_LegacyFilterModel.$isDateOrTimestamp(filterState.range.min);
				}
				else if (ss.isValue(filterState.range.max)) {
					return $tab_LegacyFilterModel.$isDateOrTimestamp(filterState.range.max);
				}
			}
		}
		return false;
	};
	$tab_LegacyFilterModel.isNormalValue = function LegacyFilterModel$IsNormalValue(f) {
		return ss.isValue(f) && (ss.isNullOrUndefined(f.s) || ss.referenceEquals(f.s, tableau.types.DataSpecial.DS_NORMAL)) && ss.isValue(f.v);
	};
	$tab_LegacyFilterModel.timestampsWithSameDateOrNull = function LegacyFilterModel$TimestampsWithSameDateOrNull(values) {
		var baseDate = null;
		for (var $t1 = 0; $t1 < values.length; $t1++) {
			var value = values[$t1];
			if (ss.isNullOrUndefined(value) || ss.referenceEquals(value.s, tableau.types.DataSpecial.DS_NULL) || ss.isNullOrUndefined(value.v) && value.t === 't') {
				continue;
			}
			if (!$tab_LegacyFilterModel.isNormalValue(value) || value.t !== 't') {
				return false;
			}
			var valueDatePart = (ss.Nullable$1.ge(value.v, 0) ? Math.floor(ss.unbox(value.v)) : Math.ceil(ss.unbox(value.v)));
			if (ss.isValue(baseDate) && valueDatePart !== baseDate) {
				return false;
			}
			baseDate = valueDatePart;
		}
		return ss.isValue(baseDate);
	};
	global.tab.LegacyFilterModel = $tab_LegacyFilterModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LegacyHierarchicalQuickFilterModel
	var $tab_LegacyHierarchicalQuickFilterModel = function(parent, presModel) {
		$tab_LegacyFilterModel.call(this, parent, presModel);
	};
	$tab_LegacyHierarchicalQuickFilterModel.__typeName = 'tab.LegacyHierarchicalQuickFilterModel';
	global.tab.LegacyHierarchicalQuickFilterModel = $tab_LegacyHierarchicalQuickFilterModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LegacyLegendModel
	var $tab_LegacyLegendModel = function(parent) {
		this.$2$NewLegacyLegendField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('serverRenderedLegend'.toString()));
	};
	$tab_LegacyLegendModel.__typeName = 'tab.LegacyLegendModel';
	global.tab.LegacyLegendModel = $tab_LegacyLegendModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LegacyQuantitativeQuickFilterModel
	var $tab_LegacyQuantitativeQuickFilterModel = function(parent, presModel) {
		$tab_LegacyFilterModel.call(this, parent, presModel);
	};
	$tab_LegacyQuantitativeQuickFilterModel.__typeName = 'tab.LegacyQuantitativeQuickFilterModel';
	global.tab.LegacyQuantitativeQuickFilterModel = $tab_LegacyQuantitativeQuickFilterModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LegacyQuickFilterDisplayModel
	var $tab_LegacyQuickFilterDisplayModel = function(parent) {
		this.$frame = null;
		this.$quickFilterCommandsModel = null;
		this.$2$QuickFilterDisplayUpdatedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('quickFilterDisplay'));
	};
	$tab_LegacyQuickFilterDisplayModel.__typeName = 'tab.LegacyQuickFilterDisplayModel';
	global.tab.LegacyQuickFilterDisplayModel = $tab_LegacyQuickFilterDisplayModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LegacyRelativeDateQuickFilterModel
	var $tab_LegacyRelativeDateQuickFilterModel = function(parent, presModel) {
		$tab_LegacyFilterModel.call(this, parent, presModel);
	};
	$tab_LegacyRelativeDateQuickFilterModel.__typeName = 'tab.LegacyRelativeDateQuickFilterModel';
	global.tab.LegacyRelativeDateQuickFilterModel = $tab_LegacyRelativeDateQuickFilterModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Utility.LinearRangeTransform
	var $tab_LinearRangeTransform = function(min, max) {
		this.$min = 0;
		this.$max = 0;
		$tab_RangeTransform.call(this);
		if (min <= max) {
			this.$min = min;
			this.$max = max;
		}
		else {
			this.$min = max;
			this.$max = min;
		}
	};
	$tab_LinearRangeTransform.__typeName = 'tab.LinearRangeTransform';
	global.tab.LinearRangeTransform = $tab_LinearRangeTransform;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LocalUbertipInfo
	var $tab_LocalUbertipInfo = function(interactedTupleId, affectedTupleIds, paneDescriptorKey, needRemoteUbertip) {
		this.$interactedTupleId = 0;
		this.$affectedTupleIds = null;
		this.$paneDescriptorKey = null;
		this.$needRemoteUbertip = false;
		this.$interactedTupleId = interactedTupleId;
		this.$affectedTupleIds = affectedTupleIds;
		this.$paneDescriptorKey = paneDescriptorKey;
		this.$needRemoteUbertip = needRemoteUbertip;
	};
	$tab_LocalUbertipInfo.__typeName = 'tab.LocalUbertipInfo';
	global.tab.LocalUbertipInfo = $tab_LocalUbertipInfo;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LruCache
	var $tab_LruCache$2 = function(TKey, TValue) {
		var $type = function(maxItemsInCache) {
			this.$cache = {};
			this.$order = new (ss.makeGenericType($tab_$DoubleLinkedList$1, [ss.makeGenericType($tab_$CacheRecord$2, [TKey, TValue])]))();
			this.$maxItemsInCache = 0;
			ss.Debug.assert(maxItemsInCache > 0, 'Cache must be able to handle some items');
			this.$maxItemsInCache = maxItemsInCache;
		};
		ss.registerGenericClassInstance($type, $tab_LruCache$2, [TKey, TValue], {
			add: function LruCache$Add(key, value) {
				ss.Debug.assert(ss.getKeyCount(this.$cache) <= this.$maxItemsInCache, 'Cache holds more elements than allowed.');
				var record = this.$cache[key];
				if (ss.isValue(record)) {
					this.delete$1(key);
				}
				if (ss.getKeyCount(this.$cache) === this.$maxItemsInCache) {
					this.delete$1(this.$order.$tail.$data.$key);
				}
				record = new (ss.makeGenericType($tab_$LinkedListNode$1, [ss.makeGenericType($tab_$CacheRecord$2, [TKey, TValue])]))(new (ss.makeGenericType($tab_$CacheRecord$2, [TKey, TValue]))(key, value));
				this.$cache[key] = record;
				this.$order.$addToFront(record);
			},
			get: function LruCache$Get(key) {
				var result = this.$cache[key];
				if (ss.isValue(result)) {
					this.$order.$delete(result);
					this.$order.$addToFront(result);
					return result.$data.$value;
				}
				return ss.getDefaultValue(TValue);
			},
			has: function LruCache$Has(key) {
				return ss.keyExists(this.$cache, key);
			},
			delete$1: function LruCache$Delete(key) {
				if (!this.has(key)) {
					return;
				}
				ss.Debug.assert(ss.getKeyCount(this.$cache) > 0, 'Attempting to delete item from empty dictionary');
				var recordToDelete = this.$cache[key];
				delete this.$cache[key];
				this.$order.$delete(recordToDelete);
			},
			clear: function LruCache$Clear() {
				var keys = _.keys(this.$cache);
				for (var i = 0, len = keys.length; i < len; i++) {
					this.delete$1(keys[i]);
				}
			}
		}, function() {
			return null;
		}, function() {
			return [];
		});
		return $type;
	};
	$tab_LruCache$2.__typeName = 'tab.LruCache$2';
	ss.initGenericClass($tab_LruCache$2, $asm, 2);
	global.tab.LruCache$2 = $tab_LruCache$2;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.MapOptionsInfoModel
	var $tab_MapOptionsInfoModel = function(parent) {
		this.$2$UpdatedMapOptionsInfoField = null;
		this.$2$StopNotifyingField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('lightweightMapOptions'.toString()));
		this.pm = {};
	};
	$tab_MapOptionsInfoModel.__typeName = 'tab.MapOptionsInfoModel';
	global.tab.MapOptionsInfoModel = $tab_MapOptionsInfoModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.MapScaleInfoModel
	var $tab_MapScaleInfoModel = function(parent) {
		this.$2$UpdatedMapScaleInfoField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('mapScaleInfo'.toString()));
	};
	$tab_MapScaleInfoModel.__typeName = 'tab.MapScaleInfoModel';
	global.tab.MapScaleInfoModel = $tab_MapScaleInfoModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.MapServerModel
	var $tab_MapServerModel = function(parent) {
		this.$radialSelectionDistanceInfoModel = null;
		this.$mapScaleInfoModel = null;
		this.$2$NewMapServerInfoField = null;
		this.$2$TileSourceChangedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('mapServer'.toString()));
		this.$radialSelectionDistanceInfoModel = new $tab_RadialSelectionDistanceInfoModel(this);
		this.$mapScaleInfoModel = new $tab_MapScaleInfoModel(this);
	};
	$tab_MapServerModel.__typeName = 'tab.MapServerModel';
	global.tab.MapServerModel = $tab_MapServerModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.MarginDefinition
	var $tab_MarginDefinition = function() {
		$tab_SpacingDefinition.call(this, null, null, null, null, null);
	};
	$tab_MarginDefinition.__typeName = 'tab.MarginDefinition';
	$tab_MarginDefinition.$ctor1 = function(style) {
		$tab_SpacingDefinition.call(this, style.margin, style.marginLeft, style.marginRight, style.marginTop, style.marginBottom);
	};
	global.tab.MarginDefinition = $tab_MarginDefinition;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.MarksCardModel
	var $tab_MarksCardModel = function(parent) {
		this.$layers = [];
		this.$activePaneSpecId = null;
		this.$2$NewMarksCardField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('marksCardPresModel'.toString()));
	};
	$tab_MarksCardModel.__typeName = 'tab.MarksCardModel';
	global.tab.MarksCardModel = $tab_MarksCardModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.MarkSizeModel
	var $tab_MarkSizeModel = function(parent) {
		this.$parentModel = null;
		this.$transform = null;
		this.$2$SliderFractionUpdatedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('markSize'.toString()));
		this.$parentModel = parent;
	};
	$tab_MarkSizeModel.__typeName = 'tab.MarkSizeModel';
	global.tab.MarkSizeModel = $tab_MarkSizeModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Model
	var $tab_Model = function(parent, presModelKey) {
		this.pm = null;
		this.presModelKey = null;
		this.parent = null;
		this.parent = parent;
		this.presModelKey = presModelKey;
	};
	$tab_Model.__typeName = 'tab.Model';
	$tab_Model.nonWorldUpdate = function Model$NonWorldUpdate(updateAction) {
		var eventHandler = new $tab_DeferredModelEventHandler();
		try {
			updateAction({ eventHandler: eventHandler });
		}
		finally {
			if (ss.isValue(eventHandler)) {
				eventHandler.dispose();
			}
		}
	};
	global.tab.Model = $tab_Model;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ModelHolder
	var $tab_ModelHolder$1 = function(T) {
		var $type = function() {
			this.$model = null;
			this.$disposables = new tab.DisposableHolder();
			this.$1$BindEventsField = null;
			this.$1$UnbindEventsField = null;
			this.$1$ModelChangedField = null;
		};
		ss.registerGenericClassInstance($type, $tab_ModelHolder$1, [T], {
			add_$bindEvents: function ModelHolder$add_BindEvents(value) {
				this.$1$BindEventsField = ss.delegateCombine(this.$1$BindEventsField, value);
			},
			remove_$bindEvents: function ModelHolder$remove_BindEvents(value) {
				this.$1$BindEventsField = ss.delegateRemove(this.$1$BindEventsField, value);
			},
			add_$unbindEvents: function ModelHolder$add_UnbindEvents(value) {
				this.$1$UnbindEventsField = ss.delegateCombine(this.$1$UnbindEventsField, value);
			},
			remove_$unbindEvents: function ModelHolder$remove_UnbindEvents(value) {
				this.$1$UnbindEventsField = ss.delegateRemove(this.$1$UnbindEventsField, value);
			},
			add_$modelChanged: function ModelHolder$add_ModelChanged(value) {
				this.$1$ModelChangedField = ss.delegateCombine(this.$1$ModelChangedField, value);
			},
			remove_$modelChanged: function ModelHolder$remove_ModelChanged(value) {
				this.$1$ModelChangedField = ss.delegateRemove(this.$1$ModelChangedField, value);
			},
			get_model: function ModelHolder$get_Model() {
				return this.$model;
			},
			set_model: function ModelHolder$set_Model(value) {
				var oldModel = this.$model;
				this.$model = value;
				if (!ss.referenceEquals(oldModel, this.$model)) {
					if (ss.isValue(oldModel) && !ss.staticEquals(this.$1$UnbindEventsField, null)) {
						this.$1$UnbindEventsField(oldModel);
					}
					if (ss.isValue(this.$model) && !ss.staticEquals(this.$1$BindEventsField, null)) {
						this.$1$BindEventsField(this.$model);
					}
					if (!ss.staticEquals(this.$1$ModelChangedField, null)) {
						this.$1$ModelChangedField();
					}
				}
			},
			addModelChangedHandler: function ModelHolder$AddModelChangedHandler(modelChangedHandler) {
				this.add_$modelChanged(modelChangedHandler);
				if (ss.isValue(this.$model)) {
					modelChangedHandler();
				}
				return this;
			},
			removeModelChangedHandler: function ModelHolder$RemoveModelChangedHandler(modelChangedHandler) {
				this.remove_$modelChanged(modelChangedHandler);
			},
			addEventBinding: function ModelHolder$AddEventBinding(eventBinder, eventUnbinder) {
				this.add_$bindEvents(eventBinder);
				if (ss.isValue(this.$model)) {
					eventBinder(this.$model);
				}
				this.add_$unbindEvents(eventUnbinder);
				return this;
			},
			removeEventBinding: function ModelHolder$RemoveEventBinding(eventBinder, eventUnbinder) {
				this.remove_$bindEvents(eventBinder);
				this.remove_$unbindEvents(eventUnbinder);
				if (!ss.staticEquals(eventUnbinder, null) && ss.isValue(this.$model)) {
					eventUnbinder(this.$model);
				}
			},
			createChildModelHolder: function(TChild) {
				return function ModelHolder$CreateChildModelHolder(childFunc) {
					var result = new (ss.makeGenericType($tab_ModelHolder$1, [TChild]))();
					result.$disposables.add$1(this.newDisposableContext().addModelChangedHandler(ss.mkdel(this, function() {
						var childModel = null;
						if (ss.isValue(this.get_model())) {
							childModel = childFunc(this.get_model());
						}
						result.set_model(childModel);
					})));
					this.$disposables.add$1(result);
					return result;
				};
			},
			dispose: function ModelHolder$Dispose() {
				this.set_model(null);
				this.$1$BindEventsField = null;
				this.$1$UnbindEventsField = null;
				this.$1$ModelChangedField = null;
				this.$disposables.dispose();
			},
			newDisposableContext: function ModelHolder$NewDisposableContext() {
				return new (ss.makeGenericType($tab_ModelHolderContext$1, [T]))(this);
			}
		}, function() {
			return null;
		}, function() {
			return [ss.IDisposable];
		});
		return $type;
	};
	$tab_ModelHolder$1.__typeName = 'tab.ModelHolder$1';
	ss.initGenericClass($tab_ModelHolder$1, $asm, 1);
	global.tab.ModelHolder$1 = $tab_ModelHolder$1;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ModelHolderContext
	var $tab_ModelHolderContext$1 = function(T) {
		var $type = function(modelHolder) {
			this.$disposableHolder = null;
			this.$modelHolder = null;
			this.$disposableHolder = new tab.DisposableHolder();
			this.$modelHolder = modelHolder;
		};
		ss.registerGenericClassInstance($type, $tab_ModelHolderContext$1, [T], {
			addModelChangedHandler: function ModelHolderContext$AddModelChangedHandler(modelChangedHandler) {
				this.$modelHolder.addModelChangedHandler(modelChangedHandler);
				this.$disposableHolder.add(ss.mkdel(this, function() {
					this.$modelHolder.removeModelChangedHandler(modelChangedHandler);
				}));
				return this;
			},
			addEventBinding: function ModelHolderContext$AddEventBinding(eventBinder, eventUnbinder) {
				this.$modelHolder.addEventBinding(eventBinder, eventUnbinder);
				this.$disposableHolder.add(ss.mkdel(this, function() {
					this.$modelHolder.removeEventBinding(eventBinder, eventUnbinder);
				}));
				return this;
			},
			dispose: function ModelHolderContext$Dispose() {
				this.$disposableHolder.dispose();
			}
		}, function() {
			return null;
		}, function() {
			return [ss.IDisposable];
		});
		return $type;
	};
	$tab_ModelHolderContext$1.__typeName = 'tab.ModelHolderContext$1';
	ss.initGenericClass($tab_ModelHolderContext$1, $asm, 1);
	global.tab.ModelHolderContext$1 = $tab_ModelHolderContext$1;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ModelUtils
	var $tab_ModelUtils = function() {
	};
	$tab_ModelUtils.__typeName = 'tab.ModelUtils';
	$tab_ModelUtils.getPendingZoneContentModel = function ModelUtils$GetPendingZoneContentModel(zoneId) {
		if (!$tab_ProgressiveLoader.get_progressiveLoadEnabled()) {
			return null;
		}
		var cc = ($tab_CommandController.get_hasInstance() ? $tab_CommandController.get() : null);
		if (ss.isNullOrUndefined(cc) || ss.isNullOrUndefined(cc.get_loader())) {
			return null;
		}
		return cc.get_loader().getPendingZoneContentModel(zoneId);
	};
	$tab_ModelUtils.getViewSession = function ModelUtils$GetViewSession(sheetName) {
		return $tab_ModelUtils.findContentDashboard().getViewSession(sheetName);
	};
	$tab_ModelUtils.getModelsForViz = function(T) {
		return function ModelUtils$GetModelsForViz(contentDashboard, viz) {
			var models = [];
			if (ss.isValue(contentDashboard)) {
				var $t1 = contentDashboard.get_zoneModels();
				for (var $t2 = 0; $t2 < $t1.length; $t2++) {
					var zone = $t1[$t2];
					if (ss.isInstanceOfType(zone.get_model(), T) && ss.referenceEquals(zone.get_worksheetName(), viz.get_worksheetName())) {
						models.push(ss.cast(zone.get_model(), T));
					}
				}
			}
			return models;
		};
	};
	$tab_ModelUtils.getVisualModels = function ModelUtils$GetVisualModels(appModel) {
		var dashboardModel = $tab_ModelUtils.findContentDashboard(appModel);
		return $tab_ModelUtils.getVisualModelsFromDashboard(dashboardModel);
	};
	$tab_ModelUtils.getVisualModelsFromDashboard = function ModelUtils$GetVisualModelsFromDashboard(dashboardModel) {
		var result = {};
		if (ss.isNullOrUndefined(dashboardModel)) {
			return result;
		}
		var $t1 = dashboardModel.get_zoneModels();
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var zone = $t1[$t2];
			var visualModel = zone.get_visualModel();
			if (ss.isValue(visualModel)) {
				result[zone.get_worksheetName()] = visualModel;
			}
		}
		if ($tab_ProgressiveLoader.get_progressiveLoadEnabled()) {
			var cc = ($tab_CommandController.get_hasInstance() ? $tab_CommandController.get() : null);
			if (ss.isValue(cc) && ss.isValue(cc.get_loader())) {
				var pendingVMs = cc.get_loader().getPendingVisuals();
				var $t3 = _.keys(pendingVMs);
				for (var $t4 = 0; $t4 < $t3.length; $t4++) {
					var sheet = $t3[$t4];
					result[sheet] = pendingVMs[sheet];
				}
			}
		}
		return result;
	};
	$tab_ModelUtils.getSheetInfoPresModel = function ModelUtils$GetSheetInfoPresModel(appModel, sheetName) {
		var workbookModel = appModel.get_workbook();
		if (ss.isNullOrUndefined(workbookModel) || ss.isNullOrUndefined(workbookModel.get_sheetsInfo())) {
			return null;
		}
		var $t1 = workbookModel.get_sheetsInfo();
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var sheetInfo = $t1[$t2];
			if (ss.referenceEquals(sheetInfo.sheet, sheetName)) {
				return sheetInfo;
			}
		}
		return null;
	};
	$tab_ModelUtils.getVisualModel = function ModelUtils$GetVisualModel(appModel, sheetName) {
		var result = null;
		var dashboardModel = $tab_ModelUtils.findContentDashboard(appModel);
		if (ss.isNullOrUndefined(dashboardModel)) {
			return result;
		}
		var $t1 = dashboardModel.get_zoneModels();
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var zone = $t1[$t2];
			var visualModel = zone.get_visualModel();
			if (ss.isValue(visualModel)) {
				var worksheetName = zone.get_worksheetName();
				if (ss.referenceEquals(worksheetName, sheetName)) {
					result = visualModel;
					break;
				}
			}
		}
		if ($tab_ProgressiveLoader.get_progressiveLoadEnabled() && ss.isNullOrUndefined(result)) {
			var cc = ($tab_CommandController.get_hasInstance() ? $tab_CommandController.get() : null);
			if (ss.isValue(cc) && ss.isValue(cc.get_loader())) {
				result = cc.get_loader().getPendingVisual(sheetName);
			}
		}
		return result;
	};
	$tab_ModelUtils.getVisualModelFromVisualId = function ModelUtils$GetVisualModelFromVisualId(visualId, appModel) {
		if (ss.isNullOrUndefined(appModel)) {
			appModel = $tab_ApplicationModel.get_instance();
		}
		var result = null;
		var dashboardModel = $tab_ModelUtils.findContentDashboard(appModel);
		if (ss.isNullOrUndefined(dashboardModel)) {
			return result;
		}
		var $t1 = dashboardModel.get_zoneModels();
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var zone = $t1[$t2];
			var visualModel = zone.get_visualModel();
			if (ss.isValue(visualModel)) {
				if (_.isEqual(visualModel.get_visualId(), visualId)) {
					result = visualModel;
					break;
				}
			}
		}
		return result;
	};
	$tab_ModelUtils.getVisualId = function ModelUtils$GetVisualId(sheetName) {
		return $tab_ModelUtils.getVisualModel($tab_ApplicationModel.get_instance(), sheetName).get_visualId();
	};
	$tab_ModelUtils.getFirstAvailableWebZoneName = function ModelUtils$GetFirstAvailableWebZoneName(appModel) {
		var result = null;
		var dashboardModel = $tab_ModelUtils.findContentDashboard(appModel);
		if (ss.isNullOrUndefined(dashboardModel)) {
			return result;
		}
		var $t1 = dashboardModel.get_zoneModels();
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var zone = $t1[$t2];
			if (zone.get_zoneType() === 'web') {
				var id = zone.get_zoneId();
				result = 'frame_' + id.toString();
				break;
			}
		}
		return result;
	};
	$tab_ModelUtils.isActiveZone = function ModelUtils$IsActiveZone(zoneId) {
		switch (tsConfig.current_sheet_type) {
			case 'dashboard':
			case 'story': {
				return zoneId === $tab_ModelUtils.findContentDashboard().get_activeZoneID();
			}
			case 'worksheet':
			default: {
				return true;
			}
		}
	};
	$tab_ModelUtils.getZoneIdForSheetName = function ModelUtils$GetZoneIdForSheetName(worksheetName) {
		var dm = $tab_ModelUtils.findContentDashboard();
		var $t1 = dm.get_zoneModels();
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var zone = $t1[$t2];
			if (zone.get_zoneType() === 'viz' && ss.referenceEquals(zone.get_worksheetName(), worksheetName)) {
				return zone.get_zoneId();
			}
		}
		return -1;
	};
	$tab_ModelUtils.hasBorder = function ModelUtils$HasBorder(styledBox) {
		return styledBox.get_borderStyle() !== 'bs-none' && styledBox.get_borderWidth() !== 0;
	};
	$tab_ModelUtils.createFilterModel = function ModelUtils$CreateFilterModel(parent, presModel) {
		switch (presModel.type) {
			case 'Q': {
				return new $tab_LegacyQuantitativeQuickFilterModel(parent, presModel);
			}
			case 'H': {
				return new $tab_LegacyHierarchicalQuickFilterModel(parent, presModel);
			}
			case 'C': {
				return new $tab_LegacyCategoricalQuickFilterModel(parent, presModel);
			}
			case 'RD': {
				return new $tab_LegacyRelativeDateQuickFilterModel(parent, presModel);
			}
			default: {
				return new $tab_LegacyFilterModel(parent, presModel);
			}
		}
	};
	$tab_ModelUtils.findMatchingFilterModel = function ModelUtils$FindMatchingFilterModel(visualModel, quickFilterModel) {
		var field = quickFilterModel.get_frame().param;
		return visualModel.get_filterModels()[field];
	};
	$tab_ModelUtils.setVisualValidStateOnModel = function ModelUtils$SetVisualValidStateOnModel(t, model, valid) {
		if (ss.isNullOrUndefined(model)) {
			return;
		}
		model.setIsVisualValid(valid, t.modelUpdateContext);
	};
	$tab_ModelUtils.invalidateVisuals = function ModelUtils$InvalidateVisuals(sheetNames) {
		if (ss.isNullOrUndefined(sheetNames)) {
			return;
		}
		for (var $t1 = 0; $t1 < sheetNames.length; $t1++) {
			var sheet = sheetNames[$t1];
			var visualModel = $tab_ModelUtils.getVisualModel($tab_ApplicationModel.get_instance(), sheet);
			if (ss.isValue(visualModel)) {
				$tab_VizClientCommands.invalidateVisualModel(visualModel);
			}
		}
	};
	$tab_ModelUtils.setVisualValidStateOnPresModel = function ModelUtils$SetVisualValidStateOnPresModel(t, model) {
		if (ss.isNullOrUndefined(model)) {
			return;
		}
		t.makeMutablePresModel(model, false).valid = false;
	};
	$tab_ModelUtils.findContentDashboard = function ModelUtils$FindContentDashboard(appModel) {
		if (ss.isNullOrUndefined(appModel)) {
			appModel = $tab_ApplicationModel.get_instance();
		}
		return appModel.get_workbook().findContentDashboard();
	};
	$tab_ModelUtils.findActiveVisual = function ModelUtils$FindActiveVisual() {
		var dashboard = $tab_ModelUtils.findContentDashboard();
		if (ss.isNullOrUndefined(dashboard) || ss.isNullOrUndefined(dashboard.get_zoneModels())) {
			return null;
		}
		return dashboard.get_activeVisual();
	};
	$tab_ModelUtils.findActiveOrDefaultVisual = function ModelUtils$FindActiveOrDefaultVisual() {
		var dashboard = $tab_ModelUtils.findContentDashboard();
		if (ss.isNullOrUndefined(dashboard) || ss.isNullOrUndefined(dashboard.get_zoneModels())) {
			return null;
		}
		var toRet = dashboard.get_activeVisual();
		if (ss.isValue(toRet)) {
			return toRet;
		}
		var $t1 = dashboard.get_zoneModels();
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var zone = $t1[$t2];
			if (ss.isValue(zone.get_visualModel())) {
				return zone.get_visualModel();
			}
		}
		return null;
	};
	$tab_ModelUtils.reValidateVisualModels = function ModelUtils$ReValidateVisualModels(context) {
		var models = $tab_ModelUtils.getVisualModels($tab_ApplicationModel.get_instance());
		var $t1 = _.values(models);
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var model = $t1[$t2];
			model.reValidate(context);
		}
	};
	$tab_ModelUtils.findActivePaneSpecId = function ModelUtils$FindActivePaneSpecId() {
		var activeVisual = $tab_ModelUtils.findActiveOrDefaultVisual();
		if (ss.isValue(activeVisual) && ss.isValue(activeVisual.get_marksCardModel())) {
			return activeVisual.get_marksCardModel().get_activePaneSpecId();
		}
		return null;
	};
	$tab_ModelUtils.hasAnyImpliedSelection = function ModelUtils$HasAnyImpliedSelection() {
		var visualModels = $tab_ModelUtils.getVisualModels($tab_ApplicationModel.get_instance());
		var $t1 = _.keys(visualModels);
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var sheetName = $t1[$t2];
			var model = visualModels[sheetName];
			if (!model.get_impliedSelectionModel().isEmpty) {
				return true;
			}
		}
		return false;
	};
	$tab_ModelUtils.mergeMapPresModelDelta = function ModelUtils$MergeMapPresModelDelta(existingMap, delta) {
		if (ss.isNullOrUndefined(existingMap) || ss.isNullOrUndefined(delta)) {
			return;
		}
		var $t1 = _.keys(existingMap);
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var key = $t1[$t2];
			var val = delta[key];
			if (typeof(val) === 'undefined') {
				delta[key] = existingMap[key];
			}
			else if (val === null) {
				delete delta[key];
			}
		}
	};
	$tab_ModelUtils.isLegacyMenuItemEnabled = function ModelUtils$IsLegacyMenuItemEnabled(name) {
		var legacyMenuItems = $tab_ApplicationModel.get_instance().get_appPresModel().toolbarPresModel.legacyMenus;
		if (ss.isNullOrUndefined(legacyMenuItems)) {
			return false;
		}
		var legacyMenuItem = _.find(legacyMenuItems, function(item) {
			return item.legacyMenuName === name;
		});
		return ss.isValue(legacyMenuItem) && _.every(legacyMenuItem.legacyMenuStates, function(state) {
			return state !== 'grayed';
		});
	};
	global.tab.ModelUtils = $tab_ModelUtils;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ModuleManager
	var $tab_ModuleManager = function() {
	};
	$tab_ModuleManager.__typeName = 'tab.ModuleManager';
	$tab_ModuleManager.$createInstance = function ModuleManager$CreateInstance(type, arguments1) {
		return ((arguments1.length === 0) ? ss.createInstance(type) : ss.applyConstructor(type, arguments1));
	};
	$tab_ModuleManager.load = function(T) {
		return function ModuleManager$Load(arguments1) {
			var result = $tab_ModuleManager.load$1(ss.getTypeFullName(T), arguments1);
			return result;
		};
	};
	$tab_ModuleManager.load$1 = function ModuleManager$Load(uniqueModuleName, arguments1) {
		tab.Param.verifyString(uniqueModuleName, 'uniqueModuleName');
		$tab_ModuleManager.$ensureConfigured();
		var moduleInfo = $tab_ModuleManager.$getJsModuleInfo(uniqueModuleName);
		if (ss.keyExists($tab_ModuleManager.$modules, moduleInfo.moduleName)) {
			return $tab_ModuleManager.$modules[moduleInfo.moduleName];
		}
		var deferredLoadResult = $.Deferred();
		$tab_ModuleManager.$modules[moduleInfo.moduleName] = deferredLoadResult;
		$tab_ModuleManager.$setupErrorHandler(Object).call(null, deferredLoadResult, moduleInfo.moduleName);
		var typeName = 'tab.' + moduleInfo.assemblyName + 'Factory';
		deferredLoadResult.always(function() {
			$tab_ModuleManager.$moduleTrackerInstance.moduleLoaded();
		});
		$tab_ModuleManager.$moduleTrackerInstance.loadRequested();
		$tab_ModuleManager.$loadDependencies(moduleInfo).done([function() {
			$tab_ModuleManager.$performTheLoad(arguments1, moduleInfo, typeName, deferredLoadResult);
		}]).fail([function(error) {
			var exception;
			var message = 'Failed to load dependencies for the module: ' + moduleInfo.moduleName;
			if (ss.isNullOrUndefined(error)) {
				exception = new ss.Exception(message);
			}
			else {
				var innerException = new ss.Exception(error.toString());
				exception = new ss.Exception(message, innerException);
			}
			deferredLoadResult.reject(exception);
		}]);
		return deferredLoadResult;
	};
	$tab_ModuleManager.$loadDependencies = function ModuleManager$LoadDependencies(moduleInfo) {
		var deferred = $.Deferred();
		if (!moduleInfo.get_hasDependencies()) {
			deferred.resolve();
		}
		else {
			var modulesToLoad = _.map(moduleInfo.get_dependencies(), function(dependency) {
				return dependency.moduleName;
			});
			var resolveDeferredAction = function() {
				deferred.resolve();
			};
			var errorHandler = function(error) {
				deferred.reject(error);
			};
			$tab_ModuleManager.loadModulesSequentially(resolveDeferredAction, errorHandler, modulesToLoad);
		}
		if (moduleInfo.get_hasDependenciesOnStylesheets()) {
			var $t1 = ss.getEnumerator(moduleInfo.get_stylesheetDependencies());
			try {
				while ($t1.moveNext()) {
					var cssFile = $t1.current();
					$tab_ModuleManager.loadCss(cssFile);
				}
			}
			finally {
				$t1.dispose();
			}
		}
		return deferred;
	};
	$tab_ModuleManager.$performTheLoad = function ModuleManager$PerformTheLoad(arguments1, moduleInfo, typeName, deferredLoadResult) {
		switch (moduleInfo.loadingMethod) {
			case 'asynchronous':
			case 'synchronous': {
				$tab_ModuleManager.$loadModule(Object).call(null, arguments1, moduleInfo, typeName, deferredLoadResult);
				break;
			}
			case 'alreadyLoaded':
			default: {
				if (moduleInfo.isRawJavaScriptModule) {
					deferredLoadResult.resolve.apply(deferredLoadResult, null);
				}
				else {
					var qualifiedAssemblyName = $tab_ModuleManager.$jsPrefix + moduleInfo.assemblyName.toLowerCase();
					var asm = ss.load(qualifiedAssemblyName);
					var tinst = $tab_ModuleManager.$createInstance(ss.getType(typeName, asm), arguments1);
					deferredLoadResult.resolve(tinst);
				}
				break;
			}
		}
	};
	$tab_ModuleManager.loadModulesSequentially = function ModuleManager$LoadModulesSequentially(allLoadedCallback, errorCallback, moduleNamesToLoad) {
		ss.Debug.assert(ss.isValue(moduleNamesToLoad), 'moduleNamesToLoad is null');
		moduleNamesToLoad = moduleNamesToLoad || [];
		var BeginIndex = 0;
		$tab_ModuleManager.load$1(moduleNamesToLoad[BeginIndex], []).done(function() {
			$tab_ModuleManager.$loadModulesSequentiallyInternal(moduleNamesToLoad, allLoadedCallback, 1);
		}).fail(function(error) {
			if (!ss.staticEquals(errorCallback, null)) {
				errorCallback(error);
			}
		});
	};
	$tab_ModuleManager.register = function(T) {
		return function ModuleManager$Register(name, moduleAssemblyName) {
			var resName = $tab_ModuleManager.$jsPrefix + name.toLowerCase();
			$tab_ModuleManager.$moduleMapping[resName] = (tsConfig.debugMode ? (resName + '.debug') : resName);
			var moduleInfo = new $tab_JsModuleInfo(name, moduleAssemblyName);
			$tab_ModuleManager.$moduleInfos[ss.getTypeFullName(T)] = moduleInfo;
			return new $tab_JsModuleConfigurationBuilder(moduleInfo);
		};
	};
	$tab_ModuleManager.registerDependencyModule = function ModuleManager$RegisterDependencyModule(minifiedModuleName, debugModuleName) {
		return $tab_ModuleManager.registerRawJsModule(debugModuleName, minifiedModuleName, debugModuleName);
	};
	$tab_ModuleManager.registerRawJsModule = function ModuleManager$RegisterRawJsModule(name, minifiedModuleName, debugModuleName) {
		$tab_ModuleManager.$moduleMapping[name] = (tsConfig.debugMode ? debugModuleName : minifiedModuleName);
		var moduleInfo = new $tab_JsModuleInfo(name, null);
		$tab_ModuleManager.$moduleInfos[name] = moduleInfo;
		return (new $tab_JsModuleConfigurationBuilder(moduleInfo)).andMarkAsRawJavaScriptModule();
	};
	$tab_ModuleManager.registerModulesLoadedCallback = function ModuleManager$RegisterModulesLoadedCallback(callback) {
		if (ss.staticEquals(callback, null)) {
			throw new ss.ArgumentNullException('callback');
		}
		$tab_ModuleManager.$moduleTrackerInstance.registerModulesLoadedCallback(callback);
	};
	$tab_ModuleManager.loadCss = function ModuleManager$LoadCss(cssFileUrl) {
		if ($tab_ModuleManager.$loadedCssFiles.has(cssFileUrl)) {
			return;
		}
		$tab_ModuleManager.$loadedCssFiles.add(cssFileUrl);
		var styleElement = document.createElement('link');
		styleElement.setAttribute('type', 'text/css');
		styleElement.setAttribute('rel', 'stylesheet');
		styleElement.setAttribute('href', cssFileUrl);
		document.getElementsByTagName('head')[0].appendChild(styleElement);
	};
	$tab_ModuleManager.$loadModule = function(T) {
		return function ModuleManager$LoadModule(arguments1, moduleInfo, typeName, deferred) {
			var resourceToDownload = moduleInfo.moduleName.toLowerCase();
			if (!moduleInfo.isRawJavaScriptModule) {
				resourceToDownload = $tab_ModuleManager.$jsPrefix + resourceToDownload;
			}
			var loadingMethod = moduleInfo.loadingMethod;
			if (loadingMethod === 'synchronous') {
				$tab_CommandController.get().get_legacySession().get_waitHandler().showAndLock(false);
			}
			var hideGlass = function() {
				if (loadingMethod === 'synchronous') {
					$tab_CommandController.get().get_legacySession().get_waitHandler().unlock();
					$tab_CommandController.get().get_legacySession().get_waitHandler().nudge();
				}
			};
			var startTime = $tab_ModuleManager.$getCurrentTime();
			var parameters = {};
			parameters['d'] = 'MDLOAD';
			parameters['p'] = moduleInfo.moduleName;
			requirejs([resourceToDownload], function(moduleExport) {
				var tinst;
				if (moduleInfo.isRawJavaScriptModule) {
					tinst = moduleExport;
				}
				else {
					var asm = ss.load(resourceToDownload);
					tinst = ss.cast($tab_ModuleManager.$createInstance(ss.getType(typeName, asm), arguments1), T);
				}
				if (moduleInfo.shouldExportResult) {
					if (typeof(window.self[moduleInfo.exportResultName]) === 'function') {
						throw new ss.Exception('Such function already defined: ' + moduleInfo.exportResultName);
					}
					window.self[moduleInfo.exportResultName] = moduleExport;
				}
				var endTime = $tab_ModuleManager.$getCurrentTime();
				parameters['t'] = tabBootstrap.MetricsController.getTiming();
				parameters['e'] = endTime - startTime;
				var evt = new tabBootstrap.MetricsEvent('gen', 15, parameters);
				tabBootstrap.MetricsController.logEvent(evt);
				hideGlass();
				deferred.resolve(tinst);
			}, function(error) {
				hideGlass();
				$tab_ModuleManager.$handleRequireJsError(T).call(null, error, deferred);
			});
		};
	};
	$tab_ModuleManager.$getCurrentTime = function ModuleManager$GetCurrentTime() {
		var currentTime;
		try {
			currentTime = window.performance.now();
		}
		catch ($t1) {
			currentTime = (new Date()).getTime();
		}
		return currentTime;
	};
	$tab_ModuleManager.$loadModulesSequentiallyInternal = function ModuleManager$LoadModulesSequentiallyInternal(moduleNamesToLoad, allLoadedCallback, index) {
		if (index >= ss.count(moduleNamesToLoad)) {
			allLoadedCallback();
			return;
		}
		$tab_ModuleManager.load$1(ss.getItem(moduleNamesToLoad, index), []).done(function() {
			$tab_ModuleManager.$loadModulesSequentiallyInternal(moduleNamesToLoad, allLoadedCallback, index + 1);
		});
	};
	$tab_ModuleManager.$ensureConfigured = function ModuleManager$EnsureConfigured() {
		if ($tab_ModuleManager.$configured) {
			return;
		}
		$tab_ModuleManager.$configured = true;
		requirejs.config({ baseUrl: tsConfig.external_static_asset_prefix + '/javascripts', map: ss.mkdict(['*', $tab_ModuleManager.$moduleMapping]), waitSeconds: $tab_ModuleManager.$jsLoadTimeoutSeconds });
	};
	$tab_ModuleManager.$getJsModuleInfo = function ModuleManager$GetJsModuleInfo(moduleName) {
		var modName = $tab_ModuleManager.$moduleInfos[moduleName];
		if (ss.isNullOrUndefined(modName)) {
			throw new ss.Exception('Unknown module: ' + moduleName);
		}
		return modName;
	};
	$tab_ModuleManager.$handleRequireJsError = function(T) {
		return function ModuleManager$HandleRequireJsError(error, deferred) {
			ss.Debug.assert(ss.isValue(error), 'No error provided');
			var message = $tab_ModuleManager.$formatErrorMessage(error);
			var exception = new ss.Exception(message);
			deferred.reject(exception);
		};
	};
	$tab_ModuleManager.$formatErrorMessage = function ModuleManager$FormatErrorMessage(error) {
		var message = error.message;
		if (ss.isValue(error.requireModules) && error.requireModules.length > 0) {
			var modules = error.requireModules.join(',');
			message += '; Modules=' + modules;
		}
		if (!ss.isNullOrEmptyString(error.requireType)) {
			message += '; RequireType=' + error.requireType;
		}
		return message;
	};
	$tab_ModuleManager.$setupErrorHandler = function(T) {
		return function ModuleManager$SetupErrorHandler(deferred, moduleName) {
			deferred.fail(function(arg) {
				var exception = arg;
				delete $tab_ModuleManager.$modules[moduleName];
				$tab_ModuleManager.reportException(exception);
			});
		};
	};
	$tab_ModuleManager.reportException = function ModuleManager$ReportException(exception) {
		tab.Log.get($tab_ModuleManager).error(exception.get_message(), []);
		throw exception;
	};
	global.tab.ModuleManager = $tab_ModuleManager;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ModuleTracker
	var $tab_ModuleTracker = function() {
		this.$pendingModuleCount = 0;
		this.$loadCompleteCallbacks = [];
	};
	$tab_ModuleTracker.__typeName = 'tab.ModuleTracker';
	global.tab.ModuleTracker = $tab_ModuleTracker;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.MultipleFieldsModel
	var $tab_MultipleFieldsModel = function() {
		$tab_FieldModel.call(this, null);
		var f = {};
		f.fn = '';
		this.swapAndCopyPresModel(f);
	};
	$tab_MultipleFieldsModel.__typeName = 'tab.MultipleFieldsModel';
	global.tab.MultipleFieldsModel = $tab_MultipleFieldsModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.NoopModelEventsHandler
	var $tab_NoopModelEventsHandler = function() {
	};
	$tab_NoopModelEventsHandler.__typeName = 'tab.NoopModelEventsHandler';
	$tab_NoopModelEventsHandler.get_noopContext = function NoopModelEventsHandler$get_NoopContext() {
		return $tab_NoopModelEventsHandler.$context.value();
	};
	global.tab.NoopModelEventsHandler = $tab_NoopModelEventsHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Plugin.NotificationHandlerLauncher
	var $tab_NotificationHandlerLauncher = function(id, createHandlerCallback) {
		this.$handler = null;
		this.$createHandlerCallback = null;
		this.$1$NotificationIdField = null;
		this.set_notificationId(id);
		this.$createHandlerCallback = createHandlerCallback;
	};
	$tab_NotificationHandlerLauncher.__typeName = 'tab.NotificationHandlerLauncher';
	$tab_NotificationHandlerLauncher.registerHandler = function NotificationHandlerLauncher$RegisterHandler(id, createHandlerCallback) {
		var createHandler = function() {
			var deferred = $.Deferred();
			deferred.resolve(createHandlerCallback());
			return deferred.promise();
		};
		var $t2 = $tab_ApplicationModel.get_instance();
		var $t1 = new $tab_NotificationHandlerLauncher(id, createHandler);
		$t2.registerNotificationHandler(id, ss.mkdel($t1, $t1.onNotify));
	};
	$tab_NotificationHandlerLauncher.registerHandlerFromModule = function(TModuleInterface) {
		return function NotificationHandlerLauncher$RegisterHandlerFromModule(id, createHandlerCallback) {
			var createHandlerFromModule = function() {
				var waitHandler = $tab_CommandController.get().get_legacySession().get_waitHandler();
				waitHandler.addref(true);
				var deferred = $.Deferred();
				$tab_ModuleManager.load(TModuleInterface).call(null, []).done(function(module) {
					deferred.resolve(createHandlerCallback(module));
				}).always(function() {
					waitHandler.release();
				});
				return deferred.promise();
			};
			var $t2 = $tab_ApplicationModel.get_instance();
			var $t1 = new $tab_NotificationHandlerLauncher(id, createHandlerFromModule);
			$t2.registerNotificationHandler(id, ss.mkdel($t1, $t1.onNotify));
		};
	};
	$tab_NotificationHandlerLauncher.registerHandlerFromJsModule = function NotificationHandlerLauncher$RegisterHandlerFromJsModule(moduleName, id, createHandlerCallback) {
		var createHandlerFromModule = function() {
			var deferred = $.Deferred();
			$tab_ModuleManager.load$1(moduleName, []).done(function(module) {
				deferred.resolve(createHandlerCallback(module));
			});
			return deferred.promise();
		};
		var $t2 = $tab_ApplicationModel.get_instance();
		var $t1 = new $tab_NotificationHandlerLauncher(id, createHandlerFromModule);
		$t2.registerNotificationHandler(id, ss.mkdel($t1, $t1.onNotify));
	};
	global.tab.NotificationHandlerLauncher = $tab_NotificationHandlerLauncher;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.OnlineAnalyticsClient
	var $tab_OnlineAnalyticsClient = function() {
		this.$serverInfoPromise = null;
		this.$analyticsClientLibraryPromise = null;
		this.$initializePromise = null;
		this.$serverInfo = null;
		this.$analyticsEndpointUrl = '';
		this.$onlineServerInstanceId = '';
		this.$siteId = '';
		this.$siteLuid = '';
		this.$siteUrlName = '';
		this.$userId = '';
		this.$reporter = null;
		this.$eventFactory = null;
		this.$logger = tab.Logger.getLogger($tab_OnlineAnalyticsClient, 4);
	};
	$tab_OnlineAnalyticsClient.__typeName = 'tab.OnlineAnalyticsClient';
	$tab_OnlineAnalyticsClient.add_onLogEvent = function OnlineAnalyticsClient$add_OnLogEvent(value) {
		$tab_OnlineAnalyticsClient.$1$OnLogEventField = ss.delegateCombine($tab_OnlineAnalyticsClient.$1$OnLogEventField, value);
	};
	$tab_OnlineAnalyticsClient.remove_onLogEvent = function OnlineAnalyticsClient$remove_OnLogEvent(value) {
		$tab_OnlineAnalyticsClient.$1$OnLogEventField = ss.delegateRemove($tab_OnlineAnalyticsClient.$1$OnLogEventField, value);
	};
	$tab_OnlineAnalyticsClient.get_telemetryEnabled = function OnlineAnalyticsClient$get_TelemetryEnabled() {
		return tab.FeatureFlags.isEnabled('OnlineAnalyticsPipelineEnabled') && !tsConfig.is_guest;
	};
	$tab_OnlineAnalyticsClient.get_$instance = function OnlineAnalyticsClient$get_Instance() {
		if (ss.isNullOrUndefined($tab_OnlineAnalyticsClient.$instance)) {
			$tab_ModuleManager.registerRawJsModule($tab_OnlineAnalyticsClient.analyticsClientLibrary, $tab_OnlineAnalyticsClient.analyticsClientMinifiedLibrary, $tab_OnlineAnalyticsClient.analyticsClientLibrary).andExportResultAs('AnalyticsClient');
			$tab_OnlineAnalyticsClient.$instance = new $tab_OnlineAnalyticsClient();
		}
		return $tab_OnlineAnalyticsClient.$instance;
	};
	$tab_OnlineAnalyticsClient.logEvent = function OnlineAnalyticsClient$LogEvent(type, nameValuePairs) {
		if ($tab_OnlineAnalyticsClient.get_telemetryEnabled()) {
			ss.Debug.assert(!ss.isNullOrEmptyString(type), 'Expected a non-empty event type.');
			ss.Debug.assert(_.isArray(nameValuePairs), 'Expected an array of name/value pairs.');
			ss.Debug.assert(nameValuePairs.length % 2 === 0, 'Expected an even number of arguments i.e. name/value pairs.');
			$tab_OnlineAnalyticsClient.get_$instance().$log(type, ss.mkdict(nameValuePairs));
		}
	};
	$tab_OnlineAnalyticsClient.$validatePropertyName = function OnlineAnalyticsClient$ValidatePropertyName(name) {
		ss.Debug.assert(ss.isValue($tab_OnlineAnalyticsClient.$propertyNameExpression), 'PropertyNameExpression != null');
		var matches = name.match($tab_OnlineAnalyticsClient.$propertyNameExpression);
		ss.Debug.assert(ss.isValue(matches) && matches.length === 1, ss.formatString("Invalid property name, expected PascalCased name with optional numeric suffixes or CAPS: '{0}'", name));
		$tab_OnlineAnalyticsClient.$invalidPropertyNames.forEach(function(invalid) {
			ss.Debug.assert(ss.compareStrings(name, invalid, true) !== 0, ss.formatString("Invalid property name (ignore case): '{0}'", invalid));
		});
	};
	global.tab.OnlineAnalyticsClient = $tab_OnlineAnalyticsClient;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.OrderClause
	var $tab_OrderClause = function() {
	};
	$tab_OrderClause.__typeName = 'tab.OrderClause';
	$tab_OrderClause.orderFieldFromString = function OrderClause$OrderFieldFromString(order) {
		try {
			return order;
		}
		catch ($t1) {
			return 'unknown';
		}
	};
	$tab_OrderClause.isInstanceOfType = function() {
		return true;
	};
	global.tab.OrderClause = $tab_OrderClause;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.PaddingDefinition
	var $tab_PaddingDefinition = function() {
		$tab_SpacingDefinition.call(this, null, null, null, null, null);
	};
	$tab_PaddingDefinition.__typeName = 'tab.PaddingDefinition';
	$tab_PaddingDefinition.$ctor1 = function(style) {
		$tab_SpacingDefinition.call(this, style.padding, style.paddingLeft, style.paddingRight, style.paddingTop, style.paddingBottom);
	};
	global.tab.PaddingDefinition = $tab_PaddingDefinition;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.PageModel
	var $tab_PageModel = function(parent) {
		this.$zoneModel = null;
		this.$frame = null;
		this.$2$NewPageField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('pageModel'.toString()));
		this.$zoneModel = parent.get_zone();
	};
	$tab_PageModel.__typeName = 'tab.PageModel';
	global.tab.PageModel = $tab_PageModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.PageOfItem
	var $tab_PageOfItem$1 = function(TItemType) {
		var $type = function() {
		};
		$type.isInstanceOfType = function() {
			return true;
		};
		ss.registerGenericClassInstance($type, $tab_PageOfItem$1, [TItemType], {}, function() {
			return null;
		}, function() {
			return [];
		});
		return $type;
	};
	$tab_PageOfItem$1.__typeName = 'tab.PageOfItem$1';
	ss.initGenericClass($tab_PageOfItem$1, $asm, 1);
	global.tab.PageOfItem$1 = $tab_PageOfItem$1;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.PageServerCommands
	var $tab_PageServerCommands = function() {
	};
	$tab_PageServerCommands.__typeName = 'tab.PageServerCommands';
	$tab_PageServerCommands.changePage = function PageServerCommands$ChangePage(pageNumber, visualId) {
		var cmdParams = $tab_PageServerCommands.$createChangePageParams(pageNumber, visualId);
		$tab_ServerCommands.executeServerCommand($tab_CommandUtils.newCommand('change-page', cmdParams), 'immediately');
	};
	$tab_PageServerCommands.syncedChangePage = function PageServerCommands$SyncedChangePage(pageModel, visualId, zoneId, pageNumber) {
		var cmdParams = $tab_PageServerCommands.$createSyncedChangePageParams(visualId, zoneId, pageNumber);
		var cmd = $tab_CommandUtils.newCommand$1('synced-change-page-server', cmdParams);
		var cc = new $tab_ClientCommand((tab.FeatureFlags.isEnabled('PageCardImprovements') ? 'none' : 'immediately'), function(t) {
			if (tab.FeatureFlags.isEnabled('PageCardImprovements')) {
				var pagePM = t.makeMutablePresModel(pageModel, false);
				pagePM.currentPage = pageNumber;
				var visualModel = $tab_ModelUtils.getVisualModel($tab_ApplicationModel.get_instance(), visualId.worksheet);
				var sceneModel = visualModel.get_sceneModel();
				var scenePM = t.makeMutablePresModel(sceneModel, false);
				scenePM.currentPage = pageNumber;
				for (var $t1 = 0; $t1 < scenePM.panes.length; $t1++) {
					var pane = scenePM.panes[$t1];
					for (var $t2 = 0; $t2 < pane.drawPane.length; $t2++) {
						var vlpm = pane.drawPane[$t2];
						if (ss.isValue(vlpm.paneMarks)) {
							var start = vlpm.paneMarks.pageIndices[pageNumber * 2];
							var end = vlpm.paneMarks.pageIndices[pageNumber * 2 + 1];
							vlpm.paneMarks.startIndex = start;
							vlpm.paneMarks.endIndex = end;
						}
					}
				}
				var labelModel = visualModel.get_labelsModel();
				if (ss.isValue(labelModel)) {
					var labelPM = t.makeMutablePresModel(labelModel, false);
					labelPM.currentPage = pageNumber;
					for (var $t3 = 0; $t3 < labelPM.panes.length; $t3++) {
						var pane1 = labelPM.panes[$t3];
						for (var $t4 = 0; $t4 < pane1.drawPane.length; $t4++) {
							var vlpm1 = pane1.drawPane[$t4];
							if (ss.isValue(vlpm1.paneMarks)) {
								var start1 = vlpm1.paneMarks.pageIndices[pageNumber * 2];
								var end1 = vlpm1.paneMarks.pageIndices[pageNumber * 2 + 1];
								vlpm1.paneMarks.startIndex = start1;
								vlpm1.paneMarks.endIndex = end1;
							}
						}
					}
				}
			}
		}, cmd);
		$tab_CommandController.SendCommand(cc);
	};
	$tab_PageServerCommands.toggleTrails = function PageServerCommands$ToggleTrails(visualId) {
		var cmdParams = $tab_PageServerCommands.$createToggleTrailsParams(visualId);
		$tab_ServerCommands.executeServerCommand($tab_CommandUtils.newCommand('page-toggle-trails', cmdParams), 'afterDelay');
	};
	$tab_PageServerCommands.$createChangePageParams = function PageServerCommands$CreateChangePageParams(pageNumber, visualId) {
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		cmdParams['pageNumber'] = pageNumber;
		return cmdParams;
	};
	$tab_PageServerCommands.$createSyncedChangePageParams = function PageServerCommands$CreateSyncedChangePageParams(visualId, zoneId, pageNumber) {
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		cmdParams['zoneId'] = zoneId;
		cmdParams['pageNumber'] = pageNumber;
		return cmdParams;
	};
	$tab_PageServerCommands.$createToggleTrailsParams = function PageServerCommands$CreateToggleTrailsParams(visualId) {
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		return cmdParams;
	};
	global.tab.PageServerCommands = $tab_PageServerCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.PaneClientCommands
	var $tab_PaneClientCommands = function() {
	};
	$tab_PaneClientCommands.__typeName = 'tab.PaneClientCommands';
	$tab_PaneClientCommands.setPanePrimitive = function PaneClientCommands$SetPanePrimitive(model, type) {
		var c = $tab_CommandUtils.newCommand('set-primitive', null);
		c.commandParams = $tab_PaneClientCommands.$createCommonPaneClientCommandParams(model);
		c.commandParams['primitiveType'] = type.toString();
		$tab_CommandController.SendCommand(new $tab_RemoteClientCommand(c, 'immediately', null, null));
	};
	$tab_PaneClientCommands.getDefaultShapeType = function PaneClientCommands$GetDefaultShapeType(layer, callback) {
		var c = $tab_CommandUtils.newCommand('get-default-shape', null);
		c.commandParams = $tab_PaneClientCommands.$createCommonPaneClientCommandParams(layer);
		$tab_CommandController.SendCommand(new $tab_RemoteClientCommand(c, 'none', function(pm) {
			callback((_.isString(pm) ? $tab_ShapeModel.fromString(pm.toString()) : null));
		}, function() {
			callback(null);
		}));
	};
	$tab_PaneClientCommands.setDefaultShapeType = function PaneClientCommands$SetDefaultShapeType(layer, shape) {
		var c = $tab_CommandUtils.newCommand('set-default-shape', null);
		c.commandParams = $tab_PaneClientCommands.$createCommonPaneClientCommandParams(layer);
		c.commandParams['shapeName'] = $tab_PaneClientCommands.$shapeModelToString(shape);
		var clientCommand = new $tab_ClientCommand((($tab_ApplicationModel.get_instance().get_renderMode() === 'render-mode-client') ? 'none' : 'immediately'), function(t) {
			$tab_PaneClientCommands.$setDefaultShapeTypeLocal(layer, shape, t);
		}, c, null, null);
		$tab_CommandController.SendCommand(clientCommand);
	};
	$tab_PaneClientCommands.setShowMarkLabels = function PaneClientCommands$SetShowMarkLabels(showLabels, layer) {
		var c = $tab_CommandUtils.newCommand('toggle-mark-labels', null);
		c.commandParams = {};
		c.commandParams['worksheet'] = tsConfig.current_sheet_name;
		if (ss.isValue(layer) && layer.get_id() > 0) {
			c.commandParams['paneSpec'] = layer.get_id().toString();
		}
		var cc = new $tab_ClientCommand((showLabels ? 'immediately' : 'none'), function(transaction) {
			$tab_PaneClientCommands.$setShowMarkLabelsLocal(showLabels, transaction, (ss.isValue(layer) ? layer.get_paneDescriptorKeys() : null));
		}, c);
		$tab_CommandController.SendCommand(cc);
	};
	$tab_PaneClientCommands.toggleMarkLabels = function PaneClientCommands$ToggleMarkLabels(layer) {
		if (tab.FeatureFlags.isEnabled('HideMarkLabelsAsLocalAction')) {
		}
		var c = $tab_CommandUtils.newCommand('toggle-mark-labels', null);
		c.commandParams = {};
		c.commandParams['worksheet'] = tsConfig.current_sheet_name;
		if (ss.isValue(layer) && layer.get_id() > 0) {
			c.commandParams['paneSpec'] = layer.get_id().toString();
		}
		$tab_CommandController.SendCommand(new $tab_RemoteClientCommand(c, 'immediately', null, null));
	};
	$tab_PaneClientCommands.setMarkSize = function PaneClientCommands$SetMarkSize(layer, newSize) {
		var c = $tab_CommandUtils.newCommand('set-mark-size', null);
		c.commandParams = {};
		c.commandParams = $tab_PaneClientCommands.$createCommonPaneClientCommandParams(layer);
		c.commandParams['markScale'] = newSize.toString();
		$tab_CommandController.SendCommand(new $tab_RemoteClientCommand(c, 'immediately', null, null));
	};
	$tab_PaneClientCommands.resetTooltip = function PaneClientCommands$ResetTooltip(layer) {
		var c = $tab_CommandUtils.newCommand('reset-tooltip', null);
		c.commandParams = {};
		c.commandParams['worksheet'] = tsConfig.current_sheet_name;
		if (ss.isValue(layer) && layer.get_id() > 0) {
			c.commandParams['paneSpec'] = layer.get_id().toString();
		}
		$tab_CommandController.SendCommand(new $tab_RemoteClientCommand(c, 'immediately', null, null));
	};
	$tab_PaneClientCommands.getDefaultColor = function PaneClientCommands$GetDefaultColor(layer, callback) {
		var c = $tab_CommandUtils.newCommand('get-default-color', null);
		c.commandParams = $tab_PaneClientCommands.$createCommonPaneClientCommandParams(layer);
		$tab_CommandController.SendCommand(new $tab_RemoteClientCommand(c, 'none', function(pm) {
			callback((_.isString(pm) ? $tab_ColorModel.fromColorCode(pm.toString()) : null));
		}, function() {
			callback(null);
		}));
	};
	$tab_PaneClientCommands.setDefaultColor = function PaneClientCommands$SetDefaultColor(layer, color) {
		var c = $tab_CommandUtils.newCommand('set-default-color', null);
		c.commandParams = $tab_PaneClientCommands.$createCommonPaneClientCommandParams(layer);
		c.commandParams['defaultColor'] = color.toRgba255();
		var cmd = new $tab_ClientCommand((($tab_ApplicationModel.get_instance().get_renderMode() === 'render-mode-client') ? 'none' : 'immediately'), function(t) {
			$tab_PaneClientCommands.$setDefaultColorLocal(layer, color, t);
		}, c);
		$tab_CommandController.SendCommand(cmd);
	};
	$tab_PaneClientCommands.setSteppedColor = function PaneClientCommands$SetSteppedColor(layer, stepCount) {
		var c = $tab_CommandUtils.newCommand('set-quantitative-color', null);
		c.commandParams = $tab_PaneClientCommands.$createCommonPaneClientCommandParams(layer);
		c.commandParams['steps'] = stepCount.toString();
		$tab_CommandController.SendCommand(new $tab_RemoteClientCommand(c, 'immediately', null, null));
	};
	$tab_PaneClientCommands.reverseColor = function PaneClientCommands$ReverseColor(layer, newValue) {
		var c = $tab_CommandUtils.newCommand('set-quantitative-color', null);
		c.commandParams = $tab_PaneClientCommands.$createCommonPaneClientCommandParams(layer);
		c.commandParams['isReversed'] = newValue.toString();
		$tab_CommandController.SendCommand(new $tab_RemoteClientCommand(c, 'immediately', null, null));
	};
	$tab_PaneClientCommands.setTotalsInEncoding = function PaneClientCommands$SetTotalsInEncoding(layer, totalsInclusion) {
		var c = $tab_CommandUtils.newCommand('set-quantitative-color', null);
		c.commandParams = $tab_PaneClientCommands.$createCommonPaneClientCommandParams(layer);
		c.commandParams['totalsInclusionValue'] = totalsInclusion.toString();
		$tab_CommandController.SendCommand(new $tab_RemoteClientCommand(c, 'immediately', null, null));
	};
	$tab_PaneClientCommands.setQuantColorPalette = function PaneClientCommands$SetQuantColorPalette(layer, newPaletteId) {
		var c = $tab_CommandUtils.newCommand('set-quantitative-color', null);
		c.commandParams = $tab_PaneClientCommands.$createCommonPaneClientCommandParams(layer);
		c.commandParams['colorPaletteId'] = newPaletteId;
		$tab_CommandController.SendCommand(new $tab_RemoteClientCommand(c, 'immediately', null, null));
	};
	$tab_PaneClientCommands.setCatColorPalette = function PaneClientCommands$SetCatColorPalette(layer, newPaletteId) {
		var c = $tab_CommandUtils.newCommand('set-categorical-color', null);
		c.commandParams = $tab_PaneClientCommands.$createCommonPaneClientCommandParams(layer);
		c.commandParams['colorPaletteId'] = newPaletteId;
		var isInstance = true;
		c.commandParams['isInstance'] = isInstance.toString();
		$tab_CommandController.SendCommand(new $tab_RemoteClientCommand(c, 'immediately', null, null));
	};
	$tab_PaneClientCommands.setColorAlphaLevel = function PaneClientCommands$SetColorAlphaLevel(layer, newAlphaLevel) {
		if (isNaN(newAlphaLevel)) {
			return;
		}
		var c = $tab_CommandUtils.newCommand('change-alpha-level', null);
		c.commandParams = $tab_PaneClientCommands.$createCommonPaneClientCommandParams(layer);
		c.commandParams['alphaLevel'] = newAlphaLevel.toString();
		var clientCommand = new $tab_ClientCommand((($tab_ApplicationModel.get_instance().get_renderMode() === 'render-mode-client') ? 'none' : 'immediately'), function(t) {
			$tab_PaneClientCommands.$setAlphaLevelLocal(layer, newAlphaLevel, t);
		}, c);
		$tab_CommandController.SendCommand(clientCommand);
	};
	$tab_PaneClientCommands.setMarksBorderColor = function PaneClientCommands$SetMarksBorderColor(layer, color, isAuto, isNone) {
		var c = $tab_CommandUtils.newCommand('change-border', null);
		c.commandParams = {};
		c.commandParams['worksheet'] = tsConfig.current_sheet_name;
		c.commandParams['paneSpec'] = layer.get_id().toString();
		c.commandParams['color'] = color.toString();
		c.commandParams['isAuto'] = isAuto.toString();
		c.commandParams['isNone'] = isNone.toString();
		var clientCommand = ((isNone || isAuto) ? new $tab_ClientCommand('immediately', null, c) : new $tab_ClientCommand('none', function(t) {
			$tab_PaneClientCommands.$setMarksBorderColorLocal(layer, color, t);
		}, c));
		$tab_CommandController.SendCommand(clientCommand);
	};
	$tab_PaneClientCommands.setMarksHaloColor = function PaneClientCommands$SetMarksHaloColor(layer, color, isAuto, isNone) {
		var c = $tab_CommandUtils.newCommand('change-halo', null);
		c.commandParams = {};
		c.commandParams['worksheet'] = tsConfig.current_sheet_name;
		c.commandParams['paneSpec'] = layer.get_id().toString();
		c.commandParams['color'] = color.toString();
		c.commandParams['isAuto'] = isAuto.toString();
		c.commandParams['isNone'] = isNone.toString();
		var clientCommand = ((isNone || isAuto) ? new $tab_ClientCommand('immediately', null, c) : new $tab_ClientCommand('none', function(t) {
			$tab_PaneClientCommands.$setMarksHaloColorLocal(layer, color, t);
		}, c));
		$tab_CommandController.SendCommand(clientCommand);
	};
	$tab_PaneClientCommands.boundingBoxPan = function PaneClientCommands$BoundingBoxPan(visualIdPresModel, mapRect) {
		var c = $tab_CommandUtils.newCommand('bounding-box-pan', null);
		var commandParams = {};
		commandParams['mapLatLongRect'] = mapRect;
		c.commandParams = commandParams;
		if (ss.isValue(visualIdPresModel)) {
			$tab_CommandUtils.addVisualIdToCommand(c.commandParams, visualIdPresModel);
		}
		$tab_ServerCommands.executeServerCommand(c, 'afterDelay', null, null);
	};
	$tab_PaneClientCommands.geographicSearchQuery = function PaneClientCommands$GeographicSearchQuery(visualIdPresModel, query, locale, maxResults, callback) {
		var c = $tab_CommandUtils.newCommand('geographic-search-query', null);
		var commandParams = {};
		c.commandParams = commandParams;
		c.commandParams['geographicSearchSearchString'] = query;
		c.commandParams['geographicSearchLocale'] = locale;
		c.commandParams['geographicSearchMaxResults'] = maxResults.toString();
		if (ss.isValue(visualIdPresModel)) {
			$tab_CommandUtils.addVisualIdToCommand(c.commandParams, visualIdPresModel);
		}
		$tab_ServerCommands.executeServerCommand(c, 'none', function(pm) {
			callback(pm);
		}, null);
	};
	$tab_PaneClientCommands.setReferenceLineConstantValue = function PaneClientCommands$SetReferenceLineConstantValue(constantValue, refLineId) {
		var c = $tab_CommandUtils.newCommand('set-reference-line-constant-value', null);
		c.commandParams = {};
		c.commandParams['constantValue'] = constantValue;
		c.commandParams['referenceLineId'] = refLineId;
		$tab_CommandController.SendCommand(new $tab_RemoteClientCommand(c, 'immediately', null, null));
	};
	$tab_PaneClientCommands.$createCommonPaneClientCommandParams = function PaneClientCommands$CreateCommonPaneClientCommandParams(layer) {
		var commandParams = {};
		commandParams['worksheet'] = tsConfig.current_sheet_name;
		commandParams['paneSpec'] = layer.get_id().toString();
		return commandParams;
	};
	$tab_PaneClientCommands.$shapeModelToString = function PaneClientCommands$ShapeModelToString(shape) {
		if (ss.isNullOrUndefined(shape)) {
			return null;
		}
		return shape.toString();
	};
	$tab_PaneClientCommands.$setDefaultShapeTypeLocal = function PaneClientCommands$SetDefaultShapeTypeLocal(layer, shape, transaction) {
		if (ss.isValue(shape.get_palette()) && ss.unbox(shape.get_palette()) !== 'filled') {
			return;
		}
		var encoded = $tab_SceneDataUtil.convertShapeToNumber(shape);
		$tab_PaneClientCommands.$setPDMarkProperty(layer, encoded, 'shape_id', transaction);
	};
	$tab_PaneClientCommands.$setAlphaLevelLocal = function PaneClientCommands$SetAlphaLevelLocal(layer, newAlphaLevel, transaction) {
		$tab_PaneClientCommands.$setPDMarkProperty(layer, newAlphaLevel, 'alpha', transaction);
	};
	$tab_PaneClientCommands.$setDefaultColorLocal = function PaneClientCommands$SetDefaultColorLocal(layer, color, transaction) {
		$tab_PaneClientCommands.$setPDMarkProperty(layer, color.toArgbInt(), 'color', transaction);
	};
	$tab_PaneClientCommands.$setMarksBorderColorLocal = function PaneClientCommands$SetMarksBorderColorLocal(layer, color, transaction) {
		$tab_PaneClientCommands.$setPDMarkProperty(layer, color.toArgbInt(), 'border_color', transaction);
	};
	$tab_PaneClientCommands.$setMarksHaloColorLocal = function PaneClientCommands$SetMarksHaloColorLocal(layer, color, transaction) {
		$tab_PaneClientCommands.$setPDMarkProperty(layer, color.toArgbInt(), 'halo_color', transaction);
	};
	$tab_PaneClientCommands.$setShowMarkLabelsLocal = function PaneClientCommands$SetShowMarkLabelsLocal(showLabels, transaction, paneDescriptorKeys) {
		if ($tab_ApplicationModel.get_instance().get_renderMode() !== 'render-mode-client') {
			return;
		}
		var pdMarks = $tab_PaneClientCommands.$getPDMarksForCurrentSheet(transaction);
		if (ss.isNullOrUndefined(paneDescriptorKeys)) {
			paneDescriptorKeys = _.keys(pdMarks) || [];
		}
		for (var $t1 = 0; $t1 < paneDescriptorKeys.length; $t1++) {
			var key = paneDescriptorKeys[$t1];
			var pdMark = pdMarks[key];
			pdMark.showMarkLabels = showLabels;
		}
	};
	$tab_PaneClientCommands.$setPDMarkProperty = function PaneClientCommands$SetPDMarkProperty(layer, value, column, transaction) {
		if ($tab_ApplicationModel.get_instance().get_renderMode() !== 'render-mode-client') {
			return;
		}
		var pdMarks = $tab_PaneClientCommands.$getPDMarksForCurrentSheet(transaction);
		ss.Debug.assert(ss.isValue(layer.get_paneDescriptorKeys()) && layer.get_paneDescriptorKeys().length > 0, 'No pane descriptor keys found in LayerPresModel');
		var keys = layer.get_paneDescriptorKeys();
		for (var i = 0, len = keys.length; i < len; i++) {
			var pdMark = pdMarks[keys[i]];
			ss.Debug.assert(ss.keyExists(pdMark.intMap, column), 'Shape id was not found in pd marks');
			pdMark.intMap[column] = value;
		}
	};
	$tab_PaneClientCommands.$getPDMarksForCurrentSheet = function PaneClientCommands$GetPDMarksForCurrentSheet(transaction) {
		var visualModel = $tab_ModelUtils.getVisualModel($tab_ApplicationModel.get_instance(), tsConfig.current_sheet_name);
		ss.Debug.assert(ss.isValue(visualModel), 'Unable to find visual model');
		var clone = transaction.makeMutablePresModel(visualModel.get_sceneModel(), false);
		return clone.pdMarksMap;
	};
	global.tab.PaneClientCommands = $tab_PaneClientCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Models.PaneIdModel
	var $tab_PaneIdModel = function(presModel) {
		this.$presModel = null;
		this.update(presModel);
	};
	$tab_PaneIdModel.__typeName = 'tab.PaneIdModel';
	$tab_PaneIdModel.$ctor1 = function(colIdx, rowIdx, pageIdx) {
		this.$presModel = null;
		this.$presModel = {};
		this.$presModel['columnIndex'] = colIdx;
		this.$presModel['rowIndex'] = rowIdx;
		if (pageIdx !== 0) {
			this.$presModel['pageIndex'] = pageIdx;
		}
	};
	global.tab.PaneIdModel = $tab_PaneIdModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ClientCommands.PanZoomCommands
	var $tab_PanZoomCommands = function() {
	};
	$tab_PanZoomCommands.__typeName = 'tab.PanZoomCommands';
	$tab_PanZoomCommands.zoomWithAnchorPoint = function PanZoomCommands$ZoomWithAnchorPoint(regionPart, anchorPoint, zoomFactor, onZoomCompleted, sheetName) {
		var regionRect = new Object();
		var regionWrapper = $tab_VizRegionRectWrapper.create(regionRect);
		regionWrapper.set_r(regionPart);
		regionWrapper.set_x(anchorPoint.x);
		regionWrapper.set_y(anchorPoint.y);
		var cmdParams = {};
		cmdParams['vizRegionRect'] = regionRect;
		cmdParams['zoomAnchorPoint'] = tab.PointUtil.toPresModel(anchorPoint);
		cmdParams['zoomFactor'] = zoomFactor;
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, $tab_ModelUtils.getVisualId(sheetName));
		var c = $tab_CommandUtils.newCommand$1('pane-anchor-zoom-server', cmdParams);
		var successCallback = function() {
			$tab_SheetSession.fireSheetDataChanged();
			onZoomCompleted();
		};
		$tab_PanZoomCommands.$invalidateVizAndSendCommand(c, successCallback, null, sheetName);
	};
	$tab_PanZoomCommands.zoom = function PanZoomCommands$Zoom(rect, paneResolverPoint, isZoomin, deferAPI, zoomFactor, sheetName) {
		if (!tsConfig.allow_filter) {
			return;
		}
		var cmdParams = {};
		var dragRect = {};
		dragRect.x = rect['x'];
		dragRect.y = rect['y'];
		dragRect.x = Math.round(dragRect.x);
		dragRect.y = Math.round(dragRect.y);
		if (ss.isValue(rect['h']) && ss.isValue(rect['w'])) {
			dragRect.h = rect['h'];
			dragRect.w = rect['w'];
		}
		cmdParams['dragRect'] = dragRect;
		cmdParams['zoomIn'] = isZoomin;
		cmdParams['focus'] = false;
		cmdParams['zoomFactor'] = zoomFactor;
		if (ss.isValue(paneResolverPoint)) {
			paneResolverPoint = $tab_PanZoomCommands.$roundPoint(paneResolverPoint);
			var pointParam = tab.PointUtil.toPresModel(paneResolverPoint);
			cmdParams['paneResolverLocation'] = pointParam;
		}
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, $tab_ModelUtils.getVisualId(sheetName));
		var c = $tab_CommandUtils.newCommand('pane-zoom', cmdParams);
		var successCallback = function(unused) {
			if (ss.isValue(deferAPI)) {
				deferAPI.setDeferLayoutUpdates(false);
			}
			tab.Logger.getLogger($tab_ViewSession).debug('Got zoom-' + (isZoomin ? 'in' : 'out') + ' response; firing SheetDataChanged', []);
			$tab_SheetSession.fireSheetDataChanged();
		};
		$tab_PanZoomCommands.$invalidateVizAndSendCommand(c, successCallback, null, sheetName);
	};
	$tab_PanZoomCommands.pan = function PanZoomCommands$Pan(regionPart, point, delta, onError, sheetName) {
		if (!tsConfig.allow_filter) {
			return;
		}
		var cmdParams = {};
		cmdParams['r'] = regionPart;
		cmdParams['panLocation'] = tab.PointUtil.toPresModel($tab_PanZoomCommands.$roundPoint(point));
		cmdParams['panAmount'] = tab.PointUtil.toPresModel($tab_PanZoomCommands.$roundPoint(delta));
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, $tab_ModelUtils.getVisualId(sheetName));
		var c = $tab_CommandUtils.newCommand$1('pane-pan-server', cmdParams);
		var successCallback = function() {
			tab.Logger.getLogger($tab_ViewSession).debug('Got pan response; firing SheetDataChanged', []);
			$tab_SheetSession.fireSheetDataChanged();
		};
		var errorCallback = function(o) {
			onError();
		};
		$tab_PanZoomCommands.$invalidateVizAndSendCommand(c, successCallback, errorCallback, sheetName);
	};
	$tab_PanZoomCommands.$invalidateVizAndSendCommand = function PanZoomCommands$InvalidateVizAndSendCommand(c, onSuccess, onFailure, sheetName) {
		var cc = new $tab_ClientCommand('none', function(t) {
			var visualModel = $tab_ModelUtils.getVisualModel($tab_ApplicationModel.get_instance(), sheetName);
			$tab_ModelUtils.setVisualValidStateOnModel(t, visualModel, false);
		}, c, onSuccess, onFailure);
		$tab_CommandController.SendCommand(cc);
	};
	$tab_PanZoomCommands.$roundPoint = function PanZoomCommands$RoundPoint(p) {
		var toRet = p;
		if (ss.isValue(p)) {
			toRet = { x: Math.round(p.x), y: Math.round(p.y) };
		}
		return toRet;
	};
	$tab_PanZoomCommands.zoomDoubleClick = function PanZoomCommands$ZoomDoubleClick(rect, paneResolverPoint, isZoomin, deferAPI, zoomFactor, sheetName) {
		deferAPI.set_isZoomin(isZoomin);
		$tab_PanZoomCommands.zoom(rect, paneResolverPoint, isZoomin, deferAPI, zoomFactor, sheetName);
	};
	$tab_PanZoomCommands.zoomIn = function PanZoomCommands$ZoomIn(rect, paneResolverPoint, zoomFactor, sheetName) {
		$tab_PanZoomCommands.zoom(rect, paneResolverPoint, true, null, zoomFactor, sheetName);
	};
	$tab_PanZoomCommands.zoomOut = function PanZoomCommands$ZoomOut(point, paneResolverPoint, zoomFactor, sheetName) {
		$tab_PanZoomCommands.zoom(point, paneResolverPoint, false, null, zoomFactor, sheetName);
	};
	$tab_PanZoomCommands.requestRestoreFixedAxes = function PanZoomCommands$RequestRestoreFixedAxes(visualId) {
		if (!tsConfig.allow_filter) {
			return;
		}
		var successCallback = function(presModel) {
			$tab_BaseSession.fireStateChanged(presModel);
		};
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		var c = $tab_CommandUtils.newCommand$1('restore-fixed-axes', cmdParams);
		$tab_CommandController.SendCommand(new $tab_RemoteClientCommand(c, 'immediately', successCallback, function() {
		}));
	};
	global.tab.PanZoomCommands = $tab_PanZoomCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ParameterCtrlModel
	var $tab_ParameterCtrlModel = function(parent) {
		this.$frame = null;
		this.$2$NewParameterCtrlField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('parameterControl'.toString()));
	};
	$tab_ParameterCtrlModel.__typeName = 'tab.ParameterCtrlModel';
	global.tab.ParameterCtrlModel = $tab_ParameterCtrlModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ParameterFilterDisplayModel
	var $tab_ParameterFilterDisplayModel = function(parent) {
		this.$2$FilterUpdatedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('parameterControl'.toString()));
	};
	$tab_ParameterFilterDisplayModel.__typeName = 'tab.ParameterFilterDisplayModel';
	$tab_ParameterFilterDisplayModel.supportsParameterType = function ParameterFilterDisplayModel$SupportsParameterType(presModel) {
		switch (presModel.paramDisplayMode) {
			case 'compact':
			case 'list': {
				return true;
			}
			case 'type_in':
			case 'slider':
			case 'datetime':
			default: {
				return false;
			}
		}
	};
	global.tab.ParameterFilterDisplayModel = $tab_ParameterFilterDisplayModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ParameterFilterItem
	var $tab_ParameterFilterItem = function(formattedValue, domainValue) {
		this.formattedValue = null;
		this.domainValue = null;
		this.formattedValue = formattedValue;
		this.domainValue = domainValue;
	};
	$tab_ParameterFilterItem.__typeName = 'tab.ParameterFilterItem';
	global.tab.ParameterFilterItem = $tab_ParameterFilterItem;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ParameterServerCommands
	var $tab_ParameterServerCommands = function() {
	};
	$tab_ParameterServerCommands.__typeName = 'tab.ParameterServerCommands';
	$tab_ParameterServerCommands.setParameterValue = function ParameterServerCommands$SetParameterValue(fieldName, value, forceUseUSLocale) {
		$tab_ParameterServerCommands.setParameterValue$1(fieldName, value, forceUseUSLocale, null, null);
	};
	$tab_ParameterServerCommands.setParameterValue$1 = function ParameterServerCommands$SetParameterValue(fieldName, value, forceUseUSLocale, successCallback, errorCallback) {
		var cmdParams = $tab_ParameterServerCommands.$createSetParameterValueParams(fieldName, value, ss.coalesce(forceUseUSLocale, false));
		var cmd = $tab_CommandUtils.newCommand('set-parameter-value', cmdParams);
		$tab_ServerCommands.executeServerCommand(cmd, 'immediately', successCallback, errorCallback);
	};
	$tab_ParameterServerCommands.$createSetParameterValueParams = function ParameterServerCommands$CreateSetParameterValueParams(fieldName, value, forceUseUSLocale) {
		var cmdParams = {};
		cmdParams['globalFieldName'] = fieldName;
		cmdParams['valueString'] = value;
		cmdParams['useUsLocale'] = forceUseUSLocale;
		return cmdParams;
	};
	global.tab.ParameterServerCommands = $tab_ParameterServerCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.PercentTotalTableCalcModel
	var $tab_PercentTotalTableCalcModel = function(parent) {
		this.$3$ModelUpdatedField = null;
		$tab_TypeSpecificTableCalcModel.call(this, parent, new $tab_PresModelPathItem('percentTotalTableCalcPresModel'.toString()));
	};
	$tab_PercentTotalTableCalcModel.__typeName = 'tab.PercentTotalTableCalcModel';
	global.tab.PercentTotalTableCalcModel = $tab_PercentTotalTableCalcModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.PermissionManager
	var $tab_PermissionManager = function() {
	};
	$tab_PermissionManager.__typeName = 'tab.PermissionManager';
	$tab_PermissionManager.buildCommandPermission = function PermissionManager$BuildCommandPermission() {
		var types = [];
		if (tsConfig.allow_filter) {
			types.push(11);
			types.push(12);
			types.push(10);
			types.push(2);
			types.push(13);
			types.push(4);
			types.push(6);
		}
		if (tsConfig.allow_select) {
			types.push(1);
			types.push(9);
			types.push(23);
		}
		if (tsConfig.allow_sheetlink) {
			types.push(8);
		}
		if (tsConfig.allow_view_underlying || tsConfig.allow_summary) {
			types.push(7);
		}
		if (tsConfig.is_authoring) {
			types.push(15);
			types.push(17);
			types.push(18);
			types.push(19);
			types.push(20);
			if (!tsConfig.is_mobile) {
				types.push(21);
			}
			if (tab.FeatureFlags.isEnabled('ReferenceLineNonModal')) {
				types.push(22);
			}
			if (tab.FeatureFlags.isEnabled('TrendLineDialogMttw')) {
				types.push(16);
			}
		}
		return new $tab_CommandPermission(types);
	};
	$tab_PermissionManager.filterCommands = function PermissionManager$FilterCommands(commands, permission) {
		for (var i = commands.length - 1; i >= 0; i--) {
			if (!permission.test(commands[i])) {
				tab.Log.get($tab_PermissionManager).debug('Permission denied for %o', [commands[i]]);
				ss.removeAt(commands, i);
			}
		}
	};
	global.tab.PermissionManager = $tab_PermissionManager;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.PillModel
	var $tab_PillModel = function(parent, index) {
		this.$column = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem(index.toString()));
	};
	$tab_PillModel.__typeName = 'tab.PillModel';
	global.tab.PillModel = $tab_PillModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.PingSessionCmd
	var $tab_PingSessionCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_PingSessionCmd$Response]).call(this);
	};
	$tab_PingSessionCmd.__typeName = 'tab.PingSessionCmd';
	global.tab.PingSessionCmd = $tab_PingSessionCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.PingSessionCmd.Response
	var $tab_PingSessionCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_PingSessionCmd$Response.__typeName = 'tab.PingSessionCmd$Response';
	global.tab.PingSessionCmd$Response = $tab_PingSessionCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Plugin.PluginDialogNotificationHandler
	var $tab_PluginDialogNotificationHandler = function(pluginType, notificationId, dialogParent) {
		this.$pluginType = null;
		this.$dialogParent = null;
		this.$plugin = null;
		this.$root = null;
		this.$1$StopNotifyingField = null;
		this.$1$NotificationIdField = null;
		this.$pluginType = pluginType;
		this.set_notificationId(notificationId);
		this.$dialogParent = dialogParent;
	};
	$tab_PluginDialogNotificationHandler.__typeName = 'tab.PluginDialogNotificationHandler';
	global.tab.PluginDialogNotificationHandler = $tab_PluginDialogNotificationHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Plugin.PluginPresentationLayer
	var $tab_PluginPresentationLayer = function() {
		this.$disposables = new tab.DisposableHolder();
	};
	$tab_PluginPresentationLayer.__typeName = 'tab.PluginPresentationLayer';
	$tab_PluginPresentationLayer.get_instance = function PluginPresentationLayer$get_Instance() {
		$tab_PluginPresentationLayer.$instance = $tab_PluginPresentationLayer.$instance || new $tab_PluginPresentationLayer();
		return $tab_PluginPresentationLayer.$instance;
	};
	$tab_PluginPresentationLayer.set_instance = function PluginPresentationLayer$set_Instance(value) {
		$tab_PluginPresentationLayer.$instance = value;
	};
	global.tab.PluginPresentationLayer = $tab_PluginPresentationLayer;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.PresentationModel
	var $tab_PresentationModel = function() {
	};
	$tab_PresentationModel.__typeName = 'tab.PresentationModel';
	$tab_PresentationModel.commandResultByName = function PresentationModel$CommandResultByName(response, c) {
		ss.Debug.assert(ss.isValue(response['vqlCmdResponse'.toString()]), 'The server response is not a VqlCommandResponseRoot object.');
		var fullName = $tab_CommandSerializer.buildQualifiedCommandName(c.commandNamespace, c.commandName);
		var commandResponse = response['vqlCmdResponse'.toString()];
		var commandResults = commandResponse.cmdResultList;
		for (var $t1 = 0; $t1 < commandResults.length; $t1++) {
			var result = commandResults[$t1];
			if (ss.referenceEquals(result.commandName, fullName)) {
				return result.commandReturn;
			}
		}
		return null;
	};
	$tab_PresentationModel.fromCommand = function PresentationModel$FromCommand(response, c) {
		var root = $tab_PresentationModel.commandResultByName(response, c);
		if (!c.preserveRootResult && ss.isValue(root) && ss.getKeyCount(root) === 1 && !ss.keyExists(root, 'commandRedirectType'.toString())) {
			var $t1 = new ss.ObjectEnumerator(root);
			try {
				while ($t1.moveNext()) {
					var entry = $t1.current();
					return entry.value;
				}
			}
			finally {
				$t1.dispose();
			}
		}
		else {
			return root;
		}
		return null;
	};
	$tab_PresentationModel.ensurePath = function PresentationModel$EnsurePath(sourcePM, destPM, path) {
		var currentDestPM = destPM;
		var currentSourcePM = sourcePM;
		var nextPM;
		var nextSourcePM;
		var pathList = path.get_pathList();
		for (var i = 0, len = pathList.length; i < len; i++) {
			var currentItem = pathList[i];
			var currName = currentItem.name;
			nextPM = currentDestPM[currName];
			nextSourcePM = (ss.isValue(currentSourcePM) ? currentSourcePM[currName] : null);
			if (!ss.isValue(nextPM)) {
				var last = i === len - 1;
				var newPM = null;
				if (currentItem.type === 1 && ss.isValue(nextSourcePM)) {
					var sourceArray = ss.cast(nextSourcePM, Array);
					var newArray = [];
					for (var index = 0; index < sourceArray.length; index++) {
						newArray[index] = tab.MiscUtil.cloneObject(sourceArray[index]);
					}
					newPM = newArray;
				}
				else if (!last && ss.isValue(nextSourcePM)) {
					newPM = $tab_PresentationModel.cloneObjWithScalarsOnly(nextSourcePM);
				}
				else if (tab.FeatureFlags.isEnabled('ProgressiveDashboardLoad') && currentItem.type === 1) {
					newPM = [];
				}
				else {
					newPM = new Object();
				}
				currentDestPM[currName] = newPM;
			}
			currentDestPM = currentDestPM[currName];
			currentSourcePM = nextSourcePM;
		}
		return currentDestPM;
	};
	$tab_PresentationModel.insertAtPath = function PresentationModel$InsertAtPath(sourcePM, destPM, path, newPM) {
		$tab_PresentationModel.ensurePath(sourcePM, destPM, path);
		$tab_PresentationModel.$setPath(destPM, path, newPM);
	};
	$tab_PresentationModel.cloneObjWithScalarsOnly = function PresentationModel$CloneObjWithScalarsOnly(sourceObj) {
		if (!_.isObject(sourceObj)) {
			return sourceObj;
		}
		var clone = new Object();
		var sourcePMDict = sourceObj;
		var $t1 = Object.keys(sourcePMDict);
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var sourceKey = $t1[$t2];
			var elt = sourcePMDict[sourceKey];
			if (!_.isObject(elt)) {
				clone[sourceKey] = elt;
			}
		}
		return clone;
	};
	$tab_PresentationModel.$setPath = function PresentationModel$SetPath(pm, path, newPM) {
		if (path.get_pathList().length === 0) {
			var newPmKeys = newPM;
			var $t1 = new ss.ObjectEnumerator(newPmKeys);
			try {
				while ($t1.moveNext()) {
					var p = $t1.current();
					pm[p.key] = p.value;
				}
			}
			finally {
				$t1.dispose();
			}
		}
		else {
			var i, len;
			var currentPresModel = pm;
			var pathList = path.get_pathList();
			for (i = 0, len = pathList.length; i < len - 1; i++) {
				currentPresModel = currentPresModel[pathList[i].name];
			}
			currentPresModel[pathList[len - 1].name] = newPM;
		}
	};
	global.tab.PresentationModel = $tab_PresentationModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.PresModelPath
	var $tab_PresModelPath = function() {
		this.$pathAsString = null;
		this.$path = [];
	};
	$tab_PresModelPath.__typeName = 'tab.PresModelPath';
	global.tab.PresModelPath = $tab_PresModelPath;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.PresModelPathItem
	var $tab_PresModelPathItem = function(name, type) {
		this.name = null;
		this.type = 0;
		this.name = name;
		this.type = (ss.isValue(type) ? type : 0);
	};
	$tab_PresModelPathItem.__typeName = 'tab.PresModelPathItem';
	global.tab.PresModelPathItem = $tab_PresModelPathItem;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.PresModelPathItemType
	var $tab_PresModelPathItemType = function() {
	};
	$tab_PresModelPathItemType.__typeName = 'tab.PresModelPathItemType';
	global.tab.PresModelPathItemType = $tab_PresModelPathItemType;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ProgressiveLoader
	var $tab_ProgressiveLoader = function() {
		this.$deferredZonesByPriority = null;
		this.$vizZones = null;
		this.$timer = null;
		this.$viewportRect = null;
		this.$offscreenVizZones = null;
		this.$checkedForNonVisibleZones = false;
		this.$zoneModels = null;
		this.$pendingZoneContentModels = null;
		this.$zoneTypeMap = {};
		this.$updateRoot = null;
		this.$1$ProgressiveLoadField = null;
		this.$1$ProgressiveLoadCompleteField = null;
	};
	$tab_ProgressiveLoader.__typeName = 'tab.ProgressiveLoader';
	$tab_ProgressiveLoader.get_progressiveLoadEnabled = function ProgressiveLoader$get_ProgressiveLoadEnabled() {
		return tab.FeatureFlags.isEnabled('ProgressiveDashboardLoad') && !tsConfig.is_authoring && !tsConfig.isPublic;
	};
	$tab_ProgressiveLoader.cloneZone = function ProgressiveLoader$CloneZone(zone) {
		if (ss.isNullOrUndefined(zone)) {
			return zone;
		}
		var presModelHolder = zone.presModelHolder;
		zone.presModelHolder = null;
		var clone = tab.MiscUtil.cloneObject(zone);
		clone.presModelHolder = presModelHolder;
		zone.presModelHolder = presModelHolder;
		return clone;
	};
	$tab_ProgressiveLoader.removeZoneContent = function ProgressiveLoader$RemoveZoneContent(zone) {
		if (ss.isValue(zone)) {
			var zoneDict = zone;
			delete zoneDict['presModelHolder'];
		}
		return zone;
	};
	$tab_ProgressiveLoader.getZoneRoot = function ProgressiveLoader$GetZoneRoot(appModel) {
		if (ss.isNullOrUndefined(appModel) || ss.isNullOrUndefined(appModel.workbookPresModel) || ss.isNullOrUndefined(appModel.workbookPresModel.dashboardPresModel)) {
			return null;
		}
		var zoneRoot = appModel.workbookPresModel.dashboardPresModel;
		if (zoneRoot.isStory) {
			var zones = zoneRoot.zones;
			zoneRoot = null;
			var $t1 = _.keys(zones);
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var key = $t1[$t2];
				var zonePM = zones[key];
				if (ss.isValue(zonePM.zoneCommon) && zonePM.zoneCommon.zoneType !== 'flipboard') {
					continue;
				}
				var flipboardPM = $tab_ZoneModel.getContent(zonePM, 'flipboard');
				if (ss.isNullOrUndefined(flipboardPM) || ss.isNullOrUndefined(flipboardPM.storyPoints)) {
					return null;
				}
				var storyPointPM = flipboardPM.storyPoints[flipboardPM.activeStoryPointId.toString()];
				if (ss.isNullOrUndefined(storyPointPM)) {
					return null;
				}
				zoneRoot = storyPointPM.dashboardPresModel;
				break;
			}
		}
		return zoneRoot;
	};
	$tab_ProgressiveLoader.$buildZoneTypeMap = function ProgressiveLoader$BuildZoneTypeMap(dashboardPresModel) {
		var result = {};
		if (ss.isValue(dashboardPresModel) && ss.isValue(dashboardPresModel.zones)) {
			var $t1 = _.values(dashboardPresModel.zones);
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var zonePresModel = $t1[$t2];
				if (ss.isValue(zonePresModel) && ss.isValue(zonePresModel.zoneCommon)) {
					result[zonePresModel.zoneId] = zonePresModel.zoneCommon.zoneType;
				}
			}
		}
		return result;
	};
	$tab_ProgressiveLoader.$validateZonesPath = function ProgressiveLoader$ValidateZonesPath(appModel) {
		if (ss.isNullOrUndefined(appModel)) {
			return false;
		}
		var workbookModel = appModel.workbookPresModel;
		if (ss.isNullOrUndefined(workbookModel)) {
			return false;
		}
		var dashModel = workbookModel.dashboardPresModel;
		if (ss.isNullOrUndefined(dashModel)) {
			return false;
		}
		var zonesModel = dashModel.zones;
		if (ss.isNullOrUndefined(zonesModel)) {
			return false;
		}
		return true;
	};
	$tab_ProgressiveLoader.$initStaticLookups = function ProgressiveLoader$InitStaticLookups() {
		if (ss.isValue($tab_ProgressiveLoader.$zonePriorityMap)) {
			return;
		}
		$tab_ProgressiveLoader.$zonePriorityMap = {};
		$tab_ProgressiveLoader.$zonePriorityMap['flipboard-nav'] = 1;
		$tab_ProgressiveLoader.$zonePriorityMap['flipboard'] = 1;
		$tab_ProgressiveLoader.$zonePriorityMap['viz'] = 2;
		$tab_ProgressiveLoader.$zonePriorityMap['color'] = 3;
		$tab_ProgressiveLoader.$zonePriorityMap['shape'] = 3;
		$tab_ProgressiveLoader.$zonePriorityMap['size'] = 3;
		$tab_ProgressiveLoader.$zonePriorityMap['map'] = 3;
		$tab_ProgressiveLoader.$zonePriorityMap['filter'] = 4;
		$tab_ProgressiveLoader.$zonePriorityMap['highlighter'] = 4;
		$tab_ProgressiveLoader.$zonePriorityMap['paramctrl'] = 4;
		$tab_ProgressiveLoader.$zonePriorityMap['current-page'] = 4;
		$tab_ProgressiveLoader.$zonePriorityMap['web'] = 5;
		$tab_ProgressiveLoader.$zonePriorityMap['bitmap'] = 5;
		$tab_ProgressiveLoader.$priorityBatchSize = {};
		$tab_ProgressiveLoader.$priorityBatchSize[1] = { item1: -1, item2: 1 };
		$tab_ProgressiveLoader.$priorityBatchSize[2] = { item1: 1, item2: 0.33 };
		$tab_ProgressiveLoader.$priorityBatchSize[3] = { item1: 3, item2: 0.33 };
		$tab_ProgressiveLoader.$priorityBatchSize[4] = { item1: 3, item2: 0.33 };
		$tab_ProgressiveLoader.$priorityBatchSize[5] = { item1: -1, item2: 1 };
		$tab_ProgressiveLoader.$priorityBatchSize[6] = { item1: -1, item2: 1 };
	};
	$tab_ProgressiveLoader.$isDependentZoneType = function ProgressiveLoader$IsDependentZoneType(type) {
		switch (type) {
			case 'color':
			case 'size':
			case 'shape':
			case 'filter': {
				return true;
			}
		}
		return false;
	};
	$tab_ProgressiveLoader.$cloneOrReturnDefault = function ProgressiveLoader$CloneOrReturnDefault(obj, defaultObj) {
		if (ss.isNullOrUndefined(obj)) {
			return defaultObj;
		}
		return $tab_PresentationModel.cloneObjWithScalarsOnly(obj);
	};
	global.tab.ProgressiveLoader = $tab_ProgressiveLoader;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.QuantitativeColorLegendModel
	var $tab_QuantitativeColorLegendModel = function(parent, contentType) {
		this.$2$LegendChangedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem(contentType));
	};
	$tab_QuantitativeColorLegendModel.__typeName = 'tab.QuantitativeColorLegendModel';
	global.tab.QuantitativeColorLegendModel = $tab_QuantitativeColorLegendModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.QuantitativeFilterData
	var $tab_QuantitativeFilterData = function(sheets, filterField, currentMinVal, currentMaxVal, previousMinVal, previousMaxVal) {
		this.$targetSheets = null;
		this.$fieldName = null;
		this.$currentMinVal = null;
		this.$currentMaxVal = null;
		this.$previousMinVal = null;
		this.$previousMaxVal = null;
		this.$targetSheets = sheets;
		this.$fieldName = filterField;
		this.$currentMinVal = currentMinVal;
		this.$currentMaxVal = currentMaxVal;
		this.$previousMinVal = previousMinVal;
		this.$previousMaxVal = previousMaxVal;
	};
	$tab_QuantitativeFilterData.__typeName = 'tab.QuantitativeFilterData';
	global.tab.QuantitativeFilterData = $tab_QuantitativeFilterData;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.QuickFilterDisplayModel
	var $tab_QuickFilterDisplayModel = function(parent) {
		this.$2$FilterUpdatedField = null;
		this.$2$QuickFilterModelField = null;
		this.$2$QuickFilterTypeField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('quickFilterDisplay'.toString()));
		this.set_quickFilterType('unknown');
	};
	$tab_QuickFilterDisplayModel.__typeName = 'tab.QuickFilterDisplayModel';
	$tab_QuickFilterDisplayModel.supportsQuickFilterType = function QuickFilterDisplayModel$SupportsQuickFilterType(presModel) {
		if (presModel.quickFilter.quickFilterType === 'categorical') {
			var catQFPresModel = presModel.quickFilter;
			switch (catQFPresModel.categoricalMode) {
				case 'check-list':
				case 'radio-list': {
					return true;
				}
				case 'check-dropdown':
				case 'dropdown': {
					return tab.FeatureParamsLookup.getBool(40);
				}
				case 'slider':
				case 'pattern':
				case 'type-in-list':
				default: {
					return false;
				}
			}
		}
		return false;
	};
	global.tab.QuickFilterDisplayModel = $tab_QuickFilterDisplayModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.QuickFilterModel
	var $tab_QuickFilterModel = function(parent, presModelKey) {
		$tab_Model.call(this, parent, presModelKey);
	};
	$tab_QuickFilterModel.__typeName = 'tab.QuickFilterModel';
	global.tab.QuickFilterModel = $tab_QuickFilterModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.RadialSelectionDistanceInfoModel
	var $tab_RadialSelectionDistanceInfoModel = function(parent) {
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('radialSelectionDistanceInfo'.toString()));
	};
	$tab_RadialSelectionDistanceInfoModel.__typeName = 'tab.RadialSelectionDistanceInfoModel';
	global.tab.RadialSelectionDistanceInfoModel = $tab_RadialSelectionDistanceInfoModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Utility.RangeTransform
	var $tab_RangeTransform = function() {
	};
	$tab_RangeTransform.__typeName = 'tab.RangeTransform';
	global.tab.RangeTransform = $tab_RangeTransform;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.RankTableCalcModel
	var $tab_RankTableCalcModel = function(parent) {
		this.$3$ModelUpdatedField = null;
		$tab_TypeSpecificTableCalcModel.call(this, parent, new $tab_PresModelPathItem('rankTableCalcPresModel'.toString()));
	};
	$tab_RankTableCalcModel.__typeName = 'tab.RankTableCalcModel';
	global.tab.RankTableCalcModel = $tab_RankTableCalcModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.RelationalTableModel
	var $tab_RelationalTableModel = function(parent) {
		this.$columns = null;
		$tab_FieldModel.call(this, parent);
	};
	$tab_RelationalTableModel.__typeName = 'tab.RelationalTableModel';
	global.tab.RelationalTableModel = $tab_RelationalTableModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.RemoteClientCommand
	var $tab_RemoteClientCommand = function(command, uiBlockType, successCallback, errorCallback) {
		$tab_ClientCommand.call(this, uiBlockType, null, command, successCallback, errorCallback);
	};
	$tab_RemoteClientCommand.__typeName = 'tab.RemoteClientCommand';
	$tab_RemoteClientCommand.create = function RemoteClientCommand$Create(command, uiBlockType, successCallback, errorCallback) {
		return new $tab_RemoteClientCommand(command, uiBlockType, successCallback, errorCallback);
	};
	global.tab.RemoteClientCommand = $tab_RemoteClientCommand;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ReplaceFileConnectionFromFileUploadCmd
	var $tab_ReplaceFileConnectionFromFileUploadCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ReplaceFileConnectionFromFileUploadCmd$Response]).call(this);
	};
	$tab_ReplaceFileConnectionFromFileUploadCmd.__typeName = 'tab.ReplaceFileConnectionFromFileUploadCmd';
	global.tab.ReplaceFileConnectionFromFileUploadCmd = $tab_ReplaceFileConnectionFromFileUploadCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ReplaceFileConnectionFromFileUploadCmd.Response
	var $tab_ReplaceFileConnectionFromFileUploadCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_ReplaceFileConnectionFromFileUploadCmd$Response.__typeName = 'tab.ReplaceFileConnectionFromFileUploadCmd$Response';
	global.tab.ReplaceFileConnectionFromFileUploadCmd$Response = $tab_ReplaceFileConnectionFromFileUploadCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.RepoPathObject
	var $tab_RepoPathObject = function(repoPath) {
		this.$workbookId = null;
		this.$sheetId = null;
		this.$customizedView = null;
		var pieces = repoPath.split('/');
		this.$workbookId = pieces[0].replace(new RegExp('^ds:'), '');
		this.$sheetId = pieces[1];
		if (pieces.length > 2) {
			if (pieces.length === 3) {
				throw new ss.Exception("new RepoPathObject() encountered repo path'" + repoPath + "' with a badly formed customized view");
			}
			this.$customizedView = pieces[2] + '/' + pieces[3];
		}
		else {
			this.$customizedView = '';
		}
	};
	$tab_RepoPathObject.__typeName = 'tab.RepoPathObject';
	global.tab.RepoPathObject = $tab_RepoPathObject;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ResizeAxisRegionCmd
	var $tab_ResizeAxisRegionCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ResizeAxisRegionCmd$Response]).call(this);
	};
	$tab_ResizeAxisRegionCmd.__typeName = 'tab.ResizeAxisRegionCmd';
	global.tab.ResizeAxisRegionCmd = $tab_ResizeAxisRegionCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ResizeAxisRegionCmd.Response
	var $tab_ResizeAxisRegionCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_ResizeAxisRegionCmd$Response.__typeName = 'tab.ResizeAxisRegionCmd$Response';
	global.tab.ResizeAxisRegionCmd$Response = $tab_ResizeAxisRegionCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ResizeHeaderRegionCmd
	var $tab_ResizeHeaderRegionCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ResizeHeaderRegionCmd$Response]).call(this);
	};
	$tab_ResizeHeaderRegionCmd.__typeName = 'tab.ResizeHeaderRegionCmd';
	global.tab.ResizeHeaderRegionCmd = $tab_ResizeHeaderRegionCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ResizeHeaderRegionCmd.Response
	var $tab_ResizeHeaderRegionCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_ResizeHeaderRegionCmd$Response.__typeName = 'tab.ResizeHeaderRegionCmd$Response';
	global.tab.ResizeHeaderRegionCmd$Response = $tab_ResizeHeaderRegionCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SaveServerCommands
	var $tab_SaveServerCommands = function() {
	};
	$tab_SaveServerCommands.__typeName = 'tab.SaveServerCommands';
	$tab_SaveServerCommands.get_$log = function SaveServerCommands$get_Log() {
		return tab.Logger.lazyGetLogger($tab_SaveServerCommands);
	};
	$tab_SaveServerCommands.saveWorkbook = function SaveServerCommands$SaveWorkbook(successCallback) {
		var internalSuccess = function(o) {
			$tab_WorldUpdateServerCommands.getWorldUpdate(function() {
				if (ss.isValue(successCallback)) {
					successCallback(o);
				}
			});
		};
		$tab_SaveServerCommands.$executePublish('publish', tsConfig.workbookName, tsConfig.current_project_id.toString(), tsConfig.showTabsWorkbook, null, null, internalSuccess, null, $tab_CommandController.get().get_legacySession());
	};
	$tab_SaveServerCommands.saveWorkbookAs = function SaveServerCommands$SaveWorkbookAs(name, projectId, showTabs, embedCredentials, noOverwrite, successCallback, errorCallback) {
		$tab_SaveServerCommands.$executePublish('publish_as', name, projectId, showTabs, embedCredentials, noOverwrite, successCallback, errorCallback, $tab_CommandController.get().get_legacySession());
	};
	$tab_SaveServerCommands.SaveWorkbookAs = function SaveServerCommands$SaveWorkbookAs(name, project, showTabs, embedCredentials, noOverwrite, successCallback, errorCallback) {
		$tab_SaveServerCommands.saveWorkbookAs(name, project.id, showTabs, embedCredentials, noOverwrite, successCallback, errorCallback);
	};
	$tab_SaveServerCommands.SaveDatasource = function SaveServerCommands$SaveDatasource(datasourceId, datasourceName, noOverwrite, projectId, successCallback, errorCallback) {
		var session = $tab_CommandController.get().get_legacySession();
		var onSuccess = function(responseObject, status, request) {
			var saveDatasourceResult = $tab_SaveServerCommands.$getRequestResponseData(Object).call(null, request.responseText);
			successCallback(saveDatasourceResult);
		};
		var onError = function(request1, status1, error) {
			$tab_SaveServerCommands.get_$log().debug('Error on save datasource: %s', [request1.responseText]);
			var publishError = $tab_SaveServerCommands.$getRequestResponseData(Object).call(null, request1.responseText);
			if (ss.isValue(errorCallback) && ss.isValue(publishError)) {
				errorCallback(publishError);
			}
			else {
				session.$handleError(error, request1, false, null);
			}
		};
		var args = {};
		args.type = 'POST';
		args.dataType = 'json';
		args.url = $tab_CommandController.$formatSessionMethod('publish_ds', session);
		var data = ss.mkdict(['project', projectId.toString(), 'datasource', datasourceId, 'name', datasourceName]);
		if (ss.isValue(noOverwrite)) {
			data['no_overwrite'] = ss.unbox(noOverwrite);
		}
		var payload = $tab_XhrUtil.getMultipartData(null, data);
		args.contentType = 'multipart/form-data; boundary=' + payload.header;
		args.data = payload.body;
		var handler = new $tab_SessionAjaxCallManager(session, null, onSuccess, onError, true, true);
		$tab_XhrUtil.helper(args, handler);
	};
	$tab_SaveServerCommands.$getRequestResponseData = function(T) {
		return function SaveServerCommands$GetRequestResponseData(responseText) {
			var json;
			try {
				json = JSON.parse(responseText);
			}
			catch ($t1) {
				json = null;
			}
			return ss.cast(json, T);
		};
	};
	$tab_SaveServerCommands.$executePublish = function SaveServerCommands$ExecutePublish(publishMethod, name, projectId, showTabs, embedCredentials, noOverwrite, successCallback, errorCallback, session) {
		var onSuccess = function(responseObject, status, req) {
			var responseDict = responseObject;
			if (ss.keyExists(responseDict, 'workbook')) {
				var wb = responseDict['workbook'];
				successCallback(wb);
			}
			else {
				$tab_SaveServerCommands.get_$log().warn('Save did not return a workbook: %s', [responseObject]);
				successCallback(null);
			}
		};
		var onError = function(request, status1, error) {
			$tab_SaveServerCommands.get_$log().debug('Error on publish: %s', [request.responseText]);
			var publishError = $tab_SaveServerCommands.$getRequestResponseData(Object).call(null, request.responseText);
			var exceptionResponse = $tab_SaveServerCommands.$getRequestResponseData(Object).call(null, request.responseText);
			if (ss.isValue(errorCallback) && ss.isValue(publishError)) {
				errorCallback(publishError);
			}
			else if (request.status === 403 && ss.isValue(exceptionResponse) && exceptionResponse.code === 60011) {
				session.get_sessionErrorHandler().handleSessionForbiddenAction(exceptionResponse.code, exceptionResponse.message);
			}
			else {
				session.$handleError(error, request, false, null);
			}
		};
		var args = {};
		args.type = 'POST';
		args.dataType = 'json';
		args.url = $tab_CommandController.$formatSessionMethod(publishMethod, session);
		var data = ss.mkdict(['project', projectId, 'name', name, 'display_tabs', showTabs]);
		if (ss.isValue(embedCredentials)) {
			data['save_db_passwords'] = ss.unbox(embedCredentials);
		}
		if (ss.isValue(noOverwrite)) {
			data['no_overwrite'] = ss.unbox(noOverwrite);
		}
		var payload = $tab_XhrUtil.getMultipartData(null, data);
		args.contentType = 'multipart/form-data; boundary=' + payload.header;
		args.data = payload.body;
		var handler = new $tab_SessionAjaxCallManager(session, null, onSuccess, onError, true, true);
		$tab_XhrUtil.helper(args, handler);
	};
	$tab_SaveServerCommands.transitionSessionAfterLogon = function SaveServerCommands$TransitionSessionAfterLogon(successCallback) {
		$tab_CommandController.get().$transitionGuestSession(successCallback);
	};
	global.tab.SaveServerCommands = $tab_SaveServerCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SceneDataUtil
	var $tab_SceneDataUtil = function() {
	};
	$tab_SceneDataUtil.__typeName = 'tab.SceneDataUtil';
	$tab_SceneDataUtil.isPaneFlagSet = function SceneDataUtil$IsPaneFlagSet(flags, flagToTest) {
		return (flags & $tab_SceneDataUtil.$paneFlagMapping[flagToTest]) !== 0;
	};
	$tab_SceneDataUtil.isMarkFlagSet = function SceneDataUtil$IsMarkFlagSet(flags, flagToTest) {
		return (flags & $tab_SceneDataUtil.$markFlagMapping[flagToTest]) !== 0;
	};
	$tab_SceneDataUtil.isCustomShape = function SceneDataUtil$IsCustomShape(shapeId) {
		return !ss.keyExists($tab_SceneDataUtil.shapeMapping, shapeId.toString());
	};
	$tab_SceneDataUtil.getFogBlendFactor = function SceneDataUtil$GetFogBlendFactor(backgroundColor) {
		var DefaultFogBlendFactor = 0.185000002384186;
		var DarkBgFogBlendFactor = 0.275000005960464;
		var DarkBgThreshold = 75;
		var isDarkBackground = backgroundColor.get_r() <= DarkBgThreshold && backgroundColor.get_g() <= DarkBgThreshold && backgroundColor.get_b() <= DarkBgThreshold;
		return (isDarkBackground ? DarkBgFogBlendFactor : DefaultFogBlendFactor);
	};
	$tab_SceneDataUtil.fogColorTransform = function SceneDataUtil$FogColorTransform(color, foggedBackgroundColor, fogBlendFactor) {
		var r = ss.Int32.trunc(foggedBackgroundColor.get_r() + color.get_r() * fogBlendFactor);
		var g = ss.Int32.trunc(foggedBackgroundColor.get_g() + color.get_g() * fogBlendFactor);
		var b = ss.Int32.trunc(foggedBackgroundColor.get_b() + color.get_b() * fogBlendFactor);
		return new $tab_ColorModel(r, g, b, color.get_a());
	};
	$tab_SceneDataUtil.applyFogToBackgroundColor = function SceneDataUtil$ApplyFogToBackgroundColor(backgroundColor, fogBlendFactor) {
		var CloseToWhite = 245;
		if (backgroundColor.get_r() >= CloseToWhite && backgroundColor.get_g() >= CloseToWhite && backgroundColor.get_b() >= CloseToWhite) {
			backgroundColor = new $tab_ColorModel(CloseToWhite, CloseToWhite, CloseToWhite, backgroundColor.get_a());
		}
		var r = ss.Int32.trunc((1 - fogBlendFactor) * backgroundColor.get_r());
		var g = ss.Int32.trunc((1 - fogBlendFactor) * backgroundColor.get_g());
		var b = ss.Int32.trunc((1 - fogBlendFactor) * backgroundColor.get_b());
		return new $tab_ColorModel(r, g, b, backgroundColor.get_a());
	};
	$tab_SceneDataUtil.createColorCollection = function SceneDataUtil$CreateColorCollection(color, fogBackgroundColor, fogBlendFactor) {
		var colorCollection = {};
		colorCollection['colorOverrideOpaque'] = color.toRgb();
		colorCollection['colorOverrideNone'] = color.toRgba();
		colorCollection['colorOverrideFog'] = $tab_SceneDataUtil.fogColorTransform(color, fogBackgroundColor, fogBlendFactor).toRgba();
		return colorCollection;
	};
	$tab_SceneDataUtil.createOpaqueColorCollection = function SceneDataUtil$CreateOpaqueColorCollection(colorCollection) {
		var opaqueColors = {};
		var cm = $tab_ColorModel.fromColorCode(colorCollection['colorOverrideNone']);
		opaqueColors['colorOverrideNone'] = cm.toRgb();
		cm = $tab_ColorModel.fromColorCode(colorCollection['colorOverrideFog']);
		opaqueColors['colorOverrideFog'] = cm.toRgb();
		cm = $tab_ColorModel.fromColorCode(colorCollection['colorOverrideOpaque']);
		opaqueColors['colorOverrideOpaque'] = cm.toRgb();
		return opaqueColors;
	};
	$tab_SceneDataUtil.applyFoggingToColor = function SceneDataUtil$ApplyFoggingToColor(color, backgroundColor) {
		var fogBlendFactor = $tab_SceneDataUtil.getFogBlendFactor(backgroundColor);
		var foggedBackground = $tab_SceneDataUtil.applyFogToBackgroundColor(backgroundColor, fogBlendFactor);
		return $tab_SceneDataUtil.fogColorTransform(color, foggedBackground, fogBlendFactor);
	};
	$tab_SceneDataUtil.convertShapeToNumber = function SceneDataUtil$ConvertShapeToNumber(shape) {
		ss.Debug.assert(ss.isValue(shape), 'Unable to encode, shape is null');
		ss.Debug.assert(!ss.isValue(shape.get_palette()) || ss.unbox(shape.get_palette()) === 'filled', 'Only shapes with empty or Filled palette supported');
		var result;
		var isFilled = ss.isValue(shape.get_palette()) && ss.unbox(shape.get_palette()) === 'filled';
		switch (shape.get_shapeType()) {
			case 'circle': {
				result = (isFilled ? 'shapeIDFilledCircle' : 'shapeIDCircle');
				break;
			}
			case 'square': {
				result = (isFilled ? 'shapeIDFilledSquare' : 'shapeIDSquare');
				break;
			}
			case 'plus': {
				result = (isFilled ? 'shapeIDFilledPlus' : 'shapeIDPlus');
				break;
			}
			case 'times': {
				result = (isFilled ? 'shapeIDFilledTimes' : 'shapeIDTimes');
				break;
			}
			case 'asterisk': {
				result = (isFilled ? 'shapeIDFilledStar' : 'shapeIDAsterisk');
				break;
			}
			case 'diamond': {
				result = (isFilled ? 'shapeIDFilledDiamond' : 'shapeIDDiamond');
				break;
			}
			case 'triangle': {
				result = (isFilled ? 'shapeIDFilledTriangle' : 'shapeIDTriangle');
				break;
			}
			case 'down-triangle': {
				result = (isFilled ? 'shapeIDFilledDownTriangle' : 'shapeIDDownTriangle');
				break;
			}
			case 'left-triangle': {
				result = (isFilled ? 'shapeIDFilledLeftTriangle' : 'shapeIDLeftTriangle');
				break;
			}
			case 'right-triangle': {
				result = (isFilled ? 'shapeIDFilledRightTriangle' : 'shapeIDRightTriangle');
				break;
			}
			default: {
				throw new ss.Exception('Unable to map ShapeType to ShapeID');
			}
		}
		return parseInt($tab_SceneDataUtil.reverseShapeMapping[result]);
	};
	$tab_SceneDataUtil.getNumPaneItems = function SceneDataUtil$GetNumPaneItems(paneMarksPM) {
		return paneMarksPM.endIndex - paneMarksPM.startIndex;
	};
	$tab_SceneDataUtil.getPaneDomainExtents = function SceneDataUtil$GetPaneDomainExtents(pane) {
		if (ss.isValue(pane.drawPane)) {
			for (var $t1 = 0; $t1 < pane.drawPane.length; $t1++) {
				var vlpm = pane.drawPane[$t1];
				var pmpm = vlpm.paneMarks;
				if (ss.isValue(pmpm) && ss.isValue(pmpm.domainExtents)) {
					ss.Debug.assert(pmpm.domainExtents.width !== 0 && pmpm.domainExtents.height !== 0, 'Error: DomainExtents are degenerate.');
					return tab.RecordCast.doubleRectPresModelAsDoubleRectXY(pmpm.domainExtents);
				}
			}
		}
		return null;
	};
	$tab_SceneDataUtil.calcCellClip = function SceneDataUtil$CalcCellClip(paneFlags) {
		var toRet = 0;
		var clipX = $tab_SceneDataUtil.isPaneFlagSet(paneFlags, 'clip-to-cell-x');
		var clipY = $tab_SceneDataUtil.isPaneFlagSet(paneFlags, 'clip-to-cell-y');
		if (clipX && clipY) {
			toRet = 3;
		}
		else if (clipX) {
			toRet = 1;
		}
		else if (clipY) {
			toRet = 2;
		}
		return toRet;
	};
	$tab_SceneDataUtil.isSupportedStampShape = function SceneDataUtil$IsSupportedStampShape(shape) {
		if (!ss.keyExists($tab_SceneDataUtil.reverseShapeMapping, shape)) {
			return false;
		}
		var isSupported = true;
		switch (shape) {
			case 'shapeIDFilledSquare':
			case 'shapeIDSquare': {
				isSupported = false;
				break;
			}
			default: {
				break;
			}
		}
		return isSupported;
	};
	global.tab.SceneDataUtil = $tab_SceneDataUtil;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SceneElementModel
	var $tab_SceneElementModel = function(pm) {
		this.$2$SceneElementPMField = null;
		this.$2$PaneIdField = null;
		this.$2$BoundsField = null;
		$tab_Model.call(this, null, new $tab_PresModelPathItem('sceneElement'.toString()));
		this.swapPresModel(pm);
		this.set_sceneElementPM(pm);
		this.set_paneId(new $tab_PaneIdModel(pm.paneId));
		this.set_bounds({ minX: pm.floatLeft, minY: pm.floatTop, maxX: pm.floatLeft + pm.floatWidth, maxY: pm.floatTop + pm.floatHeight });
	};
	$tab_SceneElementModel.__typeName = 'tab.SceneElementModel';
	global.tab.SceneElementModel = $tab_SceneElementModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SceneModel
	var $tab_SceneModel = function(parent) {
		this.$visualListModels = {};
		this.$drawFirstParts = [];
		this.$drawLastParts = [];
		this.$refLineVisualLists = null;
		this.$trendLineVisualLists = null;
		this.$backgroundColor = null;
		this.$2$NewSceneModelField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('scene'.toString()));
		this.$refLineVisualLists = [];
		this.$trendLineVisualLists = [];
	};
	$tab_SceneModel.__typeName = 'tab.SceneModel';
	$tab_SceneModel.$getBackgroundColor = function SceneModel$GetBackgroundColor(vizRegionModels, scenePresModel) {
		if (ss.keyExists(vizRegionModels, 'background')) {
			var drawItems = vizRegionModels['background'].get_visualListPresModel().drawItems;
			for (var $t1 = 0; $t1 < drawItems.length; $t1++) {
				var item = drawItems[$t1];
				if (item.type === 'draw-solid-brush') {
					var drawSolidBrush = item;
					return $tab_ColorModel.fromColorCode(drawSolidBrush.color);
				}
			}
		}
		return (ss.isValue(scenePresModel.bgColor) ? $tab_ColorModel.fromColorCode(scenePresModel.bgColor) : $tab_SceneModel.$defaultBackgroundFillColor);
	};
	global.tab.SceneModel = $tab_SceneModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Utility.SceneUtils
	var $tab_SceneUtils = function() {
	};
	$tab_SceneUtils.__typeName = 'tab.SceneUtils';
	$tab_SceneUtils.getPaneDescriptorKeyFromTupleId = function SceneUtils$GetPaneDescriptorKeyFromTupleId(tupleId, scene) {
		for (var $t1 = 0; $t1 < scene.panes.length; $t1++) {
			var pane = scene.panes[$t1];
			for (var $t2 = 0; $t2 < pane.drawPane.length; $t2++) {
				var vlpm = pane.drawPane[$t2];
				if (ss.isValue(vlpm.paneMarks)) {
					var pdMarks = scene.pdMarksMap;
					var $t3 = new ss.ObjectEnumerator(pdMarks);
					try {
						while ($t3.moveNext()) {
							var pair = $t3.current();
							var dataCol = pair.value.encodingColumns['tuple_id'];
							var match = _.find(dataCol.dataValues, function(data) {
								return ss.unbox(ss.cast(data, ss.Int32)) === tupleId;
							});
							if (ss.isValue(match)) {
								return pair.key;
							}
						}
					}
					finally {
						$t3.dispose();
					}
				}
			}
		}
		tab.Logger.lazyGetLogger($tab_SceneUtils).warn('Failed getting pane descriptor key for tuple id: %i', [tupleId]);
		return '';
	};
	global.tab.SceneUtils = $tab_SceneUtils;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Schedule
	var $tab_Schedule = function(model) {
		this.$schedulePresModel = null;
		this.$scheduleFrequencyDescription = null;
		this.$dayMap = ss.mkdict(['Sun', tab.Strings.Sunday, 'Mon', tab.Strings.Monday, 'Tue', tab.Strings.Tuesday, 'Wed', tab.Strings.Wednesday, 'Thu', tab.Strings.Thursday, 'Fri', tab.Strings.Friday, 'Sat', tab.Strings.Saturday]);
		this.$schedulePresModel = model;
		this.$scheduleFrequencyDescription = this.generateFrequencyDescription();
	};
	$tab_Schedule.__typeName = 'tab.Schedule';
	$tab_Schedule.$formatTime = function Schedule$FormatTime(minutesAfterMidnight) {
		var date = new Date();
		date.setHours(ss.Int32.div(minutesAfterMidnight, 60));
		date.setMinutes(minutesAfterMidnight % 60);
		date.setSeconds(0);
		return date.toLocaleTimeString();
	};
	$tab_Schedule.$offsetStartTime = function Schedule$OffsetStartTime(startTime, diffMinutes) {
		var newStart = startTime + diffMinutes;
		newStart = newStart % $tab_Schedule.$minutesPerDay;
		if (newStart < 0) {
			newStart = $tab_Schedule.$minutesPerDay + newStart;
		}
		return newStart;
	};
	$tab_Schedule.$computeDayOffset = function Schedule$ComputeDayOffset(startTime, diffMinutes) {
		var newStart = startTime + diffMinutes;
		if (newStart > $tab_Schedule.$minutesPerDay) {
			return 1;
		}
		else if (newStart < 0) {
			return -1;
		}
		return 0;
	};
	global.tab.Schedule = $tab_Schedule;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SchemaClientCommands
	var $tab_SchemaClientCommands = function() {
	};
	$tab_SchemaClientCommands.__typeName = 'tab.SchemaClientCommands';
	$tab_SchemaClientCommands.addFieldToSheet = function SchemaClientCommands$AddFieldToSheet(fieldName, callback) {
		var cmdParams = {};
		cmdParams['fn'] = fieldName;
		cmdParams['worksheet'] = tsConfig.current_sheet_name;
		var c = $tab_CommandUtils.newCommand('add-to-sheet', cmdParams);
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create(c, 'immediately', function(pm) {
			callback();
		}, function(x) {
			callback();
		}));
	};
	$tab_SchemaClientCommands.$issueConversionCommand = function SchemaClientCommands$IssueConversionCommand(commandName, fieldNames) {
		var c = $tab_CommandUtils.newCommand(commandName, {});
		c.commandParams['fieldVector'] = fieldNames;
		$tab_CommandController.SendCommand(new $tab_RemoteClientCommand(c, 'immediately', null, null));
	};
	$tab_SchemaClientCommands.convertToMeasure = function SchemaClientCommands$ConvertToMeasure(fieldNames) {
		$tab_SchemaClientCommands.$issueConversionCommand('convert-to-measure', fieldNames);
	};
	$tab_SchemaClientCommands.convertToDimension = function SchemaClientCommands$ConvertToDimension(fieldNames) {
		$tab_SchemaClientCommands.$issueConversionCommand('convert-to-dimension', fieldNames);
	};
	$tab_SchemaClientCommands.validateFieldCaption = function SchemaClientCommands$ValidateFieldCaption(fieldName, newCaption, successCallback) {
		var cmdParams = {};
		cmdParams['uniqueName'] = fieldName;
		cmdParams['caption'] = newCaption;
		var cmd = $tab_CommandUtils.newCommand('validate-field-caption', cmdParams);
		$tab_ServerCommands.executeServerCommand(cmd, 'afterDelay', function(pm) {
			successCallback(pm);
		}, null);
	};
	$tab_SchemaClientCommands.editFieldCaption = function SchemaClientCommands$EditFieldCaption(fieldName, newCaption, fieldModel) {
		var cmdParams = {};
		cmdParams['uniqueName'] = fieldName;
		cmdParams['caption'] = newCaption;
		var cmd = $tab_CommandUtils.newCommand('edit-schema-caption', cmdParams);
		$tab_CommandController.SendCommand(new $tab_ClientCommand('none', function(t) {
			var fieldsPM = t.makeMutablePresModel(fieldModel.get_fieldsModel(), false);
			for (var ind = 0; ind < fieldsPM.length; ++ind) {
				if (ss.referenceEquals(fieldsPM[ind].fn, fieldName)) {
					fieldsPM[ind].description = newCaption;
					break;
				}
			}
		}, cmd));
	};
	$tab_SchemaClientCommands.setActiveDataSourceName = function SchemaClientCommands$SetActiveDataSourceName(newDsName, isUndoable) {
		var commandParams = {};
		commandParams['datasource'] = newDsName;
		var docCmd = (isUndoable ? 'set-active-data-source-name' : 'set-active-datasource');
		var cmd = $tab_CommandUtils.newCommand(docCmd, commandParams);
		cmd.commandParams['datasource'] = newDsName;
		var doLocalWork = $tab_ApplicationModel.get_instance().get_workbook().get_uiMode() === 'data-tab';
		var localWork = null;
		if (doLocalWork) {
			localWork = function(t) {
				var dataSchemaPM = t.makeMutablePresModel($tab_ApplicationModel.get_instance().get_workbook().get_dataSchema(), false);
				dataSchemaPM.datasource = newDsName;
			};
		}
		$tab_CommandController.SendCommand(new $tab_ClientCommand((doLocalWork ? 'none' : 'immediately'), localWork, cmd));
	};
	$tab_SchemaClientCommands.requestSchemaContextMenu = function SchemaClientCommands$RequestSchemaContextMenu(dataSource, callback) {
		var c = $tab_CommandUtils.newCommand('build-data-schema-context-menu', null);
		var cmdParams = {};
		cmdParams['datasource'] = dataSource.get_name();
		c.commandParams = cmdParams;
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create(c, 'none', function(pm) {
			callback(pm);
		}, null));
	};
	$tab_SchemaClientCommands.requestSchemaFieldContextMenu = function SchemaClientCommands$RequestSchemaFieldContextMenu(dataSourceName, field, callback) {
		var c = $tab_CommandUtils.newCommand('build-data-schema-field-context-menu', null);
		var cmdParams = {};
		cmdParams['datasource'] = dataSourceName;
		cmdParams['fn'] = field;
		c.commandParams = cmdParams;
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create(c, 'none', function(pm) {
			callback(pm);
		}, null));
	};
	$tab_SchemaClientCommands.requestSchemaDataSourceContextMenu = function SchemaClientCommands$RequestSchemaDataSourceContextMenu(dataSource, callback) {
		var c = $tab_CommandUtils.newCommand('build-data-schema-data-source-context-menu', null);
		var cmdParams = {};
		cmdParams['datasource'] = dataSource.get_name();
		cmdParams['allowSaveDataSource'] = tsConfig.allow_save_data_source;
		c.commandParams = cmdParams;
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create(c, 'none', function(pm) {
			callback(pm);
		}, null));
	};
	$tab_SchemaClientCommands.convertUnnamedFields = function SchemaClientCommands$ConvertUnnamedFields(fieldNames) {
		var deferred = $.Deferred();
		var cmdParams = {};
		cmdParams['fieldVector'] = fieldNames;
		var cmd = new $tab_RemoteClientCommand($tab_CommandUtils.newCommand('convert-unnamed-fields', cmdParams), 'immediately', $tab_CommandController.deferredSuccessHandler(Array).call(null, deferred), function() {
			deferred.reject();
		});
		$tab_CommandController.SendCommand(cmd);
		return deferred.promise();
	};
	$tab_SchemaClientCommands.toggleFieldBlending = function SchemaClientCommands$ToggleFieldBlending(fieldName, localWork) {
		var deferred = $.Deferred();
		var cmdParams = {};
		cmdParams['globalFieldName'] = fieldName;
		cmdParams['worksheet'] = tsConfig.current_sheet_name;
		var cmd = new $tab_ClientCommand('immediately', localWork, $tab_CommandUtils.newCommand('toggle-field-blending', cmdParams), $tab_CommandController.deferredSuccessHandler(Object).call(null, deferred), function() {
			deferred.reject();
		});
		$tab_CommandController.SendCommand(cmd);
		return deferred.promise();
	};
	$tab_SchemaClientCommands.renameDataSource = function SchemaClientCommands$RenameDataSource(dsm, newDSCaption, failCallback) {
		if (ss.isNullOrUndefined(dsm)) {
			return;
		}
		if (ss.referenceEquals(dsm.get_caption(), newDSCaption)) {
			return;
		}
		var localWork = function(t) {
			var dataSourcePM = t.makeMutablePresModel(dsm, false);
			dataSourcePM.datasourceCaption = newDSCaption;
		};
		var cmdParams = {};
		cmdParams['datasource'] = dsm.get_name();
		cmdParams['newDatasource'] = newDSCaption;
		var cmd = new $tab_ClientCommand('none', localWork, $tab_CommandUtils.newCommand('rename-data-source', cmdParams), null, function(Exception) {
			failCallback();
		});
		$tab_CommandController.SendCommand(cmd);
	};
	$tab_SchemaClientCommands.renameTableAliasInRelation = function SchemaClientCommands$RenameTableAliasInRelation(oldName, newName, failCallback) {
		if (ss.isNullOrEmptyString(newName)) {
			return;
		}
		if (ss.referenceEquals(oldName, newName)) {
			return;
		}
		var cmdParams = {};
		cmdParams['tableAlias'] = oldName;
		cmdParams['newTableAlias'] = newName;
		var renameTableCmd = $tab_CommandUtils.newCommand('connection-rename-table', cmdParams);
		var cmd = new $tab_ClientCommand('immediately', null, renameTableCmd, null, function(Exception) {
			failCallback();
		});
		$tab_CommandController.SendCommand(cmd);
	};
	global.tab.SchemaClientCommands = $tab_SchemaClientCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SelectByTupleValueCmd
	var $tab_SelectByTupleValueCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_SelectByTupleValueCmd$Response]).call(this);
	};
	$tab_SelectByTupleValueCmd.__typeName = 'tab.SelectByTupleValueCmd';
	global.tab.SelectByTupleValueCmd = $tab_SelectByTupleValueCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SelectByTupleValueCmd.Response
	var $tab_SelectByTupleValueCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_SelectByTupleValueCmd$Response.__typeName = 'tab.SelectByTupleValueCmd$Response';
	global.tab.SelectByTupleValueCmd$Response = $tab_SelectByTupleValueCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SelectionClientCommands
	var $tab_SelectionClientCommands = function() {
	};
	$tab_SelectionClientCommands.__typeName = 'tab.SelectionClientCommands';
	$tab_SelectionClientCommands.get_$log = function SelectionClientCommands$get_Log() {
		return tab.Logger.lazyGetLogger($tab_SelectionClientCommands);
	};
	$tab_SelectionClientCommands.setActiveZone = function SelectionClientCommands$SetActiveZone(newActiveZoneID, sheetPath) {
		if (!tsConfig.allow_select) {
			return;
		}
		if ($tab_ModelUtils.isActiveZone(newActiveZoneID)) {
			return;
		}
		$tab_CommandController.SendCommand($tab_SelectionClientCommands.buildActiveZoneClientCommand(newActiveZoneID, sheetPath));
	};
	$tab_SelectionClientCommands.clearActiveZone = function SelectionClientCommands$ClearActiveZone() {
		$tab_SelectionClientCommands.setActiveZone(0, null);
	};
	$tab_SelectionClientCommands.buildActiveZoneClientCommand = function SelectionClientCommands$BuildActiveZoneClientCommand(newActiveZoneID, sheetPath) {
		var c = new $tab_ClientCommand('none', function(t) {
			$tab_SelectionClientCommands.setActiveZoneLocal(newActiveZoneID, t);
		}, $tab_SelectionClientCommands.$buildActiveZoneRemoteCommand(newActiveZoneID, sheetPath));
		return c;
	};
	$tab_SelectionClientCommands.updateShowMeCommandsForSelectedFields = function SelectionClientCommands$UpdateShowMeCommandsForSelectedFields(fieldNames, dataSourceName, callback) {
		var cmdParams = {};
		cmdParams['fieldVector'] = fieldNames;
		cmdParams['worksheet'] = tsConfig.current_sheet_name;
		cmdParams['datasource'] = dataSourceName;
		var c = $tab_CommandUtils.newCommand('get-show-me', cmdParams);
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create(c, 'none', function(pm) {
			callback(pm);
		}, function(x) {
			callback(null);
		}));
	};
	$tab_SelectionClientCommands.toggleLegendHighlight = function SelectionClientCommands$ToggleLegendHighlight(zoneId, visualId, regionPart, fieldNames, successCallback) {
		if (!tsConfig.allow_highlight) {
			return;
		}
		var hilightCmd = $tab_SelectionClientCommands.buildToggleLegendHighlightCommand(visualId, regionPart, fieldNames, successCallback, zoneId);
		$tab_CommandController.SendCommand(hilightCmd);
	};
	$tab_SelectionClientCommands.buildToggleLegendHighlightCommand = function SelectionClientCommands$BuildToggleLegendHighlightCommand(visualId, regionPart, fieldNames, successCallback, newActiveZoneId) {
		var setActiveZone = !$tab_ModelUtils.isActiveZone(newActiveZoneId);
		var cmdParams = {};
		cmdParams['r'] = regionPart;
		cmdParams['legendNames'] = fieldNames;
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		if (setActiveZone) {
			$tab_SelectionClientCommands.$addZoneSelectionParameters(newActiveZoneId, cmdParams);
		}
		var cmd = $tab_CommandUtils.newCommand$1('toggle-legend-server', cmdParams);
		var successWrapper = function(model) {
			if (ss.isValue(successCallback)) {
				successCallback(ss.unbox(ss.cast(model, Boolean)));
			}
		};
		return new $tab_ClientCommand('immediately', function(t) {
			if (setActiveZone) {
				$tab_SelectionClientCommands.setActiveZoneLocal(newActiveZoneId, t);
			}
		}, cmd, successWrapper, null);
	};
	$tab_SelectionClientCommands.$addZoneSelectionParameters = function SelectionClientCommands$AddZoneSelectionParameters(newActiveZoneId, cmdParams) {
		cmdParams['dashboardPm'] = $tab_ModelUtils.findContentDashboard().pm.sheetPath;
		cmdParams['zoneId'] = newActiveZoneId;
	};
	$tab_SelectionClientCommands.selectRegion = function SelectionClientCommands$SelectRegion(region, selRect, action, visualId, fieldNames) {
		if (!tsConfig.allow_select || $tab_ApplicationModel.get_instance().get_isOffline()) {
			return;
		}
		var cmdParams = $tab_SelectionClientCommands.$createSelectRegionParams(selRect, region, action, visualId, fieldNames);
		var cmd = $tab_CommandUtils.newCommand$1('select-region-no-return-server', cmdParams);
		$tab_ServerCommands.executeServerCommand(cmd, 'afterDelay');
	};
	$tab_SelectionClientCommands.selectRectRegionAndDoUbertip = function SelectionClientCommands$SelectRectRegionAndDoUbertip(region, selRect, action, visualId, tooltipCallback, fieldNames) {
		if (!tsConfig.allow_select) {
			return;
		}
		var cmdParams = $tab_SelectionClientCommands.$createSelectRegionParams(selRect, region, action, visualId, fieldNames);
		var cmd = $tab_CommandUtils.newCommand$1('select-region-no-return-server', cmdParams);
		$tab_SelectionClientCommands.$selectRegionAndDoUbertip(tooltipCallback, cmd);
	};
	$tab_SelectionClientCommands.selectCircleRegionAndDoUbertip = function SelectionClientCommands$SelectCircleRegionAndDoUbertip(region, selRect, selCircle, action, visualId, tooltipCallback, radialDistanceHitTest) {
		if (!tsConfig.allow_select) {
			return;
		}
		var cmdParams = $tab_SelectionClientCommands.$createSelectRegionParams(selRect, region, action, visualId);
		var circlePresModel = {};
		circlePresModel.center = {};
		circlePresModel.center.x = Math.round(selCircle.center.x);
		circlePresModel.center.y = Math.round(selCircle.center.y);
		circlePresModel.radius = Math.round(selCircle.radius);
		cmdParams['radialSelection'] = circlePresModel;
		cmdParams['radialDistanceHitTest'] = radialDistanceHitTest;
		var cmd = $tab_CommandUtils.newCommand$1('select-radial-region-no-return-server', cmdParams);
		$tab_SelectionClientCommands.$selectRegionAndDoUbertip(tooltipCallback, cmd);
	};
	$tab_SelectionClientCommands.selectPolyRegionAndDoUbertip = function SelectionClientCommands$SelectPolyRegionAndDoUbertip(region, selRect, selPoints, action, visualId, tooltipCallback) {
		if (!tsConfig.allow_select) {
			return;
		}
		var cmdParams = $tab_SelectionClientCommands.$createSelectRegionParams(selRect, region, action, visualId);
		var numPoints = selPoints.length;
		var pointsPresModel = new Array(numPoints);
		for (var i = 0; i < numPoints; i++) {
			var pointPresModel = {};
			pointPresModel.x = Math.round(selPoints[i].x);
			pointPresModel.y = Math.round(selPoints[i].y);
			pointsPresModel[i] = pointPresModel;
		}
		cmdParams['lassoSelection'] = pointsPresModel;
		var cmd = $tab_CommandUtils.newCommand$1('select-lasso-region-no-return-server', cmdParams);
		$tab_SelectionClientCommands.$selectRegionAndDoUbertip(tooltipCallback, cmd);
	};
	$tab_SelectionClientCommands.$selectRegionAndDoUbertip = function SelectionClientCommands$SelectRegionAndDoUbertip(tooltipCallback, cmd) {
		cmd.commandNamespace = 'tabsrv'.toString();
		var selectCmd = new $tab_ClientCommand('afterDelay', null, cmd, function() {
			tooltipCallback();
		}, null);
		$tab_CommandController.SendCommand(selectCmd);
	};
	$tab_SelectionClientCommands.clearAllSelections = function SelectionClientCommands$ClearAllSelections(visualId) {
		if (!tsConfig.allow_select) {
			return;
		}
		var zoneId = $tab_ModelUtils.getZoneIdForSheetName(visualId.worksheet);
		if (zoneId !== -1 && !$tab_ModelUtils.isActiveZone(zoneId)) {
			$tab_SelectionClientCommands.setActiveZone(zoneId, null);
			return;
		}
		var c = $tab_SelectionClientCommands.buildClearAllSelectionsCommand(visualId);
		$tab_CommandController.SendCommand(c);
	};
	$tab_SelectionClientCommands.buildClearAllSelectionsCommand = function SelectionClientCommands$BuildClearAllSelectionsCommand(visualId) {
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		var cmd = $tab_CommandUtils.newCommand$1('select-none', cmdParams);
		var c = new $tab_ClientCommand(($tab_ApplicationModel.get_instance().get_isLocalRenderMode() ? 'none' : 'afterDelay'), function(t) {
			if ($tab_ApplicationModel.get_instance().get_isLocalRenderMode()) {
				var change = $tab_SelectionClientCommands.$clearAllIncludingMasterSelection(t);
				if (change) {
					$tab_ActionUtils.executeActions(visualId.worksheet, 'on-select', [], t, true);
				}
			}
		}, cmd);
		return c;
	};
	$tab_SelectionClientCommands.clearAllSelectionsIncludingMaster = function SelectionClientCommands$ClearAllSelectionsIncludingMaster() {
		if (!tsConfig.allow_select) {
			return;
		}
		var c = $tab_SelectionClientCommands.buildClearAllSelectionsIncludingMasterCommand();
		$tab_CommandController.SendCommand(c);
	};
	$tab_SelectionClientCommands.buildClearAllSelectionsIncludingMasterCommand = function SelectionClientCommands$BuildClearAllSelectionsIncludingMasterCommand() {
		var cmdParams = {};
		cmdParams['sheet'] = tsConfig.current_sheet_name;
		var cmd = $tab_CommandUtils.newCommand('select-none-including-master', cmdParams);
		var c = new $tab_ClientCommand(($tab_ApplicationModel.get_instance().get_isLocalRenderMode() ? 'none' : 'afterDelay'), function(t) {
			$tab_SelectionClientCommands.$clearAllIncludingMasterSelection(t);
			$tab_SelectionClientCommands.$clearAllBrushing(t);
			var vms = $tab_ModelUtils.getVisualModelsFromDashboard($tab_ModelUtils.findContentDashboard());
			var $t1 = ss.getEnumerator(Object.keys(vms));
			try {
				while ($t1.moveNext()) {
					var sheet = $t1.current();
					var vm = vms[sheet];
					$tab_ActionUtils.executeActions(vm.get_visualId().worksheet, 'on-select', [], t, true);
				}
			}
			finally {
				$t1.dispose();
			}
		}, cmd);
		return c;
	};
	$tab_SelectionClientCommands.selectLegendItemsLocal = function SelectionClientCommands$SelectLegendItemsLocal(zoneId, action, selectedItems, visualId, model, type, legendHasSelection) {
		if (!tsConfig.allow_select) {
			return;
		}
		if (tab.MiscUtil.isNullOrEmpty(selectedItems) && !legendHasSelection) {
			return;
		}
		var cmd = $tab_SelectionClientCommands.buildSelectLegendItemsLocalCommand(zoneId, action, selectedItems, visualId, model, type);
		$tab_CommandController.SendCommand(cmd);
	};
	$tab_SelectionClientCommands.$clearLegendSelectionModels = function SelectionClientCommands$ClearLegendSelectionModels(t, visualId) {
		var vm = $tab_ModelUtils.getVisualModelFromVisualId(visualId);
		var selectionsModel = vm.get_selectionsModel();
		var $t1 = selectionsModel.get_allLegendSelections();
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var legendSelection = $t1[$t2];
			$tab_SelectionClientCommands.$clearSelectionModel(t, legendSelection, false);
		}
	};
	$tab_SelectionClientCommands.clearHighlighting = function SelectionClientCommands$ClearHighlighting(dataHighlighterModel, fieldName, visualId, doFastLocalHighlighting) {
		var remoteCommand = $tab_CommandUtils.newCommand('clear-highlighting', null);
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		cmdParams['fn'] = fieldName;
		remoteCommand.commandParams = cmdParams;
		var clientCommand = new $tab_ClientCommand('none', function(t) {
			if (doFastLocalHighlighting) {
				$tab_SelectionClientCommands.$clearLegendSelectionModels(t, visualId);
				$tab_SelectionClientCommands.$updateBrushingForDataHighlighter([], dataHighlighterModel, $tab_ModelUtils.getVisualModelFromVisualId(visualId), t);
			}
		}, remoteCommand);
		$tab_CommandController.SendCommand(clientCommand);
	};
	$tab_SelectionClientCommands.highlightItems = function SelectionClientCommands$HighlightItems(dataHighlighterModel, fieldName, objectIds, visualId, doFastLocalHighlighting) {
		var remoteCommand = $tab_CommandUtils.newCommand('highlight-items', null);
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		cmdParams['fn'] = fieldName;
		cmdParams['objectIds'] = objectIds;
		remoteCommand.commandParams = cmdParams;
		var clientCommand = new $tab_ClientCommand('none', function(t) {
			if (doFastLocalHighlighting) {
				if (objectIds.length === 0) {
					$tab_SelectionClientCommands.$clearLegendSelectionModels(t, visualId);
				}
				$tab_SelectionClientCommands.$updateBrushingForDataHighlighter(objectIds, dataHighlighterModel, $tab_ModelUtils.getVisualModelFromVisualId(visualId), t);
			}
		}, remoteCommand);
		$tab_CommandController.SendCommand(clientCommand);
	};
	$tab_SelectionClientCommands.buildSelectLegendItemsLocalCommand = function SelectionClientCommands$BuildSelectLegendItemsLocalCommand(zoneId, action, selectedItems, visualId, model, type) {
		var vm = $tab_ModelUtils.getVisualModelFromVisualId(visualId);
		var selectionsModel = vm.get_selectionsModel();
		var legendSelection = selectionsModel.getLegendSelection(type, model.get_legendNames());
		var selectedObjectIds = $tab_SelectionUtils.resolveLegendSelection(action, selectedItems, model, legendSelection);
		var cmd = $tab_CommandUtils.newCommand('select-legend-items', $tab_SelectionClientCommands.$createLegendSelectionParams(selectedObjectIds, visualId, model, type, zoneId));
		var selectCmd = new $tab_ClientCommand('none', function(t) {
			$tab_SelectionClientCommands.setActiveZoneLocal(zoneId, t);
			if (!legendSelection.isAnyLegendItemSelected() && selectedObjectIds.length === 0 && !$tab_ModelUtils.isActiveZone(zoneId)) {
				return;
			}
			var selection = t.makeMutablePresModel(legendSelection, false);
			selection.objectIds = selectedObjectIds;
			selection.legendSelectionInfo = { legendType: model.get_legendTypeEnum(), legendColumns: model.get_legendNames() };
			$tab_SelectionClientCommands.$clearSelectionAndViewModel(t, selectionsModel.tupleSelection, vm);
			$tab_SelectionClientCommands.$clearSelectionAndViewModel(t, selectionsModel.nodeSelection, vm);
			var $t1 = selectionsModel.get_allLegendSelections();
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var legendSelectionModel = $t1[$t2];
				if (!ss.referenceEquals(legendSelectionModel, legendSelection)) {
					$tab_SelectionClientCommands.$clearSelectionAndViewModel(t, legendSelectionModel, vm);
				}
			}
			$tab_SelectionClientCommands.$clearAllButMasterSelection(t, visualId, true);
			$tab_SelectionClientCommands.$updateBrushingForLegendSelection$1(selectedObjectIds, model, vm, t);
		}, cmd);
		return selectCmd;
	};
	$tab_SelectionClientCommands.buildSelectNodeCommand = function SelectionClientCommands$BuildSelectNodeCommand(region, coords, action, visualListModel, selectedNode, visualId, tooltipCallback) {
		var zoneId = $tab_ModelUtils.getZoneIdForSheetName(visualId.worksheet);
		var vm = $tab_ModelUtils.getVisualModelFromVisualId(visualId);
		var selectionsModel = vm.get_selectionsModel();
		var nodeSelection = selectionsModel.nodeSelection;
		var commandBlockingOption = ($tab_ActionUtils.willActionCauseTabChange(visualId.worksheet, 'on-select') ? 'afterDelay' : 'none');
		var NodeMarginSize = 2;
		var extents = null;
		if (ss.isValue(selectedNode.extentsWidth) && ss.isValue(selectedNode.extentsHeight)) {
			var x = selectedNode.extentsX || 0;
			var y = selectedNode.extentsY || 0;
			extents = { x: x, y: y, w: selectedNode.extentsWidth, h: selectedNode.extentsHeight };
		}
		var shiftedCoords = tab.RectXYUtil.shiftCoordsTowardsCenter(coords, extents, NodeMarginSize);
		var selRect = { x: shiftedCoords.x, y: shiftedCoords.y, w: 0, h: 0 };
		var cmd = $tab_CommandUtils.newCommand$1('select-region-no-return-server', null);
		cmd.commandParams = $tab_SelectionClientCommands.$createSelectRegionParams(selRect, region, action, visualId);
		var setActiveZone = zoneId !== -1 && !$tab_ModelUtils.isActiveZone(zoneId);
		if (setActiveZone) {
			$tab_SelectionClientCommands.$addZoneSelectionParameters(zoneId, cmd.commandParams);
		}
		var useLocalCommand = setActiveZone || !$tab_ApplicationModel.get_instance().get_isTableCalcHighlightingMode();
		var localCommand = function(t) {
			if (setActiveZone) {
				$tab_SelectionClientCommands.setActiveZoneLocal(zoneId, t);
			}
			if ($tab_ApplicationModel.get_instance().get_isTableCalcHighlightingMode()) {
				return;
			}
			var newSelection = t.makeMutablePresModel(nodeSelection, false);
			$tab_SelectionUtils.resolveNodeSelection(action, visualListModel.get_groupItemNodes(), selectedNode, nodeSelection, newSelection);
			var discardTupleSelections = action !== 'toggle' && action !== 'range';
			var selectedTuples = selectionsModel.tupleSelection.get_ids();
			if (discardTupleSelections) {
				$tab_SelectionClientCommands.$clearSelectionAndViewModel(t, selectionsModel.tupleSelection, vm);
				selectedTuples = [];
			}
			var $t1 = selectionsModel.get_allLegendSelections();
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var legendSelection = $t1[$t2];
				$tab_SelectionClientCommands.$clearSelectionAndViewModel(t, legendSelection, vm);
			}
			$tab_SelectionClientCommands.$clearAllButMasterSelection(t, visualId, true);
			vm.$handleImpliedSelection(newSelection.selectedNodes, t.modelUpdateContext);
			$tab_ActionUtils.executeActions(visualId.worksheet, 'on-select', vm.getEffectiveSelectedTuples(selectedTuples), t, true);
		};
		var selectCommand = new $tab_ClientCommand(commandBlockingOption, (useLocalCommand ? localCommand : null), cmd, function() {
			if (ss.isValue(tooltipCallback)) {
				tooltipCallback();
			}
		}, null);
		return selectCommand;
	};
	$tab_SelectionClientCommands.selectNode = function SelectionClientCommands$SelectNode(region, coords, action, visualListModel, selectedNode, visualId, tooltipCallback) {
		if (!tsConfig.allow_select) {
			return;
		}
		$tab_SelectionClientCommands.get_$log().debug('SelectNode: %o. %s', [selectedNode, visualId.worksheet]);
		var cmd = $tab_SelectionClientCommands.buildSelectNodeCommand(region, coords, action, visualListModel, selectedNode, visualId, tooltipCallback);
		$tab_CommandController.SendCommand(cmd);
	};
	$tab_SelectionClientCommands.selectMarksLocal = function SelectionClientCommands$SelectMarksLocal(selectedMarkIDs, visualId, action, isAreaSelection, tooltipCallback) {
		if (!tsConfig.allow_select) {
			return;
		}
		if (tab.MiscUtil.isNullOrEmpty(selectedMarkIDs)) {
			$tab_SelectionClientCommands.clearAllSelections(visualId);
			return;
		}
		$tab_SelectionClientCommands.get_$log().debug('SelectMarksLocal: %o. %s', [selectedMarkIDs, visualId.worksheet]);
		if ($tab_ApplicationModel.get_instance().get_isOffline()) {
			var command = $tab_SelectionClientCommands.buildSelectMarksLocalCommand(selectedMarkIDs, visualId, action, isAreaSelection, null);
			$tab_CommandController.SendCommand(command);
			tooltipCallback();
		}
		else {
			var compositeCommand = $tab_SelectionClientCommands.buildSelectMarksLocalCommand(selectedMarkIDs, visualId, action, isAreaSelection, tooltipCallback);
			$tab_CommandController.SendCommand(compositeCommand);
		}
	};
	$tab_SelectionClientCommands.buildSelectMarksLocalCommand = function SelectionClientCommands$BuildSelectMarksLocalCommand(selectedMarkIDs, visualId, action, isAreaSelection, tooltipCallback) {
		var zoneId = $tab_ModelUtils.getZoneIdForSheetName(visualId.worksheet);
		var vm = $tab_ModelUtils.getVisualModelFromVisualId(visualId);
		var selectionsModel = vm.get_selectionsModel();
		var tupleSelection = selectionsModel.tupleSelection;
		var shouldFilterOnSelection = $tab_ActionUtils.shouldFilterOnSelection(vm.get_visualId().worksheet);
		var commandBlockingOption;
		if (shouldFilterOnSelection) {
			commandBlockingOption = 'afterDelay';
		}
		else {
			commandBlockingOption = ($tab_ActionUtils.willActionCauseTabChange(visualId.worksheet, 'on-select') ? 'afterDelay' : 'none');
		}
		var cmd = $tab_CommandUtils.newCommand('select', $tab_SelectionClientCommands.$createSelectionParams(selectedMarkIDs, 'tuples', action, visualId));
		var setActiveZone = zoneId !== -1 && !$tab_ModelUtils.isActiveZone(zoneId);
		var useLocalCommand = setActiveZone || !$tab_ApplicationModel.get_instance().get_isTableCalcHighlightingMode();
		var localCommand = function(t) {
			if (setActiveZone) {
				$tab_SelectionClientCommands.setActiveZoneLocal(zoneId, t);
			}
			if ($tab_ApplicationModel.get_instance().get_isTableCalcHighlightingMode()) {
				return;
			}
			var selectedObjectIds = $tab_SelectionUtils.resolveMarkSelection(action, selectedMarkIDs, tupleSelection, isAreaSelection);
			var newSelection = t.makeMutablePresModel(tupleSelection, false);
			newSelection.objectIds = selectedObjectIds;
			if (action !== 'toggle' && action !== 'range') {
				$tab_SelectionClientCommands.$clearSelectionAndViewModel(t, selectionsModel.nodeSelection, vm);
			}
			var $t1 = selectionsModel.get_allLegendSelections();
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var legendSelection = $t1[$t2];
				$tab_SelectionClientCommands.$clearSelectionAndViewModel(t, legendSelection, vm);
			}
			$tab_SelectionClientCommands.$clearAllButMasterSelection(t, visualId, true);
			$tab_ActionUtils.executeActions(visualId.worksheet, 'on-select', vm.getEffectiveSelectedTuples(selectedObjectIds), t, true);
		};
		var selectCommand = new $tab_ClientCommand(commandBlockingOption, (useLocalCommand ? localCommand : null), cmd, function(pm) {
			if (ss.isValue(tooltipCallback)) {
				tooltipCallback();
			}
		}, null);
		return selectCommand;
	};
	$tab_SelectionClientCommands.$updateBrushingFromComputedResults = function SelectionClientCommands$UpdateBrushingFromComputedResults(brushingComputer, t) {
		if (ss.isNullOrUndefined(brushingComputer) || !brushingComputer.get_isBrushingComputed()) {
			return;
		}
		var visualModels = $tab_ModelUtils.getVisualModels($tab_ApplicationModel.get_instance());
		var $t1 = _.keys(visualModels);
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var worksheet = $t1[$t2];
			if (!brushingComputer.hasBrushingForSheet(worksheet)) {
				continue;
			}
			var targetVm = visualModels[worksheet];
			$tab_SelectionClientCommands.$updateTupleBrushing(brushingComputer, t, targetVm, worksheet);
			$tab_SelectionClientCommands.$updateTrendlineBrushing(brushingComputer, t, targetVm, worksheet);
			$tab_SelectionClientCommands.$updateNodeBrushing(brushingComputer, t, targetVm, worksheet);
			var worksheetLegendBrushing = brushingComputer.getLegendBrushing(worksheet);
			var $t3 = targetVm.get_brushingsModel().get_allLegendSelections();
			for (var $t4 = 0; $t4 < $t3.length; $t4++) {
				var origLegendBrushingModel = $t3[$t4];
				$tab_SelectionClientCommands.$updateBrushingForLegendSelection(t, origLegendBrushingModel, worksheetLegendBrushing);
			}
		}
	};
	$tab_SelectionClientCommands.$updateBrushingForLegendSelection = function SelectionClientCommands$UpdateBrushingForLegendSelection(t, origLegendBrushingModel, worksheetLegendBrushing) {
		var legendSelectInfo = origLegendBrushingModel.get_selectionPresModel().legendSelectionInfo;
		var objectIds = [];
		var legendKey = $tab_BrushingComputer.$calculateLegendKey(legendSelectInfo.legendType, legendSelectInfo.legendColumns);
		if (ss.isValue(worksheetLegendBrushing[legendKey])) {
			objectIds = worksheetLegendBrushing[legendKey];
		}
		if (objectIds.length !== 0 || origLegendBrushingModel.get_selectionPresModel().objectIds.length !== 0) {
			var legendPM = t.makeMutablePresModel(origLegendBrushingModel, false);
			legendPM.objectIds = objectIds;
		}
	};
	$tab_SelectionClientCommands.$updateNodeBrushing = function SelectionClientCommands$UpdateNodeBrushing(brushingComputer, t, targetVm, worksheet) {
		var nodeBrushing = brushingComputer.getNodeBrushing(worksheet);
		if (nodeBrushing.length !== 0 || !targetVm.get_brushingsModel().nodeSelection.isEmpty) {
			var nodePm = t.makeMutablePresModel(targetVm.get_brushingsModel().nodeSelection, false);
			nodePm.selectedNodes = nodeBrushing;
		}
	};
	$tab_SelectionClientCommands.$updateTrendlineBrushing = function SelectionClientCommands$UpdateTrendlineBrushing(brushingComputer, t, targetVm, worksheet) {
		var oldTrendlineBrushing = targetVm.get_brushingsModel().trendLineSelection;
		var newTrendlineBrushingIds = brushingComputer.getTrendlineBrushing(worksheet);
		if (newTrendlineBrushingIds.length !== 0 || oldTrendlineBrushing.get_selectionPresModel().objectIds.length !== 0) {
			var trendlinePm = t.makeMutablePresModel(oldTrendlineBrushing, false);
			trendlinePm.objectIds = newTrendlineBrushingIds;
		}
	};
	$tab_SelectionClientCommands.$updateTupleBrushing = function SelectionClientCommands$UpdateTupleBrushing(brushingComputer, t, targetVm, worksheet) {
		var tupleBrushing = brushingComputer.getTupleBrushing(worksheet);
		if (tupleBrushing.length !== 0 || targetVm.get_brushingsModel().tupleSelection.get_selectionPresModel().objectIds.length !== 0) {
			var tuplePm = t.makeMutablePresModel(targetVm.get_brushingsModel().tupleSelection, false);
			tuplePm.objectIds = tupleBrushing;
		}
	};
	$tab_SelectionClientCommands.$clearAllBrushing = function SelectionClientCommands$ClearAllBrushing(t) {
		var visualModels = $tab_ModelUtils.getVisualModels($tab_ApplicationModel.get_instance());
		var $t1 = ss.getEnumerator(Object.keys(visualModels));
		try {
			while ($t1.moveNext()) {
				var worksheetName = $t1.current();
				var targetVm = visualModels[worksheetName];
				if (targetVm.get_brushingsModel().get_isEmpty()) {
					continue;
				}
				var tuplePm = t.makeMutablePresModel(targetVm.get_brushingsModel().tupleSelection, false);
				tuplePm.objectIds = [];
				var nodePm = t.makeMutablePresModel(targetVm.get_brushingsModel().nodeSelection, false);
				nodePm.selectedNodes = [];
				var $t2 = targetVm.get_brushingsModel().get_allLegendSelections();
				for (var $t3 = 0; $t3 < $t2.length; $t3++) {
					var origLegendBrushingModel = $t2[$t3];
					if (origLegendBrushingModel.isEmpty) {
						continue;
					}
					var legendPM = t.makeMutablePresModel(origLegendBrushingModel, false);
					var objectIds = [];
					legendPM.objectIds = objectIds;
				}
			}
		}
		finally {
			$t1.dispose();
		}
	};
	$tab_SelectionClientCommands.$buildActiveZoneRemoteCommand = function SelectionClientCommands$BuildActiveZoneRemoteCommand(newActiveZoneID, sheetPath) {
		var cmd = $tab_CommandUtils.newCommand('set-active-zone', null);
		var cmdParams = {};
		cmdParams['dashboardPm'] = (ss.isNullOrUndefined(sheetPath) ? $tab_ModelUtils.findContentDashboard().pm.sheetPath : sheetPath);
		cmdParams['zoneId'] = newActiveZoneID;
		cmd.commandParams = cmdParams;
		return cmd;
	};
	$tab_SelectionClientCommands.$updateBrushingForDataHighlighter = function SelectionClientCommands$UpdateBrushingForDataHighlighter(selectedItemsIds, dataHighlighterModel, visualModel, t) {
		var vizDataModel = visualModel.get_vizDataModel();
		if (ss.isNullOrUndefined(vizDataModel)) {
			return;
		}
		var vizDataField = vizDataModel.getVizDataField(dataHighlighterModel.get_fieldName());
		var fieldCaptions = [vizDataField.get_fieldCaption()];
		var brushingComputer = $tab_BrushingComputer.createBrushingComputer(dataHighlighterModel, visualModel, selectedItemsIds, fieldCaptions, true);
		$tab_SelectionClientCommands.$updateBrushingFromComputedResults(brushingComputer, t);
	};
	$tab_SelectionClientCommands.$updateBrushingForLegendSelection$1 = function SelectionClientCommands$UpdateBrushingForLegendSelection(selectedItemsIds, categoricalLegendModel, visualModel, t) {
		var brushingComputer = null;
		if (categoricalLegendModel.get_isHighlightEnabled()) {
			brushingComputer = $tab_BrushingComputer.createBrushingComputer(categoricalLegendModel, visualModel, selectedItemsIds, categoricalLegendModel.get_fieldCaptions(), categoricalLegendModel.get_isOneWay());
		}
		$tab_SelectionClientCommands.$updateBrushingFromComputedResults(brushingComputer, t);
	};
	$tab_SelectionClientCommands.$clearAllButMasterSelection = function SelectionClientCommands$ClearAllButMasterSelection(t, visualIdWhereSelectionHappened, exemptSpecifiedVisual) {
		var change = false;
		var visualModels = $tab_ModelUtils.getVisualModels($tab_ApplicationModel.get_instance());
		var $t1 = ss.getEnumerator(Object.keys(visualModels));
		try {
			while ($t1.moveNext()) {
				var worksheetName = $t1.current();
				var isSpecifiedVisual = !ss.isNullOrUndefined(visualIdWhereSelectionHappened) && ss.referenceEquals(worksheetName, visualIdWhereSelectionHappened.worksheet);
				if (!exemptSpecifiedVisual || !isSpecifiedVisual) {
					var dashboardModel = $tab_ModelUtils.findContentDashboard();
					var clearAllSelections = !exemptSpecifiedVisual && isSpecifiedVisual || !$tab_ActionUtils.isFilterSource(dashboardModel, worksheetName);
					var visualModel = visualModels[worksheetName];
					var $t2 = visualModel.get_selectionsModel().selectionModels;
					for (var $t3 = 0; $t3 < $t2.length; $t3++) {
						var selectionModel = $t2[$t3];
						if (clearAllSelections || selectionModel.get_selectionType() !== 'tuples' && selectionModel.get_selectionType() !== 'nodes') {
							change = $tab_SelectionClientCommands.$clearSelectionModel(t, selectionModel, true) || change;
						}
					}
				}
			}
		}
		finally {
			$t1.dispose();
		}
		return change;
	};
	$tab_SelectionClientCommands.$clearAllIncludingMasterSelection = function SelectionClientCommands$ClearAllIncludingMasterSelection(t) {
		var change = false;
		var visualModels = $tab_ModelUtils.getVisualModels($tab_ApplicationModel.get_instance());
		var $t1 = ss.getEnumerator(Object.keys(visualModels));
		try {
			while ($t1.moveNext()) {
				var worksheetName = $t1.current();
				var visualModel = visualModels[worksheetName];
				var $t2 = visualModel.get_selectionsModel().selectionModels;
				for (var $t3 = 0; $t3 < $t2.length; $t3++) {
					var selectionModel = $t2[$t3];
					change = $tab_SelectionClientCommands.$clearSelectionModel(t, selectionModel, true) || change;
				}
			}
		}
		finally {
			$t1.dispose();
		}
		return change;
	};
	$tab_SelectionClientCommands.$createSelectRegionParams = function SelectionClientCommands$CreateSelectRegionParams(selRect, region, action, visualId, fieldNames) {
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		var vizRegionRect = new Object();
		var regionWrapper = $tab_VizRegionRectWrapper.create(vizRegionRect);
		regionWrapper.set_x(Math.round(selRect.x));
		regionWrapper.set_y(Math.round(selRect.y));
		regionWrapper.set_w(Math.round(selRect.w || 0));
		regionWrapper.set_h(Math.round(selRect.h || 0));
		regionWrapper.set_r(region);
		if (ss.isValue(fieldNames)) {
			regionWrapper.set_fns(fieldNames);
		}
		cmdParams['vizRegionRect'] = vizRegionRect;
		cmdParams['mouseAction'] = action;
		return cmdParams;
	};
	$tab_SelectionClientCommands.$createLegendSelectionParams = function SelectionClientCommands$CreateLegendSelectionParams(markIDs, visualId, legend, legendType, zoneId) {
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		cmdParams['legendNames'] = legend.get_legendNames();
		cmdParams['legendType'] = legendType;
		cmdParams['objectIds'] = markIDs;
		cmdParams['zoneId'] = zoneId;
		return cmdParams;
	};
	$tab_SelectionClientCommands.$clearSelectionAndViewModel = function SelectionClientCommands$ClearSelectionAndViewModel(t, sel, vm) {
		if (ss.isValue(sel)) {
			$tab_SelectionClientCommands.$clearSelectionModel(t, sel, false);
			if (sel.get_selectionType() === 'nodes') {
				vm.$clearImpliedSelection(t.modelUpdateContext);
			}
		}
	};
	$tab_SelectionClientCommands.$createSelectionParams = function SelectionClientCommands$CreateSelectionParams(markIDs, type, action, visualId) {
		var cmdParams = {};
		if (ss.isValue(visualId)) {
			$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		}
		var pm = {};
		pm.objectIds = markIDs;
		pm.selectionType = type;
		cmdParams['selection'] = pm;
		cmdParams['selectOptions'] = $tab_SelectionClientCommands.$selectActionToOptionsMapping[action];
		return cmdParams;
	};
	$tab_SelectionClientCommands.setActiveZoneLocal = function SelectionClientCommands$SetActiveZoneLocal(newActiveZoneID, t) {
		var dashModel = $tab_ModelUtils.findContentDashboard();
		var dashboardPM = t.makeMutablePresModel(dashModel, false);
		dashboardPM.activeZoneId = newActiveZoneID;
	};
	$tab_SelectionClientCommands.$clearSelectionModel = function SelectionClientCommands$ClearSelectionModel(t, selectionModel, clearOriginalModel) {
		if (selectionModel.isEmpty) {
			return false;
		}
		var selection = t.makeMutablePresModel(selectionModel, false);
		selection.objectIds = [];
		selection.selectedNodes = [];
		if (clearOriginalModel) {
			selectionModel.setOverriddenTupleIds([], t.modelUpdateContext);
		}
		return true;
	};
	global.tab.SelectionClientCommands = $tab_SelectionClientCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SelectionModel
	var $tab_SelectionModel = function(parent, index) {
		this.$overriddenTupleIds = null;
		this.$selectedNodesLookup = null;
		this.$selectedLegendItemsLookup = null;
		this.$2$NewSelectionField = null;
		this.isEmpty = false;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem(index.toString()));
		this.isEmpty = true;
	};
	$tab_SelectionModel.__typeName = 'tab.SelectionModel';
	$tab_SelectionModel.$makeSelectionKey = function SelectionModel$MakeSelectionKey(colIndices, valueIndices, orientation, axisName, duplicateIndex, pageIndex) {
		var builder = new ss.StringBuilder();
		if (ss.isValue(colIndices)) {
			builder.append(colIndices.join(';'));
		}
		builder.append('=');
		if (ss.isValue(valueIndices)) {
			builder.append(valueIndices.join(';'));
		}
		builder.append('=');
		if (ss.isValue(orientation)) {
			builder.append(orientation);
		}
		builder.append('=');
		if (ss.isValue(axisName)) {
			builder.append(axisName);
			builder.append('+');
			if (ss.isValue(duplicateIndex)) {
				builder.append(duplicateIndex);
			}
		}
		builder.append('=');
		if (ss.isValue(pageIndex)) {
			builder.append(pageIndex);
		}
		return builder.toString();
	};
	global.tab.SelectionModel = $tab_SelectionModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Utility.SelectionsDifference
	var $tab_SelectionsDifference = function(invalidateViz, reason, objectIds) {
		this.$1$InvalidateVizField = false;
		this.$1$ReasonField = 0;
		this.$1$ObjectIdsField = null;
		this.set_invalidateViz(invalidateViz);
		this.set_reason(reason);
		this.set_objectIds(objectIds || []);
	};
	$tab_SelectionsDifference.__typeName = 'tab.SelectionsDifference';
	$tab_SelectionsDifference.noDifference = function SelectionsDifference$NoDifference() {
		return new $tab_SelectionsDifference(false, 0, null);
	};
	global.tab.SelectionsDifference = $tab_SelectionsDifference;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Utility.SelectionsDiffReason
	var $tab_SelectionsDiffReason = function() {
	};
	$tab_SelectionsDiffReason.__typeName = 'tab.SelectionsDiffReason';
	global.tab.SelectionsDiffReason = $tab_SelectionsDiffReason;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SelectionsModel
	var $tab_SelectionsModel = function(parent, pathName) {
		this.$2$NewSelectionsField = null;
		this.selectionModels = null;
		this.tupleSelection = null;
		this.nodeSelection = null;
		this.refLineSelection = null;
		this.trendLineSelection = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem(pathName, 1));
		this.selectionModels = [];
		var noopContext = $tab_NoopModelEventsHandler.get_noopContext();
		this.tupleSelection = this.$addSelectionModel('tuples', noopContext);
		this.nodeSelection = this.$addSelectionModel('nodes', noopContext);
		this.trendLineSelection = this.$addSelectionModel('trend-lines', noopContext);
		this.refLineSelection = this.$addSelectionModel('ref-lines', noopContext);
	};
	$tab_SelectionsModel.__typeName = 'tab.SelectionsModel';
	$tab_SelectionsModel.$createEmptySelectionPm = function SelectionsModel$CreateEmptySelectionPm(type) {
		var pm = {};
		pm.selectionType = type;
		switch (type) {
			case 'ref-lines':
			case 'trend-lines':
			case 'annotations':
			case 'tuples': {
				pm.objectIds = [];
				break;
			}
			case 'legend-items': {
				pm.legendSelectionInfo = {};
				pm.objectIds = [];
				break;
			}
			case 'nodes': {
				pm.selectedNodes = [];
				break;
			}
			default: {
				ss.Debug.fail('Unknown selection type: ' + type);
				break;
			}
		}
		return pm;
	};
	$tab_SelectionsModel.$computeTupleArrayDifference = function SelectionsModel$ComputeTupleArrayDifference(arr1, arr2) {
		var difference = [];
		var tupleSet = new Set();
		for (var $t1 = 0; $t1 < arr1.length; $t1++) {
			var tuple = arr1[$t1];
			tupleSet.add(tuple);
		}
		for (var $t2 = 0; $t2 < arr2.length; $t2++) {
			var tuple1 = arr2[$t2];
			if (tupleSet.has(tuple1)) {
				tupleSet.delete(tuple1);
			}
			else {
				difference.push(tuple1);
			}
		}
		tupleSet.forEach(function(tuple2) {
			difference.push(tuple2);
		});
		return difference;
	};
	$tab_SelectionsModel.computeTupleDictionaryDifference = function SelectionsModel$ComputeTupleDictionaryDifference(set1, set2) {
		var localSet1 = tab.MapUtility.createCopy(String, ss.Int32).call(null, set1);
		var localSet2 = tab.MapUtility.createCopy(String, ss.Int32).call(null, set2);
		var diffTuples = [];
		localSet1.forEach(function(value, key) {
			if (!localSet2.has(key)) {
				diffTuples.push(localSet1.get(key));
			}
			else {
				localSet2.delete(key);
			}
		});
		localSet2.forEach(function(value1, key1) {
			diffTuples.push(localSet2.get(key1));
		});
		return diffTuples;
	};
	global.tab.SelectionsModel = $tab_SelectionsModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SelectionsPresModel
	var $tab_SelectionsPresModel = function() {
		this.selections = null;
	};
	$tab_SelectionsPresModel.__typeName = 'tab.SelectionsPresModel';
	global.tab.SelectionsPresModel = $tab_SelectionsPresModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Utility.SelectionUtils
	var $tab_SelectionUtils = function() {
	};
	$tab_SelectionUtils.__typeName = 'tab.SelectionUtils';
	$tab_SelectionUtils.isCategoricalAndTupleAssociatedHeader = function SelectionUtils$IsCategoricalAndTupleAssociatedHeader(node) {
		if (tab.MiscUtil.isNullOrEmpty(node)) {
			return false;
		}
		return !$tab_SelectionUtils.isHeaderFullyQuantitativeOrHaveNoAssociatedTuples(node) && tab.MiscUtil.isNullOrEmpty$1(node.fn) && !tab.MiscUtil.isNullOrEmpty(node.columnIndices);
	};
	$tab_SelectionUtils.isHeaderFullyQuantitativeOrHaveNoAssociatedTuples = function SelectionUtils$IsHeaderFullyQuantitativeOrHaveNoAssociatedTuples(node) {
		if (tab.MiscUtil.isNullOrEmpty(node)) {
			return false;
		}
		return tab.MiscUtil.isNullOrEmpty(node.columnIndices) && !tab.MiscUtil.isNullOrEmpty$1(node.fn);
	};
	$tab_SelectionUtils.isQuantitative = function SelectionUtils$IsQuantitative(drawGroup) {
		return ss.isValue(drawGroup) && ss.isValue(drawGroup.node) && ss.isValue(drawGroup.node.fn);
	};
	$tab_SelectionUtils.resolveLegendSelection = function SelectionUtils$ResolveLegendSelection(action, selectedItems, legend, currentSelection) {
		var finalObjectIds = [];
		if (ss.isValue(selectedItems)) {
			var currSelPreModel = currentSelection.get_selectionPresModel() || {};
			switch (action) {
				case 'toggle': {
					if (ss.isValue(currSelPreModel.objectIds)) {
						ss.arrayAddRange(finalObjectIds, currSelPreModel.objectIds);
					}
					for (var $t1 = 0; $t1 < selectedItems.length; $t1++) {
						var item = selectedItems[$t1];
						var indexOfitem = ss.indexOf(finalObjectIds, item.objectId);
						if (indexOfitem >= 0) {
							ss.removeAt(finalObjectIds, indexOfitem);
						}
						else {
							finalObjectIds.push(item.objectId);
						}
					}
					break;
				}
				case 'range': {
					finalObjectIds = $tab_SelectionUtils.$handleLegendRangeSelection(selectedItems, legend, currSelPreModel);
					break;
				}
				case 'simple': {
					var currSelIds = (ss.isValue(currSelPreModel.objectIds) ? currSelPreModel.objectIds : []);
					if (currSelIds.length <= 1) {
						for (var $t2 = 0; $t2 < selectedItems.length; $t2++) {
							var item1 = selectedItems[$t2];
							var indexOfitem1 = ss.indexOf(currSelIds, item1.objectId);
							if (indexOfitem1 >= 0) {
								ss.removeAt(finalObjectIds, indexOfitem1);
							}
							else {
								finalObjectIds.push(item1.objectId);
							}
						}
					}
					else {
						ss.arrayAddRange(finalObjectIds, _.pluck(selectedItems, 'objectId'.toString()));
					}
					break;
				}
			}
		}
		return Array.prototype.slice.call(finalObjectIds);
	};
	$tab_SelectionUtils.resolveMarkSelection = function SelectionUtils$ResolveMarkSelection(action, selectedMarkIDs, currentSelection, isAreaSelection) {
		var resultingMarkIDs = [];
		switch (action) {
			case 'simple': {
				if (!isAreaSelection && selectedMarkIDs.length === 1 && currentSelection.get_ids().length === 1 && selectedMarkIDs[0] === currentSelection.get_ids()[0]) {
					ss.clear(resultingMarkIDs);
				}
				else {
					ss.arrayAddRange(resultingMarkIDs, selectedMarkIDs);
				}
				break;
			}
			case 'range':
			case 'toggle': {
				ss.arrayAddRange(resultingMarkIDs, currentSelection.get_ids());
				for (var $t1 = 0; $t1 < selectedMarkIDs.length; $t1++) {
					var markID = selectedMarkIDs[$t1];
					if (!currentSelection.isObjectSelected(markID)) {
						resultingMarkIDs.push(markID);
					}
					else if (!isAreaSelection) {
						ss.remove(resultingMarkIDs, markID);
					}
				}
				break;
			}
		}
		return Array.prototype.slice.call(resultingMarkIDs);
	};
	$tab_SelectionUtils.resolveNodeSelection = function SelectionUtils$ResolveNodeSelection(action, regionNodes, selectedNode, currentSelection, selectionToUpdate) {
		var updatedSelection = null;
		if (ss.isValue(selectedNode)) {
			switch (action) {
				case 'simple': {
					updatedSelection = $tab_SelectionUtils.$handleNodeSimpleSelection(selectedNode, currentSelection);
					break;
				}
				case 'toggle': {
					updatedSelection = $tab_SelectionUtils.$handleNodeToggleSelection(selectedNode, currentSelection);
					break;
				}
				case 'range': {
					updatedSelection = $tab_SelectionUtils.$handleNodeRangeSelection(regionNodes, selectedNode, currentSelection);
					break;
				}
			}
		}
		selectionToUpdate.selectedNodes = updatedSelection || [];
	};
	$tab_SelectionUtils.$handleLegendRangeSelection = function SelectionUtils$HandleLegendRangeSelection(selectedItems, legend, currSelPreModel) {
		var finalObjectIds = [];
		if (!ss.isValue(currSelPreModel.objectIds)) {
			return finalObjectIds;
		}
		ss.arrayAddRange(finalObjectIds, currSelPreModel.objectIds);
		ss.arrayAddRange(finalObjectIds, _.pluck(selectedItems, 'objectId'.toString()));
		var lastId = currSelPreModel.objectIds[currSelPreModel.objectIds.length - 1];
		var lastIdx = -1;
		for (var i = 0; i < legend.get_items().length; i++) {
			if (legend.get_items()[i].objectId === lastId) {
				lastIdx = i;
			}
		}
		var selIdx = ((selectedItems.length > 0) ? ss.indexOf(legend.get_items(), selectedItems[0]) : -1);
		if (lastIdx < 0 || selIdx < 0) {
			return _.uniq(finalObjectIds);
		}
		var startIdx = Math.min(lastIdx, selIdx);
		var stopIdx = startIdx + Math.abs(lastIdx - selIdx) + 1;
		for (var i1 = startIdx; i1 < stopIdx; i1++) {
			finalObjectIds.push(legend.get_items()[i1].objectId);
		}
		return _.uniq(finalObjectIds);
	};
	$tab_SelectionUtils.$findNodeIndexFromSelections = function SelectionUtils$FindNodeIndexFromSelections(drawGrpNodes, selNodes, fromMostRecent, newSelColumns) {
		var colSet = new Set();
		for (var $t1 = 0; $t1 < drawGrpNodes.length; $t1++) {
			var drawGrpNode = drawGrpNodes[$t1];
			if (ss.isValue(drawGrpNode.node.columnIndices)) {
				tab.SetUtilities.addAll(ss.Int32).call(null, colSet, drawGrpNode.node.columnIndices);
			}
		}
		for (var i = 0; i < selNodes.length; i++) {
			var selNode = (fromMostRecent ? selNodes[selNodes.length - 1 - i] : selNodes[i]);
			if (ss.isValue(selNode.columnIndices) && tab.SetUtilities.interserctWith(ss.Int32).call(null, colSet, selNode.columnIndices).size === 0) {
				continue;
			}
			var nodeIndex = $tab_SelectionUtils.$findNodeIndexOfSelection(drawGrpNodes, selNode, newSelColumns);
			if (nodeIndex !== -1) {
				return nodeIndex;
			}
		}
		return -1;
	};
	$tab_SelectionUtils.$findNodeIndexOfSelection = function SelectionUtils$FindNodeIndexOfSelection(drawGrpNodes, selNode, newSelColumns) {
		if (ss.isValue(newSelColumns) && !_.isEqual(newSelColumns, selNode.columnIndices)) {
			return -1;
		}
		for (var i = 0; i < drawGrpNodes.length; i++) {
			var drawGrpNode = drawGrpNodes[i];
			if (_.isEqual(drawGrpNode.node, selNode)) {
				return i;
			}
		}
		return -1;
	};
	$tab_SelectionUtils.$handleNodeRangeSelection = function SelectionUtils$HandleNodeRangeSelection(regionNodesDrawGrps, selNodeDrawGrp, currSelModel) {
		var newSel = $tab_SelectionUtils.nodeSelectionFromDrawGroup(selNodeDrawGrp);
		var updatedSelection = currSelModel.get_nodes().slice(0);
		if (tab.MiscUtil.isNullOrEmpty(newSel.columnIndices) && tab.MiscUtil.isNullOrEmpty$1(newSel.fn)) {
			return updatedSelection;
		}
		if (updatedSelection.length === 0) {
			updatedSelection.push(newSel);
			return updatedSelection;
		}
		var isCat = $tab_SelectionUtils.isCategoricalAndTupleAssociatedHeader(newSel);
		var isQuant = $tab_SelectionUtils.isHeaderFullyQuantitativeOrHaveNoAssociatedTuples(newSel);
		var isMixed = !isCat && !isQuant;
		var prevSelIndex = $tab_SelectionUtils.$findNodeIndexFromSelections(regionNodesDrawGrps, currSelModel.get_nodes(), true, (isCat ? newSel.columnIndices : null));
		if (prevSelIndex === -1) {
			if (isCat || isMixed && !currSelModel.isNodeAncestorSelected(selNodeDrawGrp)) {
				updatedSelection.push(newSel);
			}
			return updatedSelection;
		}
		if (currSelModel.isNodeSelected(selNodeDrawGrp) || currSelModel.isNodeAncestorSelected(selNodeDrawGrp)) {
			return updatedSelection;
		}
		var firstSelIndex = $tab_SelectionUtils.$findNodeIndexFromSelections(regionNodesDrawGrps, currSelModel.get_nodes(), false, null);
		var firstSel = $tab_SelectionUtils.nodeSelectionFromDrawGroup(regionNodesDrawGrps[firstSelIndex]);
		if (isCat) {
			if (!_.isEqual(firstSel.columnIndices, newSel.columnIndices)) {
				updatedSelection.push(newSel);
				return updatedSelection;
			}
		}
		else {
			var sameRegion = $tab_SelectionUtils.$findNodeIndexOfSelection(regionNodesDrawGrps, firstSel, null) !== -1;
			if (isQuant && !sameRegion) {
				return updatedSelection;
			}
			if (isMixed && !sameRegion) {
				updatedSelection.push(newSel);
				return updatedSelection;
			}
		}
		var selNodeIndex = ss.indexOf(regionNodesDrawGrps, selNodeDrawGrp);
		var start = Math.min(prevSelIndex, selNodeIndex);
		var end = start + Math.abs(prevSelIndex - selNodeIndex) + 1;
		for (var i = start; i < end; i++) {
			var drawGroupInRange = regionNodesDrawGrps[i];
			var columnSetEqualToNewSelection = !isCat || _.isEqual(drawGroupInRange.node.columnIndices, newSel.columnIndices);
			if (columnSetEqualToNewSelection && !currSelModel.isNodeAncestorSelected(drawGroupInRange) && !currSelModel.isNodeSelected(drawGroupInRange)) {
				updatedSelection.push($tab_SelectionUtils.nodeSelectionFromDrawGroup(drawGroupInRange));
			}
		}
		return updatedSelection;
	};
	$tab_SelectionUtils.$handleNodeSimpleSelection = function SelectionUtils$HandleNodeSimpleSelection(selectedNode, currentSelection) {
		if (!currentSelection.isNodeSelected(selectedNode) || currentSelection.get_nodes().length > 1) {
			return [$tab_SelectionUtils.nodeSelectionFromDrawGroup(selectedNode)];
		}
		return null;
	};
	$tab_SelectionUtils.$handleNodeToggleSelection = function SelectionUtils$HandleNodeToggleSelection(selectedNode, currentSelection) {
		var updatedSelection = [];
		ss.arrayAddRange(updatedSelection, currentSelection.get_nodes());
		var existingSelection = currentSelection.findNodeSelection(selectedNode);
		if (ss.isValue(existingSelection)) {
			ss.remove(updatedSelection, existingSelection);
		}
		else if (!currentSelection.isNodeAncestorSelected(selectedNode)) {
			updatedSelection.push($tab_SelectionUtils.nodeSelectionFromDrawGroup(selectedNode));
		}
		return Array.prototype.slice.call(updatedSelection);
	};
	$tab_SelectionUtils.nodeSelectionFromDrawGroup = function SelectionUtils$NodeSelectionFromDrawGroup(drawGroup) {
		var nodeSelection = {};
		if (!ss.isValue(drawGroup.node)) {
			return nodeSelection;
		}
		var node = drawGroup.node;
		if (ss.isValue(node.columnIndices)) {
			nodeSelection.columnIndices = node.columnIndices || [];
		}
		if (ss.isValue(node.aliasIndices)) {
			nodeSelection.aliasIndices = node.aliasIndices || [];
		}
		if (ss.isValue(node.fn)) {
			nodeSelection.fn = node.fn;
		}
		if (ss.isValue(node.axisOrientation)) {
			nodeSelection.axisOrientation = node.axisOrientation;
		}
		if (ss.isValue(node.duplicateIndex)) {
			nodeSelection.duplicateIndex = node.duplicateIndex;
		}
		if (ss.isValue(node.pageIndex)) {
			nodeSelection.pageIndex = node.pageIndex;
		}
		return nodeSelection;
	};
	global.tab.SelectionUtils = $tab_SelectionUtils;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SelfServiceSchedule
	var $tab_SelfServiceSchedule = function(scheduledAction, scheduleType, scheduleDetails) {
		this.scheduledAction = null;
		this.scheduleType = null;
		this.scheduleDetails = null;
		this.scheduledAction = scheduledAction;
		this.scheduleType = scheduleType;
		this.scheduleDetails = scheduleDetails;
	};
	$tab_SelfServiceSchedule.__typeName = 'tab.SelfServiceSchedule';
	global.tab.SelfServiceSchedule = $tab_SelfServiceSchedule;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ServerCommands
	var $tab_ServerCommands = function() {
	};
	$tab_ServerCommands.__typeName = 'tab.ServerCommands';
	$tab_ServerCommands.get_interceptorCount = function ServerCommands$get_InterceptorCount() {
		var count = 0;
		var $t1 = new ss.ObjectEnumerator($tab_ServerCommands.$commandInterceptors);
		try {
			while ($t1.moveNext()) {
				var entry = $t1.current();
				count += entry.value.length;
			}
		}
		finally {
			$t1.dispose();
		}
		return count;
	};
	$tab_ServerCommands.$createInterceptorLookup = function ServerCommands$CreateInterceptorLookup(cmdNamespace, cmdName) {
		return cmdNamespace + ':' + cmdName;
	};
	$tab_ServerCommands.executeServerCommand = function ServerCommands$ExecuteServerCommand(c, uiBlockState, successCallback, errorCallback) {
		var interceptors = $tab_ServerCommands.$commandInterceptors[$tab_ServerCommands.$createInterceptorLookup(c.commandNamespace, c.commandName)];
		if (ss.isValue(interceptors)) {
			for (var $t1 = 0; $t1 < interceptors.length; $t1++) {
				var func = interceptors[$t1];
				if (func(c) === 1) {
					return;
				}
			}
		}
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create(c, uiBlockState, successCallback, errorCallback));
	};
	$tab_ServerCommands.intercept = function ServerCommands$Intercept(commands, c) {
		var ns = 'tabdoc'.toString();
		for (var $t1 = 0; $t1 < commands.length; $t1++) {
			var command = commands[$t1];
			$tab_ServerCommands.addCommandInterceptor(c, ns, command.toString());
		}
		return c;
	};
	$tab_ServerCommands.addCommandInterceptor = function ServerCommands$AddCommandInterceptor(c, commandNamespace, commandName) {
		var key = $tab_ServerCommands.$createInterceptorLookup(commandNamespace, commandName);
		var interceptors = $tab_ServerCommands.$commandInterceptors[key];
		if (ss.isNullOrUndefined(interceptors)) {
			interceptors = [];
			$tab_ServerCommands.$commandInterceptors[key] = interceptors;
		}
		interceptors.push(c);
		return c;
	};
	$tab_ServerCommands.removeIntercept = function ServerCommands$RemoveIntercept(commands, c) {
		var ns = 'tabdoc'.toString();
		for (var $t1 = 0; $t1 < commands.length; $t1++) {
			var command = commands[$t1];
			$tab_ServerCommands.removeCommandInterceptor(c, ns, command.toString());
		}
	};
	$tab_ServerCommands.removeCommandInterceptor = function ServerCommands$RemoveCommandInterceptor(c, commandNamespace, commandName) {
		var key = $tab_ServerCommands.$createInterceptorLookup(commandNamespace, commandName);
		var interceptors = $tab_ServerCommands.$commandInterceptors[key];
		if (!ss.isNullOrUndefined(interceptors)) {
			for (var i = 0; i < interceptors.length; i++) {
				if (ss.staticEquals(interceptors[i], c)) {
					ss.removeAt(interceptors, i);
					if (interceptors.length === 0) {
						delete $tab_ServerCommands.$commandInterceptors[key];
						return;
					}
				}
			}
		}
	};
	$tab_ServerCommands.clearAllCommandInterceptors = function ServerCommands$ClearAllCommandInterceptors() {
		ss.clearKeys($tab_ServerCommands.$commandInterceptors);
	};
	global.tab.ServerCommands = $tab_ServerCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SessionAjaxCallManager
	var $tab_SessionAjaxCallManager = function(session, onComplete, onSuccess, onError, usesWaitHandler, immediateWait) {
		this.$session = null;
		this.$onComplete = null;
		this.$onSuccess = null;
		this.$onError = null;
		this.$didWait = false;
		this.$session = session;
		this.$onComplete = onComplete;
		this.$onSuccess = onSuccess;
		this.$onError = onError;
		if (ss.isNullOrUndefined(usesWaitHandler) || usesWaitHandler) {
			this.$didWait = this.$session.incrementWait(immediateWait);
		}
	};
	$tab_SessionAjaxCallManager.__typeName = 'tab.SessionAjaxCallManager';
	global.tab.SessionAjaxCallManager = $tab_SessionAjaxCallManager;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SessionAjaxHandler
	var $tab_SessionAjaxHandler = function(session, args) {
		this.$ready = false;
		this.$originalArgs = null;
		this.$requests = 0;
		this.$interval = 1000;
		this.$url = '';
		this.$session = null;
		this.$session = session;
		this.$originalArgs = args;
		this.$url = session.$formatSessionMethod('status');
	};
	$tab_SessionAjaxHandler.__typeName = 'tab.SessionAjaxHandler';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SessionCommands
	var $tab_SessionCommands = function() {
	};
	$tab_SessionCommands.__typeName = 'tab.SessionCommands';
	$tab_SessionCommands.ping = function SessionCommands$Ping() {
		(new $tab_PingSessionCmd()).invoke();
	};
	global.tab.SessionCommands = $tab_SessionCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SessionHeartbeat
	var $tab_SessionHeartbeat = function() {
	};
	$tab_SessionHeartbeat.__typeName = 'tab.SessionHeartbeat';
	$tab_SessionHeartbeat.onVizportalPinged = function SessionHeartbeat$OnVizportalPinged() {
		var now = tab.DateUtil.get_nowAsTime();
		$tab_SessionHeartbeat.$lastVizportalPing = now;
		if (now - $tab_SessionHeartbeat.$lastVizqlPing > $tab_SessionHeartbeat.$vizqlPingFrequency) {
			$tab_SessionHeartbeat.$lastVizqlPing = now;
			$tab_SessionCommands.ping();
		}
	};
	$tab_SessionHeartbeat.onVizqlPinged = function SessionHeartbeat$OnVizqlPinged() {
		var now = tab.DateUtil.get_nowAsTime();
		$tab_SessionHeartbeat.$lastVizqlPing = now;
		if (now - $tab_SessionHeartbeat.$lastVizportalPing > $tab_SessionHeartbeat.$vizportalPingFrequency) {
			$tab_SessionHeartbeat.$lastVizportalPing = now;
			$tab_WorkgroupServerCommands.extendWorkgroupSession();
		}
	};
	global.tab.SessionHeartbeat = $tab_SessionHeartbeat;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SessionServerCommands
	var $tab_SessionServerCommands = function() {
	};
	$tab_SessionServerCommands.__typeName = 'tab.SessionServerCommands';
	$tab_SessionServerCommands.cancelLatestSetTimeout = function SessionServerCommands$CancelLatestSetTimeout() {
		window.clearTimeout($tab_SessionServerCommands.$forwardToDestTimeoutId);
	};
	$tab_SessionServerCommands.destroySessionAndForward$1 = function SessionServerCommands$DestroySessionAndForward(window2, forwardUrl) {
		var timeoutMilliseconds = 2000;
		var forwardToDest = function() {
			if (ss.referenceEquals(tab.WindowHelper.getLocation(window2).href, forwardUrl)) {
				tab.WindowHelper.reload(window2, true);
			}
			else {
				tab.WindowHelper.setLocationHref(window2, forwardUrl);
			}
		};
		var incrementTimeoutAndTryForward = null;
		incrementTimeoutAndTryForward = function() {
			forwardToDest();
			$tab_SessionServerCommands.cancelLatestSetTimeout();
			timeoutMilliseconds *= 2;
			$tab_SessionServerCommands.$forwardToDestTimeoutId = window.setTimeout(incrementTimeoutAndTryForward, timeoutMilliseconds);
		};
		var forwardAction = function() {
			forwardToDest();
			if (tab.BrowserSupport.get_isMac() && (tab.BrowserSupport.get_isChrome() || tab.BrowserSupport.get_isFF())) {
				$tab_SessionServerCommands.$forwardToDestTimeoutId = window.setTimeout(incrementTimeoutAndTryForward, timeoutMilliseconds);
			}
		};
		$tab_SessionServerCommands.destroySessionAndForward(forwardAction);
	};
	$tab_SessionServerCommands.destroySessionAndForward = function SessionServerCommands$DestroySessionAndForward(forwardAction) {
		var session = $tab_CommandController.get().get_legacySession();
		session.get_waitHandler().showAndLock(false);
		var handler = session.$createHandler(function() {
			forwardAction();
		}, function() {
		}, function() {
		}, 'immediately');
		var args = {};
		args.type = 'DELETE';
		args.url = session.$formatSessionMethod('destroy');
		args.headers = ss.mkdict(['Accept', 'text/javascript']);
		args.dataType = 'json';
		session.$request(args, handler);
	};
	global.tab.SessionServerCommands = $tab_SessionServerCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SetDashboardCurrentLayoutCmd
	var $tab_SetDashboardCurrentLayoutCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_SetDashboardCurrentLayoutCmd$Response]).call(this);
	};
	$tab_SetDashboardCurrentLayoutCmd.__typeName = 'tab.SetDashboardCurrentLayoutCmd';
	global.tab.SetDashboardCurrentLayoutCmd = $tab_SetDashboardCurrentLayoutCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SetDashboardCurrentLayoutCmd.Response
	var $tab_SetDashboardCurrentLayoutCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_SetDashboardCurrentLayoutCmd$Response.__typeName = 'tab.SetDashboardCurrentLayoutCmd$Response';
	global.tab.SetDashboardCurrentLayoutCmd$Response = $tab_SetDashboardCurrentLayoutCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SetDashboardSizingWithValidationCmd
	var $tab_SetDashboardSizingWithValidationCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_SetDashboardSizingWithValidationCmd$Response]).call(this);
	};
	$tab_SetDashboardSizingWithValidationCmd.__typeName = 'tab.SetDashboardSizingWithValidationCmd';
	global.tab.SetDashboardSizingWithValidationCmd = $tab_SetDashboardSizingWithValidationCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SetDashboardSizingWithValidationCmd.Response
	var $tab_SetDashboardSizingWithValidationCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_SetDashboardSizingWithValidationCmd$Response.__typeName = 'tab.SetDashboardSizingWithValidationCmd$Response';
	global.tab.SetDashboardSizingWithValidationCmd$Response = $tab_SetDashboardSizingWithValidationCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SetDataSourceDataRowCountCmd
	var $tab_SetDataSourceDataRowCountCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_SetDataSourceDataRowCountCmd$Response]).call(this);
	};
	$tab_SetDataSourceDataRowCountCmd.__typeName = 'tab.SetDataSourceDataRowCountCmd';
	global.tab.SetDataSourceDataRowCountCmd = $tab_SetDataSourceDataRowCountCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SetDataSourceDataRowCountCmd.Response
	var $tab_SetDataSourceDataRowCountCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_SetDataSourceDataRowCountCmd$Response.__typeName = 'tab.SetDataSourceDataRowCountCmd$Response';
	global.tab.SetDataSourceDataRowCountCmd$Response = $tab_SetDataSourceDataRowCountCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SetVariablesPromptRespondedCmd
	var $tab_SetVariablesPromptRespondedCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_SetVariablesPromptRespondedCmd$Response]).call(this);
	};
	$tab_SetVariablesPromptRespondedCmd.__typeName = 'tab.SetVariablesPromptRespondedCmd';
	global.tab.SetVariablesPromptRespondedCmd = $tab_SetVariablesPromptRespondedCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SetVariablesPromptRespondedCmd.Response
	var $tab_SetVariablesPromptRespondedCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_SetVariablesPromptRespondedCmd$Response.__typeName = 'tab.SetVariablesPromptRespondedCmd$Response';
	global.tab.SetVariablesPromptRespondedCmd$Response = $tab_SetVariablesPromptRespondedCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ShapeManager
	var $tab_ShapeManager = function() {
		this.$idToImageMap = {};
		this.$idToCanvasCache = {};
		this.$shapeStampCache = {};
		this.$1$ShapeLoadedField = null;
	};
	$tab_ShapeManager.__typeName = 'tab.ShapeManager';
	$tab_ShapeManager.get_canvasCacheCapacity = function ShapeManager$get_CanvasCacheCapacity() {
		return (tab.BrowserSupport.get_isMobile() ? 50 : 200);
	};
	$tab_ShapeManager.getCacheKey$1 = function ShapeManager$GetCacheKey(shapeId, layer, colorOverrideMode, color, width, height) {
		return shapeId + ';' + layer + ';' + colorOverrideMode + ';' + color + ';' + width + ';' + height;
	};
	$tab_ShapeManager.getCacheKey = function ShapeManager$GetCacheKey(shapeId, layer, colorOverrideMode, color, width) {
		return shapeId + ';' + layer + ';' + colorOverrideMode + ';' + color + ';' + width;
	};
	global.tab.ShapeManager = $tab_ShapeManager;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ShapeModel
	var $tab_ShapeModel = function(shapePalette, shapeType) {
		this.$shapePalette = null;
		this.$shapeType = null;
		this.$shapePalette = shapePalette;
		this.$shapeType = shapeType;
	};
	$tab_ShapeModel.__typeName = 'tab.ShapeModel';
	$tab_ShapeModel.fromString = function ShapeModel$FromString(shapeName) {
		var r = new RegExp('^(:([^\\/]+)\\/)?([^\\/]+)$');
		var matches = r.exec(shapeName);
		if (ss.isNullOrUndefined(matches)) {
			return null;
		}
		var paletteName = matches[2];
		var typeName = matches[3];
		if (ss.isNullOrUndefined(typeName)) {
			return null;
		}
		var palette = null;
		if (ss.isValue(paletteName)) {
			if (ss.referenceEquals(paletteName, 'filled'.toString())) {
				palette = 'filled';
			}
			else {
				return null;
			}
		}
		var type = ss.cast(typeName, String);
		return new $tab_ShapeModel(palette, type);
	};
	global.tab.ShapeModel = $tab_ShapeModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SheetClientCommands
	var $tab_SheetClientCommands = function() {
	};
	$tab_SheetClientCommands.__typeName = 'tab.SheetClientCommands';
	$tab_SheetClientCommands.switchSheets = function SheetClientCommands$SwitchSheets(msg) {
		if (ss.isNullOrUndefined(msg.oldSheetName)) {
			msg.oldSheetName = tsConfig.current_sheet_name;
		}
		if (ss.equals(msg.sheetName, msg.oldSheetName) && tab.FeatureFlags.isEnabled('SkipConnectionsDuringLoad')) {
			return;
		}
		$tab_CommandController.get().prepareForSheetChange();
		var c = $tab_SheetClientCommands.createSwitchSheetsCommand(msg.sheetName);
		$tab_ServerCommands.executeServerCommand(c, 'immediately', msg.successCallback, msg.errorCallback);
	};
	$tab_SheetClientCommands.createSwitchSheetsCommand = function SheetClientCommands$CreateSwitchSheetsCommand(sheetName) {
		var cmdParams = {};
		cmdParams['targetSheet'] = sheetName;
		return $tab_CommandUtils.newCommand$1('ensure-layout-for-sheet', cmdParams);
	};
	$tab_SheetClientCommands.goToSheet = function SheetClientCommands$GoToSheet(sheetName) {
		$tab_CommandController.get().prepareForSheetChange();
		var cmdParams = {};
		cmdParams['sheet'] = sheetName;
		var c = $tab_CommandUtils.newCommand('goto-sheet', cmdParams);
		$tab_ServerCommands.executeServerCommand(c, 'immediately');
	};
	$tab_SheetClientCommands.ensureLayoutForSheet = function SheetClientCommands$EnsureLayoutForSheet(sheetName) {
		var c = $tab_SheetClientCommands.createSwitchSheetsCommand(sheetName);
		$tab_ServerCommands.executeServerCommand(c, 'immediately');
	};
	$tab_SheetClientCommands.createSheet = function SheetClientCommands$CreateSheet(sheetName, insertAtEnd) {
		var cmd = $tab_CommandUtils.newCommand('new-worksheet', null);
		$tab_SheetClientCommands.$configureCommandParams(cmd, sheetName, insertAtEnd);
		$tab_ServerCommands.executeServerCommand(cmd, 'immediately', null, null);
	};
	$tab_SheetClientCommands.deleteSheet = function SheetClientCommands$DeleteSheet(sheetName) {
		var cmdParams = {};
		cmdParams['sheet'] = sheetName;
		cmdParams['promptDeleteSheetsWithVizInTooltip'] = false;
		var cmd = $tab_CommandUtils.newCommand('delete-sheet', cmdParams);
		$tab_ServerCommands.executeServerCommand(cmd, 'immediately', null, null);
	};
	$tab_SheetClientCommands.renameSheet = function SheetClientCommands$RenameSheet(sheetName, newName) {
		var cmdParams = {};
		cmdParams['sheet'] = sheetName;
		cmdParams['newSheet'] = newName;
		var cmd = $tab_CommandUtils.newCommand('rename-sheet', cmdParams);
		$tab_ServerCommands.executeServerCommand(cmd, 'immediately', null, null);
	};
	$tab_SheetClientCommands.createDashboardOrStory = function SheetClientCommands$CreateDashboardOrStory(sheetName, insertAtEnd, isStory) {
		var commandName = (isStory ? 'new-storyboard' : 'new-dashboard');
		var cmd = $tab_CommandUtils.newCommand(commandName, null);
		$tab_SheetClientCommands.$configureCommandParams(cmd, sheetName, insertAtEnd);
		$tab_ServerCommands.executeServerCommand(cmd, 'immediately', null, null);
	};
	$tab_SheetClientCommands.$configureCommandParams = function SheetClientCommands$ConfigureCommandParams(cmd, sheetName, insertAtEnd) {
		cmd.commandParams = {};
		if (ss.isValue(sheetName)) {
			cmd.commandParams['newSheet'] = sheetName;
		}
		if (insertAtEnd) {
			cmd.commandParams['insertAtEnd'] = insertAtEnd.toString();
		}
		cmd.commandParams['shouldChangeUiMode'] = true;
	};
	$tab_SheetClientCommands.getSheetTabContextMenu = function SheetClientCommands$GetSheetTabContextMenu(sheetName, callback) {
		var cmd = $tab_CommandUtils.newCommand('build-sheet-tab-context-menu', null);
		cmd.commandParams = {};
		if (ss.isValue(sheetName)) {
			cmd.commandParams['sheetName'] = sheetName;
		}
		$tab_ServerCommands.executeServerCommand(cmd, 'none', function(pm) {
			callback(pm);
		}, null);
	};
	$tab_SheetClientCommands.getSheetListContextMenu = function SheetClientCommands$GetSheetListContextMenu(sheetName, addAsFloating, callback) {
		var $t1 = new $tab_BuildSheetListContextMenuCmd();
		$t1.cmdParams['sheetName'] = sheetName;
		$t1.cmdParams['addAsFloating'] = addAsFloating;
		var cmd = $t1;
		cmd.invoke().then(callback);
	};
	$tab_SheetClientCommands.getLayoutTreeContextMenu = function SheetClientCommands$GetLayoutTreeContextMenu(dashboard, zoneID, callback) {
		var $t1 = new $tab_BuildLayoutTreeContextMenuCmd();
		$t1.cmdParams['dashboard'] = dashboard;
		$t1.cmdParams['zoneId'] = zoneID | 0;
		var cmd = $t1;
		cmd.invoke().then(callback);
	};
	$tab_SheetClientCommands.getCaptionContextMenu = function SheetClientCommands$GetCaptionContextMenu(sheetName, callback) {
		var $t1 = new $tab_BuildCaptionContextMenuCmd();
		$t1.cmdParams['sheetName'] = sheetName;
		var cmd = $t1;
		cmd.invoke().then(callback);
	};
	$tab_SheetClientCommands.getTitleContextMenu = function SheetClientCommands$GetTitleContextMenu(sheetName, callback) {
		var $t1 = new $tab_BuildTitleContextMenuCmd();
		$t1.cmdParams['sheetName'] = sheetName;
		var cmd = $t1;
		cmd.invoke().then(callback);
	};
	$tab_SheetClientCommands.$sanitizeSizePresModel = function SheetClientCommands$SanitizeSizePresModel(pm) {
		return { h: Math.floor(pm.h), w: Math.floor(pm.w) };
	};
	$tab_SheetClientCommands.setPortSize = function SheetClientCommands$SetPortSize(portSize) {
		var cmd = $tab_CommandUtils.newCommand$1('set-port-size', null);
		cmd.commandParams = {};
		cmd.commandParams['sheet'] = tsConfig.current_sheet_name;
		var dashSize = tabBootstrap.ViewerBootstrap.get_instance().getWebClientPortSize('dashboard');
		var worksheetSize = tabBootstrap.ViewerBootstrap.get_instance().getWebClientPortSize('worksheet');
		cmd.commandParams['worksheetPort'] = $tab_SheetClientCommands.$sanitizeSizePresModel({ h: worksheetSize.h, w: worksheetSize.w });
		cmd.commandParams['dashboardPort'] = $tab_SheetClientCommands.$sanitizeSizePresModel({ h: dashSize.h, w: dashSize.w });
		cmd.commandParams['storyPort'] = $tab_SheetClientCommands.$sanitizeSizePresModel({ h: dashSize.h, w: dashSize.w });
		$tab_ServerCommands.executeServerCommand(cmd, 'immediately');
		$tab_ApplicationModel.get_instance().get_workbook().withOuterDashboard(function(d) {
			d.set_portSize(portSize);
		});
	};
	global.tab.SheetClientCommands = $tab_SheetClientCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SheetListItemModel
	var $tab_SheetListItemModel = function(parent, index) {
		$tab_Model.call(this, parent, new $tab_PresModelPathItem(index.toString()));
	};
	$tab_SheetListItemModel.__typeName = 'tab.SheetListItemModel';
	global.tab.SheetListItemModel = $tab_SheetListItemModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SheetListModel
	var $tab_SheetListModel = function(parent) {
		this.$sheetModels = null;
		this.$sheetListItemArrayModel = null;
		this.$2$SheetListUpdatedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('sheetList'.toString()));
		this.$sheetListItemArrayModel = new $tab_$SheetListItemArrayModel(this);
	};
	$tab_SheetListModel.__typeName = 'tab.SheetListModel';
	global.tab.SheetListModel = $tab_SheetListModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SheetSession
	var $tab_SheetSession = function(urlRoot, sheetid, commonDialogProvider) {
		this.sheetId = null;
		$tab_BaseSession.call(this, urlRoot, commonDialogProvider);
		this.sheetId = sheetid;
	};
	$tab_SheetSession.__typeName = 'tab.SheetSession';
	$tab_SheetSession.add_sheetDataChanged = function SheetSession$add_SheetDataChanged(value) {
		$tab_SheetSession.$2$SheetDataChangedField = ss.delegateCombine($tab_SheetSession.$2$SheetDataChangedField, value);
	};
	$tab_SheetSession.remove_sheetDataChanged = function SheetSession$remove_SheetDataChanged(value) {
		$tab_SheetSession.$2$SheetDataChangedField = ss.delegateRemove($tab_SheetSession.$2$SheetDataChangedField, value);
	};
	$tab_SheetSession.fireSheetDataChanged = function SheetSession$FireSheetDataChanged() {
		if (ss.isValue($tab_SheetSession.$2$SheetDataChangedField)) {
			$tab_SheetSession.$2$SheetDataChangedField();
		}
	};
	global.tab.SheetSession = $tab_SheetSession;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ShelfItemsArrayModel
	var $tab_ShelfItemsArrayModel = function(parent) {
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('shelfItems'.toString(), 1));
	};
	$tab_ShelfItemsArrayModel.__typeName = 'tab.ShelfItemsArrayModel';
	global.tab.ShelfItemsArrayModel = $tab_ShelfItemsArrayModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ShelfListArrayModel
	var $tab_ShelfListArrayModel = function(parent) {
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('shelfList'.toString(), 1));
	};
	$tab_ShelfListArrayModel.__typeName = 'tab.ShelfListArrayModel';
	global.tab.ShelfListArrayModel = $tab_ShelfListArrayModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ShelfModel
	var $tab_ShelfModel = function(parent, index) {
		this.$pills = null;
		this.$2$ShelfChangedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem(index.toString()));
	};
	$tab_ShelfModel.__typeName = 'tab.ShelfModel';
	global.tab.ShelfModel = $tab_ShelfModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ShelvesModel
	var $tab_ShelvesModel = function(parent) {
		this.$shelfModels = [];
		this.$2$NewShelvesField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('shelves'.toString()));
	};
	$tab_ShelvesModel.__typeName = 'tab.ShelvesModel';
	$tab_ShelvesModel.createShelfModel = function ShelvesModel$CreateShelfModel(parent, shelf, schema, index, context) {
		var m = new $tab_ShelfModel(new $tab_ShelfListArrayModel(parent), index);
		m.update(shelf, schema, context);
		return m;
	};
	global.tab.ShelvesModel = $tab_ShelvesModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ShowDashboardTitleCmd
	var $tab_ShowDashboardTitleCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ShowDashboardTitleCmd$Response]).call(this);
	};
	$tab_ShowDashboardTitleCmd.__typeName = 'tab.ShowDashboardTitleCmd';
	global.tab.ShowDashboardTitleCmd = $tab_ShowDashboardTitleCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ShowDashboardTitleCmd.Response
	var $tab_ShowDashboardTitleCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_ShowDashboardTitleCmd$Response.__typeName = 'tab.ShowDashboardTitleCmd$Response';
	global.tab.ShowDashboardTitleCmd$Response = $tab_ShowDashboardTitleCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ShowEditAxisDialogCmd
	var $tab_ShowEditAxisDialogCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ShowEditAxisDialogCmd$Response]).call(this);
	};
	$tab_ShowEditAxisDialogCmd.__typeName = 'tab.ShowEditAxisDialogCmd';
	global.tab.ShowEditAxisDialogCmd = $tab_ShowEditAxisDialogCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ShowEditAxisDialogCmd.Response
	var $tab_ShowEditAxisDialogCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_ShowEditAxisDialogCmd$Response.__typeName = 'tab.ShowEditAxisDialogCmd$Response';
	global.tab.ShowEditAxisDialogCmd$Response = $tab_ShowEditAxisDialogCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SimpleCommandsPresModelWrapper
	var $tab_SimpleCommandsPresModelWrapper = function(commandsPM) {
		this.$model = null;
		this.$model = commandsPM;
	};
	$tab_SimpleCommandsPresModelWrapper.__typeName = 'tab.SimpleCommandsPresModelWrapper';
	$tab_SimpleCommandsPresModelWrapper.create = function SimpleCommandsPresModelWrapper$Create(pm) {
		if (ss.isNullOrUndefined(pm)) {
			return null;
		}
		return new $tab_SimpleCommandsPresModelWrapper(pm);
	};
	global.tab.SimpleCommandsPresModelWrapper = $tab_SimpleCommandsPresModelWrapper;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SizeItemModel
	var $tab_SizeItemModel = function(parent, index) {
		this.$2$SizeInfoUpdatedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem(index.toString()));
	};
	$tab_SizeItemModel.__typeName = 'tab.SizeItemModel';
	global.tab.SizeItemModel = $tab_SizeItemModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SortIndicatorsModel
	var $tab_SortIndicatorsModel = function(parent) {
		this.$2$NewSortIndicatorsField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('sortIndicators'.toString()));
	};
	$tab_SortIndicatorsModel.__typeName = 'tab.SortIndicatorsModel';
	global.tab.SortIndicatorsModel = $tab_SortIndicatorsModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SortServerCommands
	var $tab_SortServerCommands = function() {
	};
	$tab_SortServerCommands.__typeName = 'tab.SortServerCommands';
	$tab_SortServerCommands.sortFromIndicator = function SortServerCommands$SortFromIndicator(mouse, scrollAmount, visualId) {
		var zoneId = $tab_ModelUtils.getZoneIdForSheetName(visualId.worksheet);
		var cmdParams = $tab_SortServerCommands.$createSortFromIndicatorParams(mouse, scrollAmount, visualId, zoneId);
		var cmd = $tab_CommandUtils.newCommand('sort-from-indicator', cmdParams);
		var sortCommand = new $tab_ClientCommand('afterDelay', function(t) {
			if ($tab_SortServerCommands.$canSetActiveZone(zoneId)) {
				$tab_SelectionClientCommands.setActiveZoneLocal(zoneId, t);
			}
		}, cmd);
		$tab_CommandController.SendCommand(sortCommand);
	};
	$tab_SortServerCommands.quickSort = function SortServerCommands$QuickSort(visualId, sortDirection) {
		var cmdParams = $tab_SortServerCommands.$createQuickSortParams(visualId, sortDirection);
		var cmd = $tab_CommandUtils.newCommand('quick-sort', cmdParams);
		var sortCommand = new $tab_ClientCommand('afterDelay', null, cmd);
		$tab_CommandController.SendCommand(sortCommand);
	};
	$tab_SortServerCommands.$createSortFromIndicatorParams = function SortServerCommands$CreateSortFromIndicatorParams(mouse, scrollAmount, visualId, newActiveZoneId) {
		var cmdParams = {};
		var mouseFloored = { x: Math.floor(mouse.x), y: Math.floor(mouse.y) };
		var scrollAmountToInt = { x: Math.floor(scrollAmount.x), y: Math.floor(scrollAmount.y) };
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		cmdParams['vizLocation'] = JSON.stringify(tab.PointUtil.toPresModel(mouseFloored));
		cmdParams['scrollOffset'] = JSON.stringify(tab.PointUtil.toPresModel(scrollAmountToInt));
		if ($tab_SortServerCommands.$canSetActiveZone(newActiveZoneId)) {
			cmdParams['dashboardPm'] = $tab_ModelUtils.findContentDashboard().pm.sheetPath;
			cmdParams['zoneId'] = newActiveZoneId;
		}
		return cmdParams;
	};
	$tab_SortServerCommands.$canSetActiveZone = function SortServerCommands$CanSetActiveZone(newActiveZoneId) {
		return tsConfig.allow_select && newActiveZoneId !== -1 && !$tab_ModelUtils.isActiveZone(newActiveZoneId);
	};
	$tab_SortServerCommands.$createQuickSortParams = function SortServerCommands$CreateQuickSortParams(visualId, sortDirection) {
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		cmdParams['sortOrder'] = sortDirection;
		return cmdParams;
	};
	global.tab.SortServerCommands = $tab_SortServerCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SpacingDefinition
	var $tab_SpacingDefinition = function(defaultSpace, left, right, top, bottom) {
		this.defaultSpace = null;
		this.left = null;
		this.right = null;
		this.bottom = null;
		this.top = null;
		this.$allSidesTheSameLocal = null;
		this.defaultSpace = defaultSpace;
		this.left = left;
		this.right = right;
		this.top = top;
		this.bottom = bottom;
	};
	$tab_SpacingDefinition.__typeName = 'tab.SpacingDefinition';
	global.tab.SpacingDefinition = $tab_SpacingDefinition;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.StartNewDataAlertCmd
	var $tab_StartNewDataAlertCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_StartNewDataAlertCmd$Response]).call(this);
		this.set_uiBlocking('immediately');
	};
	$tab_StartNewDataAlertCmd.__typeName = 'tab.StartNewDataAlertCmd';
	global.tab.StartNewDataAlertCmd = $tab_StartNewDataAlertCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.StartNewDataAlertCmd.Response
	var $tab_StartNewDataAlertCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_StartNewDataAlertCmd$Response.__typeName = 'tab.StartNewDataAlertCmd$Response';
	global.tab.StartNewDataAlertCmd$Response = $tab_StartNewDataAlertCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Utility.StartupUtils
	var $tab_StartupUtils = function() {
	};
	$tab_StartupUtils.__typeName = 'tab.StartupUtils';
	$tab_StartupUtils.add_modelsInitialized = function StartupUtils$add_ModelsInitialized(value) {
		$tab_StartupUtils.$1$ModelsInitializedField = ss.delegateCombine($tab_StartupUtils.$1$ModelsInitializedField, value);
	};
	$tab_StartupUtils.remove_modelsInitialized = function StartupUtils$remove_ModelsInitialized(value) {
		$tab_StartupUtils.$1$ModelsInitializedField = ss.delegateRemove($tab_StartupUtils.$1$ModelsInitializedField, value);
	};
	$tab_StartupUtils.add_clientFullyLoaded = function StartupUtils$add_ClientFullyLoaded(value) {
		$tab_StartupUtils.$1$ClientFullyLoadedField = ss.delegateCombine($tab_StartupUtils.$1$ClientFullyLoadedField, value);
	};
	$tab_StartupUtils.remove_clientFullyLoaded = function StartupUtils$remove_ClientFullyLoaded(value) {
		$tab_StartupUtils.$1$ClientFullyLoadedField = ss.delegateRemove($tab_StartupUtils.$1$ClientFullyLoadedField, value);
	};
	$tab_StartupUtils.callAfterBootstrap = function StartupUtils$CallAfterBootstrap(action) {
		if ($tab_StartupUtils.$isClientFullyLoaded) {
			action();
		}
		else {
			var callback = null;
			callback = function() {
				action();
				$tab_StartupUtils.remove_clientFullyLoaded(callback);
			};
			$tab_StartupUtils.add_clientFullyLoaded(callback);
		}
	};
	$tab_StartupUtils.callAfterModelsInitialized = function StartupUtils$CallAfterModelsInitialized(action) {
		if ($tab_StartupUtils.$modelsInitialized) {
			action();
		}
		else {
			var callback = null;
			callback = function() {
				action();
				$tab_StartupUtils.remove_modelsInitialized(callback);
			};
			$tab_StartupUtils.add_modelsInitialized(callback);
		}
	};
	$tab_StartupUtils.notifyModelsInitialized = function StartupUtils$NotifyModelsInitialized() {
		if ($tab_StartupUtils.$modelsInitialized) {
			return;
		}
		$tab_StartupUtils.$modelsInitialized = true;
		if (!ss.staticEquals($tab_StartupUtils.$1$ModelsInitializedField, null)) {
			$tab_StartupUtils.$1$ModelsInitializedField();
		}
	};
	$tab_StartupUtils.$notifyClientFullyLoaded = function StartupUtils$NotifyClientFullyLoaded() {
		if ($tab_StartupUtils.$isClientFullyLoaded) {
			return;
		}
		$tab_StartupUtils.$isClientFullyLoaded = true;
		if (!ss.staticEquals($tab_StartupUtils.$1$ClientFullyLoadedField, null)) {
			$tab_StartupUtils.$1$ClientFullyLoadedField();
		}
	};
	global.tab.StartupUtils = $tab_StartupUtils;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.StoryPointModel
	var $tab_StoryPointModel = function(parent, storyPointId) {
		this.$dashboardModel = null;
		this.$2$DashboardDisposalField = null;
		this.$2$NewStoryPointField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem(storyPointId.toString(), 0));
		this.$dashboardModel = new $tab_DashboardModel(this);
	};
	$tab_StoryPointModel.__typeName = 'tab.StoryPointModel';
	global.tab.StoryPointModel = $tab_StoryPointModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.StoryPointsModel
	var $tab_StoryPointsModel = function(parent) {
		this.$pointModel = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('storyPoints'.toString()));
	};
	$tab_StoryPointsModel.__typeName = 'tab.StoryPointsModel';
	global.tab.StoryPointsModel = $tab_StoryPointsModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.StoryPointsPresModelCache
	var $tab_StoryPointsPresModelCache = function() {
		this.$storyPointCache = null;
		this.$storyPointCache = new (ss.makeGenericType($tab_LruCache$2, [String, $tab_$StoryCacheRecord]))($tab_StoryPointsPresModelCache.$maxCacheEntries);
		$tab_WorldUpdateInterceptor.get().add_onCommandResponse(ss.mkdel(this, this.$cacheStoryPointPresModelIfApplicable));
		$tab_StoryPointsPresModelCache.$commandsToCache = new ss.Lazy(function() {
			return ['capture-story-point'.toString(), 'delete-story-point'.toString(), 'duplicate-active-story-point'.toString(), 'edit-story-point-caption'.toString(), 'ensure-layout-for-sheet'.toString(), 'get-storyboard'.toString(), 'insert-story-point'.toString(), 'next-story-point'.toString(), 'new-blank-story-point'.toString(), 'previous-story-point'.toString(), 'replace-story-point'.toString(), 'revert'.toString(), 'revert-story-point'.toString(), 'revert-workbook'.toString(), 'save-active-story-point-as-new'.toString(), 'set-active-story-point'.toString(), 'toggle-storypoints-nav-arrows'.toString()];
		});
		if (ss.isValue($tab_StoryPointsPresModelCache.$bootstrapRecord)) {
			this.$storyPointCache.add($tab_StoryPointsPresModelCache.$bootstrapRecord.item1.toString(), $tab_StoryPointsPresModelCache.$bootstrapRecord.item2);
			$tab_StoryPointsPresModelCache.$bootstrapRecord = null;
		}
	};
	$tab_StoryPointsPresModelCache.__typeName = 'tab.StoryPointsPresModelCache';
	$tab_StoryPointsPresModelCache.$cacheBootstrapResponseIfApplicable = function StoryPointsPresModelCache$CacheBootstrapResponseIfApplicable(appModel) {
		ss.Debug.assert(ss.isValue(appModel), "Can't process, app pres model is null");
		if (!$tab_StoryPointsPresModelCache.$shouldCachePresModel(appModel)) {
			return;
		}
		var storyPoint = $tab_StoryPointsPresModelCache.$extractStoryPoint(appModel);
		if (ss.isValue(storyPoint)) {
			var record = new $tab_$StoryCacheRecord(storyPoint);
			$tab_StoryPointsPresModelCache.$bootstrapRecord = { item1: storyPoint.storyPointId, item2: record };
		}
		$tab_WorldUpdateInterceptor.get().remove_onBootstrapResponse($tab_StoryPointsPresModelCache.$cacheBootstrapResponseIfApplicable);
	};
	$tab_StoryPointsPresModelCache.$shouldCachePresModel = function StoryPointsPresModelCache$ShouldCachePresModel(appModel) {
		if ($tab_StoryPointsPresModelCache.$isEmptyModel(appModel) || !appModel.workbookPresModel.dashboardPresModel.isStory || appModel.renderMode !== 'render-mode-client') {
			return false;
		}
		return true;
	};
	$tab_StoryPointsPresModelCache.$isEmptyModel = function StoryPointsPresModelCache$IsEmptyModel(appModel) {
		if (ss.isNullOrUndefined(appModel.workbookPresModel) || ss.isNullOrUndefined(appModel.workbookPresModel.dashboardPresModel) || ss.isNullOrUndefined(appModel.workbookPresModel.dashboardPresModel.zones)) {
			return true;
		}
		return false;
	};
	$tab_StoryPointsPresModelCache.$extractStoryPoint = function StoryPointsPresModelCache$ExtractStoryPoint(appModel) {
		if (appModel.renderMode !== 'render-mode-client') {
			return null;
		}
		if ($tab_StoryPointsPresModelCache.$isEmptyModel(appModel)) {
			return null;
		}
		var flipboardPM = null;
		var zones = appModel.workbookPresModel.dashboardPresModel.zones;
		var $t1 = _.keys(zones);
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var key = $t1[$t2];
			var zonePM = zones[key];
			if (ss.isNullOrUndefined(zonePM)) {
				continue;
			}
			flipboardPM = $tab_ZoneModel.getContent(zonePM, 'flipboard');
			if (ss.isValue(flipboardPM)) {
				break;
			}
		}
		if (ss.isNullOrUndefined(flipboardPM)) {
			return null;
		}
		var currentStoryPointId = flipboardPM.activeStoryPointId.toString();
		var storyPoint = flipboardPM.storyPoints[currentStoryPointId];
		return storyPoint;
	};
	global.tab.StoryPointsPresModelCache = $tab_StoryPointsPresModelCache;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.StyledBoxModel
	var $tab_StyledBoxModel = function(parent) {
		this.$margins = null;
		this.$padding = null;
		this.$2$StyleUpdatedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('styledBox'.toString(), 0));
		this.$margins = new $tab_MarginDefinition();
		this.$padding = new $tab_PaddingDefinition();
	};
	$tab_StyledBoxModel.__typeName = 'tab.StyledBoxModel';
	global.tab.StyledBoxModel = $tab_StyledBoxModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.TableCalcIdentifierModel
	var $tab_TableCalcIdentifierModel = function(presModel) {
		this.$nestingLevel = null;
		this.$fieldName = null;
		this.update(presModel);
	};
	$tab_TableCalcIdentifierModel.__typeName = 'tab.TableCalcIdentifierModel';
	global.tab.TableCalcIdentifierModel = $tab_TableCalcIdentifierModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.TableCalcModel
	var $tab_TableCalcModel = function(parent) {
		this.$typeSpecificTableCalcModel = null;
		this.$tableCalcOrderingModel = null;
		this.$2$ModelUpdatedField = null;
		this.$2$TableCalcIdentifierField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('tableCalculationPresModel'.toString()));
		this.set_tableCalcIdentifier(new $tab_TableCalcIdentifierModel(null));
		this.$tableCalcOrderingModel = new $tab_TableCalcOrderingModel(this);
	};
	$tab_TableCalcModel.__typeName = 'tab.TableCalcModel';
	$tab_TableCalcModel.$getTypeSpecificTableCalcPresModel = function TableCalcModel$GetTypeSpecificTableCalcPresModel(tableCalcPresModel, holderFieldName) {
		if (!(holderFieldName in tableCalcPresModel.presModelHolder)) {
			tab.Logger.lazyGetLogger($tab_TableCalcModel).warn('Holder field name %s not found in tableCalcPresModel: %o', [holderFieldName, tableCalcPresModel]);
			return null;
		}
		return tableCalcPresModel.presModelHolder[holderFieldName];
	};
	global.tab.TableCalcModel = $tab_TableCalcModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.TableCalcOrderingModel
	var $tab_TableCalcOrderingModel = function(parent) {
		this.$2$ModelUpdatedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('tableCalcOrderingPresModel'.toString()));
	};
	$tab_TableCalcOrderingModel.__typeName = 'tab.TableCalcOrderingModel';
	global.tab.TableCalcOrderingModel = $tab_TableCalcOrderingModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.TableCalcReferenceModel
	var $tab_TableCalcReferenceModel = function(parent) {
		this.$2$ModelUpdatedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('tableCalcReferenceOptionsPresModel'.toString()));
	};
	$tab_TableCalcReferenceModel.__typeName = 'tab.TableCalcReferenceModel';
	global.tab.TableCalcReferenceModel = $tab_TableCalcReferenceModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.TypeDefs.TabResources
	var $tab_TabResources = function() {
	};
	$tab_TabResources.__typeName = 'tab.TabResources';
	$tab_TabResources.getResourceName = function TabResources$GetResourceName(filePath) {
		return filePath.substring(filePath.lastIndexOf('/') + 1, filePath.lastIndexOf('.'));
	};
	$tab_TabResources.lookupResourceAlias = function TabResources$LookupResourceAlias(id) {
		return (ss.keyExists($tab_TabResources.$resourceMap, id) ? $tab_TabResources.$resourceMap[id] : '');
	};
	$tab_TabResources.lookupFullResourceAlias = function TabResources$LookupFullResourceAlias(id) {
		var parts = id.split('/');
		var key = ((parts.length > 0) ? parts[parts.length - 1] : id);
		return $tab_TabResources.lookupResourceAlias(key);
	};
	$tab_TabResources.lookupTabRes = function TabResources$LookupTabRes(id) {
		return $tab_TabResources.lookupResourceAlias(id);
	};
	$tab_TabResources.lookupDefaultTabRes = function TabResources$LookupDefaultTabRes(id) {
		return ':/' + tsConfig.locale + '/' + $tab_TabResources.lookupResourceAlias(id);
	};
	global.tab.TabResources = $tab_TabResources;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.TextRegionModel
	var $tab_TextRegionModel = function(parent, presModelKey) {
		this.$2$NewTextField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem(presModelKey));
	};
	$tab_TextRegionModel.__typeName = 'tab.TextRegionModel';
	global.tab.TextRegionModel = $tab_TextRegionModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ToggleINDJoinSemanticsCmd
	var $tab_ToggleINDJoinSemanticsCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ToggleINDJoinSemanticsCmd$Response]).call(this);
	};
	$tab_ToggleINDJoinSemanticsCmd.__typeName = 'tab.ToggleINDJoinSemanticsCmd';
	global.tab.ToggleINDJoinSemanticsCmd = $tab_ToggleINDJoinSemanticsCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ToggleINDJoinSemanticsCmd.Response
	var $tab_ToggleINDJoinSemanticsCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_ToggleINDJoinSemanticsCmd$Response.__typeName = 'tab.ToggleINDJoinSemanticsCmd$Response';
	global.tab.ToggleINDJoinSemanticsCmd$Response = $tab_ToggleINDJoinSemanticsCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ToggleINDJoinSemanticsWrapperCmd
	var $tab_ToggleINDJoinSemanticsWrapperCmd = function() {
		ss.makeGenericType($tab_WebBaseCmd$2, [Object, $tab_ToggleINDJoinSemanticsWrapperCmd$Response]).call(this);
	};
	$tab_ToggleINDJoinSemanticsWrapperCmd.__typeName = 'tab.ToggleINDJoinSemanticsWrapperCmd';
	$tab_ToggleINDJoinSemanticsWrapperCmd.get_commandName = function ToggleINDJoinSemanticsWrapperCmd$get_CommandName() {
		return 'toggle-indjoin-semantics-wrapper';
	};
	global.tab.ToggleINDJoinSemanticsWrapperCmd = $tab_ToggleINDJoinSemanticsWrapperCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ToggleINDJoinSemanticsWrapperCmd.Response
	var $tab_ToggleINDJoinSemanticsWrapperCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_ToggleINDJoinSemanticsWrapperCmd$Response.__typeName = 'tab.ToggleINDJoinSemanticsWrapperCmd$Response';
	global.tab.ToggleINDJoinSemanticsWrapperCmd$Response = $tab_ToggleINDJoinSemanticsWrapperCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ToolbarModel
	var $tab_ToolbarModel = function(parent) {
		this.$2$NewToolbarField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('toolbarPresModel'.toString()));
	};
	$tab_ToolbarModel.__typeName = 'tab.ToolbarModel';
	global.tab.ToolbarModel = $tab_ToolbarModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ToolbarServerCommands
	var $tab_ToolbarServerCommands = function() {
	};
	$tab_ToolbarServerCommands.__typeName = 'tab.ToolbarServerCommands';
	$tab_ToolbarServerCommands.get_authoringVizUri = function ToolbarServerCommands$get_AuthoringVizUri() {
		var authoringVizUriModel;
		var authoringSheetName = null;
		if (ss.isNullOrEmptyString(authoringSheetName)) {
			authoringVizUriModel = $tab_VizUriModel.createForAuthoringPublishedSheet(tsConfig.repositoryUrl);
		}
		else {
			authoringVizUriModel = $tab_VizUriModel.createForAuthoringUnpublishedSheet(tsConfig.repositoryUrl, authoringSheetName);
		}
		authoringVizUriModel.trimQueryParamsForAuthoringModeWhenLaunchedFromToolbar();
		authoringVizUriModel.removeHash();
		return authoringVizUriModel;
	};
	$tab_ToolbarServerCommands.setAutoUpdate = function ToolbarServerCommands$SetAutoUpdate(state) {
		var cmdParams = {};
		cmdParams['state'] = state;
		var cmd = $tab_CommandUtils.newCommand$1('set-auto-update-server', cmdParams);
		$tab_ServerCommands.executeServerCommand(cmd, 'immediately');
	};
	$tab_ToolbarServerCommands.refreshData = function ToolbarServerCommands$RefreshData() {
		var cmdParams = {};
		cmdParams['deltaTime'] = 0;
		cmdParams['shouldRefreshDs'] = true;
		var cmd = $tab_CommandUtils.newCommand$1('refresh-data-server', cmdParams);
		$tab_ServerCommands.executeServerCommand(cmd, 'immediately');
	};
	$tab_ToolbarServerCommands.launchEditing = function ToolbarServerCommands$LaunchEditing() {
		var authoringVizUriModel = $tab_ToolbarServerCommands.get_authoringVizUri();
		if (!tsConfig.openAuthoringInTopWindow && (tabBootstrap.Utility.get_embedMode() === 'embedded' || tsConfig.is_mobile_app)) {
			tab.WindowHelper.open(authoringVizUriModel.get_uri(), 'tableauAuthoring');
		}
		else {
			authoringVizUriModel.setTopWindowLocation();
		}
	};
	$tab_ToolbarServerCommands.downloadWorkbook = function ToolbarServerCommands$DownloadWorkbook(givenUrl) {
		var url;
		if (ss.isValue(givenUrl)) {
			url = givenUrl;
		}
		else {
			url = tsConfig.downloadURI;
		}
		var downloadUrl;
		if (tsConfig.is_metrics_view) {
			downloadUrl = $tab_CommandController.get().get_legacySession().metricsViewDownloadUrl();
		}
		else {
			downloadUrl = $tab_ToolbarServerCommands.$rewriteDownloadUri(url);
		}
		window.open(downloadUrl);
	};
	$tab_ToolbarServerCommands.exportData = function ToolbarServerCommands$ExportData(sheetName) {
		if (ss.isNullOrUndefined(sheetName) && ss.isValue($tab_ModelUtils.findActiveOrDefaultVisual())) {
			sheetName = $tab_ModelUtils.findActiveOrDefaultVisual().get_worksheetName();
		}
		var session = $tab_ModelUtils.findContentDashboard().getViewSession(sheetName);
		if (ss.isValue(session)) {
			window.open(session.formatUnderlyingDataURL(null), session.getWindow('vud'), 'scrollbars,resizable');
		}
	};
	$tab_ToolbarServerCommands.exportImage = function ToolbarServerCommands$ExportImage(exportImageHelper) {
		var storyPointId = $tab_ApplicationModel.get_instance().get_workbook().get_currentSheetStoryPointId();
		var dialogData = tableau.types.ExportDialogType['ExportImage'];
		var sheetNameList = [];
		var scrollPoints = [];
		if ($tab_ModelUtils.findContentDashboard().get_isDashboard()) {
			var sheetScrollPositions = exportImageHelper.get_sheetScrollPositions();
			if (ss.isValue(sheetScrollPositions)) {
				var $t1 = ss.getEnumerator(Object.keys(sheetScrollPositions));
				try {
					while ($t1.moveNext()) {
						var sheetName = $t1.current();
						var scrollPos = sheetScrollPositions[sheetName];
						var x = scrollPos.x;
						var y = scrollPos.y;
						if (x !== 0 || y !== 0) {
							scrollPoints.push({ x: x, y: y });
							sheetNameList.push(sheetName);
						}
					}
				}
				finally {
					$t1.dispose();
				}
			}
		}
		$tab_ExportServerCommands.exportImage(tsConfig.current_sheet_name, storyPointId, dialogData, sheetNameList, scrollPoints);
	};
	$tab_ToolbarServerCommands.exportCrosstab = function ToolbarServerCommands$ExportCrosstab(sheetName) {
		if (ss.isNullOrUndefined(sheetName) && ss.isValue($tab_ModelUtils.findActiveOrDefaultVisual())) {
			sheetName = $tab_ModelUtils.findActiveOrDefaultVisual().get_worksheetName();
		}
		var session = $tab_ModelUtils.findContentDashboard().getViewSession(sheetName);
		if (ss.isValue(session)) {
			var dialogData = tableau.types.ExportDialogType['ExportCrosstab'];
			session.fileDownloadHelper.openDownload(session.formatExportCrossTabURL('utf16'), dialogData);
		}
	};
	$tab_ToolbarServerCommands.exportPdf = function ToolbarServerCommands$ExportPdf(exportPdfHelper) {
		exportPdfHelper.triggerExportPdfUI();
	};
	$tab_ToolbarServerCommands.$rewriteDownloadUri = function ToolbarServerCommands$RewriteDownloadUri(uri) {
		if (ss.isValue(uri)) {
			var matches = uri.match($tab_ToolbarServerCommands.$uriPattern);
			if (ss.isValue(matches) && matches.length >= 2) {
				return tabBootstrap.ViewerBootstrap.get_instance().location.protocol + '//' + tabBootstrap.ViewerBootstrap.get_instance().location.host + matches[1];
			}
		}
		return uri;
	};
	global.tab.ToolbarServerCommands = $tab_ToolbarServerCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Transaction
	var $tab_Transaction = function(modelUpdateContext) {
		this.$transactedItems = null;
		this.$origItems = null;
		this.modelUpdateContext = null;
		this.modelUpdateContext = modelUpdateContext;
		this.$transactedItems = [];
		this.$origItems = [];
	};
	$tab_Transaction.__typeName = 'tab.Transaction';
	$tab_Transaction.$buildTransactedChange = function Transaction$BuildTransactedChange(transactedItems) {
		if (transactedItems.length === 0) {
			return null;
		}
		transactedItems = _.sortBy(transactedItems, function(item) {
			return item.get_$path().get_pathList().length;
		});
		var currentWorld = $tab_ApplicationModel.get_instance().pm;
		var $t1 = $tab_PresentationModel.cloneObjWithScalarsOnly(currentWorld);
		if (ss.isNullOrUndefined($t1)) {
			$t1 = new Object();
		}
		var sparseWorld = $t1;
		for (var $t2 = 0; $t2 < transactedItems.length; $t2++) {
			var item1 = transactedItems[$t2];
			$tab_PresentationModel.insertAtPath(currentWorld, sparseWorld, item1.get_$path(), item1.get_$model());
		}
		return sparseWorld;
	};
	global.tab.Transaction = $tab_Transaction;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Transactor
	var $tab_Transactor = function() {
		this.$transaction = null;
		this.$transactedItems = {};
	};
	$tab_Transactor.__typeName = 'tab.Transactor';
	global.tab.Transactor = $tab_Transactor;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.TypeSpecificTableCalcModel
	var $tab_TypeSpecificTableCalcModel = function(parent, presModelKey) {
		$tab_Model.call(this, parent, presModelKey);
	};
	$tab_TypeSpecificTableCalcModel.__typeName = 'tab.TypeSpecificTableCalcModel';
	global.tab.TypeSpecificTableCalcModel = $tab_TypeSpecificTableCalcModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.UbertipButtonMenuModel
	var $tab_UbertipButtonMenuModel = function() {
		$tab_CommandItemBasedUbertipButtonModel.call(this);
	};
	$tab_UbertipButtonMenuModel.__typeName = 'tab.UbertipButtonMenuModel';
	global.tab.UbertipButtonMenuModel = $tab_UbertipButtonMenuModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.UbertipButtonModel
	var $tab_UbertipButtonModel = function() {
		this.$2$SerializedCommandField = null;
		this.$2$IsPlaceholderField = false;
		this.$2$LegacyCommandModelField = null;
		$tab_Model.call(this, null, new $tab_PresModelPathItem('ubertipButton'));
	};
	$tab_UbertipButtonModel.__typeName = 'tab.UbertipButtonModel';
	global.tab.UbertipButtonModel = $tab_UbertipButtonModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.UberTipClientCommands
	var $tab_UberTipClientCommands = function() {
	};
	$tab_UberTipClientCommands.__typeName = 'tab.UberTipClientCommands';
	$tab_UberTipClientCommands.get_$commandPermission = function UberTipClientCommands$get_CommandPermission() {
		return ss.cast(tab.MiscUtil.lazyInitStaticField($tab_UberTipClientCommands, 'commandPermissions', function() {
			return $tab_PermissionManager.buildCommandPermission();
		}), $tab_CommandPermission);
	};
	$tab_UberTipClientCommands.executeUbertipAction = function UberTipClientCommands$ExecuteUbertipAction(action, objectIds, visualModel) {
		var c = new $tab_$LocalClientCommand(function(t) {
			$tab_ActionUtils.executeAction(action, objectIds, visualModel, t);
		});
		$tab_CommandController.SendCommand(c);
	};
	$tab_UberTipClientCommands.executeUbertipCommand = function UberTipClientCommands$ExecuteUbertipCommand(command) {
		switch (command.get_commandType()) {
			case 1: {
				$tab_SelectionClientCommands.clearAllSelections($tab_ModelUtils.findActiveOrDefaultVisual().get_visualId());
				break;
			}
			case 2:
			case 10: {
				var cmd = $tab_UberTipClientCommands.$convertTupleIdToSelection(command);
				$tab_ServerCommands.executeServerCommand(cmd, 'immediately');
				break;
			}
			case 4:
			case 11:
			case 12:
			case 13:
			case 15:
			case 17:
			case 18:
			case 22:
			case 16: {
				$tab_ServerCommands.executeServerCommand(command.command, 'immediately');
				break;
			}
			case 21: {
				$tab_ServerCommands.executeServerCommand(command.command, 'immediately', $tab_CommandUtils.createCommandRedirectSuccessHandler(null), null);
				break;
			}
			case 23: {
				var selectByTupleValueCmd = $tab_CommandUtils.newCommand('select-by-tuple-value', command.command.commandParams);
				$tab_ServerCommands.executeServerCommand(selectByTupleValueCmd, 'immediately');
				break;
			}
			case 6:
			case 9:
			case 7:
			default: {
				return;
			}
		}
	};
	$tab_UberTipClientCommands.localAndRemoteUberTipCommand = function UberTipClientCommands$LocalAndRemoteUberTipCommand(vizCoords, vizRegion, visualId, selRect, tupleId, localInfo, localCallback, remoteCallback, tooltipFailureCallback, activationMethod) {
		var c = $tab_UberTipClientCommands.$buildLocalAndRemoteUberTipCommand(vizCoords, vizRegion, visualId, selRect, localInfo, localCallback, remoteCallback, tooltipFailureCallback, activationMethod, tupleId);
		$tab_CommandController.SendCommand(c);
	};
	$tab_UberTipClientCommands.filterUbertipButtonsByCommandPermissions = function UberTipClientCommands$FilterUbertipButtonsByCommandPermissions(buttonModels, permission) {
		return _.filter(buttonModels, function(button) {
			if (button.get_isMenuButton()) {
				return true;
			}
			if (!permission.test(button)) {
				tab.Log.get($tab_PermissionManager).debug('Permission denied for %o', [button]);
				return false;
			}
			return true;
		});
	};
	$tab_UberTipClientCommands.$buildLocalAndRemoteUberTipCommand = function UberTipClientCommands$BuildLocalAndRemoteUberTipCommand(vizCoords, vizRegion, visualId, selRect, localInfo, localCallback, remoteCallback, tooltipFailureCallback, activationMethod, tupleId) {
		var c = new $tab_$GetUberTipClientCommand($tab_UberTipClientCommands.$buildLocalUbertipCommand(vizCoords, visualId, localInfo, localCallback), $tab_UberTipClientCommands.$buildRemoteUbertipCommand(vizRegion, visualId, selRect, activationMethod, tupleId), $tab_UberTipClientCommands.$buildRemoteCommandSuccessCallback(true, remoteCallback), tooltipFailureCallback);
		return c;
	};
	$tab_UberTipClientCommands.localOnlyUbertipCommand = function UberTipClientCommands$LocalOnlyUbertipCommand(vizCoords, visualId, localInfo, callback) {
		var c = $tab_UberTipClientCommands.buildLocalOnlyUbertipCommand(vizCoords, visualId, localInfo, callback);
		c.set_commandName('render-tooltip-server'.toString());
		$tab_CommandController.SendCommand(c);
	};
	$tab_UberTipClientCommands.buildLocalOnlyUbertipCommand = function UberTipClientCommands$BuildLocalOnlyUbertipCommand(vizCoords, visualId, localInfo, callback) {
		var c = new $tab_$GetUberTipClientCommand($tab_UberTipClientCommands.$buildLocalUbertipCommand(vizCoords, visualId, localInfo, callback), null, null, null);
		return c;
	};
	$tab_UberTipClientCommands.remoteOnlyUbertipCommand = function UberTipClientCommands$RemoteOnlyUbertipCommand(vizRegion, visualId, regionSelRect, callback, tooltipFailureCallback, activationMethod, interactedTupleIds, executeUrlActions, latestTupleId) {
		var c = $tab_UberTipClientCommands.buildRemoteOnlyUberTipCommand(vizRegion, visualId, regionSelRect, callback, tooltipFailureCallback, activationMethod, interactedTupleIds, executeUrlActions, latestTupleId);
		$tab_CommandController.SendCommand(c);
	};
	$tab_UberTipClientCommands.buildRemoteOnlyUberTipCommand = function UberTipClientCommands$BuildRemoteOnlyUberTipCommand(vizRegion, visualId, regionSelRect, callback, tooltipFailureCallback, activationMethod, interactedTupleIds, executeUrlActions, latestTupleId) {
		var localWork = null;
		if (executeUrlActions && ss.isValue(interactedTupleIds)) {
			localWork = function(t) {
				$tab_ActionUtils.executeActions(visualId.worksheet, 'on-hover', interactedTupleIds, t, false);
			};
		}
		var c = new $tab_$GetUberTipClientCommand(localWork, $tab_UberTipClientCommands.$buildRemoteUbertipCommand(vizRegion, visualId, regionSelRect, activationMethod, latestTupleId), $tab_UberTipClientCommands.$buildRemoteCommandSuccessCallback(false, callback), ss.cast(tooltipFailureCallback, Function));
		return c;
	};
	$tab_UberTipClientCommands.$buildLocalUbertipCommand = function UberTipClientCommands$BuildLocalUbertipCommand(vizCoords, visualId, localInfo, callback) {
		return function(t) {
			var ubertipModel = $tab_UbertipSerializer.createLocalUberTipModel(vizCoords, $tab_ModelUtils.getVisualModelFromVisualId(visualId), localInfo, tsConfig.is_authoring);
			if (ss.isValue(ubertipModel)) {
				ubertipModel.isUpdate = false;
				ubertipModel.buttonModels = $tab_UberTipClientCommands.filterUbertipButtonsByCommandPermissions(ubertipModel.buttonModels, $tab_UberTipClientCommands.get_$commandPermission());
			}
			callback(ubertipModel);
			$tab_ActionUtils.executeActions(visualId.worksheet, 'on-hover', [localInfo.get_interactedTupleId()], t, false);
		};
	};
	$tab_UberTipClientCommands.$buildRemoteUbertipCommand = function UberTipClientCommands$BuildRemoteUbertipCommand(vizRegion, visualId, regionSelRect, activationMethod, tupleId) {
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		if (ss.isValue(tupleId)) {
			cmdParams['tupleIds'] = [ss.unbox(tupleId)];
		}
		var vizRegionRect = new Object();
		var regionWrapper = $tab_VizRegionRectWrapper.create(vizRegionRect);
		regionWrapper.set_r(vizRegion);
		regionWrapper.set_x(Math.round(regionSelRect.x));
		regionWrapper.set_y(Math.round(regionSelRect.y));
		regionWrapper.set_w(Math.round(regionSelRect.w));
		regionWrapper.set_h(Math.round(regionSelRect.h));
		cmdParams['vizRegionRect'] = vizRegionRect;
		cmdParams['allowHoverActions'] = tsConfig.is_mobile || activationMethod === 'on-hover';
		cmdParams['allowPromptText'] = true;
		cmdParams['allowWork'] = tsConfig.is_mobile;
		cmdParams['useInlineImages'] = true;
		return $tab_CommandUtils.newCommand$1('render-tooltip-server', cmdParams);
	};
	$tab_UberTipClientCommands.$buildRemoteCommandSuccessCallback = function UberTipClientCommands$BuildRemoteCommandSuccessCallback(isUpdate, callback) {
		return function(pm) {
			if (!ss.isValue(pm)) {
				return;
			}
			var presModelStr = pm.toString();
			var ubertip = (ss.isNullOrEmptyString(presModelStr) ? null : JSON.parse(presModelStr));
			$tab_FontNotificationUtil.notifyFontsFromUberTipPresModel(ubertip);
			var remoteModel = $tab_UbertipSerializer.deserializeUbertip(ubertip);
			if (ss.isValue(remoteModel)) {
				remoteModel.isUpdate = isUpdate;
				remoteModel.buttonModels = $tab_UberTipClientCommands.filterUbertipButtonsByCommandPermissions(remoteModel.buttonModels, $tab_UberTipClientCommands.get_$commandPermission());
			}
			if (ss.isValue(callback)) {
				callback(remoteModel);
			}
			$tab_FontNotificationUtil.$raiseAllFontsFound();
		};
	};
	$tab_UberTipClientCommands.$convertTupleIdToSelection = function UberTipClientCommands$ConvertTupleIdToSelection(command) {
		var cmd = $tab_CommandUtils.duplicateCommand(command.command);
		var cmdParams = cmd.commandParams;
		var tupleId = cmdParams['tupleId'];
		delete cmdParams['tupleId'];
		if (!ss.keyExists(cmdParams, 'selectAtPoint') && ss.isValue(tupleId)) {
			var tupleIds = [parseInt(tupleId.toString())];
			var pm = {};
			pm.objectIds = tupleIds;
			pm.selectionType = 'tuples';
			cmdParams['selection'] = pm;
		}
		return cmd;
	};
	global.tab.UberTipClientCommands = $tab_UberTipClientCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.UbertipSerializer
	var $tab_UbertipSerializer = function() {
	};
	$tab_UbertipSerializer.__typeName = 'tab.UbertipSerializer';
	$tab_UbertipSerializer.deserializeUbertip = function UbertipSerializer$DeserializeUbertip(ubertip) {
		if (ss.isNullOrUndefined(ubertip)) {
			return null;
		}
		var contentCommands = [];
		if (ss.isValue(ubertip.selectionRelaxationCommands)) {
			$tab_UbertipSerializer.$collectCommands(ubertip.selectionRelaxationCommands, contentCommands, $tab_VizDataUtils.invalidTupleId);
		}
		var actionModels = [];
		if (ss.isValue(ubertip.actions)) {
			$tab_UbertipSerializer.$collectCommands(ubertip.actions, actionModels, $tab_VizDataUtils.invalidTupleId);
		}
		var model = {};
		if (ss.isValue(ubertip.commands)) {
			model.buttonModels = $tab_UbertipSerializer.$collectUbertipButtons(ubertip, null);
		}
		model.tooltipHtml = $tab_UbertipSerializer.$nullIfEmpty(ubertip.htmlTooltip);
		model.selectionHtml = $tab_UbertipSerializer.$nullIfEmpty(ubertip.htmlSelection);
		model.overlayImage = $tab_UbertipSerializer.$nullIfEmpty(ubertip.overlayImage);
		model.overlayImageKey = $tab_UbertipSerializer.$nullIfEmpty(ubertip.overlayImageKey);
		model.tupleId = ubertip.tupleId;
		model.interactedTupleId = ubertip.tupleId;
		model.imageRegion = ubertip.r;
		model.tupleSelected = ubertip.tupleSelected || false;
		model.refLineSelected = ubertip.refLineSelected || false;
		model.trendLineSelected = ubertip.trendLineSelected || false;
		model.isExplicitlyEmpty = ubertip.isEmpty || false;
		model.tooltipOffset = tab.PointUtil.fromPresModel(ubertip.tooltipOffset);
		model.markBounds = tab.RecordCast.rectPresModelAsRectXY(ubertip.markTooltipRect);
		model.contentCommands = contentCommands;
		model.actions = actionModels;
		if (ss.isValue(model.overlayImage) || ss.isValue(model.overlayImageKey)) {
			var overlayCount = ubertip.overlayAnchors.length;
			model.overlayAnchors = new Array(overlayCount);
			for (var ii = 0; ii < overlayCount; ++ii) {
				var pointPM = ubertip.overlayAnchors[ii];
				var point = tab.PointUtil.fromPresModel(pointPM);
				model.overlayAnchors[ii] = { x: point.x, y: point.y };
			}
		}
		if (ss.isValue(model.tooltipHtml) || ss.isValue(model.selectionHtml) || ss.isValue(model.buttonModels) && model.buttonModels.length > 0 || actionModels.length > 0) {
			return model;
		}
		return null;
	};
	$tab_UbertipSerializer.createLocalUberTipModel = function UbertipSerializer$CreateLocalUberTipModel(vizCoords, visualModel, localInfo, isAuthoring) {
		var interactedTupleId = localInfo.get_interactedTupleId();
		var affectedTupleIds = localInfo.get_affectedTupleIds();
		var paneDescriptorKey = localInfo.get_paneDescriptorKey();
		var vizDataModel = visualModel.get_vizDataModel();
		if (ss.isNullOrUndefined(vizDataModel)) {
			return null;
		}
		var uberData = vizDataModel.get_ubertipData();
		ss.Debug.assert(ss.isValue(paneDescriptorKey), 'Should always have pane descriptor key');
		var uberPaneData = $tab_UbertipSerializer.$getUberTipPaneData(uberData, paneDescriptorKey);
		ss.Debug.assert(ss.isValue(uberPaneData), 'Should always get an uberPaneData');
		var contentCommands = $tab_UbertipSerializer.$generateLocalContentCommands(uberPaneData.htmlTooltip, visualModel.get_visualId(), interactedTupleId);
		var dataDictionary = $tab_ApplicationModel.get_instance().get_dataDictionary();
		var html = $tab_VizDataUtils.constructHtml(dataDictionary, uberPaneData.htmlTooltip, vizDataModel, [interactedTupleId]);
		var selectionHtml = null;
		var multipleTuplesInEffect = false;
		if (affectedTupleIds.length > 1 && uberPaneData.showButtons) {
			multipleTuplesInEffect = true;
			selectionHtml = $tab_UbertipSerializer.$getSelectionHtml(dataDictionary, vizDataModel, affectedTupleIds, uberPaneData.summaryField);
		}
		var buttonModels = [];
		var tupleIdForCommand = interactedTupleId;
		if (tupleIdForCommand < 0) {
			tupleIdForCommand = $tab_VizDataUtils.invalidTupleId;
		}
		var hasNonTotals = $tab_VizDataUtils.hasTupleWithNonTotalValue(vizDataModel, dataDictionary, affectedTupleIds);
		if (uberPaneData.showButtons && vizDataModel.hasDimensionColumnNotMeasureNames()) {
			if (hasNonTotals) {
				var shouldAddViewData = $tab_UbertipSerializer.$shouldAddViewData(null, vizCoords);
				buttonModels = $tab_UbertipSerializer.$collectUbertipButtons$1(uberData.standardCommands, vizCoords, tupleIdForCommand, shouldAddViewData);
			}
			if (multipleTuplesInEffect) {
				var shouldAddViewData1 = $tab_UbertipSerializer.$shouldAddViewData(null, vizCoords);
				buttonModels = $tab_UbertipSerializer.$collectUbertipButtons$1(uberData.multiselectCommands, vizCoords, tupleIdForCommand, shouldAddViewData1);
			}
			buttonModels = _.filter(buttonModels, function(buttonModel) {
				return buttonModel.get_commandType() !== 10;
			});
			if (isAuthoring) {
				var groupPlaceholder = $tab_UbertipSerializer.$createGroupPlaceholderButtonModel();
				buttonModels.push(groupPlaceholder);
			}
		}
		var actionPMs;
		if (hasNonTotals) {
			actionPMs = $tab_ActionUtils.getApplicableActions(visualModel.get_visualId().worksheet, 'explicitly', null);
			actionPMs = _.filter(actionPMs, function(action) {
				if (action.activation === 'explicitly' && $tab_ActionUtils.getActionType(action) !== 'url' && action.targetWorksheets.length === 0) {
					return false;
				}
				return true;
			});
		}
		else {
			actionPMs = [];
		}
		var isExplicitlyEmpty = uberPaneData.htmlTooltip.toString().length === 0;
		if (ss.isValue(html) || ss.isValue(selectionHtml) || buttonModels.length > 0 || actionPMs.length > 0) {
			var model = { tooltipHtml: html, selectionHtml: selectionHtml, tupleId: tupleIdForCommand, interactedTupleId: interactedTupleId, isExplicitlyEmpty: isExplicitlyEmpty, actionPMs: actionPMs, buttonModels: buttonModels, contentCommands: contentCommands, visualId: visualModel.get_visualId() };
			return model;
		}
		return null;
	};
	$tab_UbertipSerializer.$createGroupPlaceholderButtonModel = function UbertipSerializer$CreateGroupPlaceholderButtonModel() {
		var $t1 = new $tab_CommandModel();
		$t1.set_commandType(10);
		$t1.imageRes = $tab_TabResources.lookupResourceAlias('TQRC_SPLIT');
		$t1.set_name('');
		var groupPlaceholderCommandModel = $t1;
		if (tsConfig.is_mobile) {
			var mergeStr = tab.Strings.UbertipTooltip_GroupMobile;
			var splitStr = tab.Strings.UbertipTooltip_SplitMobile;
			groupPlaceholderCommandModel.description = ((splitStr.length > mergeStr.length) ? splitStr : mergeStr);
		}
		var groupPlaceholder = new $tab_CommandModelBasedUbertipButtonModel();
		groupPlaceholder.update(groupPlaceholderCommandModel, true);
		return groupPlaceholder;
	};
	$tab_UbertipSerializer.paneContainsViT = function UbertipSerializer$PaneContainsViT(visualModel, paneDescriptorKey) {
		if (ss.isNullOrUndefined(visualModel)) {
			return false;
		}
		var vizDataModel = visualModel.get_vizDataModel();
		if (ss.isNullOrUndefined(vizDataModel)) {
			return false;
		}
		var uberData = vizDataModel.get_ubertipData();
		if (ss.isNullOrUndefined(paneDescriptorKey)) {
			for (var $t1 = 0; $t1 < uberData.ubertipPaneDatas.length; $t1++) {
				var uberPane = uberData.ubertipPaneDatas[$t1];
				if ($tab_VizDataUtils.objectContainsVizInTooltip($(uberPane.htmlTooltip))) {
					return true;
				}
			}
			return false;
		}
		else {
			return $tab_VizDataUtils.objectContainsVizInTooltip($($tab_UbertipSerializer.$getUberTipPaneData(uberData, paneDescriptorKey).htmlTooltip));
		}
	};
	$tab_UbertipSerializer.$getUberTipPaneData = function UbertipSerializer$GetUberTipPaneData(ubertip, paneDescrKey) {
		if (ubertip.ubertipPaneDatas.length === 1) {
			return ubertip.ubertipPaneDatas[0];
		}
		for (var $t1 = 0; $t1 < ubertip.ubertipPaneDatas.length; $t1++) {
			var uberPane = ubertip.ubertipPaneDatas[$t1];
			if (ss.isValue(uberPane.paneDescriptor)) {
				if (ss.referenceEquals(uberPane.paneDescriptor.paneDescrKey, paneDescrKey)) {
					return uberPane;
				}
			}
		}
		return null;
	};
	$tab_UbertipSerializer.$generateLocalContentCommands = function UbertipSerializer$GenerateLocalContentCommands(ubertipHtml, visualId, tupleId) {
		if (!tab.FeatureFlags.isEnabled('SelectionRelaxation')) {
			return [];
		}
		if (tupleId === $tab_VizDataUtils.invalidTupleId) {
			ss.Debug.assert(false, 'Tried to create a local content command, but the tuple Id was invalid');
			return [];
		}
		var tooltipHtml = $(ubertipHtml);
		var links = tooltipHtml.find('a.relax-selection');
		var numLinks = links.length;
		var localContentCommands = [];
		for (var i = 0; i < numLinks; i++) {
			var link = links.eq(i);
			var linkContent = link.children().eq(0);
			var fieldName = ss.replaceAllString(ss.replaceAllString(ss.replaceAllString(ss.replaceAllString(linkContent.text(), '<[', '['), ']>', ']'), '>>', '>'), '<<', '<');
			var commandName = link.attr('href');
			var contentCommand = $tab_UbertipSerializer.$buildContentCommand(visualId, fieldName, commandName, tupleId);
			localContentCommands[i] = contentCommand;
		}
		return localContentCommands;
	};
	$tab_UbertipSerializer.$buildContentCommand = function UbertipSerializer$BuildContentCommand(visualId, fieldName, commandName, tupleId) {
		var cmdParams = {};
		cmdParams['visualIdPresModel'] = visualId;
		cmdParams['worksheet'] = visualId.worksheet;
		cmdParams['fn'] = fieldName;
		cmdParams['tupleId'] = tupleId.toString();
		var selectByTupleValueCmd = $tab_CommandUtils.newCommand('select-by-tuple-value', cmdParams);
		var $t1 = new $tab_CommandModel();
		$t1.set_commandType(23);
		$t1.set_name(commandName);
		$t1.command = selectByTupleValueCmd;
		var contentCommand = $t1;
		return contentCommand;
	};
	$tab_UbertipSerializer.$getSelectionHtml = function UbertipSerializer$GetSelectionHtml(dataDictionary, vizData, tupleIds, summary) {
		var summaryFieldCol = vizData.getVizDataField(summary || '');
		if (ss.isValue(summaryFieldCol)) {
			var templateCopy = [];
			$.extend.apply(null, [true, templateCopy].concat($tab_UbertipSerializer.$selectionTemplate));
			templateCopy[2] = tupleIds.length.toString();
			templateCopy[4] = tab.Strings.UbertipItemsSelected;
			if (summaryFieldCol.get_aggType() !== 'sum') {
				templateCopy[8] = tab.Strings.SumOf;
			}
			templateCopy[10] = summary;
			templateCopy[14] = '&lt;' + summary + '&gt;';
			var html = templateCopy.join('');
			return $tab_VizDataUtils.constructHtml(dataDictionary, html, vizData, tupleIds);
		}
		else {
			$tab_UbertipSerializer.$selectionTemplateNoSummary[2] = tupleIds.length.toString();
			$tab_UbertipSerializer.$selectionTemplateNoSummary[4] = tab.Strings.UbertipItemsSelected;
			return $tab_UbertipSerializer.$selectionTemplateNoSummary.join('');
		}
	};
	$tab_UbertipSerializer.$shouldAddViewData = function UbertipSerializer$ShouldAddViewData(ubertip, vizCoords) {
		var remote = ss.isNullOrUndefined(vizCoords);
		var addViewData = false;
		if (ss.isValue(ubertip) && ss.isValue(ubertip.r)) {
			switch (ubertip.r) {
				case 'viz':
				case 'xheader':
				case 'yheader':
				case 'bottomaxis':
				case 'leftaxis':
				case 'rightaxis':
				case 'topaxis': {
					addViewData = true;
					break;
				}
			}
			addViewData = addViewData && !ubertip.refLineSelected && !ubertip.trendLineSelected;
		}
		return !tsConfig.previewMode && (addViewData || !remote);
	};
	$tab_UbertipSerializer.$shouldAddClearSelection = function UbertipSerializer$ShouldAddClearSelection() {
		return tsConfig.is_mobile;
	};
	$tab_UbertipSerializer.$collectCommands = function UbertipSerializer$CollectCommands(commandsObject, commandModels, tupleId) {
		var commandsWrapper = $tab_CommandsPresModelWrapper.create(commandsObject);
		if (ss.isNullOrUndefined(commandsWrapper) || ss.isNullOrUndefined(commandsWrapper.get_commandItems())) {
			return;
		}
		var $t1 = commandsWrapper.get_commandItems();
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var commandItem = $t1[$t2];
			var itemWrapper = $tab_CommandItemWrapper.create(commandItem);
			var $t3 = new $tab_CommandModel();
			$t3.command = $tab_CommandSerializer.deserialize(itemWrapper.get_command());
			var com = $t3;
			if (ss.isValue(com.command)) {
				$tab_UbertipSerializer.buildCommandModelFromWrapper(com, itemWrapper, tupleId);
				commandModels.push(com);
			}
			if (ss.isValue(itemWrapper.get_commands())) {
				$tab_UbertipSerializer.$collectCommands(itemWrapper.get_commands(), commandModels, tupleId);
			}
		}
	};
	$tab_UbertipSerializer.$collectUbertipButtons = function UbertipSerializer$CollectUbertipButtons(ubertipPresModel, vizCoords) {
		var commandsPresModel = ubertipPresModel.commands;
		var shouldAddViewData = $tab_UbertipSerializer.$shouldAddViewData(ubertipPresModel, vizCoords);
		return $tab_UbertipSerializer.$collectUbertipButtons$1(commandsPresModel, vizCoords, $tab_VizDataUtils.invalidTupleId, shouldAddViewData);
	};
	$tab_UbertipSerializer.$collectUbertipButtons$1 = function UbertipSerializer$CollectUbertipButtons(commandsPresModel, vizCoords, tupleId, shouldAddViewData) {
		var commandsWrapper = $tab_CommandsPresModelWrapper.create(commandsPresModel);
		if (ss.isNullOrUndefined(commandsWrapper) || ss.isNullOrUndefined(commandsWrapper.get_commandItems())) {
			return [];
		}
		var buttons = [];
		var $t1 = commandsWrapper.get_commandItems();
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var commandItem = $t1[$t2];
			var command = $tab_CommandItemWrapper.create(commandItem).get_command();
			var isMenuButton = ss.isNullOrUndefined(command);
			if (isMenuButton) {
				var newMenuButton = new $tab_UbertipButtonMenuModel();
				newMenuButton.update(commandItem, tupleId);
				buttons.push(newMenuButton);
			}
			else {
				var newButton = new $tab_CommandItemBasedUbertipButtonModel();
				newButton.update(commandItem, tupleId);
				buttons.push(newButton);
			}
		}
		if (shouldAddViewData && buttons.length > 0) {
			var isRemote = ss.isNullOrUndefined(vizCoords);
			buttons.push($tab_UbertipSerializer.$createViewDataButtonModel(buttons, isRemote, vizCoords));
		}
		if ($tab_UbertipSerializer.$shouldAddClearSelection()) {
			buttons.push($tab_UbertipSerializer.$createClearSelectionButtonModel());
		}
		return buttons;
	};
	$tab_UbertipSerializer.$createViewDataButtonModel = function UbertipSerializer$CreateViewDataButtonModel(buttons, remote, vizCoords) {
		var $t1 = new $tab_CommandModel();
		$t1.set_commandType(7);
		$t1.status = 'enabled';
		$t1.description = tab.Strings.UbertipTooltip_ViewData;
		$t1.command = $tab_CommandUtils.newCommand('viewData', {});
		var viewDataCommandModel = $t1;
		var selectAtPointParam = $tab_UbertipSerializer.$grabSelectAtPointParamFromButtons(buttons, remote, vizCoords);
		if (ss.isValue(selectAtPointParam)) {
			viewDataCommandModel.command.commandParams['selectAtPoint'] = selectAtPointParam;
		}
		var button = new $tab_CommandModelBasedUbertipButtonModel();
		button.update(viewDataCommandModel, false);
		return button;
	};
	$tab_UbertipSerializer.$grabSelectAtPointParamFromButtons = function UbertipSerializer$GrabSelectAtPointParamFromButtons(buttons, isRemote, vizCoords) {
		if (isRemote) {
			for (var $t1 = 0; $t1 < buttons.length; $t1++) {
				var button = buttons[$t1];
				if (ss.isValue(button.get_serializedCommand()) && ss.isValue(button.get_serializedCommand().commandParams) && ss.keyExists(button.get_serializedCommand().commandParams, 'selectAtPoint')) {
					return button.get_serializedCommand().commandParams['selectAtPoint'];
				}
			}
			return null;
		}
		else {
			return JSON.stringify(tab.PointUtil.toPresModel(vizCoords));
		}
	};
	$tab_UbertipSerializer.$createClearSelectionButtonModel = function UbertipSerializer$CreateClearSelectionButtonModel() {
		var $t1 = new $tab_CommandModel();
		$t1.set_commandType(1);
		$t1.set_name(tab.Strings.UbertipClearSelection);
		$t1.status = 'enabled';
		var clearSelectionCommandModel = $t1;
		var button = new $tab_CommandModelBasedUbertipButtonModel();
		button.update(clearSelectionCommandModel, false);
		return button;
	};
	$tab_UbertipSerializer.buildCommandModelFromWrapper = function UbertipSerializer$BuildCommandModelFromWrapper(com, itemWrapper, tupleId) {
		$tab_UbertipSerializer.setCommandType(com);
		com.set_name(itemWrapper.get_name());
		com.description = itemWrapper.get_description();
		if (!tab.MiscUtil.isNullOrEmpty$1(itemWrapper.get_iconRes())) {
			com.imageRes = $tab_TabResources.lookupFullResourceAlias(itemWrapper.get_iconRes());
		}
		var state = itemWrapper.get_enabled();
		com.status = ((ss.isNullOrUndefined(state) || state) ? 'enabled' : 'disabled');
		if (tupleId !== $tab_VizDataUtils.invalidTupleId && !ss.isValue(com.command.commandParams['selectAtPoint'])) {
			com.command.commandParams['tupleId'] = tupleId.toString();
		}
	};
	$tab_UbertipSerializer.setCommandType = function UbertipSerializer$SetCommandType(model) {
		var type = $tab_CommandSerializer.getCommandType(model.command);
		if (ss.isValue(type)) {
			model.set_commandType(ss.unbox(type));
		}
	};
	$tab_UbertipSerializer.$nullIfEmpty = function UbertipSerializer$NullIfEmpty(s) {
		return (ss.isNullOrEmptyString(s) ? null : s);
	};
	global.tab.UbertipSerializer = $tab_UbertipSerializer;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.UpdateDataAlertCmd
	var $tab_UpdateDataAlertCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_UpdateDataAlertCmd$Response]).call(this);
	};
	$tab_UpdateDataAlertCmd.__typeName = 'tab.UpdateDataAlertCmd';
	global.tab.UpdateDataAlertCmd = $tab_UpdateDataAlertCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.UpdateDataAlertCmd.Response
	var $tab_UpdateDataAlertCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_UpdateDataAlertCmd$Response.__typeName = 'tab.UpdateDataAlertCmd$Response';
	global.tab.UpdateDataAlertCmd$Response = $tab_UpdateDataAlertCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.UriPathStripper
	var $tab_UriPathStripper = function() {
	};
	$tab_UriPathStripper.__typeName = 'tab.UriPathStripper';
	$tab_UriPathStripper.getModuleFromPath = function UriPathStripper$GetModuleFromPath(path, legalModules) {
		var siteRoot = tsConfig.site_root || '';
		var indexOfSiteStart = path.indexOf(siteRoot, 0);
		var pathWithoutSite;
		if (indexOfSiteStart === -1) {
			pathWithoutSite = path.substr(1);
		}
		else {
			var indexOfSlashFollowingSite = indexOfSiteStart + siteRoot.length;
			pathWithoutSite = path.substr(indexOfSlashFollowingSite + 1);
		}
		for (var $t1 = 0; $t1 < legalModules.length; $t1++) {
			var uriTypeString = legalModules[$t1];
			if (ss.startsWithString(pathWithoutSite, uriTypeString + '/')) {
				return uriTypeString;
			}
		}
		return '';
	};
	$tab_UriPathStripper.getMeatFromPath = function UriPathStripper$GetMeatFromPath(path, legalModules) {
		var moduleString = $tab_UriPathStripper.getModuleFromPath(path, legalModules);
		var indexOfModuleStringStart = path.indexOf(moduleString, 0);
		return path.substr(indexOfModuleStringStart + moduleString.length + 1);
	};
	global.tab.UriPathStripper = $tab_UriPathStripper;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Utility.UrlStringReplacementOutcome
	var $tab_UrlStringReplacementOutcome = function() {
	};
	$tab_UrlStringReplacementOutcome.__typeName = 'tab.UrlStringReplacementOutcome';
	global.tab.UrlStringReplacementOutcome = $tab_UrlStringReplacementOutcome;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.UserFactory
	var $tab_UserFactory = function() {
	};
	$tab_UserFactory.__typeName = 'tab.UserFactory';
	$tab_UserFactory.currentUser = function UserFactory$CurrentUser() {
		return { id: tsConfig.current_user_id, friendlyName: tsConfig.current_user_friendly_name, username: tsConfig.current_user_name, hasEmail: !ss.isNullOrEmptyString(tsConfig.current_user_email) };
	};
	global.tab.UserFactory = $tab_UserFactory;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ViewGeometryModel
	var $tab_ViewGeometryModel = function(parent) {
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('geometry'));
	};
	$tab_ViewGeometryModel.__typeName = 'tab.ViewGeometryModel';
	global.tab.ViewGeometryModel = $tab_ViewGeometryModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ViewSession
	var $tab_ViewSession = function(urlRoot, sheetId, viewid, commonDialogProvider) {
		this.viewid = null;
		$tab_SheetSession.call(this, urlRoot, sheetId, commonDialogProvider);
		tab.Log.get(this).debug('New id=%s, sheet=%s, view=%s', [tsConfig.sessionid, sheetId, viewid]);
		this.viewid = viewid;
	};
	$tab_ViewSession.__typeName = 'tab.ViewSession';
	global.tab.ViewSession = $tab_ViewSession;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.VisualColumnHelpers
	var $tab_VisualColumnHelpers = function() {
	};
	$tab_VisualColumnHelpers.__typeName = 'tab.VisualColumnHelpers';
	$tab_VisualColumnHelpers.transformColumn = function VisualColumnHelpers$TransformColumn(columnIter, transformFunc) {
		if (ss.isNullOrUndefined(columnIter)) {
			return false;
		}
		columnIter.transform(transformFunc);
		return true;
	};
	$tab_VisualColumnHelpers.createDataArray = function VisualColumnHelpers$CreateDataArray(data, startIndex, count) {
		var vals = ss.cast(Array.prototype.slice.call(data.dataValues, startIndex, startIndex + count), Array);
		return $tab_VisualColumnIterator.create(vals);
	};
	$tab_VisualColumnHelpers.parseColumns = function VisualColumnHelpers$ParseColumns(pdMarks, startIndex, itemCount) {
		var vizColumns = $tab_VisualColumnHelpers.$parsePDMarks(pdMarks);
		var $t1 = _.keys(pdMarks.encodingColumns);
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var key = $t1[$t2];
			vizColumns.set(key, $tab_VisualColumnHelpers.createDataArray(pdMarks.encodingColumns[key], startIndex, itemCount));
		}
		return vizColumns;
	};
	$tab_VisualColumnHelpers.buildColorTable = function VisualColumnHelpers$BuildColorTable(colorDict, markData, foggedBGColor, fogBlendFactorValue) {
		if (ss.isNullOrUndefined(colorDict) || ss.isNullOrUndefined(markData) || !markData.has('color_idx')) {
			return null;
		}
		var colorAlpha = 1;
		if (markData.has('alpha') && markData.get('alpha').c) {
			var $t1 = markData.get('alpha');
			colorAlpha = $t1.v[($t1.c ? 0 : 0)];
		}
		var colorTable = [];
		var indexMap = {};
		var colorIndices = markData.get('color_idx');
		var length = colorIndices.length;
		for (var i = 0; i < length; i++) {
			var index = colorIndices.v[(colorIndices.c ? 0 : i)];
			if (ss.keyExists(indexMap, index)) {
				colorIndices.v[(colorIndices.c ? 0 : i)] = indexMap[index];
			}
			else {
				var cm = $tab_ColorModel.fromArgbInt(colorDict.colorList[index]);
				cm = new $tab_ColorModel(cm.get_r(), cm.get_g(), cm.get_b(), colorAlpha * cm.get_a());
				colorTable.push($tab_SceneDataUtil.createColorCollection(cm, foggedBGColor, fogBlendFactorValue));
				colorIndices.v[(colorIndices.c ? 0 : i)] = colorTable.length - 1;
				indexMap[index] = colorIndices.v[(colorIndices.c ? 0 : i)];
			}
		}
		return colorTable;
	};
	$tab_VisualColumnHelpers.buildOpaqueColorTable = function VisualColumnHelpers$BuildOpaqueColorTable(colorTable) {
		if (ss.isNullOrUndefined(colorTable)) {
			return null;
		}
		var opaqueTable = [];
		for (var i = 0, il = colorTable.length; i < il; i++) {
			opaqueTable[i] = $tab_SceneDataUtil.createOpaqueColorCollection(colorTable[i]);
		}
		return opaqueTable;
	};
	$tab_VisualColumnHelpers.$parsePDMarks = function VisualColumnHelpers$ParsePDMarks(pdMarks) {
		var toRet = new Map();
		var collections = [pdMarks.intMap, pdMarks.floatMap, pdMarks.boolMap];
		for (var $t1 = 0; $t1 < collections.length; $t1++) {
			var collection = collections[$t1];
			if (ss.isNullOrUndefined(collection)) {
				continue;
			}
			var $t2 = Object.keys(collection);
			for (var $t3 = 0; $t3 < $t2.length; $t3++) {
				var key = $t2[$t3];
				var vals = [collection[key]];
				toRet.set(key, $tab_VisualColumnIterator.create(vals));
			}
		}
		return toRet;
	};
	global.tab.VisualColumnHelpers = $tab_VisualColumnHelpers;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.VisualColumnIterator
	var $tab_VisualColumnIterator = function(column) {
		this.v = null;
		this.length = 0;
		this.isValid = false;
		this.c = false;
		ss.Debug.assert(ss.isValue(column), 'VisualColumnIterator should have valid column');
		this.v = column;
		this.isValid = ss.isValue(this.v) && this.v.length > 0;
		this.length = (this.isValid ? this.v.length : 0);
		this.c = false;
	};
	$tab_VisualColumnIterator.__typeName = 'tab.VisualColumnIterator';
	$tab_VisualColumnIterator.create = function VisualColumnIterator$Create(vals) {
		if (ss.isNullOrUndefined(vals)) {
			ss.Debug.assert(false, 'Visual Column is null');
			return null;
		}
		if (vals.length === 1) {
			return new $tab_$VisualColumnIterator$ConstVisualColumnIterator(vals);
		}
		return new $tab_VisualColumnIterator(vals);
	};
	global.tab.VisualColumnIterator = $tab_VisualColumnIterator;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.VisualListModel
	var $tab_VisualListModel = function(parent) {
		this.$drawGroups = null;
		this.$2$NewVisualListField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('visuallist'));
	};
	$tab_VisualListModel.__typeName = 'tab.VisualListModel';
	global.tab.VisualListModel = $tab_VisualListModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.VisualModel
	var $tab_VisualModel = function(parent) {
		this.$selectionsModel = null;
		this.$impliedSelectionModel = null;
		this.$brushingsModel = null;
		this.$filterModels = {};
		this.$filtersJSON = null;
		this.$analyticsModel = null;
		this.$shelvesModel = null;
		this.$sceneModel = null;
		this.$labelsModel = null;
		this.$marksCardModel = null;
		this.$mapServerModel = null;
		this.$showMeModel = null;
		this.$vizDataModel = null;
		this.$captionModel = null;
		this.$titleModel = null;
		this.$sortIndicatorsModel = null;
		this.$geometryModel = null;
		this.$hiddenTuples = null;
		this.$allHiddenTuples = null;
		this.$filteredTuples = null;
		this.$allFilteredTuples = null;
		this.$cacheUrlInfo = null;
		this.$visualIsValid = false;
		this.$brushedFromAction = false;
		this.$emptyHighlightFogAll = false;
		this.$2$NewVisualField = null;
		this.$2$NewHiddenTuplesField = null;
		this.$2$NewFilteredTuplesField = null;
		this.$2$UrlInfoCacheChangeField = null;
		this.$2$VisualValidStateChangedField = null;
		this.$2$BrushingFromActionChangedField = null;
		this.$2$ColorDictionaryChangedField = null;
		this.$2$VizNavigationSettingChangedField = null;
		this.$2$EmptyHighlightFogAllChangedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('visual'.toString()));
		this.$hiddenTuples = new Map();
		this.$allHiddenTuples = new Map();
		this.$filteredTuples = new Map();
		this.$allFilteredTuples = new Map();
		this.$selectionsModel = new $tab_SelectionsModel(this, 'selectionList'.toString());
		this.$impliedSelectionModel = new $tab_SelectionModel(null, -1);
		this.$brushingsModel = new $tab_SelectionsModel(this, 'brushingSelectionList'.toString());
		this.$visualIsValid = true;
		this.$brushedFromAction = false;
		this.$emptyHighlightFogAll = false;
		this.$impliedSelectionModel.update($tab_SelectionsModel.$createEmptySelectionPm('tuples'), $tab_NoopModelEventsHandler.get_noopContext());
	};
	$tab_VisualModel.__typeName = 'tab.VisualModel';
	$tab_VisualModel.get_$log = function VisualModel$get_Log() {
		return tab.Logger.lazyGetLogger($tab_VisualModel);
	};
	global.tab.VisualModel = $tab_VisualModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.VizClientCommands
	var $tab_VizClientCommands = function() {
	};
	$tab_VizClientCommands.__typeName = 'tab.VizClientCommands';
	$tab_VizClientCommands.invalidateVisualModel = function VizClientCommands$InvalidateVisualModel(model) {
		$tab_VizClientCommands.$setVisualModelValidity(model, false);
	};
	$tab_VizClientCommands.validateVisualModel = function VizClientCommands$ValidateVisualModel(model) {
		$tab_VizClientCommands.$setVisualModelValidity(model, true);
	};
	$tab_VizClientCommands.$setVisualModelValidity = function VizClientCommands$SetVisualModelValidity(model, valid) {
		var c = new $tab_$LocalClientCommand(function(t) {
			$tab_ModelUtils.setVisualValidStateOnModel(t, model, valid);
		});
		$tab_CommandController.SendCommand(c);
	};
	$tab_VizClientCommands.setUIMode = function VizClientCommands$SetUIMode(mode, sheetName) {
		var wm = $tab_ApplicationModel.get_instance().get_workbook();
		if (wm.get_uiMode() === mode) {
			return;
		}
		var doLocalWork = mode !== 'document' || ss.referenceEquals(sheetName, tsConfig.current_sheet_name);
		doLocalWork = doLocalWork && mode !== 'data-tab';
		var $t1 = new $tab_ChangeWorkbookUIModeCmd();
		$t1.cmdParams['uiMode'] = mode;
		$t1.set_uiBlocking((doLocalWork ? 'none' : 'immediately'));
		var changeWbCmd = $t1;
		if (!ss.isNullOrEmptyString(sheetName)) {
			changeWbCmd.cmdParams['sheetName'] = sheetName;
		}
		if (doLocalWork) {
			changeWbCmd.set_localWork(function(t) {
				var wpm = t.makeMutablePresModel(wm, false);
				wpm.uiMode = mode;
			});
		}
		changeWbCmd.invoke();
	};
	global.tab.VizClientCommands = $tab_VizClientCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Utility.VizDataField
	var $tab_VizDataField = function(columnPresModel, paneColumnsPresModel) {
		this.$columnPresModel = null;
		this.$paneColumnsPresModel = null;
		this.$hasDataValues = false;
		this.$hasAliases = false;
		this.$tupleIdLookupForPane = null;
		this.$columnPresModel = columnPresModel;
		this.$paneColumnsPresModel = paneColumnsPresModel;
		this.$tupleIdLookupForPane = {};
		this.$validatePresModels();
		this.$hasDataValues = this.$computeHasDataValues();
		this.$hasAliases = this.$computeHasAliases();
	};
	$tab_VizDataField.__typeName = 'tab.VizDataField';
	global.tab.VizDataField = $tab_VizDataField;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Utility.VizDataLookup
	var $tab_VizDataLookup = function() {
	};
	$tab_VizDataLookup.__typeName = 'tab.VizDataLookup';
	$tab_VizDataLookup.lookupDisplayValue = function VizDataLookup$LookupDisplayValue(tupleId, dataField, dataDictionary) {
		if (!dataField.isTupleIdValid(tupleId)) {
			$tab_VizDataLookup.$logTupleInvalidMessage(tupleId, dataField.get_fieldCaption());
			return null;
		}
		if (dataField.get_hasAliases()) {
			var displayValue = $tab_VizDataLookup.lookupAlias(tupleId, dataField, dataDictionary);
			if (ss.isValue(displayValue)) {
				return displayValue;
			}
		}
		if (dataField.get_hasDataValues()) {
			var displayValue1 = $tab_VizDataLookup.$lookupFormattedDataValue(tupleId, dataField, dataDictionary);
			if (ss.isValue(displayValue1)) {
				return displayValue1;
			}
		}
		$tab_VizDataLookup.$logTupleInvalidMessage(tupleId, dataField.get_fieldCaption());
		return null;
	};
	$tab_VizDataLookup.$logTupleInvalidMessage = function VizDataLookup$LogTupleInvalidMessage(tupleId, fieldCaption) {
		var logMsg = ss.formatString('Failed trying to look up the display value for tuple id "{0}" because it is invalid for field "{1}"', tupleId, fieldCaption);
		tab.Log.get($tab_VizDataLookup).debug(logMsg, []);
	};
	$tab_VizDataLookup.$isCustomAlias = function VizDataLookup$IsCustomAlias(aliasIndex) {
		return ss.Nullable$1.lt(aliasIndex, 0);
	};
	$tab_VizDataLookup.$convertCustomAliasIndex = function VizDataLookup$ConvertCustomAliasIndex(aliasIndex) {
		return ss.Nullable$1.sub(ss.Nullable$1.neg(aliasIndex), 1);
	};
	$tab_VizDataLookup.lookupAlias = function VizDataLookup$LookupAlias(tupleId, dataField, dataDictionary) {
		if (!dataField.isTupleIdValid(tupleId)) {
			$tab_VizDataLookup.$logTupleInvalidMessage(tupleId, dataField.get_fieldCaption());
			return null;
		}
		var aliasIndex = dataField.getAliasIndex(tupleId);
		return $tab_VizDataLookup.lookupAliasFromIndex(aliasIndex, dataField, dataDictionary);
	};
	$tab_VizDataLookup.lookupAliasFromIndex = function VizDataLookup$LookupAliasFromIndex(aliasIndex, dataField, dataDictionary) {
		var alias = null;
		if (ss.isValue(aliasIndex)) {
			if ($tab_VizDataLookup.$isCustomAlias(aliasIndex)) {
				aliasIndex = $tab_VizDataLookup.$convertCustomAliasIndex(aliasIndex);
				alias = ss.cast(dataDictionary.getRawValue('cstring', ss.unbox(aliasIndex)), String);
				if (tableau.format.isSpecialValue(alias)) {
					alias = tableau.format.formatSpecial(alias, dataField.get_specialValuesOverride());
				}
			}
			else {
				var dataValueIndex = aliasIndex;
				alias = $tab_VizDataLookup.$lookupFormattedDataValueFromIndex(dataValueIndex, dataField, dataDictionary);
			}
		}
		return alias;
	};
	$tab_VizDataLookup.lookupRawDataValue = function VizDataLookup$LookupRawDataValue(tupleId, dataField, dataDictionary) {
		var dataValueIndex = dataField.getDataValueIndex(tupleId);
		return $tab_VizDataLookup.lookupRawDataValueFromIndex(dataValueIndex, dataField, dataDictionary);
	};
	$tab_VizDataLookup.lookupRawDataValueFromIndex = function VizDataLookup$LookupRawDataValueFromIndex(dataValueIndex, dataField, dataDictionary) {
		var dataValue = null;
		if (ss.isValue(dataValueIndex)) {
			var dt;
			var index = ss.unbox(dataValueIndex);
			if (index >= 0) {
				dt = dataField.get_dataType();
			}
			else {
				index = -index - 1;
				dt = 'cstring';
			}
			var rawValue = dataDictionary.getRawValue(dt, index);
			if (ss.isValue(rawValue)) {
				dataValue = rawValue.toString();
			}
		}
		return dataValue;
	};
	$tab_VizDataLookup.$lookupFormattedDataValue = function VizDataLookup$LookupFormattedDataValue(tupleId, dataField, dataDictionary) {
		var dataValueIndex = dataField.getDataValueIndex(tupleId);
		return $tab_VizDataLookup.$lookupFormattedDataValueFromIndex(dataValueIndex, dataField, dataDictionary);
	};
	$tab_VizDataLookup.$lookupFormattedDataValueFromIndex = function VizDataLookup$LookupFormattedDataValueFromIndex(dataValueIndex, dataField, dataDictionary) {
		var dataValue = null;
		var rawDataValue = $tab_VizDataLookup.lookupRawDataValueFromIndex(dataValueIndex, dataField, dataDictionary);
		if (ss.isValue(rawDataValue)) {
			if (tableau.format.isSpecialValue(rawDataValue)) {
				dataValue = tableau.format.formatSpecial(rawDataValue, dataField.get_specialValuesOverride());
			}
			else {
				dataValue = tableau.format.formatString(rawDataValue, dataField.get_vizColumnDoNotUse());
			}
		}
		return dataValue;
	};
	$tab_VizDataLookup.reverseLookupAlias = function VizDataLookup$ReverseLookupAlias(targetAlias, vizData, column, dataDictionary) {
		var targetAliasIndex = null;
		if (column.get_hasAliases()) {
			vizData.forEachTupleId(function(tupleId) {
				var alias = $tab_VizDataLookup.lookupAlias(tupleId, column, dataDictionary);
				if (ss.compareStrings(alias, targetAlias, false) === 0) {
					targetAliasIndex = column.getAliasIndex(tupleId);
					return false;
				}
				return true;
			});
		}
		return targetAliasIndex;
	};
	$tab_VizDataLookup.buildAliasReverseLookup = function VizDataLookup$BuildAliasReverseLookup(vizData, column, dataDictionary) {
		var retVal = {};
		if (column.get_hasAliases()) {
			vizData.forEachTupleId(function(tupleId) {
				var alias = $tab_VizDataLookup.lookupAlias(tupleId, column, dataDictionary);
				if (ss.isNullOrUndefined(retVal[alias])) {
					retVal[alias] = column.getAliasIndex(tupleId);
				}
				return true;
			});
		}
		return retVal;
	};
	$tab_VizDataLookup.isSpecial = function VizDataLookup$IsSpecial(tupleId, dataField, dataDictionary, specialType) {
		var rawDataValue = $tab_VizDataLookup.lookupRawDataValue(tupleId, dataField, dataDictionary);
		if (ss.isNullOrUndefined(rawDataValue)) {
			var aliasIndex = dataField.getAliasIndex(tupleId);
			if (ss.isValue(aliasIndex)) {
				if ($tab_VizDataLookup.$isCustomAlias(aliasIndex)) {
					aliasIndex = $tab_VizDataLookup.$convertCustomAliasIndex(aliasIndex);
				}
				var dataValueIndex = aliasIndex;
				rawDataValue = $tab_VizDataLookup.lookupRawDataValueFromIndex(dataValueIndex, dataField, dataDictionary);
			}
			if (ss.isNullOrUndefined(rawDataValue)) {
				return false;
			}
		}
		return (ss.isNullOrUndefined(specialType) ? tableau.format.isSpecialValue(rawDataValue) : ss.referenceEquals(rawDataValue, specialType));
	};
	global.tab.VizDataLookup = $tab_VizDataLookup;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.VizDataModel
	var $tab_VizDataModel = function(parent) {
		this.$columns = null;
		this.$tupleIdColumn = null;
		this.$fieldCaptions = null;
		this.$2$NewVizDataField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('vizData'.toString()));
		this.$columns = [];
		this.$fieldCaptions = [];
	};
	$tab_VizDataModel.__typeName = 'tab.VizDataModel';
	global.tab.VizDataModel = $tab_VizDataModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Utility.VizDataUtils
	var $tab_VizDataUtils = function() {
	};
	$tab_VizDataUtils.__typeName = 'tab.VizDataUtils';
	$tab_VizDataUtils.constructUrl = function VizDataUtils$ConstructUrl(dataDictionary, linkInfo, source, tupleIds, sheetId) {
		var getStringForColumn = function(vizDataField, filterType, matchAliases) {
			if (ss.isNullOrEmptyString(filterType)) {
				if (ss.isValue(tupleIds)) {
					return $tab_VizDataUtils.$getUrlStringForColumn(dataDictionary, vizDataField, tupleIds, 1, linkInfo);
				}
				tab.Logger.lazyGetLogger($tab_VizDataUtils).warn('No tuples are specified for ConstructUrl!', []);
				return null;
			}
			var filterValues = $tab_VizDataUtils.$getFilterValues(dataDictionary, vizDataField, filterType, linkInfo.delimiter);
			if (linkInfo.shouldUrlEscape) {
				filterValues = encodeURIComponent(filterValues);
			}
			return filterValues;
		};
		return $tab_VizDataUtils.decodeAndReplaceData(linkInfo.url, '<', '>', source, getStringForColumn);
	};
	$tab_VizDataUtils.constructUrlForFilterActionFromTargetURL = function VizDataUtils$ConstructUrlForFilterActionFromTargetURL(dataDictionary, targetURL, linkInfo, source, tupleIds) {
		var getStringForColumn = function(vizDataField, filterType, matchAliases) {
			return $tab_VizDataUtils.$getTargetUrlStringForColumn(dataDictionary, vizDataField, tupleIds, matchAliases, linkInfo);
		};
		var parts = targetURL.toString().split('?');
		if (parts.length === 1) {
			return targetURL;
		}
		var url = parts[0] + '?';
		var queryParts = parts[1].split('&');
		var acceptedParts = [];
		for (var $t1 = 0; $t1 < queryParts.length; $t1++) {
			var queryPart = queryParts[$t1];
			var result = $tab_VizDataUtils.decodeAndReplaceData(queryPart, '<', '>', source, getStringForColumn);
			if (result.item2 === 'success') {
				acceptedParts.push(result.item1);
			}
		}
		url += acceptedParts.join('&');
		return url;
	};
	$tab_VizDataUtils.constructUrlFromString = function VizDataUtils$ConstructUrlFromString(dataDictionary, linkDisplayStr, source, tupleIds, sheetId, delimiter) {
		var getStringForColumn = function(vizDataField, filterType, matchAliases) {
			if (ss.isNullOrEmptyString(filterType)) {
				return $tab_VizDataUtils.$getHtmlStringForColumn(dataDictionary, vizDataField, tupleIds, 1);
			}
			else {
				return $tab_VizDataUtils.$getFilterValues(dataDictionary, vizDataField, filterType, delimiter);
			}
		};
		var result = $tab_VizDataUtils.decodeAndReplaceData(linkDisplayStr, '<', '>', source, getStringForColumn);
		return result.item1;
	};
	$tab_VizDataUtils.constructHtml = function VizDataUtils$ConstructHtml(dataDictionary, html, source, tupleIds) {
		var getStringForColumn = function(vizDataField, filterType, matchAliases) {
			return $tab_VizDataUtils.$getHtmlStringForColumn(dataDictionary, vizDataField, tupleIds, 0);
		};
		var result = $tab_VizDataUtils.decodeAndReplaceData(html, '&lt;', '&gt;', source, getStringForColumn);
		var ubertipHtmlObj = $(result.item1);
		var invalidNodes = [];
		$tab_VizDataUtils.getNodesOfInvalidFields(ubertipHtmlObj, invalidNodes);
		$tab_VizDataUtils.$deleteLines(ubertipHtmlObj, invalidNodes);
		$tab_VizDataUtils.replaceLastVizInTooltipSizes(ubertipHtmlObj);
		return ($tab_VizDataUtils.shouldShowUbertipHTML(ubertipHtmlObj) ? ubertipHtmlObj.wrap('<div>').parent().html() : '');
	};
	$tab_VizDataUtils.replaceLastVizInTooltipSizes = function VizDataUtils$ReplaceLastVizInTooltipSizes(uberTip) {
		if (tab.FeatureFlags.isEnabled('VizInTooltip')) {
			var vizInTooltips = uberTip.find($tab_VizDataUtils.vizInTooltipSpanTag);
			var length = Math.min(vizInTooltips.length, $tab_VizDataUtils.lastWidthAndHeightForVizInTooltips.length);
			for (var i = 0; i < length; i++) {
				vizInTooltips[i].style.width = $tab_VizDataUtils.lastWidthAndHeightForVizInTooltips[i].item1;
				vizInTooltips[i].style.height = $tab_VizDataUtils.lastWidthAndHeightForVizInTooltips[i].item2;
			}
		}
	};
	$tab_VizDataUtils.updateLastVizInTooltipSizes = function VizDataUtils$UpdateLastVizInTooltipSizes(html) {
		var uberTip = $(html);
		var vizInTooltips = uberTip.find('span[data-tableau="VizInTooltip"] img');
		var length = vizInTooltips.length;
		for (var i = 0; i < length; i++) {
			var height = vizInTooltips[i].getAttribute('height') + 'px';
			var width = vizInTooltips[i].getAttribute('width') + 'px';
			$tab_VizDataUtils.lastWidthAndHeightForVizInTooltips[i] = { item1: width, item2: height };
		}
	};
	$tab_VizDataUtils.decodeAndReplaceData = function VizDataUtils$DecodeAndReplaceData(original, open, close, vizDataModel, getStringForColumn) {
		var replacementOutcome = 'success';
		var doubleOpenEscaped = $tab_VizDataUtils.$getRandomNotIn(original, 'escaped_open_tag');
		var doubleCloseEscaped = $tab_VizDataUtils.$getRandomNotIn(original, 'escaped_close_tag');
		var escapedOpenAndCloseReplaced = ss.replaceAllString(ss.replaceAllString(original, open + open, doubleOpenEscaped), close + close, doubleCloseEscaped);
		var urlParts = escapedOpenAndCloseReplaced.split(open);
		var sb = new ss.StringBuilder(urlParts.shift());
		for (var $t1 = 0; $t1 < urlParts.length; $t1++) {
			var urlPart = urlParts[$t1];
			ss.Debug.assert(!ss.isNullOrEmptyString(urlPart), 'There is an open tag without a matching close tag.');
			var urlClosingParts = urlPart.split(close);
			ss.Debug.assert(urlClosingParts.length === 2, "There must be exactly 1 closing '>' to match the open '<'");
			var fieldCaption = ss.htmlDecode(ss.replaceAllString(ss.replaceAllString(urlClosingParts[0], doubleOpenEscaped, open), doubleCloseEscaped, close));
			var urlClosingPart = urlClosingParts[1];
			var useAlias = true;
			var lastTilde = fieldCaption.lastIndexOf(String.fromCharCode(126));
			var lastBrace = fieldCaption.lastIndexOf(String.fromCharCode(93));
			if (lastTilde >= 0 && (lastBrace === -1 || lastBrace < lastTilde)) {
				var modifierOp = fieldCaption.substr(lastTilde);
				fieldCaption = fieldCaption.substr(0, lastTilde);
				if (modifierOp === '~na') {
					useAlias = false;
				}
			}
			var filterType = null;
			if ($tab_VizDataUtils.$useFilterValues(fieldCaption)) {
				var index = fieldCaption.indexOf('(');
				filterType = fieldCaption.substring(0, index);
				fieldCaption = fieldCaption.substring(index + 1, fieldCaption.length - 1);
			}
			var bracketStart = fieldCaption.indexOf(String.fromCharCode(91));
			var bracketEnd = fieldCaption.lastIndexOf(String.fromCharCode(93));
			if (bracketStart >= 0 && bracketStart < bracketEnd) {
				fieldCaption = fieldCaption.substring(bracketStart + 1, bracketEnd);
			}
			if (ss.startsWithString(fieldCaption, 'Parameters.')) {
				return { item1: '', item2: 'notEnoughInfoYet' };
			}
			var vizDataField = vizDataModel.getVizDataField(fieldCaption);
			if (ss.isNullOrUndefined(vizDataField)) {
				return { item1: '', item2: 'urlConstructionFail' };
			}
			var replacedDataString = getStringForColumn(vizDataField, filterType, useAlias);
			if (ss.isNullOrUndefined(replacedDataString)) {
				replacementOutcome = 'urlConstructionFail';
			}
			else {
				sb.append(replacedDataString);
			}
			sb.append(urlClosingPart);
		}
		var resultString = ss.replaceAllString(ss.replaceAllString(sb.toString(), doubleOpenEscaped, open), doubleCloseEscaped, close);
		return { item1: resultString, item2: replacementOutcome };
	};
	$tab_VizDataUtils.hasTupleWithNonTotalValue = function VizDataUtils$HasTupleWithNonTotalValue(vizData, dataDictionary, effectiveTupleIds) {
		for (var $t1 = 0; $t1 < effectiveTupleIds.length; $t1++) {
			var tupleId = { $: effectiveTupleIds[$t1] };
			var tupleHasTotal = { $: false };
			vizData.forEachVizDataField(ss.mkdel({ tupleId: tupleId, tupleHasTotal: tupleHasTotal }, function(vizColumn, colIndex) {
				if (vizColumn.get_role() === 'dimension') {
					if ($tab_VizDataLookup.isSpecial(this.tupleId.$, vizColumn, dataDictionary, tableau.format.specialAll)) {
						this.tupleHasTotal.$ = true;
						return false;
					}
				}
				return true;
			}));
			if (!tupleHasTotal.$) {
				return true;
			}
		}
		return false;
	};
	$tab_VizDataUtils.isFieldNameOfColumn = function VizDataUtils$IsFieldNameOfColumn(column, fieldName) {
		var escColumnFieldName = $tab_VizDataUtils.stripNewlines(column.fn);
		var escFieldName = $tab_VizDataUtils.stripNewlines(fieldName);
		var escFieldNameBracketed = '[' + escFieldName + ']';
		return ss.referenceEquals(escFieldName, escColumnFieldName) || ss.referenceEquals(escFieldName, $tab_VizDataUtils.stripNewlines(column.fnDisagg)) || ss.referenceEquals(escFieldNameBracketed, escColumnFieldName) || ss.referenceEquals(escFieldNameBracketed, $tab_VizDataUtils.stripNewlines(column.localBaseColumnName));
	};
	$tab_VizDataUtils.isFieldCaptionOfColumn = function VizDataUtils$IsFieldCaptionOfColumn(column, fieldCaption) {
		return ss.referenceEquals($tab_VizDataUtils.stripNewlines(fieldCaption), $tab_VizDataUtils.stripNewlines(column.fieldCaption));
	};
	$tab_VizDataUtils.$getRandomNotIn = function VizDataUtils$GetRandomNotIn(input, prefix) {
		var result = prefix;
		while (input.indexOf(result) > -1) {
			result += Math.random() * 10000 | 0;
		}
		return result;
	};
	$tab_VizDataUtils.stripNewlines = function VizDataUtils$StripNewlines(str) {
		return (ss.isValue(str) ? str.replace($tab_VizDataUtils.$newLineRegEx, '') : null);
	};
	$tab_VizDataUtils.objectContainsVizInTooltip = function VizDataUtils$ObjectContainsVizInTooltip(ubertipHtmlObj) {
		return tab.FeatureFlags.isEnabled('VizInTooltip') && ubertipHtmlObj.has($tab_VizDataUtils.vizInTooltipSpanTag).length !== 0;
	};
	$tab_VizDataUtils.shouldShowUbertipHTML = function VizDataUtils$ShouldShowUbertipHTML(ubertipHtmlObj) {
		return !tab.MiscUtil.isNullOrEmpty$1(ubertipHtmlObj.text().trim()) || $tab_VizDataUtils.objectContainsVizInTooltip(ubertipHtmlObj);
	};
	$tab_VizDataUtils.getNodesOfInvalidFields = function VizDataUtils$GetNodesOfInvalidFields(root, invalidNodes) {
		var textOfThisNodeOnly = '';
		var contents = root.contents().get();
		for (var $t1 = 0; $t1 < contents.length; $t1++) {
			var e = contents[$t1];
			if (e.nodeType === 3) {
				textOfThisNodeOnly += e.textContent || (e.textContent || '');
			}
			else {
				$tab_VizDataUtils.getNodesOfInvalidFields($(e), invalidNodes);
			}
		}
		if (textOfThisNodeOnly.indexOf($tab_VizDataUtils.unknownFieldMarker) !== -1) {
			invalidNodes.push(root);
		}
	};
	$tab_VizDataUtils.addVizDataToZones = function VizDataUtils$AddVizDataToZones(vizDatas, zones) {
		var zoneKeys = _.keys(zones);
		var $t1 = _.keys(vizDatas);
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var sheetName = $t1[$t2];
			for (var $t3 = 0; $t3 < zoneKeys.length; $t3++) {
				var zoneKey = zoneKeys[$t3];
				var zone = zones[zoneKey];
				if (zone.zoneCommon.zoneType === 'viz' && ss.referenceEquals(zone.sheet, sheetName)) {
					var visual = zone.presModelHolder['visual'.toString()];
					if (ss.isValue(visual)) {
						var presModelHolder = vizDatas[sheetName].presModelHolder;
						visual.vizData = presModelHolder['genVizDataPresModel'];
					}
					break;
				}
			}
		}
	};
	$tab_VizDataUtils.$deleteLines = function VizDataUtils$DeleteLines(ubertip, invalidNodes) {
		for (var $t1 = 0; $t1 < invalidNodes.length; $t1++) {
			var invalid = invalidNodes[$t1];
			var tableRow = $tab_VizDataUtils.$getParentWithTag(ubertip, invalid, 'tr');
			if (ss.isValue(tableRow)) {
				tableRow.remove();
			}
			else {
				var div = $tab_VizDataUtils.$getParentWithTag(ubertip, invalid, 'div');
				if (ss.isValue(div)) {
					div.remove();
				}
				else {
					invalid.remove();
				}
			}
		}
	};
	$tab_VizDataUtils.$getParentWithTag = function VizDataUtils$GetParentWithTag(root, someChild, tag) {
		var iterator = someChild;
		if (ss.isValue(root) && ss.isValue(someChild) && root.find(someChild).length === 1) {
			while (!ss.referenceEquals(iterator[0], root[0])) {
				if (ss.referenceEquals(iterator[0].tagName.toLowerCase(), tag)) {
					return iterator;
				}
				iterator = iterator.parent();
			}
		}
		return null;
	};
	$tab_VizDataUtils.$getUrlStringForColumn = function VizDataUtils$GetUrlStringForColumn(dataDictionary, vizDataField, tupleIds, escapeFlag, linkInfo) {
		var dataValues = [];
		for (var $t1 = 0; $t1 < tupleIds.length; $t1++) {
			var tupleId = tupleIds[$t1];
			var newDataValue = $tab_VizDataLookup.lookupAlias(tupleId, vizDataField, dataDictionary);
			if (ss.isNullOrUndefined(newDataValue)) {
				continue;
			}
			if ($tab_VizDataLookup.isSpecial(tupleId, vizDataField, dataDictionary, null)) {
				continue;
			}
			if (newDataValue.indexOf(linkInfo.delimiter) !== -1) {
				newDataValue = ss.replaceAllString(newDataValue, linkInfo.delimiter, linkInfo.escapeString + linkInfo.delimiter);
			}
			if (linkInfo.shouldUrlEscape) {
				newDataValue = encodeURIComponent(newDataValue);
			}
			dataValues.push(newDataValue);
		}
		if (dataValues.length === 0) {
			return null;
		}
		if (dataValues.length > 1 && ss.isNullOrUndefined(linkInfo.delimiter)) {
			return null;
		}
		var toRet = dataValues.join(linkInfo.delimiter);
		if (escapeFlag === 0) {
			toRet = tableau.format.escapeHTML(toRet);
		}
		return toRet;
	};
	$tab_VizDataUtils.$getTargetUrlStringForColumn = function VizDataUtils$GetTargetUrlStringForColumn(dataDictionary, vizDataField, tupleIds, useAlias, linkSpecPresModel) {
		var values = [];
		for (var $t1 = 0; $t1 < tupleIds.length; $t1++) {
			var tupleId = tupleIds[$t1];
			var newDataValue = (useAlias ? $tab_VizDataLookup.lookupAlias(tupleId, vizDataField, dataDictionary) : $tab_VizDataLookup.lookupRawDataValue(tupleId, vizDataField, dataDictionary));
			newDataValue = $tab_VizDataUtils.replaceUrlStringSpecialValues(newDataValue);
			newDataValue = ss.replaceAllString(newDataValue, linkSpecPresModel.delimiter, linkSpecPresModel.escapeString + linkSpecPresModel.delimiter);
			values.push(newDataValue);
		}
		return encodeURIComponent(values.join(linkSpecPresModel.delimiter));
	};
	$tab_VizDataUtils.replaceUrlStringSpecialValues = function VizDataUtils$ReplaceUrlStringSpecialValues(inputValue) {
		switch (inputValue) {
			case '%null%': {
				return $tab_VizDataUtils.urlStringNull;
			}
			case '%skipped%': {
				return $tab_VizDataUtils.urlStringSkipped;
			}
			case '%ragged%': {
				return $tab_VizDataUtils.urlStringRagged;
			}
			default: {
				return inputValue;
			}
		}
	};
	$tab_VizDataUtils.$getHtmlStringForColumn = function VizDataUtils$GetHtmlStringForColumn(dataDictionary, vizDataField, tupleIds, escapeFlag) {
		var replacedDataString;
		if (tupleIds.length > 1) {
			if (!vizDataField.get_hasDataValues()) {
				return $tab_VizDataUtils.noLocalSummary;
			}
			var dataValues = new Array(tupleIds.length);
			for (var ii = 0; ii < tupleIds.length; ++ii) {
				var dataValue = $tab_VizDataLookup.lookupRawDataValue(tupleIds[ii], vizDataField, dataDictionary);
				if (dataValue === null || tableau.format.isSpecialValue(dataValue)) {
					dataValue = '0';
				}
				else if (typeof(dataValue) === 'undefined' || dataValue.length === 0) {
					return $tab_VizDataUtils.noLocalSummary;
				}
				dataValues[ii] = dataValue;
			}
			var sum = 0;
			for (var ii1 = 0; ii1 < dataValues.length; ++ii1) {
				sum += parseFloat(dataValues[ii1]);
			}
			replacedDataString = tableau.format.formatString(sum.toString(), vizDataField.get_vizColumnDoNotUse());
		}
		else if (tupleIds.length === 1) {
			var alias = $tab_VizDataLookup.lookupDisplayValue(tupleIds[0], vizDataField, dataDictionary);
			if (ss.isNullOrUndefined(alias)) {
				return $tab_VizDataUtils.unknownFieldMarker;
			}
			replacedDataString = alias;
		}
		else {
			tab.Logger.lazyGetLogger($tab_VizDataUtils).warn('No tuples specified. GetHtmlStringForColumn expects one or more tuples.', []);
			return '';
		}
		if (escapeFlag === 0) {
			return tableau.format.escapeHTML(replacedDataString);
		}
		else {
			return replacedDataString;
		}
	};
	$tab_VizDataUtils.$useFilterValues = function VizDataUtils$UseFilterValues(fieldCaption) {
		return ss.startsWithString(fieldCaption, 'FILTERMIN(') || ss.startsWithString(fieldCaption, 'FILTERMAX(') || ss.startsWithString(fieldCaption, 'FILTERVALUES(');
	};
	$tab_VizDataUtils.$getFilterValues = function VizDataUtils$GetFilterValues(dataDictionary, vizDataField, filterType, delimiter) {
		if (ss.isNullOrUndefined(vizDataField) || ss.isNullOrUndefined(vizDataField.get_filterContext())) {
			return '';
		}
		var filterContext = vizDataField.get_filterContext();
		var filterValIndexes;
		switch (filterType) {
			case 'FILTERMIN': {
				filterValIndexes = filterContext.filterMinIndices;
				break;
			}
			case 'FILTERMAX': {
				filterValIndexes = filterContext.filterMaxIndices;
				break;
			}
			case 'FILTERVALUES': {
				filterValIndexes = filterContext.filterValueIndices;
				break;
			}
			default: {
				return '';
			}
		}
		if (tab.MiscUtil.isNullOrEmpty(filterValIndexes)) {
			return '';
		}
		var filterTexts = [];
		for (var $t1 = 0; $t1 < filterValIndexes.length; $t1++) {
			var valIndex = filterValIndexes[$t1];
			var dataValue = $tab_VizDataLookup.lookupRawDataValueFromIndex(valIndex, vizDataField, dataDictionary);
			filterTexts.push(dataValue);
		}
		return filterTexts.join(delimiter || ',');
	};
	global.tab.VizDataUtils = $tab_VizDataUtils;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.VizPortalServer
	var $tab_VizPortalServer = function() {
	};
	$tab_VizPortalServer.__typeName = 'tab.VizPortalServer';
	$tab_VizPortalServer.createRequest = function VizPortalServer$CreateRequest(methodName, methodParams, success, failure) {
		var xhrSuccessHandler = function(result) {
			if ($tab_VizPortalServer.$hasErrors(result)) {
				failure($tab_VizPortalServer.$firstErrorCodeIn(result));
			}
			else {
				success(result);
			}
		};
		return $tab_VizPortalServer.$createRequestInternal$1(methodName, methodParams, xhrSuccessHandler, failure);
	};
	$tab_VizPortalServer.createRequestWithPartialFailureHandling = function VizPortalServer$CreateRequestWithPartialFailureHandling(methodName, methodParams, success, failure, error) {
		var xhrSuccessHandler = function(result) {
			if ($tab_VizPortalServer.$hasErrors(result)) {
				failure(result);
			}
			else {
				success(result);
			}
		};
		return $tab_VizPortalServer.$createRequestInternal$1(methodName, methodParams, xhrSuccessHandler, error);
	};
	$tab_VizPortalServer.$createRequestInternal = function VizPortalServer$CreateRequestInternal(requestParams) {
		return $tab_VizPortalServer.$createRequestInternal$1(requestParams.methodName, requestParams.methodParams, requestParams.success, requestParams.error);
	};
	$tab_VizPortalServer.$createRequestInternal$1 = function VizPortalServer$CreateRequestInternal(methodName, methodParams, success, error) {
		var options = new Object();
		options.type = 'POST';
		options.contentType = 'application/json;charset=UTF-8';
		options.dataType = 'json';
		options.url = '/vizportal/api/web/v1/' + methodName;
		var xsrfToken = $tab_VizPortalServer.$getXsrfToken();
		if (ss.isValue(xsrfToken)) {
			options.headers = ss.mkdict(['X-XSRF-TOKEN', xsrfToken]);
		}
		options.data = JSON.stringify(ss.mkdict(['method', methodName, 'params', methodParams]));
		options.success = function(data, status, request) {
			success($tab_VizPortalServer.$getResult(data));
		};
		options.error = function() {
			error(0);
		};
		return options;
	};
	$tab_VizPortalServer.$getXsrfToken = function VizPortalServer$GetXsrfToken() {
		var keyValue = document.cookie.match(new RegExp('(^|;) ?XSRF-TOKEN=([^;]*)(;|$)'));
		return (ss.isValue(keyValue) ? keyValue[2] : null);
	};
	$tab_VizPortalServer.$hasErrors = function VizPortalServer$HasErrors(result) {
		if (ss.keyExists(result, 'errors')) {
			var errors = ss.cast(result['errors'], Array);
			return errors.length > 0;
		}
		else {
			return false;
		}
	};
	$tab_VizPortalServer.$firstErrorCodeIn = function VizPortalServer$FirstErrorCodeIn(result) {
		if (ss.keyExists(result, 'errors')) {
			var errors = ss.cast(result['errors'], Array);
			if (errors.length > 0 && ss.keyExists(errors[0], 'code')) {
				return ss.cast(errors[0]['code'], ss.Int32);
			}
		}
		return 0;
	};
	$tab_VizPortalServer.$getResult = function VizPortalServer$GetResult(data) {
		var response = data;
		return response['result'];
	};
	global.tab.VizPortalServer = $tab_VizPortalServer;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.VizqlSessionRequest
	var $tab_VizqlSessionRequest = function(methodName, methodParams, success, error) {
		this.methodName = null;
		this.methodParams = null;
		this.success = null;
		this.error = null;
		this.methodName = methodName;
		this.methodParams = methodParams;
		this.success = success;
		this.error = error;
	};
	$tab_VizqlSessionRequest.__typeName = 'tab.VizqlSessionRequest';
	global.tab.VizqlSessionRequest = $tab_VizqlSessionRequest;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.VizRegionRectWrapper
	var $tab_VizRegionRectWrapper = function(rect) {
		this.$vizRegionRect = null;
		this.$vizRegionRect = rect;
	};
	$tab_VizRegionRectWrapper.__typeName = 'tab.VizRegionRectWrapper';
	$tab_VizRegionRectWrapper.create = function VizRegionRectWrapper$Create(rect) {
		return new $tab_VizRegionRectWrapper(rect);
	};
	global.tab.VizRegionRectWrapper = $tab_VizRegionRectWrapper;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.VizUriModel
	var $tab_VizUriModel = function(location) {
		this.explicitNotGuest = false;
		this.$vizUriType = 0;
		this.$workbookId = '';
		this.$sheetId = '';
		this.$authoringSheetName = '';
		this.$queryParams = {};
		this.$customizedView = '';
		this.$hash = '';
		this.$origin = '';
		this.$revisionNumber = '';
		if (ss.getKeyCount($tab_VizUriModel.$uriTypeToUriTypeString) === 0) {
			$tab_VizUriModel.$initializeUriTypeToUriTypeStringMap();
		}
		if (ss.isValue(location)) {
			this.$fillVizUriModel(location);
		}
	};
	$tab_VizUriModel.__typeName = 'tab.VizUriModel';
	$tab_VizUriModel.createForCurrentWindowLocation = function VizUriModel$CreateForCurrentWindowLocation(window) {
		if (tab.MiscUtil.isNullOrEmpty(window)) {
			window = tabBootstrap.Utility.get_locationWindow();
		}
		var uriModel = new $tab_VizUriModel(tab.WindowHelper.getLocation(window));
		return uriModel;
	};
	$tab_VizUriModel.createForViewingSheet = function VizUriModel$CreateForViewingSheet(repositoryUrl) {
		var vizUriModel = $tab_VizUriModel.$createForCurrentWindowLocationConstants(null);
		vizUriModel.$vizUriType = (tsConfig.is_revision_history_preview ? 6 : (vizUriModel.$vizUriType = 1));
		var repoPathObject = new $tab_RepoPathObject(repositoryUrl);
		vizUriModel.$workbookId = repoPathObject.get_workbookId();
		vizUriModel.$sheetId = repoPathObject.get_sheetId();
		vizUriModel.$customizedView = repoPathObject.get_customizedView();
		vizUriModel.$authoringSheetName = '';
		return vizUriModel;
	};
	$tab_VizUriModel.createForViewingSheets = function VizUriModel$CreateForViewingSheets(repositoryUrls, includeQueryParams) {
		if (ss.isNullOrUndefined(repositoryUrls) || repositoryUrls.length === 0) {
			return [];
		}
		var urlCount = repositoryUrls.length;
		var models = new Array(urlCount);
		var baseUriModel = $tab_VizUriModel.$createForCurrentWindowLocationConstants(null);
		baseUriModel.$vizUriType = 1;
		baseUriModel.$authoringSheetName = '';
		if (!includeQueryParams) {
			baseUriModel.removeAllQueryParams();
		}
		for (var i = 0; i < urlCount; i++) {
			var vizUriModel = baseUriModel.clone();
			var repositoryUrl = repositoryUrls[i];
			var repoPathObject = new $tab_RepoPathObject(repositoryUrl);
			vizUriModel.$workbookId = repoPathObject.get_workbookId();
			vizUriModel.$sheetId = repoPathObject.get_sheetId();
			vizUriModel.$customizedView = repoPathObject.get_customizedView();
			models[i] = vizUriModel;
		}
		return models;
	};
	$tab_VizUriModel.createForCurrentWindowLocationAndVizState = function VizUriModel$CreateForCurrentWindowLocationAndVizState(repoUrl, currentSheetName) {
		var vizUriModel = $tab_VizUriModel.createForCurrentWindowLocation();
		var repoPathObject = new $tab_RepoPathObject(repoUrl);
		vizUriModel.$workbookId = repoPathObject.get_workbookId();
		vizUriModel.$sheetId = repoPathObject.get_sheetId();
		vizUriModel.$customizedView = repoPathObject.get_customizedView();
		vizUriModel.$authoringSheetName = currentSheetName;
		return vizUriModel;
	};
	$tab_VizUriModel.createForAuthoringUnpublishedSheet = function VizUriModel$CreateForAuthoringUnpublishedSheet(repoUrl, authoringSheetName) {
		var vizUriModel = $tab_VizUriModel.createForAuthoringPublishedSheet(repoUrl);
		vizUriModel.$authoringSheetName = authoringSheetName;
		return vizUriModel;
	};
	$tab_VizUriModel.createForAuthoringPublishedSheet = function VizUriModel$CreateForAuthoringPublishedSheet(repoUrl) {
		var vizUriModel = $tab_VizUriModel.$createForCurrentWindowLocationConstants(null);
		vizUriModel.$vizUriType = 2;
		var repoPathObject = new $tab_RepoPathObject(repoUrl);
		vizUriModel.$workbookId = repoPathObject.get_workbookId();
		vizUriModel.$sheetId = repoPathObject.get_sheetId();
		vizUriModel.$authoringSheetName = '';
		return vizUriModel;
	};
	$tab_VizUriModel.createInvalid = function VizUriModel$CreateInvalid() {
		var vizUriModel = new $tab_VizUriModel();
		vizUriModel.$vizUriType = 0;
		return vizUriModel;
	};
	$tab_VizUriModel.$initializeUriTypeToUriTypeStringMap = function VizUriModel$InitializeUriTypeToUriTypeStringMap() {
		var $t1 = ss.getEnumerator(Object.keys($tab_VizUriModel.$uriTypeStringToUriType));
		try {
			while ($t1.moveNext()) {
				var uriTypeString = $t1.current();
				$tab_VizUriModel.$uriTypeToUriTypeString[$tab_VizUriModel.$uriTypeStringToUriType[uriTypeString]] = uriTypeString;
			}
		}
		finally {
			$t1.dispose();
		}
	};
	$tab_VizUriModel.$createForCurrentWindowLocationConstants = function VizUriModel$CreateForCurrentWindowLocationConstants(window) {
		if (tab.MiscUtil.isNullOrEmpty(window)) {
			window = tabBootstrap.Utility.get_locationWindow();
		}
		var location = tab.WindowHelper.getLocation(window);
		var vizUriModel = new $tab_VizUriModel(location);
		vizUriModel.$queryParams = $tab_VizUriModel.$getRelevantQueryParameters(location);
		vizUriModel.$hash = location.hash;
		vizUriModel.$origin = tab.BrowserSupport.getOrigin(location);
		return vizUriModel;
	};
	$tab_VizUriModel.$getRelevantQueryParameters = function VizUriModel$GetRelevantQueryParameters(location) {
		var queryParams = tab.MiscUtil.getUriQueryParameters(location.href);
		for (var $t1 = 0; $t1 < $tab_VizUriModel.$ignoredParams.length; $t1++) {
			var ignoredParam = $tab_VizUriModel.$ignoredParams[$t1];
			if (ss.keyExists(queryParams, ignoredParam)) {
				delete queryParams[ignoredParam];
			}
		}
		return queryParams;
	};
	$tab_VizUriModel.encodeUserName = function VizUriModel$EncodeUserName(username) {
		var encoded = tab.MiscUtil.percentEncode(username, $tab_VizUriModel.$usernameValidChars);
		return ss.replaceAllString(encoded, '%40', '@');
	};
	global.tab.VizUriModel = $tab_VizUriModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.VizUriType
	var $tab_VizUriType = function() {
	};
	$tab_VizUriType.__typeName = 'tab.VizUriType';
	global.tab.VizUriType = $tab_VizUriType;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WaitFeedbackType
	var $tab_WaitFeedbackType = function() {
	};
	$tab_WaitFeedbackType.__typeName = 'tab.WaitFeedbackType';
	global.tab.WaitFeedbackType = $tab_WaitFeedbackType;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WaitHandler
	var $tab_WaitHandler = function() {
		this.$glassPaneNode = null;
		this.$spinnerNode = null;
		this.$refcnt = 0;
		this.$glassShowTimer = null;
		this.$spinnerShowTimer = null;
		this.$specialHideFunc = null;
		this.$isVisible = false;
		this.$isLocked = false;
		this.$cancelButton = null;
		this.$glassPaneNode = $('#loadingGlassPane');
		this.$glassPaneNode.on('mousedown', function(e) {
			e.stopImmediatePropagation();
		});
		this.$glassPaneNode.on(tab.BrowserSupport.get_mouseWheelEvent(), function(e1) {
			e1.preventDefault();
		});
		this.$spinnerNode = $('#loadingSpinner');
		if (tab.FeatureFlags.isEnabled('CommandCancellation')) {
			this.$createCancelButton();
		}
		this.$refcnt = 0;
		this.$isVisible = true;
		this.$isLocked = false;
	};
	$tab_WaitHandler.__typeName = 'tab.WaitHandler';
	global.tab.WaitHandler = $tab_WaitHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Commands.WebBaseCmd
	var $tab_WebBaseCmd$2 = function(TParam, TOut) {
		var $type = function() {
			this.$2$IsCheckedField = false;
			this.$2$IsDefaultField = false;
			this.$2$IsEnabledField = false;
			this.$2$IsRadioOnField = false;
			this.$2$IsVisibleField = false;
			ss.makeGenericType($tab_BaseCmd$2, [TParam, TOut]).call(this);
		};
		ss.registerGenericClassInstance($type, $tab_WebBaseCmd$2, [TParam, TOut], {
			get_isChecked: function WebBaseCmd$get_IsChecked() {
				return this.$2$IsCheckedField;
			},
			set_isChecked: function WebBaseCmd$set_IsChecked(value) {
				this.$2$IsCheckedField = value;
			},
			get_isDefault: function WebBaseCmd$get_IsDefault() {
				return this.$2$IsDefaultField;
			},
			set_isDefault: function WebBaseCmd$set_IsDefault(value) {
				this.$2$IsDefaultField = value;
			},
			get_isEnabled: function WebBaseCmd$get_IsEnabled() {
				return this.$2$IsEnabledField;
			},
			set_isEnabled: function WebBaseCmd$set_IsEnabled(value) {
				this.$2$IsEnabledField = value;
			},
			get_isRadioOn: function WebBaseCmd$get_IsRadioOn() {
				return this.$2$IsRadioOnField;
			},
			set_isRadioOn: function WebBaseCmd$set_IsRadioOn(value) {
				this.$2$IsRadioOnField = value;
			},
			get_isVisible: function WebBaseCmd$get_IsVisible() {
				return this.$2$IsVisibleField;
			},
			set_isVisible: function WebBaseCmd$set_IsVisible(value) {
				this.$2$IsVisibleField = value;
			},
			createCommand: function WebBaseCmd$CreateCommand() {
				return new $tab_$LocalClientCommand(ss.mkdel(this, function(t) {
					this.do$1();
				}));
			},
			transfer: function WebBaseCmd$Transfer(newCmdParams) {
				if (ss.isValue(newCmdParams)) {
					_.each(_.difference(Object.keys(newCmdParams), Object.keys(this.cmdParams)), ss.mkdel(this, function(key) {
						this.cmdParams[key] = newCmdParams[key];
					}));
				}
			},
			validateInvokeParams: function WebBaseCmd$ValidateInvokeParams() {
			},
			do$1: null,
			invoke: function WebBaseCmd$Invoke() {
				var deferred = $.Deferred();
				this.do$1();
				deferred.resolve();
				return deferred.promise();
			}
		}, function() {
			return ss.makeGenericType($tab_BaseCmd$2, [TParam, TOut]);
		}, function() {
			return [];
		});
		return $type;
	};
	$tab_WebBaseCmd$2.__typeName = 'tab.WebBaseCmd$2';
	ss.initGenericClass($tab_WebBaseCmd$2, $asm, 2);
	global.tab.WebBaseCmd$2 = $tab_WebBaseCmd$2;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WebCommandItemWrapper
	var $tab_WebCommandItemWrapper = function() {
		this.$webCommand = null;
		$tab_CommandItemWrapper.call(this);
	};
	$tab_WebCommandItemWrapper.__typeName = 'tab.WebCommandItemWrapper';
	$tab_WebCommandItemWrapper.$ctor1 = function(itemModel) {
		this.$webCommand = null;
		$tab_CommandItemWrapper.call(this, itemModel);
		var actualCommand = $tab_CommandSerializer.deserialize(this.get_command());
		if (ss.isValue(actualCommand) && $tab_WebCommandRegistry.hasCommand(actualCommand.commandName)) {
			this.$webCommand = $tab_WebCommandRegistry.createCommand(actualCommand.commandName);
			this.$webCommand.set_isChecked($tab_CommandItemWrapper.prototype.get_isChecked.call(this));
			this.$webCommand.set_isDefault($tab_CommandItemWrapper.prototype.get_isDefault.call(this));
			this.$webCommand.set_isEnabled($tab_CommandItemWrapper.prototype.get_enabled.call(this));
			this.$webCommand.set_isRadioOn($tab_CommandItemWrapper.prototype.get_isRadioOn.call(this));
			this.$webCommand.set_isVisible($tab_CommandItemWrapper.prototype.get_isVisible.call(this));
			this.$webCommand.transfer(actualCommand.commandParams);
		}
		else {
			ss.Debug.assert(true, 'WebCommandItemWrapper cannot be De-serialized');
		}
	};
	global.tab.WebCommandItemWrapper = $tab_WebCommandItemWrapper;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WebCommandRegistry
	var $tab_WebCommandRegistry = function() {
	};
	$tab_WebCommandRegistry.__typeName = 'tab.WebCommandRegistry';
	$tab_WebCommandRegistry.registerCommand = function WebCommandRegistry$RegisterCommand(commandName, classType) {
		$tab_WebCommandRegistry.$webCmdSingletonDictionary[commandName] = classType;
	};
	$tab_WebCommandRegistry.hasCommand = function WebCommandRegistry$HasCommand(commandName) {
		return ss.keyExists($tab_WebCommandRegistry.$webCmdSingletonDictionary, commandName);
	};
	$tab_WebCommandRegistry.createCommand = function WebCommandRegistry$CreateCommand(commandName) {
		if (ss.keyExists($tab_WebCommandRegistry.$webCmdSingletonDictionary, commandName)) {
			var commandType = $tab_WebCommandRegistry.$webCmdSingletonDictionary[commandName];
			return ss.createInstance(commandType);
		}
		throw new ss.Exception('creating unregistered web command');
	};
	$tab_WebCommandRegistry.createCommandWithParams = function WebCommandRegistry$CreateCommandWithParams(commandName, newCmdParams) {
		if (ss.keyExists($tab_WebCommandRegistry.$webCmdSingletonDictionary, commandName)) {
			var commandType = $tab_WebCommandRegistry.$webCmdSingletonDictionary[commandName];
			var newCmd = ss.createInstance(commandType);
			newCmd.transfer(newCmdParams);
			return newCmd;
		}
		throw new ss.Exception('creating unregistered web command');
	};
	global.tab.WebCommandRegistry = $tab_WebCommandRegistry;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WebZoneModel
	var $tab_WebZoneModel = function(parent) {
		this.$zoneModel = null;
		this.$2$NewWebZoneField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('webZone'.toString()));
		this.$zoneModel = parent.get_zone();
	};
	$tab_WebZoneModel.__typeName = 'tab.WebZoneModel';
	global.tab.WebZoneModel = $tab_WebZoneModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WindowTableCalcModel
	var $tab_WindowTableCalcModel = function(parent) {
		this.$3$ModelUpdatedField = null;
		$tab_TypeSpecificTableCalcModel.call(this, parent, new $tab_PresModelPathItem('windowTableCalcPresModel'.toString()));
	};
	$tab_WindowTableCalcModel.__typeName = 'tab.WindowTableCalcModel';
	global.tab.WindowTableCalcModel = $tab_WindowTableCalcModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WorkbookModel
	var $tab_WorkbookModel = function(parent) {
		this.$commands = null;
		this.$dashboardModel = null;
		this.$dataSchemaModel = null;
		this.$sheetsInfo = null;
		this.$dataConnectionModel = null;
		this.$connectionPromptModel = null;
		this.$2$NewDashboardField = null;
		this.$2$DashboardDeletedField = null;
		this.$2$SheetsChangedField = null;
		this.$2$UIModeChangedField = null;
		this.$2$NewDataConnectionPromptField = null;
		this.$2$DataConnectionPromptDismissedField = null;
		this.$2$SheetTypeChangedField = null;
		this.$2$FormatPaneModelField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('workbookPresModel'.toString()));
		this.$commands = new $tab_CommandsModel(this);
		this.$dataSchemaModel = new $tab_DataSchemaModel(this);
		this.$dataConnectionModel = new $tab_DataConnectionAreaModel(this);
		this.set_formatPaneModel(new $tab_FormatContainerModel(this));
	};
	$tab_WorkbookModel.__typeName = 'tab.WorkbookModel';
	$tab_WorkbookModel.add_workbookModifiedChanged = function WorkbookModel$add_WorkbookModifiedChanged(value) {
		$tab_WorkbookModel.$2$WorkbookModifiedChangedField = ss.delegateCombine($tab_WorkbookModel.$2$WorkbookModifiedChangedField, value);
	};
	$tab_WorkbookModel.remove_workbookModifiedChanged = function WorkbookModel$remove_WorkbookModifiedChanged(value) {
		$tab_WorkbookModel.$2$WorkbookModifiedChangedField = ss.delegateRemove($tab_WorkbookModel.$2$WorkbookModifiedChangedField, value);
	};
	$tab_WorkbookModel.$sheetTypeFromPresModel = function WorkbookModel$SheetTypeFromPresModel(workbookPresModel) {
		if ($tab_WorkbookModel.$hasSheetLayoutInfo(workbookPresModel)) {
			return workbookPresModel.dashboardPresModel.sheetLayoutInfo.sheetType;
		}
		return null;
	};
	$tab_WorkbookModel.$hasSheetLayoutInfo = function WorkbookModel$HasSheetLayoutInfo(workbookPresModel) {
		return ss.isValue(workbookPresModel) && ss.isValue(workbookPresModel.dashboardPresModel) && ss.isValue(workbookPresModel.dashboardPresModel.sheetLayoutInfo);
	};
	$tab_WorkbookModel.fireWorkbookModifiedChanged = function WorkbookModel$FireWorkbookModifiedChanged(modified) {
		if (!ss.staticEquals($tab_WorkbookModel.$2$WorkbookModifiedChangedField, null)) {
			$tab_WorkbookModel.$2$WorkbookModifiedChangedField(modified);
		}
		$tab_AckbarEventsHelper.get().onWorkbookModifiedChanged(modified);
	};
	global.tab.WorkbookModel = $tab_WorkbookModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WorkgroupDataAlert
	var $tab_WorkgroupDataAlert = function(presModel, owner) {
		this.$presModel = null;
		this.$owner = null;
		this.$presModel = presModel;
		this.$owner = owner;
	};
	$tab_WorkgroupDataAlert.__typeName = 'tab.WorkgroupDataAlert';
	global.tab.WorkgroupDataAlert = $tab_WorkgroupDataAlert;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WorkgroupDataSource
	var $tab_WorkgroupDataSource = function(presModel, project, owner) {
		this.$presModel = null;
		this.$project = null;
		this.$owner = null;
		this.$presModel = presModel;
		this.$project = project;
		this.$owner = owner;
	};
	$tab_WorkgroupDataSource.__typeName = 'tab.WorkgroupDataSource';
	$tab_WorkgroupDataSource.$filePathToBasename = function WorkgroupDataSource$FilePathToBasename(file) {
		var basenameMatch = (ss.isValue(file) ? file.match($tab_WorkgroupDataSource.$basenameRegexp) : null);
		return (ss.isValue(basenameMatch) ? basenameMatch[1] : file);
	};
	global.tab.WorkgroupDataSource = $tab_WorkgroupDataSource;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WorkgroupServerCommands
	var $tab_WorkgroupServerCommands = function() {
	};
	$tab_WorkgroupServerCommands.__typeName = 'tab.WorkgroupServerCommands';
	$tab_WorkgroupServerCommands.get_getSessionInfo = function WorkgroupServerCommands$get_GetSessionInfo() {
		var deferred = $.Deferred();
		if (!tsConfig.is_guest) {
			$tab_XhrUtil.helper($tab_VizPortalServer.createRequest('getSessionInfo', null, function(sessionInfo) {
				deferred.resolve(sessionInfo);
			}, function(error) {
				deferred.reject(error);
			}));
		}
		else {
			ss.Debug.fail("We don't expect to use this property with guest access, since we only intend to call it when in Tableau Online.");
			deferred.reject();
		}
		return deferred;
	};
	$tab_WorkgroupServerCommands.getWritableProjects = function WorkgroupServerCommands$GetWritableProjects(callback) {
		var projects = [];
		$tab_$VizPortalGetItemsUtil.$fetchItems(Object).call(null, 'getWritableProjects', new $tab_$FetchParamsBuilder(), ss.mkdel(this, function(pageResult) {
			var pageOfItems = $tab_$VizPortalGetItemsUtil.$resolvePageOfItems(Object).call(null, pageResult, $tab_WorkgroupServerCommands.$parseProjects);
			ss.arrayAddRange(projects, pageOfItems.items);
			return pageOfItems;
		}), function() {
			callback(projects);
		});
	};
	$tab_WorkgroupServerCommands.extendWorkgroupSession = function WorkgroupServerCommands$ExtendWorkgroupSession() {
		if (!tsConfig.is_guest) {
			$tab_XhrUtil.helper($tab_VizPortalServer.createRequest('getSessionInfo', null, function() {
			}, function() {
			}));
		}
	};
	$tab_WorkgroupServerCommands.getSchedules = function WorkgroupServerCommands$GetSchedules(callback) {
		var schedules = [];
		$tab_$VizPortalGetItemsUtil.$fetchItems($tab_Schedule).call(null, 'getSchedules', new $tab_$FetchParamsBuilder(), ss.mkdel(this, function(pageResult) {
			var pageOfItems = $tab_$VizPortalGetItemsUtil.$resolvePageOfItems($tab_Schedule).call(null, pageResult, $tab_WorkgroupServerCommands.$parseSchedules);
			ss.arrayAddRange(schedules, pageOfItems.items);
			return pageOfItems;
		}), function() {
			callback(schedules);
		});
	};
	$tab_WorkgroupServerCommands.getSiteUsers = function WorkgroupServerCommands$GetSiteUsers(text, callback) {
		var users = [];
		$tab_$VizPortalGetItemsUtil.$fetchItems(Object).call(null, 'getUsers', $tab_WorkgroupServerCommands.$createGetSiteUsersParams(text), ss.mkdel(this, function(pageResult) {
			var pageOfItems = $tab_$VizPortalGetItemsUtil.$resolvePageOfItems(Object).call(null, pageResult, $tab_WorkgroupServerCommands.$parseSiteUsers);
			_.each(pageOfItems.items, function(user) {
				users.push(user);
			});
			return pageOfItems;
		}), function() {
			callback(users);
		});
	};
	$tab_WorkgroupServerCommands.getDataAlertForDataAlertId = function WorkgroupServerCommands$GetDataAlertForDataAlertId(viewId, dataAlertId) {
		var deferred = $.Deferred();
		var dataAlerts = [];
		$tab_$VizPortalGetItemsUtil.$fetchItems$1(Object).call(null, 'getDataAlerts', $tab_WorkgroupServerCommands.$createGetDataAlertsParams(0, viewId, dataAlertId), ss.mkdel(this, function(pageResult) {
			var pageOfDataAlerts = $tab_$VizPortalGetItemsUtil.$resolvePageOfItems(Object).call(null, pageResult, $tab_WorkgroupServerCommands.$parseDataAlerts);
			var userMap = _.indexBy($tab_WorkgroupServerCommands.$parseSiteUsers(pageResult), 'id');
			if (ss.isValue(pageOfDataAlerts)) {
				dataAlerts = dataAlerts.concat(_.map(pageOfDataAlerts.items, function(pm) {
					var owner = userMap[pm.ownerId];
					return new $tab_WorkgroupDataAlert(pm, owner);
				}));
			}
			return pageOfDataAlerts;
		}), function() {
			deferred.resolve(dataAlerts);
		}, function() {
			deferred.reject();
		});
		return deferred;
	};
	$tab_WorkgroupServerCommands.getUsersForDataAlertId = function WorkgroupServerCommands$GetUsersForDataAlertId(dataAlertId) {
		var deferred = $.Deferred();
		var users = [];
		$tab_$VizPortalGetItemsUtil.$fetchItems$1(Object).call(null, 'getUsersForDataAlert', $tab_WorkgroupServerCommands.$createGetUsersForDataAlertIdParams(0, dataAlertId), ss.mkdel(this, function(pageResult) {
			var pageOfItems = $tab_$VizPortalGetItemsUtil.$resolvePageOfItems(Object).call(null, pageResult, $tab_WorkgroupServerCommands.$parseSiteUsers);
			if (ss.isValue(pageOfItems)) {
				_.each(pageOfItems.items, function(user) {
					users.push(user);
				});
			}
			return pageOfItems;
		}), function() {
			deferred.resolve(users);
		}, function() {
			deferred.reject();
		});
		return deferred;
	};
	$tab_WorkgroupServerCommands.fetchPageOfDataSources = function WorkgroupServerCommands$FetchPageOfDataSources(index, ordering, matches) {
		var deferred = $.Deferred();
		$tab_$VizPortalGetItemsUtil.$fetchPage(Object).call(null, 'getDatasources', $tab_WorkgroupServerCommands.$createGetDataSourcesParams(index, ordering, matches), ss.mkdel(this, function(pageResult) {
			var pageOfItems = $tab_$VizPortalGetItemsUtil.$resolvePageOfItems(Object).call(null, pageResult, $tab_WorkgroupServerCommands.$parseDatasources);
			var projectMap = _.indexBy($tab_WorkgroupServerCommands.$parseProjects(pageResult), 'id');
			var userMap = _.indexBy($tab_WorkgroupServerCommands.$parseSiteUsers(pageResult), 'id');
			var pageOfDataSources = { items: _.map(pageOfItems.items, function(pm) {
				var project = projectMap[pm.projectId.toString()];
				var owner = userMap[pm.ownerId.toString()];
				return new $tab_WorkgroupDataSource(pm, project, owner);
			}), moreItems: pageOfItems.moreItems };
			deferred.resolve(pageOfDataSources);
			return pageOfItems;
		}));
		return deferred.promise();
	};
	$tab_WorkgroupServerCommands.getDatasources = function WorkgroupServerCommands$GetDatasources(callback, ordering, matches) {
		var serverDatasources = [];
		$tab_$VizPortalGetItemsUtil.$fetchItems(Object).call(null, 'getDatasources', $tab_WorkgroupServerCommands.$createGetDataSourcesParams(0, ordering, matches), ss.mkdel(this, function(pageResult) {
			var pageOfDatasources = $tab_$VizPortalGetItemsUtil.$resolvePageOfItems(Object).call(null, pageResult, $tab_WorkgroupServerCommands.$parseDatasources);
			var projectMap = _.indexBy($tab_WorkgroupServerCommands.$parseProjects(pageResult), 'id');
			var userMap = _.indexBy($tab_WorkgroupServerCommands.$parseSiteUsers(pageResult), 'id');
			if (ss.isValue(pageOfDatasources)) {
				serverDatasources = serverDatasources.concat(_.map(pageOfDatasources.items, function(pm) {
					var project = projectMap[pm.projectId.toString()];
					var owner = userMap[pm.ownerId.toString()];
					return new $tab_WorkgroupDataSource(pm, project, owner);
				}));
			}
			return pageOfDatasources;
		}), function() {
			callback(serverDatasources);
		});
	};
	$tab_WorkgroupServerCommands.fetchPageOfSiteUsers = function WorkgroupServerCommands$FetchPageOfSiteUsers(text, index) {
		var deferred = $.Deferred();
		var fetchParamsBuilder = $tab_WorkgroupServerCommands.$createGetSiteUsersParams(text);
		fetchParamsBuilder.set_$index(index);
		fetchParamsBuilder.get_$params()['includeGuestIfEnabled'] = false;
		$tab_$VizPortalGetItemsUtil.$fetchPage(Object).call(null, 'getUsers', fetchParamsBuilder, ss.mkdel(this, function(pageResult) {
			var pageOfItems = $tab_$VizPortalGetItemsUtil.$resolvePageOfItems(Object).call(null, pageResult, $tab_WorkgroupServerCommands.$parseSiteUsers);
			deferred.resolve(pageOfItems);
			return pageOfItems;
		}));
		return deferred.promise();
	};
	$tab_WorkgroupServerCommands.$createGetSiteUsersParams = function WorkgroupServerCommands$CreateGetSiteUsersParams(text) {
		var userFetchOrder = { field: 'displayName', ascending: true };
		var userFilter = { operator: 'and', clauses: [{ operator: 'matches', value: text }] };
		return new $tab_$FetchParamsBuilder.$ctor2(userFetchOrder, userFilter);
	};
	$tab_WorkgroupServerCommands.$createGetDataAlertsParams = function WorkgroupServerCommands$CreateGetDataAlertsParams(index, viewId, dataAlertId) {
		var filter = { operator: 'and', clauses: [{ field: 'viewId', operator: 'eq', value: viewId }, { field: 'id', operator: 'eq', value: dataAlertId }] };
		var ordering = { field: 'title', ascending: true };
		var fetchParamsBuilder = new $tab_$FetchParamsBuilder.$ctor2(ordering, filter);
		fetchParamsBuilder.set_$index(index);
		return fetchParamsBuilder;
	};
	$tab_WorkgroupServerCommands.$createGetUsersForDataAlertIdParams = function WorkgroupServerCommands$CreateGetUsersForDataAlertIdParams(index, dataAlertId) {
		var ordering = { field: 'displayName', ascending: true };
		var fetchParamsBuilder = new $tab_$FetchParamsBuilder.$ctor2(ordering, null);
		fetchParamsBuilder.set_$index(index);
		fetchParamsBuilder.get_$params()['dataAlertId'] = dataAlertId;
		return fetchParamsBuilder;
	};
	$tab_WorkgroupServerCommands.$createGetDataSourcesParams = function WorkgroupServerCommands$CreateGetDataSourcesParams(index, ordering, matches) {
		var publishedDSFilter = { operator: 'and', clauses: [{ field: 'isPublished', operator: 'eq', value: true }] };
		if (ss.isValue(matches)) {
			publishedDSFilter.clauses = publishedDSFilter.clauses.concat([{ operator: 'matches', value: matches }]);
		}
		var fetchParamsBuilder = new $tab_$FetchParamsBuilder.$ctor1(ordering, publishedDSFilter);
		fetchParamsBuilder.set_$index(index);
		return fetchParamsBuilder;
	};
	$tab_WorkgroupServerCommands.setUserEmail = function WorkgroupServerCommands$SetUserEmail(email, success, failure) {
		$tab_WorkgroupServerCommands.$getSystemUserId(function(systemUserId) {
			var methodParams = ss.mkdict(['userId', systemUserId, 'email', email]);
			$tab_XhrUtil.helper($tab_VizPortalServer.createRequest('updateUserEmail', methodParams, success, failure));
		}, failure);
	};
	$tab_WorkgroupServerCommands.$getSystemUserId = function WorkgroupServerCommands$GetSystemUserId(success, failure) {
		var username = tsConfig.current_user_name;
		var domainName = tsConfig.current_user_domain_name;
		var filterClauses = [{ field: 'username', operator: 'eq', value: username }, { field: 'domainName', operator: 'eq', value: domainName }];
		var getServerUsersParams = ss.mkdict(['filter', { clauses: filterClauses }]);
		$tab_XhrUtil.helper($tab_VizPortalServer.createRequest('getServerUsers', getServerUsersParams, function(result) {
			var users = result['users'];
			if (ss.isValue(users) && users.length > 0 && ss.keyExists(users[0], 'id')) {
				var systemUserId = ss.cast(users[0]['id'], String);
				success(systemUserId);
			}
			else {
				failure($tab_VizPortalServer.$firstErrorCodeIn(result));
			}
		}, failure));
	};
	$tab_WorkgroupServerCommands.createSubscription = function WorkgroupServerCommands$CreateSubscription(subject, workbook, schedule, dataConditionType, success, failure) {
		var methodParams = $tab_WorkgroupServerCommands.$buildCreateSubscriptionRequestParams(schedule.get_schedulePresModel().id, subject, workbook, ss.coalesce(dataConditionType, 'Always'));
		$tab_XhrUtil.helper($tab_VizPortalServer.createRequest('createSubscription', methodParams, success, failure));
	};
	$tab_WorkgroupServerCommands.createSubscriptions = function WorkgroupServerCommands$CreateSubscriptions(subject, workbook, userIds, schedule, dataConditionType, success, failure, error) {
		var methodParams = $tab_WorkgroupServerCommands.$buildCreateSubscriptionRequestParams(schedule.get_schedulePresModel().id, subject, workbook, ss.coalesce(dataConditionType, 'Always'));
		methodParams['userIds'] = userIds;
		$tab_XhrUtil.helper($tab_VizPortalServer.createRequestWithPartialFailureHandling('createSubscriptions', methodParams, success, failure, error));
	};
	$tab_WorkgroupServerCommands.createDataAlert = function WorkgroupServerCommands$CreateDataAlert(dataAlert, success, failure) {
		var methodParams = $tab_WorkgroupServerCommands.buildCreateDataAlertRequestParams(dataAlert);
		$tab_XhrUtil.helper($tab_VizPortalServer.createRequest('createDataAlert', methodParams, success, failure));
	};
	$tab_WorkgroupServerCommands.updateDataAlert = function WorkgroupServerCommands$UpdateDataAlert(dataAlert, dataAlertId, usersToAdd, usersToRemove, success, failure) {
		var methodParams = $tab_WorkgroupServerCommands.buildUpdateDataAlertRequestParams(dataAlert, dataAlertId, usersToAdd.map(function(u) {
			return u.id.toString();
		}), usersToRemove.map(function(u1) {
			return u1.id.toString();
		}));
		$tab_XhrUtil.helper($tab_VizPortalServer.createRequest('updateDataAlert', methodParams, success, failure));
	};
	$tab_WorkgroupServerCommands.buildCreateDataAlertRequestParams = function WorkgroupServerCommands$BuildCreateDataAlertRequestParams(dataAlert) {
		var contextType;
		var contextId;
		if (ss.isValue(tsConfig.current_custom_view_id)) {
			contextType = 'customizedView';
			contextId = tsConfig.current_custom_view_id + '';
		}
		else {
			contextType = 'view';
			contextId = tsConfig.current_view_id;
		}
		var methodParams = ss.mkdict(['title', dataAlert.get_title(), 'dataAlertSpecification', JSON.stringify(dataAlert.get_measurePresModel()), 'dataAlertCondition', JSON.stringify(dataAlert.get_conditionPresModel()), 'notificationIntervalInMinutes', dataAlert.get_notificationIntervalInMinutes(), 'userIds', dataAlert.get_userIds(), 'context', ss.mkdict(['contextType', contextType, 'id', contextId])]);
		return methodParams;
	};
	$tab_WorkgroupServerCommands.buildUpdateDataAlertRequestParams = function WorkgroupServerCommands$BuildUpdateDataAlertRequestParams(dataAlert, dataAlertId, userIdsToAdd, userIdsToRemove) {
		var methodParams = ss.mkdict(['dataAlertId', dataAlertId, 'title', dataAlert.get_title(), 'dataAlertSpecification', JSON.stringify(dataAlert.get_measurePresModel()), 'dataAlertCondition', JSON.stringify(dataAlert.get_conditionPresModel()), 'notificationIntervalInMinutes', dataAlert.get_notificationIntervalInMinutes(), 'userIdsToAdd', userIdsToAdd, 'userIdsToRemove', userIdsToRemove]);
		return methodParams;
	};
	$tab_WorkgroupServerCommands.logOff = function WorkgroupServerCommands$LogOff(failure) {
		var success = function(result) {
			var redirectUrl = ss.cast(result['redirectUrl'], String);
			tab.WindowHelper.setLocationHref(window.self, (ss.isValue(redirectUrl) ? redirectUrl : '/'));
		};
		$tab_XhrUtil.helper($tab_VizPortalServer.createRequest('logout', {}, success, failure));
	};
	$tab_WorkgroupServerCommands.createCommentingServer = function WorkgroupServerCommands$CreateCommentingServer() {
		return new $tab_CommentingServer($tab_VizPortalServer.$createRequestInternal, $tab_CommandController.get().get_legacySession());
	};
	$tab_WorkgroupServerCommands.$buildCreateSubscriptionRequestParams = function WorkgroupServerCommands$BuildCreateSubscriptionRequestParams(scheduleId, subject, workbook, dataConditionType) {
		return ss.mkdict(['scheduleId', scheduleId, 'subject', subject.trim(), 'targetType', (workbook ? 'Workbook' : 'View'), 'targetId', (workbook ? tsConfig.current_workbook_id : tsConfig.current_view_id), 'customizedViewId', tsConfig.current_custom_view_id, 'dataConditionType', dataConditionType]);
	};
	$tab_WorkgroupServerCommands.$parseProjects = function WorkgroupServerCommands$ParseProjects(result) {
		return _.map(result['projects'], function(projectJson) {
			return projectJson;
		});
	};
	$tab_WorkgroupServerCommands.$parseSchedules = function WorkgroupServerCommands$ParseSchedules(result) {
		return _.map(result['schedules'], function(scheduleJson) {
			return new $tab_Schedule(scheduleJson);
		});
	};
	$tab_WorkgroupServerCommands.$parseSiteUsers = function WorkgroupServerCommands$ParseSiteUsers(result) {
		return _.map(result['users'], function(userJson) {
			return { username: userJson['username'].toString(), friendlyName: userJson['displayName'].toString(), id: parseInt(userJson['id'].toString()), hasEmail: userJson['hasEmail'] };
		});
	};
	$tab_WorkgroupServerCommands.$parseDataAlerts = function WorkgroupServerCommands$ParseDataAlerts(result) {
		return ss.cast(result['dataAlerts'], Array);
	};
	$tab_WorkgroupServerCommands.$parseDatasources = function WorkgroupServerCommands$ParseDatasources(result) {
		return ss.cast(result['datasources'], Array);
	};
	global.tab.WorkgroupServerCommands = $tab_WorkgroupServerCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WorkgroupServerErrorCode
	var $tab_WorkgroupServerErrorCode = function() {
	};
	$tab_WorkgroupServerErrorCode.__typeName = 'tab.WorkgroupServerErrorCode';
	global.tab.WorkgroupServerErrorCode = $tab_WorkgroupServerErrorCode;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WorkgroupServerRequest
	var $tab_WorkgroupServerRequest = function(methodName, methodParams, success, error) {
		this.methodName = null;
		this.methodParams = null;
		this.success = null;
		this.error = null;
		this.methodName = methodName;
		this.methodParams = methodParams;
		this.success = success;
		this.error = error;
	};
	$tab_WorkgroupServerRequest.__typeName = 'tab.WorkgroupServerRequest';
	global.tab.WorkgroupServerRequest = $tab_WorkgroupServerRequest;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WorksheetServerCommands
	var $tab_WorksheetServerCommands = function() {
	};
	$tab_WorksheetServerCommands.__typeName = 'tab.WorksheetServerCommands';
	$tab_WorksheetServerCommands.revert = function WorksheetServerCommands$Revert() {
		var c = $tab_CommandUtils.newCommand$1('revert-workbook', null);
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create(c, 'immediately'));
	};
	$tab_WorksheetServerCommands.undo = function WorksheetServerCommands$Undo() {
		var c = $tab_CommandUtils.newCommand('undo', null);
		c.commandParams = {};
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create(c, 'immediately'));
	};
	$tab_WorksheetServerCommands.undoToPosition = function WorksheetServerCommands$UndoToPosition(historyPosition) {
		var c = $tab_CommandUtils.newCommand('undo', null);
		c.commandParams = $tab_WorksheetServerCommands.$createHistoryParam(historyPosition);
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create(c, 'immediately'));
	};
	$tab_WorksheetServerCommands.redo = function WorksheetServerCommands$Redo() {
		var c = $tab_CommandUtils.newCommand('redo', null);
		c.commandParams = {};
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create(c, 'immediately'));
	};
	$tab_WorksheetServerCommands.redoToPosition = function WorksheetServerCommands$RedoToPosition(historyPosition) {
		var c = $tab_CommandUtils.newCommand('redo', null);
		c.commandParams = $tab_WorksheetServerCommands.$createHistoryParam(historyPosition);
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create(c, 'immediately'));
	};
	$tab_WorksheetServerCommands.clearFuture = function WorksheetServerCommands$ClearFuture() {
		var c = $tab_CommandUtils.newCommand('clear-future', null);
		c.commandParams = {};
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create(c, 'immediately'));
	};
	$tab_WorksheetServerCommands.$createHistoryParam = function WorksheetServerCommands$CreateHistoryParam(historyPosition) {
		var cmdParams = {};
		cmdParams['undoPosition'] = historyPosition;
		return cmdParams;
	};
	global.tab.WorksheetServerCommands = $tab_WorksheetServerCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WorldCheckpointHolder
	var $tab_WorldCheckpointHolder = function(commonDialogProvider) {
		this.$commonDialogProvider = null;
		this.$worldCheckpoint = null;
		this.currentWorldDiffersFromCheckpoint = false;
		this.$commonDialogProvider = commonDialogProvider;
		this.currentWorldDiffersFromCheckpoint = false;
	};
	$tab_WorldCheckpointHolder.__typeName = 'tab.WorldCheckpointHolder';
	global.tab.WorldCheckpointHolder = $tab_WorldCheckpointHolder;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WorldUpdateInterceptor
	var $tab_WorldUpdateInterceptor = function() {
		this.$1$OnBootstrapResponseField = null;
		this.$1$OnCommandResponseField = null;
		this.$1$OnProgressiveLoadCompleteField = null;
	};
	$tab_WorldUpdateInterceptor.__typeName = 'tab.WorldUpdateInterceptor';
	$tab_WorldUpdateInterceptor.get = function WorldUpdateInterceptor$Get() {
		return $tab_WorldUpdateInterceptor.$instance.value();
	};
	global.tab.WorldUpdateInterceptor = $tab_WorldUpdateInterceptor;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WorldUpdateServerCommands
	var $tab_WorldUpdateServerCommands = function() {
	};
	$tab_WorldUpdateServerCommands.__typeName = 'tab.WorldUpdateServerCommands';
	$tab_WorldUpdateServerCommands.getWorldUpdate = function WorldUpdateServerCommands$GetWorldUpdate(onFinish) {
		var cmd = $tab_CommandUtils.newCommand('get-world-update', $tab_WorldUpdateServerCommands.$createGetWorldUpdateParams());
		$tab_ServerCommands.executeServerCommand(cmd, 'immediately', ss.cast(onFinish, Function), ss.cast(onFinish, Function));
	};
	$tab_WorldUpdateServerCommands.$createGetWorldUpdateParams = function WorldUpdateServerCommands$CreateGetWorldUpdateParams() {
		var cmdParams = {};
		cmdParams['sheet'] = tsConfig.current_sheet_name;
		return cmdParams;
	};
	global.tab.WorldUpdateServerCommands = $tab_WorldUpdateServerCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.XhrUtil
	var $tab_XhrUtil = function() {
	};
	$tab_XhrUtil.__typeName = 'tab.XhrUtil';
	$tab_XhrUtil.get_currentTabName = function XhrUtil$get_CurrentTabName() {
		return $tab_XhrUtil.$currentTabName;
	};
	$tab_XhrUtil.set_currentTabName = function XhrUtil$set_CurrentTabName(value) {
		$tab_XhrUtil.$currentTabName = value;
	};
	$tab_XhrUtil.helper = function XhrUtil$Helper(args, handler) {
		var xhr = new $tab_XhrUtil();
		if (!ss.isValue(args.success) && ss.isValue(handler)) {
			args.success = handler.get_successDelegate();
		}
		if (!ss.isValue(args.complete) && ss.isValue(handler)) {
			args.complete = handler.get_completedDelegate();
		}
		if (!ss.isValue(args.error) && ss.isValue(handler)) {
			args.error = handler.get_errorDelegate();
		}
		return xhr.request(args);
	};
	$tab_XhrUtil.getMultipartData = function XhrUtil$GetMultipartData(file, nameValues) {
		var initBoundary = $tab_XhrUtil.randomString();
		var strBoundary = '--' + initBoundary;
		var CRLF = '\r\n';
		var sb = new ss.StringBuilder();
		if (ss.isValue(file)) {
			sb.append(strBoundary);
			sb.append(CRLF);
			sb.append('Content-Disposition: form-data; name="');
			sb.append(file['name']);
			sb.append('"');
			if ('filename' in file) {
				sb.append('; filename="');
				sb.append(file['filename']);
				sb.append('"');
			}
			sb.append(CRLF);
			sb.append('Content-Type: ');
			sb.append(file['contentType']);
			sb.append(CRLF);
			sb.append(CRLF);
			sb.append(file['content']);
			sb.append(CRLF);
		}
		if (ss.isValue(nameValues)) {
			var $t1 = new ss.ObjectEnumerator(nameValues);
			try {
				while ($t1.moveNext()) {
					var e = $t1.current();
					sb.append(strBoundary);
					sb.append(CRLF);
					sb.append('Content-Disposition: form-data; name="');
					sb.append(e.key);
					sb.append('"');
					sb.append(CRLF);
					sb.append(CRLF);
					if (ss.isInstanceOfType(e.value, String)) {
						sb.append(e.value);
					}
					else {
						sb.append(JSON.stringify(e.value));
					}
					sb.append(CRLF);
				}
			}
			finally {
				$t1.dispose();
			}
		}
		sb.append(strBoundary);
		sb.append('--');
		sb.append(CRLF);
		var result = {};
		result.header = initBoundary;
		result.body = sb.toString();
		return result;
	};
	$tab_XhrUtil.randomString = function XhrUtil$RandomString() {
		var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz';
		var stringLength = 8;
		var randomString = '';
		for (var i = 0; i < stringLength; i++) {
			var ran = Math.random() * chars.length;
			var rnum = ran | 0;
			randomString += chars.substring(rnum, rnum + 1);
		}
		return randomString;
	};
	global.tab.XhrUtil = $tab_XhrUtil;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ZoneCommonModel
	var $tab_ZoneCommonModel = function(parent, zoneId) {
		this.$zoneStyleModel = null;
		this.$contentStyleModel = null;
		this.$2$ResizeZoneField = null;
		this.$2$ChangeZoneTitleVisibilityField = null;
		this.$2$ChangeZoneFloatingStateField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem(zoneId.toString(), 0));
		this.$zoneStyleModel = new $tab_StyledBoxModel(this);
		this.$contentStyleModel = new $tab_StyledBoxModel(this);
	};
	$tab_ZoneCommonModel.__typeName = 'tab.ZoneCommonModel';
	global.tab.ZoneCommonModel = $tab_ZoneCommonModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ZoneContentWrapperModel
	var $tab_ZoneContentWrapperModel = function(parent) {
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('presModelHolder'.toString()));
	};
	$tab_ZoneContentWrapperModel.__typeName = 'tab.ZoneContentWrapperModel';
	global.tab.ZoneContentWrapperModel = $tab_ZoneContentWrapperModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ZoneModel
	var $tab_ZoneModel = function(parent, dashboard, zoneId) {
		this.$dashboardModel = null;
		this.$zoneContentModel = null;
		this.$zoneCommonModel = null;
		this.$contentWrapperModel = null;
		this.$chromeCommands = null;
		this.$convertedBGColor = null;
		this.$containsLegacyQuickFilter = false;
		this.$containsLegacyParameter = false;
		this.$2$NewZoneContentField = null;
		this.$2$RemoveZoneContentField = null;
		this.$2$UpdateZoneField = null;
		this.$2$ChildrenAddedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem(zoneId.toString(), 0));
		this.$dashboardModel = dashboard;
		this.$zoneCommonModel = new $tab_ZoneCommonModel(this, zoneId);
		this.$chromeCommands = new $tab_CommandsModel(this);
	};
	$tab_ZoneModel.__typeName = 'tab.ZoneModel';
	$tab_ZoneModel.$typeOfContent = function ZoneModel$TypeOfContent(zonePresModel) {
		var content = zonePresModel.presModelHolder;
		if (ss.isNullOrUndefined(content)) {
			return null;
		}
		if (ss.getKeyCount(content) === 1) {
			var $t1 = ss.getEnumerator(Object.keys(content));
			try {
				while ($t1.moveNext()) {
					var key = $t1.current();
					return key;
				}
			}
			finally {
				$t1.dispose();
			}
		}
		return '';
	};
	$tab_ZoneModel.getContent = function ZoneModel$GetContent(zonePresModel, contentType) {
		if (ss.isNullOrUndefined(zonePresModel) || ss.isNullOrUndefined(zonePresModel.presModelHolder)) {
			return null;
		}
		if (!(contentType in zonePresModel.presModelHolder)) {
			tab.Logger.lazyGetLogger($tab_ZoneModel).warn('Content type %s not found in zonePresModel: %o', [contentType, zonePresModel]);
			return null;
		}
		return zonePresModel.presModelHolder[contentType];
	};
	$tab_ZoneModel.$parseJson = function ZoneModel$ParseJson(o) {
		return (ss.isNullOrEmptyString(o) ? null : JSON.parse(o));
	};
	$tab_ZoneModel.$getLegendTypeFromZoneType = function ZoneModel$GetLegendTypeFromZoneType(zt) {
		switch (zt) {
			case 'color': {
				return 'color';
			}
			case 'shape': {
				return 'shape';
			}
			case 'size': {
				return 'size';
			}
			case 'map': {
				return 'map';
			}
		}
		tab.Logger.getLogger($tab_ZoneModel).warn('Unsupported legend type: %s', [zt]);
		return 'color';
	};
	global.tab.ZoneModel = $tab_ZoneModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ZonesModel
	var $tab_ZonesModel = function(parent) {
		this.$zoneModels = null;
		this.$zoneChildren = null;
		this.$cachedZoneModelArray = null;
		this.$2$NewZoneField = null;
		this.$2$RemovedZoneField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('zones'.toString()));
		this.set_zonePresModels({});
		this.$zoneModels = {};
		this.$zoneChildren = {};
	};
	$tab_ZonesModel.__typeName = 'tab.ZonesModel';
	$tab_ZonesModel.$zoneKey = function ZonesModel$ZoneKey(zoneId) {
		return 'z_' + zoneId;
	};
	global.tab.ZonesModel = $tab_ZonesModel;
	ss.initInterface($tab_IRemoteCommandHandler, $asm, { add_commmandSucceeded: null, remove_commmandSucceeded: null, add_commandFailed: null, remove_commandFailed: null, executeCommand: null, cancelAllCommands: null });
	ss.initClass($tab_$BaseSessionCommandHandler, $asm, {
		add_commmandSucceeded: function BaseSessionCommandHandler$add_CommmandSucceeded(value) {
			this.$1$CommmandSucceededField = ss.delegateCombine(this.$1$CommmandSucceededField, value);
		},
		remove_commmandSucceeded: function BaseSessionCommandHandler$remove_CommmandSucceeded(value) {
			this.$1$CommmandSucceededField = ss.delegateRemove(this.$1$CommmandSucceededField, value);
		},
		add_commandFailed: function BaseSessionCommandHandler$add_CommandFailed(value) {
			this.$1$CommandFailedField = ss.delegateCombine(this.$1$CommandFailedField, value);
		},
		remove_commandFailed: function BaseSessionCommandHandler$remove_CommandFailed(value) {
			this.$1$CommandFailedField = ss.delegateRemove(this.$1$CommandFailedField, value);
		},
		$getRemoteException: function BaseSessionCommandHandler$GetRemoteException(o) {
			var response = o['vqlCmdResponse'.toString()];
			if (ss.isValue(response) && response.cmdResultList.length > 0) {
				var resultPM = response.cmdResultList[0];
				var result = resultPM.commandReturn;
				if (ss.isValue(result) && ss.keyExists(result, 'commandValidationPresModel')) {
					var validation = result['commandValidationPresModel'];
					if (!validation.valid) {
						return new ss.Exception(ss.formatString('{0}: {1}', resultPM.commandName, validation.errorMessage));
					}
				}
			}
			return null;
		},
		cancelAllCommands: function BaseSessionCommandHandler$CancelAllCommands(successHandler, failureHandler) {
			if (!tab.FeatureFlags.isEnabled('CommandCancellation')) {
				ss.Debug.assert(false, 'Should not be able to call this while feature flag is disabled.');
				return;
			}
			this.$session.cancelAllCommands(function(o) {
				successHandler(o);
			}, failureHandler);
		},
		executeCommand: function BaseSessionCommandHandler$ExecuteCommand(c, success, failure) {
			for (var $t1 = 0; $t1 < this.$commandThrottlers.length; $t1++) {
				var throttler = this.$commandThrottlers[$t1];
				if (throttler.$processCommand(c, success, failure) === 0) {
					return;
				}
			}
			var metricsParams = {};
			metricsParams['cn'] = c.commandName;
			var mc = tabBootstrap.MetricsController.createContext('EXEREM'.toString(), 8, metricsParams);
			var localCommandSeqID = this.$commandSequenceId;
			var internalFailure = ss.mkdel(this, function(x) {
				mc.dispose();
				var errMsg = ss.formatString("Command '{0}' (namespace: '{1}') encountered error: '{2}'", c.commandName, c.commandNamespace, x.get_message());
				tab.Log.get(this).error(errMsg, []);
				if (ss.isValue(this.$1$CommandFailedField)) {
					this.$1$CommandFailedField(localCommandSeqID, c, x);
				}
				failure(x);
			});
			var internalSuccess = ss.mkdel(this, function(o) {
				mc.dispose();
				var remoteException = this.$getRemoteException(o);
				if (ss.isNullOrUndefined(remoteException)) {
					if (ss.isValue(this.$1$CommmandSucceededField)) {
						this.$1$CommmandSucceededField(localCommandSeqID, c, o);
					}
					var pm = $tab_PresentationModel.fromCommand(o, c);
					success(pm);
				}
				else {
					internalFailure(remoteException);
				}
			});
			tab.Log.get(this).debug('Executing command %o', [c]);
			this.$session.executeServerCommand(c, internalSuccess, internalFailure);
			++this.$commandSequenceId;
		},
		$installCommandThrottling$1: function BaseSessionCommandHandler$InstallCommandThrottling(commandNS, commandName, throttleRate) {
			var $t1 = new $tab_CommandThrottlerTarget();
			$t1.commandNamespace = commandNS;
			$t1.commandName = commandName;
			this.$installCommandThrottling([$t1], throttleRate);
		},
		$installCommandThrottling: function BaseSessionCommandHandler$InstallCommandThrottling(targets, throttleRate) {
			this.$installCommandThrottling$2(targets, throttleRate, null, null);
		},
		$installCommandThrottling$2: function BaseSessionCommandHandler$InstallCommandThrottling(targets, throttleRate, pendingCommandThreshold, pendingCommandDelay) {
			var throttler = new $tab_$CommandThrottler(this, targets, throttleRate, pendingCommandThreshold, pendingCommandDelay);
			throttler.add_$commandDropped(ss.mkdel(this, this.$handleDroppedCommand));
			this.$commandThrottlers.push(throttler);
		},
		$handleDroppedCommand: function BaseSessionCommandHandler$HandleDroppedCommand(c, success, failure) {
			var exception = new ss.Exception('Command ' + c.commandName + ' was dropped by the CommandThrottler');
			if (!ss.staticEquals(this.$1$CommandFailedField, null)) {
				this.$1$CommandFailedField(0, c, exception);
			}
			failure(exception);
		}
	}, null, [$tab_IRemoteCommandHandler]);
	ss.initClass($tab_$BrushingDataUtils, $asm, {});
	ss.initClass($tab_$BrushingDataValues, $asm, {
		get_$fieldCaptions: function BrushingDataValues$get_FieldCaptions() {
			return this.$fieldCaptions;
		},
		get_$isEmpty: function BrushingDataValues$get_IsEmpty() {
			return this.$values.size === 0;
		},
		get_$values: function BrushingDataValues$get_Values() {
			var result = [];
			this.$values.forEach(function(ints) {
				result.push(ints);
			});
			return result;
		},
		$addValues: function BrushingDataValues$AddValues(valueIndexes, colIndexes) {
			if (ss.isNullOrUndefined(valueIndexes) || valueIndexes.length === 0) {
				return;
			}
			this.$colValTupleSets.push($tab_$BrushingDataValues.$createSortedColValPairs(colIndexes, valueIndexes));
			this.$areValuesMissing = this.$areValuesMissing || this.$isValueMissing(valueIndexes);
			valueIndexes = $tab_$BrushingDataValues.$sortValsByColumnIndexes(colIndexes, valueIndexes);
			this.$values.set(valueIndexes.join(','), valueIndexes);
		},
		$findMatch: function BrushingDataValues$FindMatch(colIndexes, valueIndexes) {
			if (ss.isNullOrUndefined(valueIndexes) || valueIndexes.length === 0) {
				return false;
			}
			var toRet;
			if (this.$areValuesMissing || this.$isValueMissing(valueIndexes)) {
				toRet = this.$mergeCompare(colIndexes, valueIndexes);
			}
			else {
				var sortedVals = $tab_$BrushingDataValues.$sortValsByColumnIndexes(colIndexes, valueIndexes);
				toRet = this.$values.has(sortedVals.join(','));
			}
			return toRet;
		},
		$isValueMissing: function BrushingDataValues$IsValueMissing(valueIndexes) {
			for (var $t1 = 0; $t1 < valueIndexes.length; $t1++) {
				var val = valueIndexes[$t1];
				if (!ss.isValue(val)) {
					return true;
				}
			}
			return false;
		},
		$mergeCompare: function BrushingDataValues$MergeCompare(colIndexes, valueIndexes) {
			var testVals = $tab_$BrushingDataValues.$createSortedColValPairs(colIndexes, valueIndexes);
			for (var $t1 = 0; $t1 < this.$colValTupleSets.length; $t1++) {
				var colVals = this.$colValTupleSets[$t1];
				var matchedAll = true;
				var nonNullMatchExists = false;
				var testIdx = 0;
				var localIdx = 0;
				while (matchedAll && localIdx < colVals.length && testIdx < testVals.length) {
					var localPair = colVals[localIdx];
					var testPair = testVals[testIdx];
					if (localPair.item1 < testPair.item1) {
						++localIdx;
					}
					else if (localPair.item1 > testPair.item1) {
						++testIdx;
					}
					else {
						matchedAll = !ss.isValue(localPair.item2) || !ss.isValue(testPair.item2) || ss.referenceEquals(localPair.item2, testPair.item2);
						nonNullMatchExists = nonNullMatchExists || ss.referenceEquals(localPair.item2, testPair.item2);
						++localIdx;
						++testIdx;
					}
				}
				if (matchedAll && nonNullMatchExists) {
					return true;
				}
			}
			return false;
		}
	});
	ss.initClass($tab_$ClientCommandQueue, $asm, {
		get_$count: function ClientCommandQueue$get_Count() {
			return this.$commands.length;
		},
		$enqueue: function ClientCommandQueue$Enqueue(command) {
			if (command.get_isOneAtATime()) {
				this.$removeCommands(ss.getInstanceType(command));
			}
			this.$commands.push(command);
			tab.Log.get(this).debug('Enqueue new command (%s). There are %i commands queued up now.', [ss.getTypeName(ss.getInstanceType(command)), this.get_$count()]);
		},
		$dequeue: function ClientCommandQueue$Dequeue() {
			if (this.$commands.length <= 0) {
				return null;
			}
			var toReturn = this.$commands[0];
			ss.removeAt(this.$commands, 0);
			tab.Log.get(this).debug('Dequeue command. There are %i commands queued up now.', [this.get_$count()]);
			return toReturn;
		},
		$removeCommands: function ClientCommandQueue$RemoveCommands(commandType) {
			var removed = 0;
			for (var ii = this.$commands.length - 1; ii >= 0; --ii) {
				if (ss.referenceEquals(ss.getInstanceType(this.$commands[ii]), commandType)) {
					++removed;
					ss.removeAt(this.$commands, ii);
				}
			}
			if (removed > 0) {
				tab.Log.get(this).debug('# of %s commands removed: %i. There are %i commands queued up now.', [ss.getTypeFullName(commandType), removed, this.$commands.length]);
			}
		}
	});
	ss.initClass($tab_$CommandThrottler, $asm, {
		add_$commandDropped: function CommandThrottler$add_CommandDropped(value) {
			this.$1$CommandDroppedField = ss.delegateCombine(this.$1$CommandDroppedField, value);
		},
		remove_$commandDropped: function CommandThrottler$remove_CommandDropped(value) {
			this.$1$CommandDroppedField = ss.delegateRemove(this.$1$CommandDroppedField, value);
		},
		$processCommand: function CommandThrottler$ProcessCommand(command, success, failure) {
			var throttleCommand = false;
			for (var $t1 = 0; $t1 < this.$commandsToThrottle.length; $t1++) {
				var target = this.$commandsToThrottle[$t1];
				if (ss.referenceEquals(target.commandName, command.commandName) && ss.referenceEquals(target.commandNamespace, command.commandNamespace)) {
					throttleCommand = true;
					break;
				}
			}
			if (!throttleCommand) {
				return 1;
			}
			if (this.$currentlyExecuting) {
				return 1;
			}
			if (ss.isValue(this.$queuedCommand) && ss.isValue(this.$throttleTimer)) {
				this.$notifyDropCommand(this.$queuedCommand, this.$queuedSuccessCallback, this.$queuedFailureCallback);
				this.$queuedCommand = command;
				this.$queuedSuccessCallback = success;
				this.$queuedFailureCallback = failure;
				return 0;
			}
			var now = Math.floor(tabBootstrap.MetricsController.getTiming());
			var timeDelta = now - this.$lastCommandTime;
			if (this.$throttleRate !== -1 && timeDelta < this.$throttleRate) {
				this.$queuePendingCommand(command, success, failure, this.$throttleRate - timeDelta);
			}
			else if (this.$pendingCommandThreshold !== -1 && this.$pendingCommandCount >= this.$pendingCommandThreshold) {
				this.$queuePendingCommand(command, success, failure, this.$pendingCommandDelay * this.$pendingCommandCount);
			}
			else {
				this.$currentlyExecuting = true;
				++this.$pendingCommandCount;
				try {
					this.$commandHandler.executeCommand(command, ss.mkdel(this, function(pm) {
						if (this.$pendingCommandCount > 0) {
							--this.$pendingCommandCount;
						}
						success(pm);
					}), ss.mkdel(this, function(e) {
						if (this.$pendingCommandCount > 0) {
							--this.$pendingCommandCount;
						}
						failure(e);
					}));
				}
				finally {
					this.$currentlyExecuting = false;
					this.$lastCommandTime = now;
				}
			}
			return 0;
		},
		$executePendingCommand: function CommandThrottler$ExecutePendingCommand() {
			var pendingCommand = this.$queuedCommand;
			var pendingSuccess = this.$queuedSuccessCallback;
			var pendingFailure = this.$queuedFailureCallback;
			this.$queuedCommand = null;
			this.$queuedSuccessCallback = null;
			this.$queuedFailureCallback = null;
			if (!ss.isValue(pendingCommand)) {
				return;
			}
			this.$commandHandler.executeCommand(pendingCommand, pendingSuccess, pendingFailure);
		},
		$queuePendingCommand: function CommandThrottler$QueuePendingCommand(command, success, failure, timeout) {
			ss.Debug.assert(this.$throttleTimer === null, 'Expected throttle timer to be null');
			ss.Debug.assert(this.$queuedCommand === null, 'Expected queued command to be null');
			this.$queuedCommand = command;
			this.$queuedSuccessCallback = success;
			this.$queuedFailureCallback = failure;
			this.$throttleTimer = window.setTimeout(ss.mkdel(this, function() {
				this.$throttleTimer = null;
				this.$executePendingCommand();
			}), timeout);
		},
		$notifyDropCommand: function CommandThrottler$NotifyDropCommand(command, successCallback, failureCallback) {
			if (ss.isValue(this.$1$CommandDroppedField)) {
				this.$1$CommandDroppedField(command, successCallback, failureCallback);
			}
		}
	});
	ss.initEnum($tab_$CommandThrottlerResponse, $asm, { $handled: 0, $unhandled: 1 });
	ss.initClass($tab_$DateTimePartIndexes, $asm, {});
	ss.initEnum($tab_$DefaultSessionErrorHandler$DataConnectionErrorCodeEnum, $asm, { $updateConnectionsEmbeddedCredentialsDisabled: 60011 });
	ss.initEnum($tab_$DefaultSessionErrorHandler$DataSourceExceptionTypeEnum, $asm, { $dataServerNoAuth: 16, $noPermission: 20, $oAuthFailure: 22 });
	ss.initClass($tab_$E2eAutomationTestHooks, $asm, {
		get_waitingOnCommands: function E2eAutomationTestHooks$get_WaitingOnCommands() {
			return this.$waitingOnCommandsGetter();
		},
		get_deferredServerResponseQueueSize: function E2eAutomationTestHooks$get_DeferredServerResponseQueueSize() {
			return this.$serverResponseQueueSizeGetter();
		},
		get_currentWorldDiffersFromCheckpoint: function E2eAutomationTestHooks$get_CurrentWorldDiffersFromCheckpoint() {
			return this.$worldCheckpointHolder.currentWorldDiffersFromCheckpoint;
		},
		getWorldCheckpoint: function E2eAutomationTestHooks$GetWorldCheckpoint() {
			return this.$worldCheckpointHolder.worldCheckpoint();
		}
	});
	ss.initClass($tab_$FetchParamsBuilder, $asm, {
		get_$index: function FetchParamsBuilder$get_Index() {
			return this.$page.startIndex;
		},
		set_$index: function FetchParamsBuilder$set_Index(value) {
			this.$page.startIndex = value;
		},
		get_$params: function FetchParamsBuilder$get_Params() {
			if (ss.isValue(this.$params)) {
				return this.$params;
			}
			var orderParam = _.map(this.$order, function(o) {
				return ss.mkdict(['field', o.field, 'ascending', o.ascending]);
			});
			this.$params = ss.mkdict(['page', this.$page, 'order', orderParam]);
			if (ss.isValue(this.$filter)) {
				this.$params['filter'] = this.$filter;
			}
			return this.$params;
		}
	});
	$tab_$FetchParamsBuilder.$ctor2.prototype = $tab_$FetchParamsBuilder.$ctor1.prototype = $tab_$FetchParamsBuilder.prototype;
	ss.initClass($tab_ClientCommand, $asm, {
		get_isBlocking: function ClientCommand$get_IsBlocking() {
			return this.$uiBlockType !== 'none';
		},
		get_blockType: function ClientCommand$get_BlockType() {
			return this.$uiBlockType;
		},
		get_isOneAtATime: function ClientCommand$get_IsOneAtATime() {
			return false;
		},
		get_commandName: function ClientCommand$get_CommandName() {
			return this.$commandName;
		},
		set_commandName: function ClientCommand$set_CommandName(value) {
			this.$commandName = value;
		},
		get_hasLocalComponent: function ClientCommand$get_HasLocalComponent() {
			return this.hasLocalComponent;
		},
		get_hasRemoteComponent: function ClientCommand$get_HasRemoteComponent() {
			return this.hasRemoteComponent;
		},
		execute: function ClientCommand$Execute(t, cc, onComplete) {
			var deferredOnComplete = null;
			if (!ss.staticEquals(onComplete, null)) {
				deferredOnComplete = function(result) {
					_.defer(function() {
						onComplete(result);
					});
				};
			}
			if (this.$sequence === 'localFirst') {
				this.executeLocal(t);
				this.executeRemote(cc, deferredOnComplete);
			}
			else if (this.$sequence === 'remoteFirst') {
				this.executeRemote(cc, deferredOnComplete);
				this.executeLocal(t);
			}
			if (!ss.isValue(this.doRemoteWork) && ss.isValue(deferredOnComplete)) {
				deferredOnComplete($tab_CommandExecutionResult.successResult);
			}
		},
		executeLocal: function ClientCommand$ExecuteLocal(t) {
			if (ss.isValue(this.doLocalWork)) {
				{
					var mc = tabBootstrap.MetricsController.createContext('EXELOC'.toString(), 8, this.buildCommandMetricsParameters());
					try {
						this.doLocalWork(t);
					}
					finally {
						if (ss.isValue(mc)) {
							mc.dispose();
						}
					}
				}
			}
		},
		executeRemote: function ClientCommand$ExecuteRemote(cc, onComplete) {
			if (ss.isValue(this.doRemoteWork)) {
				this.$processedCommandRecords = new Array();
				this.doRemoteWork(cc, function(result) {
					$tab_SessionHeartbeat.onVizqlPinged();
					if (ss.isValue(onComplete)) {
						onComplete(result);
					}
				});
			}
		},
		buildCommandMetricsParameters: function ClientCommand$BuildCommandMetricsParameters() {
			var metricsParams = {};
			metricsParams['cn'] = this.get_commandName();
			return metricsParams;
		},
		reEnqueueCompletedCommandRecords: function ClientCommand$ReEnqueueCompletedCommandRecords() {
			if (ss.isNullOrUndefined(this.$processedCommandRecords)) {
				return;
			}
			var processed = this.$processedCommandRecords;
			var records = this.$commandRecords;
			while (records.length > 0) {
				processed.push(records.shift());
			}
			this.$commandRecords = processed;
			this.$processedCommandRecords = records;
		},
		enqueueCommand: function ClientCommand$EnqueueCommand(cmdRec) {
			this.$commandRecords.push(cmdRec);
		},
		handleRemoteCommandSuccess: function ClientCommand$HandleRemoteCommandSuccess(command, pm) {
			if (ss.isValue(command.get_successCallback())) {
				command.get_successCallback()(pm);
			}
		},
		handleRemoteCommandFailure: function ClientCommand$HandleRemoteCommandFailure(command, o) {
			if (ss.isValue(command.get_errorCallback())) {
				command.get_errorCallback()(o);
			}
		},
		$executeNextRemoteCommand: function ClientCommand$ExecuteNextRemoteCommand(cc, completed) {
			if (this.$commandRecords.length === 0) {
				if (ss.isValue(completed)) {
					completed($tab_CommandExecutionResult.successResult);
				}
				return;
			}
			var cmdRec = this.$commandRecords.shift();
			this.$processedCommandRecords.push(cmdRec);
			var cmd = cmdRec.get_commandToExecute();
			if (ss.isNullOrUndefined(cmd)) {
				if (ss.isValue(completed)) {
					completed($tab_CommandExecutionResult.successResult);
				}
				return;
			}
			cc.executeCommand(cmd, ss.mkdel(this, function(pm) {
				try {
					this.handleRemoteCommandSuccess(cmdRec, pm);
				}
				finally {
					this.$executeNextRemoteCommand(cc, completed);
				}
			}), ss.mkdel(this, function(o) {
				try {
					this.handleRemoteCommandFailure(cmdRec, o);
				}
				finally {
					if (ss.isValue(completed)) {
						completed(new $tab_CommandExecutionResult(false, o));
					}
				}
			}));
		}
	});
	ss.initClass($tab_$GetUberTipClientCommand, $asm, {
		get_isOneAtATime: function GetUberTipClientCommand$get_IsOneAtATime() {
			return true;
		}
	}, $tab_ClientCommand);
	ss.initClass($tab_$LegacySessionWaitHandler, $asm, {
		get_$incrementCount: function LegacySessionWaitHandler$get_IncrementCount() {
			return this.$1$IncrementCountField;
		},
		set_$incrementCount: function LegacySessionWaitHandler$set_IncrementCount(value) {
			this.$1$IncrementCountField = value;
		},
		$showFullWaitHandlerNow: function LegacySessionWaitHandler$ShowFullWaitHandlerNow(subtle) {
			this.set_$incrementCount(this.get_$incrementCount() + 1);
			this.$legacySession.get_waitHandler().addrefAndShowFullWaitHandlerNow(subtle);
		},
		$show: function LegacySessionWaitHandler$Show(immediate, subtle) {
			if (subtle) {
				this.$showFullWaitHandlerNow(subtle);
			}
			else {
				this.set_$incrementCount(this.get_$incrementCount() + 1);
				this.$legacySession.incrementWait(immediate);
			}
		},
		$hide: function LegacySessionWaitHandler$Hide() {
			while (this.get_$incrementCount() > 0) {
				tab.Logger.getLogger($tab_WaitHandler).debug('Deferred decrement of WaitHandler', []);
				this.set_$incrementCount(this.get_$incrementCount() - 1);
				this.$legacySession.decrementWait();
			}
		}
	});
	ss.initClass($tab_$LocalClientCommand, $asm, {}, $tab_ClientCommand);
	ss.initClass($tab_$Page, $asm, {});
	ss.initClass($tab_Model, $asm, {
		getMutableCopyOfPresModel: function Model$GetMutableCopyOfPresModel() {
			return this.getMutableCopyOfPresModelInternal(false);
		},
		getPresModelPath: function Model$GetPresModelPath() {
			return this.$getPresModelPathRecursive(new $tab_PresModelPath());
		},
		reparent: function Model$Reparent(newParent) {
			this.parent = newParent;
		},
		getMutableCopyOfPresModelInternal: function Model$GetMutableCopyOfPresModelInternal(deepCopy) {
			var clone = (deepCopy ? tab.MiscUtil.cloneObject(this.pm) : $tab_PresentationModel.cloneObjWithScalarsOnly(this.pm));
			return clone || new Object();
		},
		swapAndCopyPresModel: function Model$SwapAndCopyPresModel(newPM) {
			var oldPM = this.pm;
			if (ss.isValue(oldPM) && ss.isValue(newPM)) {
				var newPMDict = newPM;
				var oldPMDict = oldPM;
				var $t1 = Object.keys(oldPMDict);
				for (var $t2 = 0; $t2 < $t1.length; $t2++) {
					var oldKey = $t1[$t2];
					ss.Debug.assert(!$.isFunction(oldPMDict[oldKey]), "Don't expect function here");
					if ((!ss.keyExists(newPMDict, oldKey) || typeof(newPMDict[oldKey]) === 'undefined') && (!_.isBoolean(oldPMDict[oldKey]) || !$tab_Model.removeUndefinedBoolsOnSwapCopy)) {
						newPMDict[oldKey] = oldPMDict[oldKey];
					}
				}
			}
			this.pm = newPM;
		},
		swapPresModel: function Model$SwapPresModel(newPM) {
			this.pm = newPM;
		},
		simpleSwapToUpdate$1: function(T) {
			return function Model$SimpleSwapToUpdate(newPresModel, eventToFire, arg, context) {
				this.simpleSwapToUpdate(newPresModel, function() {
					if (!ss.staticEquals(eventToFire, null)) {
						eventToFire(arg);
					}
				}, context);
			};
		},
		simpleSwapToUpdate: function Model$SimpleSwapToUpdate(newPresModel, eventToFire, context) {
			if (this.isNewPresModelSameAsOld(newPresModel)) {
				return false;
			}
			this.swapAndCopyPresModel(newPresModel);
			this.raiseEvent(eventToFire, context);
			return true;
		},
		isNewPresModelSameAsOld: function Model$IsNewPresModelSameAsOld(newPM) {
			return _.isEqual(this.pm, newPM);
		},
		raiseEvent$1: function(T) {
			return function Model$RaiseEvent(a, arg, context) {
				if (ss.staticEquals(a, null)) {
					return;
				}
				this.raiseEvent(function() {
					a(arg);
				}, context);
			};
		},
		raiseEvent$2: function(T1, T2) {
			return function Model$RaiseEvent(a, arg1, arg2, context) {
				if (ss.staticEquals(a, null)) {
					return;
				}
				this.raiseEvent(function() {
					a(arg1, arg2);
				}, context);
			};
		},
		raiseEvent: function Model$RaiseEvent(a, context) {
			if (ss.staticEquals(a, null)) {
				return;
			}
			if (ss.isValue(this.pm)) {
				tab.Log.get(this).debug('calling event on model %s', [this.presModelKey.name]);
			}
			if (ss.isNullOrUndefined(context) || ss.isNullOrUndefined(context.eventHandler)) {
				ss.Debug.assert(false, 'missing ModelEventHandler');
				return;
			}
			context.eventHandler.processEvent(a);
		},
		$getPresModelPathRecursive: function Model$GetPresModelPathRecursive(path) {
			if (!ss.isValue(this.parent)) {
				path.reverse();
				return path;
			}
			if (ss.isValue(this.presModelKey)) {
				path.add(this.presModelKey);
			}
			var compilerWorkaround = this.parent;
			return compilerWorkaround.$getPresModelPathRecursive(path);
		}
	});
	ss.initClass($tab_$PresetSizesContainerModel, $asm, {}, $tab_Model);
	ss.initEnum($tab_$SaveServerCommands$DataConnectionErrorCodeEnum, $asm, { $updateConnectionsEmbeddedCredentialsDisabled: 60011 });
	ss.initClass($tab_$SheetListItemArrayModel, $asm, {}, $tab_Model);
	ss.initClass($tab_$SizeItemListModel, $asm, {}, $tab_Model);
	ss.initClass($tab_$SourceSheetWithHighlightAction, $asm, {});
	ss.initClass($tab_$StoryCacheRecord, $asm, {
		get_$storyPoint: function StoryCacheRecord$get_StoryPoint() {
			if (ss.isNullOrUndefined(this.$savedZonePresModels)) {
				return this.$storyPoint;
			}
			var keys = _.keys(this.$savedZonePresModels);
			var zones = this.$storyPoint.dashboardPresModel.zones;
			var cachedPresModels = this.$savedZonePresModels;
			for (var i = 0, len = keys.length; i < len; i++) {
				var key = keys[i];
				zones[key].presModelHolder = cachedPresModels[key];
			}
			return this.$storyPoint;
		}
	});
	ss.initClass($tab_$StoryState, $asm, {
		get_$isStory: function StoryState$get_IsStory() {
			return this.$1$IsStoryField;
		},
		set_$isStory: function StoryState$set_IsStory(value) {
			this.$1$IsStoryField = value;
		},
		get_$storyPointId: function StoryState$get_StoryPointId() {
			return this.$1$StoryPointIdField;
		},
		set_$storyPointId: function StoryState$set_StoryPointId(value) {
			this.$1$StoryPointIdField = value;
		},
		get_$sheetName: function StoryState$get_SheetName() {
			return this.$1$SheetNameField;
		},
		set_$sheetName: function StoryState$set_SheetName(value) {
			this.$1$SheetNameField = value;
		}
	});
	ss.initClass($tab_$TransactionItem, $asm, {
		get_$model: function TransactionItem$get_Model() {
			return this.$itemModel;
		},
		get_$path: function TransactionItem$get_Path() {
			return this.$itemPath;
		}
	});
	ss.initClass($tab_VisualColumnIterator, $asm, {
		gv: function VisualColumnIterator$GetValue(i) {
			return this.v[i];
		},
		setValue: function VisualColumnIterator$SetValue(index, value) {
			ss.Debug.assert(ss.isValue(this.v), 'VisualColumnIterator should have valid column');
			this.v[index] = value;
		},
		transform: function VisualColumnIterator$Transform(transformFunc) {
			if (this.isValid && !ss.staticEquals(transformFunc, null)) {
				for (var i = 0; i < this.length; i++) {
					this.v[i] = transformFunc(this.v[i]);
				}
			}
		}
	});
	ss.initClass($tab_$VisualColumnIterator$ConstVisualColumnIterator, $asm, {
		gv: function ConstVisualColumnIterator$GetValue(i) {
			return this.v[0];
		},
		setValue: function ConstVisualColumnIterator$SetValue(index, value) {
			ss.Debug.assert(ss.isValue(this.v), 'ConstantColumnIterator should have valid column');
			this.v[0] = value;
		}
	}, $tab_VisualColumnIterator);
	ss.initClass($tab_$VizPortalGetItemsUtil, $asm, {});
	ss.initEnum($tab_$ZonePriority, $asm, { $priority1: 1, $priority2: 2, $priority3: 3, $priority4: 4, $priority5: 5, $priority6: 6 });
	ss.initClass($tab_RangeTransform, $asm, { fractionToValue: null, valueToFraction: null });
	ss.initClass($tab_AcceleratingRangeTransform, $asm, {
		fractionToValue: function AcceleratingRangeTransform$FractionToValue(fract) {
			if (fract <= this.$inflectionFrac1) {
				return this.$min + fract * (this.$inflectionVal1 - this.$min) / this.$inflectionFrac1;
			}
			if (fract <= this.$inflectionFrac2) {
				var m = (this.$inflectionVal2 - this.$inflectionVal1) / (this.$inflectionFrac2 - this.$inflectionFrac1);
				var b = this.$inflectionVal1 - m * this.$inflectionFrac1;
				return fract * m + b;
			}
			return this.$a * fract * fract + this.$b * fract + this.$c;
		},
		valueToFraction: function AcceleratingRangeTransform$ValueToFraction(value) {
			if (value <= this.$inflectionVal1) {
				return this.$inflectionFrac1 * (value - this.$min) / (this.$inflectionVal1 - this.$min);
			}
			if (value <= this.$inflectionVal2) {
				var m = (this.$inflectionVal2 - this.$inflectionVal1) / (this.$inflectionFrac2 - this.$inflectionFrac1);
				var b = this.$inflectionVal1 - m * this.$inflectionFrac1;
				return (value - b) / m;
			}
			var root = Math.sqrt(this.$b * this.$b - 4 * this.$a * (this.$c - value));
			return (-this.$b + root) / (2 * this.$a);
		}
	}, $tab_RangeTransform);
	ss.initClass($tab_AckbarEventsHelper, $asm, {
		add_doLaunchAuthoring: function AckbarEventsHelper$add_DoLaunchAuthoring(value) {
			this.$1$DoLaunchAuthoringField = ss.delegateCombine(this.$1$DoLaunchAuthoringField, value);
		},
		remove_doLaunchAuthoring: function AckbarEventsHelper$remove_DoLaunchAuthoring(value) {
			this.$1$DoLaunchAuthoringField = ss.delegateRemove(this.$1$DoLaunchAuthoringField, value);
		},
		add_newLayoutId: function AckbarEventsHelper$add_NewLayoutId(value) {
			this.$1$NewLayoutIdField = ss.delegateCombine(this.$1$NewLayoutIdField, value);
		},
		remove_newLayoutId: function AckbarEventsHelper$remove_NewLayoutId(value) {
			this.$1$NewLayoutIdField = ss.delegateRemove(this.$1$NewLayoutIdField, value);
		},
		add_workbookModifiedChanged: function AckbarEventsHelper$add_WorkbookModifiedChanged(value) {
			this.$1$WorkbookModifiedChangedField = ss.delegateCombine(this.$1$WorkbookModifiedChangedField, value);
		},
		remove_workbookModifiedChanged: function AckbarEventsHelper$remove_WorkbookModifiedChanged(value) {
			this.$1$WorkbookModifiedChangedField = ss.delegateRemove(this.$1$WorkbookModifiedChangedField, value);
		},
		add_orientationChange: function AckbarEventsHelper$add_OrientationChange(value) {
			this.$1$OrientationChangeField = ss.delegateCombine(this.$1$OrientationChangeField, value);
		},
		remove_orientationChange: function AckbarEventsHelper$remove_OrientationChange(value) {
			this.$1$OrientationChangeField = ss.delegateRemove(this.$1$OrientationChangeField, value);
		},
		onAuthoringLaunchRequested: function AckbarEventsHelper$OnAuthoringLaunchRequested() {
			var handler = this.$1$DoLaunchAuthoringField;
			if (!ss.staticEquals(handler, null)) {
				handler();
			}
		},
		onNewLayoutId: function AckbarEventsHelper$OnNewLayoutId(arg) {
			var handler = this.$1$NewLayoutIdField;
			if (!ss.staticEquals(handler, null)) {
				handler(arg);
			}
		},
		onWorkbookModifiedChanged: function AckbarEventsHelper$OnWorkbookModifiedChanged(modified) {
			var handler = this.$1$WorkbookModifiedChangedField;
			if (!ss.staticEquals(handler, null)) {
				handler(modified);
			}
		},
		onOrientationChange: function AckbarEventsHelper$OnOrientationChange() {
			var handler = this.$1$OrientationChangeField;
			if (!ss.staticEquals(handler, null)) {
				handler();
			}
		}
	});
	ss.initEnum($tab_ActionType, $asm, { highlight: 'highlight', filter: 'filter', url: 'url' }, true);
	ss.initClass($tab_ActionUtils, $asm, {});
	ss.initClass($tab_AddDataServerDataSourceCmd, $asm, {
		invoke: function AddDataServerDataSourceCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand$1('add-dataserver-data-source', this.cmdParams));
		},
		validateInvokeParams: function AddDataServerDataSourceCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'datasourceDatabaseName')) {
				throw new ss.Exception('missing param DocParams.DatabaseName');
			}
			if (!ss.keyExists(this.cmdParams, 'repositoryUrl')) {
				throw new ss.Exception('missing param DocParams.RepositoryUrl');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_AddDataServerDataSourceCmd$Response]));
	ss.initClass($tab_AddDataServerDataSourceCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_AnalyticsPaneModel, $asm, {
		add_newAnalyticsPane: function AnalyticsPaneModel$add_NewAnalyticsPane(value) {
			this.$2$NewAnalyticsPaneField = ss.delegateCombine(this.$2$NewAnalyticsPaneField, value);
		},
		remove_newAnalyticsPane: function AnalyticsPaneModel$remove_NewAnalyticsPane(value) {
			this.$2$NewAnalyticsPaneField = ss.delegateRemove(this.$2$NewAnalyticsPaneField, value);
		},
		get_analyticsPresModel: function AnalyticsPaneModel$get_AnalyticsPresModel() {
			return this.pm;
		},
		update: function AnalyticsPaneModel$Update(analyticsPresModel, context) {
			this.simpleSwapToUpdate(analyticsPresModel, this.$2$NewAnalyticsPaneField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_ApiClientCommands, $asm, {});
	ss.initClass($tab_ApplicationModel, $asm, {
		add_newWorkbook: function ApplicationModel$add_NewWorkbook(value) {
			this.$2$NewWorkbookField = ss.delegateCombine(this.$2$NewWorkbookField, value);
		},
		remove_newWorkbook: function ApplicationModel$remove_NewWorkbook(value) {
			this.$2$NewWorkbookField = ss.delegateRemove(this.$2$NewWorkbookField, value);
		},
		add_applicationUpdate: function ApplicationModel$add_ApplicationUpdate(value) {
			this.$2$ApplicationUpdateField = ss.delegateCombine(this.$2$ApplicationUpdateField, value);
		},
		remove_applicationUpdate: function ApplicationModel$remove_ApplicationUpdate(value) {
			this.$2$ApplicationUpdateField = ss.delegateRemove(this.$2$ApplicationUpdateField, value);
		},
		get_toolbar: function ApplicationModel$get_Toolbar() {
			return this.$toolbarModel;
		},
		get_workbook: function ApplicationModel$get_Workbook() {
			return this.$workbookModel;
		},
		get_colorPalettes: function ApplicationModel$get_ColorPalettes() {
			return this.$colorPalettesModel;
		},
		get_calculationModel: function ApplicationModel$get_CalculationModel() {
			return this.$calculationModel;
		},
		get_compoundTableCalcModel: function ApplicationModel$get_CompoundTableCalcModel() {
			return this.$compoundTableCalcModel;
		},
		get_isTableCalcHighlightingMode: function ApplicationModel$get_IsTableCalcHighlightingMode() {
			return this.$compoundTableCalcModel.get_hasTableCalc();
		},
		get_typeInPillCalculationModel: function ApplicationModel$get_TypeInPillCalculationModel() {
			return this.$typeInPillCalculationModel;
		},
		get_calculationFunctionListModel: function ApplicationModel$get_CalculationFunctionListModel() {
			return this.$calculationFunctionListModel;
		},
		get_shapeManager: function ApplicationModel$get_ShapeManager() {
			return this.$shapeManager;
		},
		get_dataDictionary: function ApplicationModel$get_DataDictionary() {
			return this.$dataDictionaryModel;
		},
		get_dataAlertDialogModel: function ApplicationModel$get_DataAlertDialogModel() {
			return this.$dataAlertDialogModel;
		},
		get_serverFonts: function ApplicationModel$get_ServerFonts() {
			return this.$2$ServerFontsField;
		},
		set_serverFonts: function ApplicationModel$set_ServerFonts(value) {
			this.$2$ServerFontsField = value;
		},
		get_renderMode: function ApplicationModel$get_RenderMode() {
			return (ss.isValue(this.get_appPresModel()) ? this.get_appPresModel().renderMode : 'render-mode-server');
		},
		get_localeDateFormat: function ApplicationModel$get_LocaleDateFormat() {
			return ((ss.isValue(this.get_appPresModel()) && !tab.MiscUtil.isNullOrEmpty$1(this.get_appPresModel().dateFormat)) ? this.get_appPresModel().dateFormat : 'M/d/yyyy');
		},
		get_localeTimeFormat: function ApplicationModel$get_LocaleTimeFormat() {
			return ((ss.isValue(this.get_appPresModel()) && !tab.MiscUtil.isNullOrEmpty$1(this.get_appPresModel().timeFormat)) ? this.get_appPresModel().timeFormat : 'h:mm tt');
		},
		get_isLocalRenderMode: function ApplicationModel$get_IsLocalRenderMode() {
			return this.get_renderMode() === 'render-mode-client';
		},
		get_appPresModel: function ApplicationModel$get_AppPresModel() {
			ss.Debug.assert(ss.isValue(this.pm), 'ApplicationPresModel property read before first call to Update()');
			return this.pm;
		},
		get_autoUpdate: function ApplicationModel$get_AutoUpdate() {
			var contentDashboard = $tab_ModelUtils.findContentDashboard();
			return ss.isValue(contentDashboard) && contentDashboard.autoUpdate;
		},
		set_autoUpdate: function ApplicationModel$set_AutoUpdate(value) {
			var contentDashboard = $tab_ModelUtils.findContentDashboard();
			if (ss.isValue(contentDashboard)) {
				contentDashboard.autoUpdate = value;
			}
		},
		get_invalid: function ApplicationModel$get_Invalid() {
			return $tab_ModelUtils.findContentDashboard().invalid;
		},
		set_invalid: function ApplicationModel$set_Invalid(value) {
			var dashboard = $tab_ModelUtils.findContentDashboard();
			if (ss.isValue(dashboard)) {
				dashboard.invalid = value;
			}
		},
		get_showTabs: function ApplicationModel$get_ShowTabs() {
			return tsConfig.showTabs && !this.get_isOffline();
		},
		get_showToolbar: function ApplicationModel$get_ShowToolbar() {
			return !this.get_isOffline();
		},
		get_isOffline: function ApplicationModel$get_IsOffline() {
			return tab.FeatureParamsLookup.getBool(41);
		},
		registerNotificationHandler: function ApplicationModel$RegisterNotificationHandler(notificationId, callback) {
			var handlers = this.$notificationHandlers[notificationId];
			if (ss.isNullOrUndefined(handlers)) {
				handlers = [];
				this.$notificationHandlers[notificationId] = handlers;
			}
			for (var i = 0; i < handlers.length; i++) {
				if (ss.staticEquals(handlers[i], callback)) {
					throw new ss.Exception('This handler for ' + notificationId.toString() + ' already registered');
				}
			}
			handlers.push(callback);
			return callback;
		},
		unRegisterNotificationHandler: function ApplicationModel$UnRegisterNotificationHandler(notificationId, callback) {
			var handlers = this.$notificationHandlers[notificationId];
			if (ss.isValue(handlers)) {
				for (var i = handlers.length - 1; i >= 0; i--) {
					if (ss.staticEquals(handlers[i], callback)) {
						ss.removeAt(handlers, i);
						if (handlers.length === 0) {
							delete this.$notificationHandlers[notificationId];
							return;
						}
					}
				}
			}
		},
		$handleNotifications: function ApplicationModel$HandleNotifications(notificationsPresModel, context) {
			var notifications = notificationsPresModel.presModelMap;
			if (ss.isNullOrUndefined(notifications)) {
				return;
			}
			var $t1 = new ss.ObjectEnumerator(notifications);
			try {
				while ($t1.moveNext()) {
					var entry = $t1.current();
					var notificationId = entry.key;
					var handlers = this.$notificationHandlers[notificationId];
					if (ss.isNullOrUndefined(handlers)) {
						tab.Log.get(this).debug('No handlers for notification %s', [notificationId]);
						continue;
					}
					var presModelDict = entry.value.presModelHolder;
					var enumerator = new ss.ObjectEnumerator(presModelDict);
					var presModel = (enumerator.moveNext() ? enumerator.current().value : null);
					for (var $t2 = 0; $t2 < handlers.length; $t2++) {
						var handler = handlers[$t2];
						handler(presModel, context);
					}
				}
			}
			finally {
				$t1.dispose();
			}
		},
		addModel: function(TModel) {
			return function ApplicationModel$AddModel() {
				ss.Debug.assert(!ss.keyExists(this.$models, TModel), ss.getTypeFullName(TModel) + ' has already been added');
				var model = ss.createInstance(TModel);
				var notify = ss.safeCast(model, $tab_IHandleNotifications);
				if (ss.isValue(notify)) {
					this.registerNotificationHandler(notify.get_notificationId(), ss.mkdel(notify, notify.onNotify));
				}
				this.$models[TModel] = model;
				return model;
			};
		},
		removeModel: function(TModel) {
			return function ApplicationModel$RemoveModel() {
				var model = this.$models[TModel];
				if (ss.isNullOrUndefined(model)) {
					return;
				}
				var notify = ss.safeCast(model, $tab_IHandleNotifications);
				if (ss.isValue(notify)) {
					this.unRegisterNotificationHandler(notify.get_notificationId(), ss.mkdel(notify, notify.onNotify));
				}
				delete this.$models[TModel];
			};
		},
		modelInstance: function(TModel) {
			return function ApplicationModel$ModelInstance() {
				var model = this.$models[TModel];
				if (ss.isNullOrUndefined(model)) {
					model = this.addModel(TModel).call(this);
				}
				return model;
			};
		},
		update: function ApplicationModel$Update(applicationPresModel, context) {
			if (ss.isNullOrUndefined(this.pm)) {
				this.pm = {};
			}
			if (ss.isValue(applicationPresModel.renderMode)) {
				this.get_appPresModel().renderMode = applicationPresModel.renderMode;
			}
			if (ss.isValue(applicationPresModel.dataDictionary)) {
				this.$dataDictionaryModel.update(applicationPresModel.dataDictionary);
			}
			if (ss.isValue(applicationPresModel.presentationLayerNotifications)) {
				this.$handleNotifications(applicationPresModel.presentationLayerNotifications, context);
			}
			if (ss.isValue(applicationPresModel.workbookPresModel)) {
				if (!ss.isValue(this.$workbookModel)) {
					this.$workbookModel = new $tab_WorkbookModel(this);
					this.raiseEvent$1($tab_WorkbookModel).call(this, this.$2$NewWorkbookField, this.$workbookModel, context);
				}
				this.$workbookModel.update(applicationPresModel.workbookPresModel, context);
			}
			if (ss.isValue(applicationPresModel.colorPaletteCollection)) {
				this.$colorPalettesModel.update(applicationPresModel.colorPaletteCollection, context);
			}
			if (ss.isValue(applicationPresModel.calculation)) {
				this.$calculationModel.update(applicationPresModel.calculation, context);
			}
			if (ss.isValue(applicationPresModel.typeInPill)) {
				this.$typeInPillCalculationModel.update(applicationPresModel.typeInPill, context);
			}
			if (ss.isValue(applicationPresModel.calculation) && ss.isValue(applicationPresModel.calculation.expressionFuncPm)) {
				this.$calculationFunctionListModel.update(applicationPresModel.calculation.expressionFuncPm, context);
			}
			if (ss.isValue(applicationPresModel.compoundTableCalculationPresModel)) {
				this.$compoundTableCalcModel.update(applicationPresModel.compoundTableCalculationPresModel, context);
			}
			if (ss.isValue(applicationPresModel.toolbarPresModel)) {
				this.$toolbarModel.update(applicationPresModel.toolbarPresModel, context);
			}
			if (tab.FeatureFlags.isEnabled('AlertOnThresholdCondition')) {
				if (ss.isValue(applicationPresModel.dataAlertDialogPresModel)) {
					this.$dataAlertDialogModel.update(applicationPresModel.dataAlertDialogPresModel);
				}
			}
			if (ss.isValue(applicationPresModel.serverFonts)) {
				this.set_serverFonts(ss.arrayClone(applicationPresModel.serverFonts.fontFamilies));
			}
			this.swapAndCopyPresModel(applicationPresModel);
			this.raiseEvent(this.$2$ApplicationUpdateField, context);
		},
		getMutableCopyOfPresModel: function ApplicationModel$GetMutableCopyOfPresModel() {
			if (ss.isNullOrUndefined(this.pm)) {
				return null;
			}
			var copy = {};
			copy = $.extend(false, copy, this.pm);
			return copy;
		}
	}, $tab_Model);
	ss.initClass($tab_BaseSession, $asm, {
		get_urlRoot: function BaseSession$get_UrlRoot() {
			return this.$urlRoot;
		},
		get_id: function BaseSession$get_Id() {
			return tsConfig.sessionid;
		},
		get_historyPosition: function BaseSession$get_HistoryPosition() {
			return $tab_BaseSession.$historyPosition;
		},
		set_historyPosition: function BaseSession$set_HistoryPosition(value) {
			$tab_BaseSession.$historyPosition = value;
		},
		get_waitHandler: function BaseSession$get_WaitHandler() {
			if (ss.isNullOrUndefined($tab_BaseSession.$waitHandler)) {
				$tab_BaseSession.$waitHandler = new $tab_WaitHandler();
			}
			return $tab_BaseSession.$waitHandler;
		},
		get_sessionErrorHandler: function BaseSession$get_SessionErrorHandler() {
			return this.defaultSessionErrorHandler;
		},
		get_commonDialogProvider: function BaseSession$get_CommonDialogProvider() {
			return this.$commonDialogProvider;
		},
		get_$sessionRoot: function BaseSession$get_SessionRoot() {
			return this.$urlRoot + '/sessions/' + tsConfig.sessionid;
		},
		formatThumbnailReference: function BaseSession$FormatThumbnailReference(worksheetPath) {
			return this.$siteRoot + '/thumb/views/' + worksheetPath;
		},
		formatSessionTempfileReference: function BaseSession$FormatSessionTempfileReference(tempfileid, keepfile, attachment) {
			return this.$urlRoot + '/tempfile/sessions/' + tsConfig.sessionid + '/?key=' + tempfileid + (keepfile ? '&keepfile=yes' : '') + (attachment ? '&attachment=yes' : '');
		},
		railsEncode: function BaseSession$RailsEncode(s) {
			var $t1 = new ss.ObjectEnumerator($tab_BaseSession.$railsSpecialChars);
			try {
				while ($t1.moveNext()) {
					var pair = $t1.current();
					s = s.replace(pair.value, pair.key);
				}
			}
			finally {
				$t1.dispose();
			}
			return s;
		},
		nudgeWait: function BaseSession$NudgeWait() {
			if (ss.isNullOrUndefined($tab_BaseSession.$waitHandler)) {
				return false;
			}
			$tab_BaseSession.$waitHandler.nudge();
			return true;
		},
		incrementWait: function BaseSession$IncrementWait(immediate) {
			if (ss.isNullOrUndefined($tab_BaseSession.$waitHandler)) {
				return false;
			}
			$tab_BaseSession.$waitHandler.addref(immediate);
			return true;
		},
		decrementWait: function BaseSession$DecrementWait() {
			if (ss.isNullOrUndefined($tab_BaseSession.$waitHandler)) {
				return false;
			}
			$tab_BaseSession.$waitHandler.release();
			return true;
		},
		handleAuthenticationFailure: function BaseSession$HandleAuthenticationFailure() {
			this.defaultSessionErrorHandler.handleAuthenticationFailure();
		},
		getWindow: function BaseSession$GetWindow(rootName) {
			return rootName + tsConfig.sessionid.replace(new RegExp('[^A-Za-z0-9_]', 'g'), '_');
		},
		$informServer: function BaseSession$InformServer(url, userAgent, entries) {
			var args = {};
			args.type = 'POST';
			args.url = this.$formatSessionMethod('inform');
			args.headers = ss.mkdict(['Accept', 'text/plain']);
			args.contentType = 'text/plain';
			var requestCharCountLimit = tsConfig.clientErrorReportingMaxRequestSizeBytes;
			var sb = new ss.StringBuilder();
			sb.appendLine('url: ' + url);
			sb.appendLine('user-agent: ' + userAgent);
			var perErrorCharCountLimit = ss.Int32.div(requestCharCountLimit - sb.toString().length, ss.getKeyCount(entries));
			var $t1 = new ss.ObjectEnumerator(entries);
			try {
				while ($t1.moveNext()) {
					var entry = $t1.current();
					sb.appendLine(entry.key);
					sb.appendLine(entry.value.substr(0, perErrorCharCountLimit - entry.key.length - 2));
				}
			}
			finally {
				$t1.dispose();
			}
			args.data = sb.toString();
			this.$request(args);
		},
		$requestUndoRedo: function BaseSession$RequestUndoRedo(historyPosition, redo) {
			tab.Log.get(this).debug('Requesting redo/undo: redo=%s', [redo]);
			if (redo) {
				$tab_WorksheetServerCommands.redoToPosition(historyPosition);
			}
			else {
				$tab_WorksheetServerCommands.undoToPosition(historyPosition);
			}
		},
		executeServerCommand: function BaseSession$ExecuteServerCommand(c, successCallback, errorCallback) {
			var args = {};
			this.$prepareCommandRequst(args, c);
			args.headers = ss.mkdict(['Accept', 'text/javascript']);
			var requestId = this.$commandRequestId;
			var onSuccess = ss.mkdel(this, function(data, textStatus, xhr) {
				delete this.$pendingCommandRequests[requestId];
				if (ss.isValue(successCallback)) {
					data = tab.RleDecoder.decode(data);
					successCallback(data);
				}
			});
			var onError = ss.mkdel(this, function(request, textStatus1, error) {
				delete this.$pendingCommandRequests[requestId];
				if (tab.FeatureFlags.isEnabled('CommandCancellation') && textStatus1 === 'abort') {
					return;
				}
				this.$handleError(error, request, c.noExceptionDialog, c);
				if (ss.isValue(errorCallback)) {
					var e = new ss.Exception(request.responseText);
					e['status'] = request.status;
					errorCallback(e);
				}
			});
			var handler = this.$createHandlerCC(null, onSuccess, (ss.isValue(errorCallback) ? onError : null));
			this.$pendingCommandRequests[this.$commandRequestId] = this.$request(args, handler);
			++this.$commandRequestId;
		},
		basicPostOpts: function BaseSession$BasicPostOpts(url, dat) {
			var args = {};
			args.type = 'POST';
			args.url = url;
			args.headers = ss.mkdict(['Accept', 'text/javascript']);
			args.dataType = 'json';
			args.data = dat;
			return args;
		},
		basicGetOpts: function BaseSession$BasicGetOpts(url) {
			var args = {};
			args.type = 'GET';
			args.url = url;
			args.headers = ss.mkdict(['Accept', 'text/javascript']);
			args.dataType = 'json';
			return args;
		},
		$prepareCommandRequst: function BaseSession$PrepareCommandRequst(args, command) {
			var payload = $tab_XhrUtil.getMultipartData(null, command.commandParams);
			args.type = 'POST';
			args.dataType = 'json';
			args.contentType = 'multipart/form-data; boundary=' + payload.header;
			args.data = payload.body;
			args.url = this.$formatSessionCommand(command.commandNamespace, command.commandName);
		},
		$pushServerUndo: function BaseSession$PushServerUndo(description) {
			var currentHistoryPosition = this.get_historyPosition();
			tab.Log.get(this).debug('Push server undo: %s', [description]);
			var undo = ss.mkdel(this, function() {
				this.$requestUndoRedo(currentHistoryPosition, false);
			});
			var redo = ss.mkdel(this, function() {
				this.$requestUndoRedo(currentHistoryPosition + 1, true);
			});
			this.$pushUndo(undo, redo);
			++$tab_BaseSession.$historyPosition;
		},
		$formatMethod: function BaseSession$FormatMethod(method) {
			return this.$urlRoot + '/' + method;
		},
		$formatSessionMethod: function BaseSession$FormatSessionMethod(method) {
			return tabBootstrap.BaseUrlFormatter.formatSessionMethod(method, tsConfig.sessionid, this.$urlRoot);
		},
		$formatSessionCommand: function BaseSession$FormatSessionCommand(ns, command) {
			return this.get_$sessionRoot() + '/commands/' + ns + '/' + command;
		},
		$pushUndo: function BaseSession$PushUndo(undo, redo) {
			if (!tsConfig.embedded || tsConfig.browserBackButtonUndo) {
				if (ss.isValue($tab_BaseSession.$currentState)) {
					$tab_BaseSession.$currentState.onBack = undo;
				}
				else {
					$tab_HistoryManager.setInitialState(undo);
				}
				$tab_BaseSession.$currentState = $tab_HistoryManager.addToHistory(null, redo);
			}
		},
		$handleError: function BaseSession$HandleError(error, xhr, noExceptionDialog, command) {
			this.$errorHandlerChain.handle(error, xhr, command, noExceptionDialog);
		},
		$request: function BaseSession$Request(args, handler) {
			return $tab_XhrUtil.helper(args, handler);
		},
		$createHandlerCC: function BaseSession$CreateHandlerCC(onComplete, onSuccess, onError) {
			return new $tab_SessionAjaxCallManager(this, onComplete, onSuccess, onError, false, false);
		},
		$createHandler: function BaseSession$CreateHandler(onComplete, onSuccess, onError, uiBlockType) {
			var usesWaitHandler = uiBlockType !== 'none';
			var immediateWait = uiBlockType === 'immediately' || uiBlockType === 'immediatelySubtle';
			return new $tab_SessionAjaxCallManager(this, onComplete, onSuccess, onError, usesWaitHandler, immediateWait);
		},
		formatLayoutMethod: function BaseSession$FormatLayoutMethod(layoutid, method) {
			var url = (ss.isValue(method) ? this.$formatSessionMethod(method) : this.get_$sessionRoot());
			url += '/layouts/' + layoutid;
			return url;
		},
		formatViewMethod: function BaseSession$FormatViewMethod(viewid, method) {
			var url = (ss.isValue(method) ? this.$formatSessionMethod(method) : this.get_$sessionRoot());
			url += '/views/' + viewid;
			return url;
		},
		formatFilterReference: function BaseSession$FormatFilterReference(sheetid, field, method) {
			return this.$formatSubSheetReference(sheetid, field, method, 'filters');
		},
		$formatSubSheetReference: function BaseSession$FormatSubSheetReference(sheetid, field, method, reftype) {
			sheetid = encodeURIComponent(this.railsEncode(sheetid));
			var url;
			if (ss.isValue(method)) {
				url = this.$formatSessionMethod(method);
			}
			else {
				url = this.get_$sessionRoot();
			}
			url += '/sheets/' + sheetid + '/' + reftype;
			if (ss.isValue(field)) {
				url += '/' + encodeURIComponent(this.railsEncode(field));
			}
			return url;
		},
		cancelAllCommands: function BaseSession$CancelAllCommands(successCallback, failureCallback) {
			if (!tab.FeatureFlags.isEnabled('CommandCancellation')) {
				ss.Debug.assert(false, 'Should not be able to call this while feature flag is disabled.');
				return;
			}
			var $t1 = _.values(this.$pendingCommandRequests);
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var request = $t1[$t2];
				request.abort();
			}
			ss.clearKeys(this.$pendingCommandRequests);
			var url = this.$urlRoot + '/cancel/sessions/' + tsConfig.sessionid;
			var args = this.basicGetOpts(url);
			var onSuccess = function(data, textStatus, xhr) {
				if (ss.isValue(successCallback)) {
					data = tab.RleDecoder.decode(data);
					successCallback(data);
				}
			};
			var onError = function(request1, textStatus1, error) {
				if (ss.isValue(failureCallback)) {
					failureCallback(error);
				}
			};
			var handler = this.$createHandlerCC(null, onSuccess, onError);
			this.$request(args, handler);
		}
	});
	ss.initClass($tab_BorderDefinition, $asm, {
		get_hasColor: function BorderDefinition$get_HasColor() {
			return this.color !== 'rgba(0, 0, 0, 0)';
		},
		get_hasWidth: function BorderDefinition$get_HasWidth() {
			return this.width > 0;
		},
		get_hasStyle: function BorderDefinition$get_HasStyle() {
			return this.style !== 'bs-none';
		},
		get_cssDictionary: function BorderDefinition$get_CssDictionary() {
			var result = {};
			switch (this.side) {
				case 0: {
					result['border-width'] = this.width + 'px';
					result['border-style'] = $tab_BorderDefinition.borderStyleToCss(this.style);
					result['border-color'] = this.color;
					break;
				}
				case 1: {
					result['border-top-width'] = this.width + 'px';
					result['border-top-style'] = $tab_BorderDefinition.borderStyleToCss(this.style);
					result['border-top-color'] = this.color;
					break;
				}
				case 2: {
					result['border-left-width'] = this.width + 'px';
					result['border-left-style'] = $tab_BorderDefinition.borderStyleToCss(this.style);
					result['border-left-color'] = this.color;
					break;
				}
				case 4: {
					result['border-bottom-width'] = this.width + 'px';
					result['border-bottom-style'] = $tab_BorderDefinition.borderStyleToCss(this.style);
					result['border-bottom-color'] = this.color;
					break;
				}
				case 3: {
					result['border-right-width'] = this.width + 'px';
					result['border-right-style'] = $tab_BorderDefinition.borderStyleToCss(this.style);
					result['border-right-color'] = this.color;
					break;
				}
			}
			return result;
		},
		get_styledBoxPresModel: function BorderDefinition$get_StyledBoxPresModel() {
			var result = {};
			switch (this.side) {
				case 0: {
					result.uw = this.width;
					result.borderStyle = this.style;
					result.borderColor = this.color;
					break;
				}
				case 1: {
					result.uwt = this.width;
					result.borderStyleTop = this.style;
					result.borderColorTop = this.color;
					break;
				}
				case 2: {
					result.uwl = this.width;
					result.borderStyleLeft = this.style;
					result.borderColorLeft = this.color;
					break;
				}
				case 4: {
					result.uwb = this.width;
					result.borderStyleBottom = this.style;
					result.borderColorBottom = this.color;
					break;
				}
				case 3: {
					result.uwr = this.width;
					result.borderStyleRight = this.style;
					result.borderColorRight = this.color;
					break;
				}
			}
			return result;
		}
	});
	ss.initEnum($tab_BorderDefinition$BorderSide, $asm, { all: 0, top: 1, left: 2, right: 3, bottom: 4 });
	ss.initClass($tab_BrushingComputer, $asm, {
		get_isBrushingComputed: function BrushingComputer$get_IsBrushingComputed() {
			return this.$isBrushingComputed;
		},
		hasBrushingForSheet: function BrushingComputer$HasBrushingForSheet(worksheet) {
			return ss.isValue(this.$tupleBrushing[worksheet]) || ss.isValue(this.$nodeBrushing[worksheet]) || ss.isValue(this.$legendBrushing[worksheet]);
		},
		getTupleBrushing: function BrushingComputer$GetTupleBrushing(worksheet) {
			return this.$tupleBrushing[worksheet] || [];
		},
		getTrendlineBrushing: function BrushingComputer$GetTrendlineBrushing(worksheet) {
			return this.$trendLineBrushing[worksheet] || [];
		},
		getNodeBrushing: function BrushingComputer$GetNodeBrushing(worksheet) {
			return this.$nodeBrushing[worksheet] || [];
		},
		getLegendBrushing: function BrushingComputer$GetLegendBrushing(worksheet) {
			return this.$legendBrushing[worksheet] || {};
		},
		$calculateLegendsForViz: function BrushingComputer$CalculateLegendsForViz(legendViz, tupleViz, tupleIds, highlightCmd, actionName) {
			var targetVizData = legendViz.get_vizDataModel();
			var $t1 = $tab_ModelUtils.getModelsForViz($tab_CategoricalLegendModel).call(null, $tab_ModelUtils.findContentDashboard(), legendViz);
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var legend = $t1[$t2];
				if (ss.isNullOrUndefined(targetVizData)) {
					$tab_BrushingComputer.get_$log().error('Target viz data not found: %s.', [legend.get_worksheetName()]);
					continue;
				}
				if (!legend.get_isHighlightEnabled() || actionName.length === 0 && legend.get_isOneWay()) {
					continue;
				}
				var commonFields = _.intersection(tupleViz.get_vizDataModel().get_fieldCaptions(), legend.get_fieldCaptions());
				commonFields = $tab_BrushingComputer.getHighlightFieldCaptions(highlightCmd, tupleViz.get_vizDataModel().get_highlightCaptions(), commonFields);
				var dvs = $tab_$BrushingDataUtils.$buildTupleSelectionDataValues(tupleViz.get_vizDataModel(), tupleIds, commonFields);
				var legendsToBrush = $tab_$BrushingDataUtils.$findMatchingLegendItems(dvs, targetVizData, legend);
				$tab_BrushingComputer.get_$log().debug('Brushing legend items: %s, %o', [legend.get_id(), legendsToBrush]);
				if (!ss.keyExists(this.$legendBrushing, legendViz.get_worksheetName())) {
					this.$legendBrushing[legendViz.get_worksheetName()] = {};
				}
				this.$legendBrushing[legendViz.get_worksheetName()][$tab_BrushingComputer.$calculateLegendKey(legend.get_legendTypeEnum(), legend.get_legendNames())] = legendsToBrush;
			}
		}
	});
	ss.initClass($tab_BuildCaptionContextMenuCmd, $asm, {
		invoke: function BuildCaptionContextMenuCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand('build-caption-context-menu', this.cmdParams));
		},
		validateInvokeParams: function BuildCaptionContextMenuCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'sheetName')) {
				throw new ss.Exception('missing param DocParams.SheetName');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_BuildCaptionContextMenuCmd$Response]));
	ss.initClass($tab_BuildCaptionContextMenuCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'commands')) {
				throw new ss.Exception('missing param DocParams.Commands');
			}
		}
	});
	ss.initClass($tab_BuildLayoutTreeContextMenuCmd, $asm, {
		invoke: function BuildLayoutTreeContextMenuCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand('build-layout-tree-context-menu', this.cmdParams));
		},
		validateInvokeParams: function BuildLayoutTreeContextMenuCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_BuildLayoutTreeContextMenuCmd$Response]));
	ss.initClass($tab_BuildLayoutTreeContextMenuCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'commands')) {
				throw new ss.Exception('missing param DocParams.Commands');
			}
		}
	});
	ss.initClass($tab_BuildSheetListContextMenuCmd, $asm, {
		invoke: function BuildSheetListContextMenuCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand('build-sheet-list-context-menu', this.cmdParams));
		},
		validateInvokeParams: function BuildSheetListContextMenuCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'sheetName')) {
				throw new ss.Exception('missing param DocParams.SheetName');
			}
			if (!ss.keyExists(this.cmdParams, 'addAsFloating')) {
				throw new ss.Exception('missing param DocParams.AddAsFloating');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_BuildSheetListContextMenuCmd$Response]));
	ss.initClass($tab_BuildSheetListContextMenuCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'commands')) {
				throw new ss.Exception('missing param DocParams.Commands');
			}
		}
	});
	ss.initClass($tab_BuildTitleContextMenuCmd, $asm, {
		invoke: function BuildTitleContextMenuCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand('build-title-context-menu', this.cmdParams));
		},
		validateInvokeParams: function BuildTitleContextMenuCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'sheetName')) {
				throw new ss.Exception('missing param DocParams.SheetName');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_BuildTitleContextMenuCmd$Response]));
	ss.initClass($tab_BuildTitleContextMenuCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'commands')) {
				throw new ss.Exception('missing param DocParams.Commands');
			}
		}
	});
	ss.initClass($tab_CalculationAutoCompleteCmd, $asm, {
		invoke: function CalculationAutoCompleteCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand('calculation-auto-complete', this.cmdParams));
		},
		validateInvokeParams: function CalculationAutoCompleteCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'acSubstring')) {
				throw new ss.Exception('missing param DocParams.AutoCompleteSubstring');
			}
			if (!ss.keyExists(this.cmdParams, 'position')) {
				throw new ss.Exception('missing param DocParams.Position');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_CalculationAutoCompleteCmd$Response]));
	ss.initClass($tab_CalculationAutoCompleteCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'calculationAutocompleteContextMenu')) {
				throw new ss.Exception('missing param DocParams.CalculationAutoCompleteContextMenu');
			}
		}
	});
	ss.initClass($tab_CalculationFunctionListModel, $asm, {
		add_functionListUpdated: function CalculationFunctionListModel$add_FunctionListUpdated(value) {
			this.$2$FunctionListUpdatedField = ss.delegateCombine(this.$2$FunctionListUpdatedField, value);
		},
		remove_functionListUpdated: function CalculationFunctionListModel$remove_FunctionListUpdated(value) {
			this.$2$FunctionListUpdatedField = ss.delegateRemove(this.$2$FunctionListUpdatedField, value);
		},
		get_$functionsPresModel: function CalculationFunctionListModel$get_FunctionsPresModel() {
			return this.pm;
		},
		get_functions: function CalculationFunctionListModel$get_Functions() {
			return this.get_$functionsPresModel().expressionFuncList || [];
		},
		update: function CalculationFunctionListModel$Update(newFunctionList, context) {
			this.simpleSwapToUpdate(newFunctionList, this.$2$FunctionListUpdatedField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_CalculationModel, $asm, {
		add_calculationUpdated: function CalculationModel$add_CalculationUpdated(value) {
			this.$2$CalculationUpdatedField = ss.delegateCombine(this.$2$CalculationUpdatedField, value);
		},
		remove_calculationUpdated: function CalculationModel$remove_CalculationUpdated(value) {
			this.$2$CalculationUpdatedField = ss.delegateRemove(this.$2$CalculationUpdatedField, value);
		},
		get_hasCalculation: function CalculationModel$get_HasCalculation() {
			return ss.isValue(this.pm) && (!tab.MiscUtil.isNullOrEmpty$1(this.get_$calculationPresModel().calculationCaption) || !tab.MiscUtil.isNullOrEmpty$1(this.get_$calculationPresModel().pendingCalcName) || !tab.MiscUtil.isNullOrEmpty$1(this.get_$calculationPresModel().datasource));
		},
		get_isNewCalculation: function CalculationModel$get_IsNewCalculation() {
			return tab.MiscUtil.isNullOrEmpty$1(this.get_$calculationPresModel().fn);
		},
		get_isAdhoc: function CalculationModel$get_IsAdhoc() {
			return this.$isAdhoc && this.get_$calculationPresModel().isTypeInPill;
		},
		get_adHocShelf: function CalculationModel$get_AdHocShelf() {
			return this.get_$calculationPresModel().shelfType || 'none-shelf';
		},
		get_adHocShelfPosition: function CalculationModel$get_AdHocShelfPosition() {
			return this.get_$calculationPresModel().shelfPosIndex;
		},
		get_adHocPaneSpecId: function CalculationModel$get_AdHocPaneSpecId() {
			return this.get_$calculationPresModel().paneSpec;
		},
		get_$calculationPresModel: function CalculationModel$get_CalculationPresModel() {
			return this.pm;
		},
		get_tokens: function CalculationModel$get_Tokens() {
			return this.get_$calculationPresModel().styleTokenList || [];
		},
		get_name: function CalculationModel$get_Name() {
			return this.get_$calculationPresModel().pendingCalcName || '';
		},
		get_fieldName: function CalculationModel$get_FieldName() {
			return this.get_$calculationPresModel().fn || '';
		},
		get_errors: function CalculationModel$get_Errors() {
			return this.get_$calculationPresModel().errorInfoList || [];
		},
		get_errorSummary: function CalculationModel$get_ErrorSummary() {
			return this.get_$calculationPresModel().errorString || '';
		},
		get_caption: function CalculationModel$get_Caption() {
			return this.get_$calculationPresModel().calculationCaption || '';
		},
		get_formula: function CalculationModel$get_Formula() {
			return this.get_$calculationPresModel().calculationFormula || '';
		},
		get_dependencies: function CalculationModel$get_Dependencies() {
			return this.get_$calculationPresModel().calculationDependencies || '';
		},
		get_dataSourceName: function CalculationModel$get_DataSourceName() {
			return this.get_$calculationPresModel().datasource || '';
		},
		get_dataSourceCaption: function CalculationModel$get_DataSourceCaption() {
			var dataSchema = $tab_ApplicationModel.get_instance().get_workbook().get_dataSchema();
			if (ss.isNullOrUndefined(dataSchema)) {
				return null;
			}
			var dataSource = dataSchema.findDataSourceByName(this.get_dataSourceName());
			if (ss.isNullOrUndefined(dataSource)) {
				return null;
			}
			return dataSource.get_caption();
		},
		get_useParameters: function CalculationModel$get_UseParameters() {
			return ss.coalesce(this.get_$calculationPresModel().useParameters, false);
		},
		get_calculationContext: function CalculationModel$get_CalculationContext() {
			return ss.coalesce(this.get_$calculationPresModel().calculationContext, 'calculation-dialog');
		},
		update: function CalculationModel$Update(newCalculation, context) {
			this.simpleSwapToUpdate(newCalculation, this.$2$CalculationUpdatedField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_CategoricalFilterModel, $asm, {
		get_items: function CategoricalFilterModel$get_Items() {
			return this.get_$categoricalFilterPresModel().domainTables;
		},
		get_$categoricalFilterPresModel: function CategoricalFilterModel$get_CategoricalFilterPresModel() {
			return this.pm;
		},
		update: function CategoricalFilterModel$Update(newPresModel) {
			if (!this.isNewPresModelSameAsOld(newPresModel)) {
				this.swapAndCopyPresModel(newPresModel);
			}
		}
	}, $tab_Model);
	ss.initInterface($tab_IBrushingModelInfo, $asm, { getItemNamesFromObjectId: null });
	ss.initClass($tab_CategoricalLegendModel, $asm, {
		add_legendChanged: function CategoricalLegendModel$add_LegendChanged(value) {
			this.$2$LegendChangedField = ss.delegateCombine(this.$2$LegendChangedField, value);
		},
		remove_legendChanged: function CategoricalLegendModel$remove_LegendChanged(value) {
			this.$2$LegendChangedField = ss.delegateRemove(this.$2$LegendChangedField, value);
		},
		add_legendNameChanged: function CategoricalLegendModel$add_LegendNameChanged(value) {
			this.$2$LegendNameChangedField = ss.delegateCombine(this.$2$LegendNameChangedField, value);
		},
		remove_legendNameChanged: function CategoricalLegendModel$remove_LegendNameChanged(value) {
			this.$2$LegendNameChangedField = ss.delegateRemove(this.$2$LegendNameChangedField, value);
		},
		get_worksheetName: function CategoricalLegendModel$get_WorksheetName() {
			return this.get_$zone().get_worksheetName();
		},
		get_id: function CategoricalLegendModel$get_Id() {
			return this.get_legendNames().join(';') + this.$legendType;
		},
		get_catLegendPresModel: function CategoricalLegendModel$get_CatLegendPresModel() {
			return this.pm;
		},
		get_isContextMenuAllowed: function CategoricalLegendModel$get_IsContextMenuAllowed() {
			return this.get_catLegendPresModel().isContextMenuAllowed || false;
		},
		get_isHighlightEnabled: function CategoricalLegendModel$get_IsHighlightEnabled() {
			return this.get_catLegendPresModel().isHighlightEnabled || false;
		},
		get_isHighlightAllowed: function CategoricalLegendModel$get_IsHighlightAllowed() {
			return this.get_catLegendPresModel().isHighlightAllowed || false;
		},
		get_isOneWay: function CategoricalLegendModel$get_IsOneWay() {
			return this.get_catLegendPresModel().oneWayBrushing || false;
		},
		get_fieldCaptions: function CategoricalLegendModel$get_FieldCaptions() {
			return this.get_catLegendPresModel().fieldCaptions;
		},
		get_legendNames: function CategoricalLegendModel$get_LegendNames() {
			return this.get_catLegendPresModel().legendNames;
		},
		get_legendTypeEnum: function CategoricalLegendModel$get_LegendTypeEnum() {
			return this.$legendType;
		},
		get_items: function CategoricalLegendModel$get_Items() {
			return $tab_CategoricalLegendModel.$getPresModelItems(this.get_legendTypeEnum(), this.get_catLegendPresModel());
		},
		get_$zone: function CategoricalLegendModel$get_Zone() {
			var wrapper = ss.safeCast(this.parent, $tab_ZoneContentWrapperModel);
			return wrapper.get_zone();
		},
		getItemNamesFromObjectId: function CategoricalLegendModel$GetItemNamesFromObjectId(objectId) {
			var foundItemPresModel = _.find(this.get_items(), function(itemPresModel) {
				return itemPresModel.objectId === objectId;
			});
			return foundItemPresModel.itemValues;
		},
		update: function CategoricalLegendModel$Update(catLegendPresModel, context) {
			if (this.isNewPresModelSameAsOld(catLegendPresModel)) {
				return;
			}
			$tab_FontNotificationUtil.notifyFontsFromCategoricalLegendPresModel(catLegendPresModel);
			var oldPM = this.get_catLegendPresModel();
			this.swapAndCopyPresModel(catLegendPresModel);
			if (ss.isValue(oldPM) && !_.isEqual(oldPM.legendNames, catLegendPresModel.legendNames)) {
				this.raiseEvent(this.$2$LegendNameChangedField, context);
			}
			this.raiseEvent(this.$2$LegendChangedField, context);
		}
	}, $tab_Model, [$tab_IBrushingModelInfo]);
	ss.initClass($tab_QuickFilterModel, $asm, {
		update: function QuickFilterModel$Update(newPresModel, context) {
			if (!this.isNewPresModelSameAsOld(newPresModel)) {
				this.swapAndCopyPresModel(newPresModel);
			}
		}
	}, $tab_Model);
	ss.initClass($tab_CategoricalQuickFilterModel, $asm, {
		get_categoricalFilter: function CategoricalQuickFilterModel$get_CategoricalFilter() {
			return this.$3$CategoricalFilterField;
		},
		set_categoricalFilter: function CategoricalQuickFilterModel$set_CategoricalFilter(value) {
			this.$3$CategoricalFilterField = value;
		},
		get_mode: function CategoricalQuickFilterModel$get_Mode() {
			return this.$categoricalQuickFilterPresModel.categoricalMode;
		},
		get_isAllButtonVisible: function CategoricalQuickFilterModel$get_IsAllButtonVisible() {
			return this.$categoricalQuickFilterPresModel.isAllButtonVisible;
		},
		get_isAllButtonSelected: function CategoricalQuickFilterModel$get_IsAllButtonSelected() {
			return this.$categoricalQuickFilterPresModel.categoricalFilter.allSelected;
		},
		get_isSelectionExclusive: function CategoricalQuickFilterModel$get_IsSelectionExclusive() {
			return this.$categoricalQuickFilterPresModel.categoricalFilter.isSelectionExclusive;
		},
		get_showApplyAndCancelButtons: function CategoricalQuickFilterModel$get_ShowApplyAndCancelButtons() {
			return this.$categoricalQuickFilterPresModel.showApplyAndCancelButtons;
		},
		get_showSearchButton: function CategoricalQuickFilterModel$get_ShowSearchButton() {
			return this.$categoricalQuickFilterPresModel.isSearchable;
		},
		get_showMoreLessButton: function CategoricalQuickFilterModel$get_ShowMoreLessButton() {
			return this.$categoricalQuickFilterPresModel.canShowMoreFewerButton;
		},
		get_showClearButton: function CategoricalQuickFilterModel$get_ShowClearButton() {
			return this.$categoricalQuickFilterPresModel.canShowFilterStateButton;
		},
		get_getDomainValue: function CategoricalQuickFilterModel$get_GetDomainValue() {
			return this.$categoricalQuickFilterPresModel.filterDomainType;
		},
		getDomains: function CategoricalQuickFilterModel$GetDomains() {
			return this.$categoricalQuickFilterPresModel.filterDomains;
		},
		update: function CategoricalQuickFilterModel$Update(newPresModel, context) {
			$tab_QuickFilterModel.prototype.update.call(this, newPresModel, context);
			this.$categoricalQuickFilterPresModel = newPresModel;
			this.get_categoricalFilter().update(this.$categoricalQuickFilterPresModel.categoricalFilter);
		}
	}, $tab_QuickFilterModel);
	ss.initClass($tab_ChangeWorkbookUIModeCmd, $asm, {
		invoke: function ChangeWorkbookUIModeCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand('change-workbook-ui-mode', this.cmdParams));
		},
		validateInvokeParams: function ChangeWorkbookUIModeCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'uiMode')) {
				throw new ss.Exception('missing param DocParams.UIMode');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ChangeWorkbookUIModeCmd$Response]));
	ss.initClass($tab_ChangeWorkbookUIModeCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initEnum($tab_ClipCase, $asm, { clipNone: 0, clipX: 1, clipY: 2, clipXY: 3 });
	ss.initClass($tab_CloseDataAlertDialogCmd, $asm, {
		invoke: function CloseDataAlertDialogCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand('close-data-alert-dialog', this.cmdParams));
		},
		validateInvokeParams: function CloseDataAlertDialogCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_CloseDataAlertDialogCmd$Response]));
	ss.initClass($tab_CloseDataAlertDialogCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_ColorModel, $asm, {
		get_r: function ColorModel$get_R() {
			return this.$r;
		},
		get_g: function ColorModel$get_G() {
			return this.$g;
		},
		get_b: function ColorModel$get_B() {
			return this.$b;
		},
		get_a: function ColorModel$get_A() {
			return this.$a;
		},
		isLuminanceAboveThreshold: function ColorModel$IsLuminanceAboveThreshold(luminanceThreshold) {
			return this.$luminance() > luminanceThreshold;
		},
		isLStarAboveThreshold: function ColorModel$IsLStarAboveThreshold(lstarThreshold) {
			return this.$lStar() > lstarThreshold;
		},
		isLuminanceAgainstBackgroundAboveThreshold: function ColorModel$IsLuminanceAgainstBackgroundAboveThreshold(backgroundColor, luminanceThreshold) {
			return this.$luminanceAgainstBackground(backgroundColor) > luminanceThreshold;
		},
		setRGBStr: function ColorModel$SetRGBStr(str) {
			this.$rgbStr = str;
		},
		isValueAboveThreshold: function ColorModel$IsValueAboveThreshold(darkThreshold) {
			var alphaBlended = $tab_ColorModel.alphaBlend(this, $tab_ColorModel.white);
			return Math.max(Math.max(alphaBlended.get_r(), alphaBlended.get_g()), alphaBlended.get_b()) > darkThreshold;
		},
		toString: function ColorModel$ToString() {
			if (this.$cachedStr === '') {
				this.$cachedStr = ((this.$a >= $tab_ColorModel.$closeToOne) ? this.toRgb() : this.toRgba());
			}
			return this.$cachedStr;
		},
		$lStar: function ColorModel$LStar() {
			var Y = this.$luminance();
			var L = 116 * $tab_ColorModel.$labTransform(Y) - 16;
			return L;
		},
		$luminance: function ColorModel$Luminance() {
			return $tab_ColorModel.$luminance(this.get_r(), this.get_g(), this.get_b());
		},
		$luminanceAgainstBackground: function ColorModel$LuminanceAgainstBackground(backgroundColor) {
			var newR = ss.Int32.trunc(this.$a * this.$r + (1 - this.$a) * backgroundColor.get_r());
			var newG = ss.Int32.trunc(this.$a * this.$g + (1 - this.$a) * backgroundColor.get_g());
			var newB = ss.Int32.trunc(this.$a * this.$b + (1 - this.$a) * backgroundColor.get_b());
			return $tab_ColorModel.$luminance(newR, newG, newB);
		},
		getApparentColor: function ColorModel$GetApparentColor(backgroundColor) {
			var newR = ss.Int32.trunc((1 - $tab_ColorModel.$getApparentAlphaPercent(this.$r)) * backgroundColor.get_r());
			var newG = ss.Int32.trunc((1 - $tab_ColorModel.$getApparentAlphaPercent(this.$g)) * backgroundColor.get_g());
			var newB = ss.Int32.trunc((1 - $tab_ColorModel.$getApparentAlphaPercent(this.$b)) * backgroundColor.get_b());
			return new $tab_ColorModel(newR, newG, newB, this.$a);
		},
		toRgba: function ColorModel$ToRgba() {
			return 'rgba(' + this.$r + ',' + this.$g + ',' + this.$b + ',' + this.$a + ')';
		},
		toRgba255: function ColorModel$ToRgba255() {
			return 'rgba(' + this.$r + ',' + this.$g + ',' + this.$b + ',' + $tab_ColorModel.alphaFractionTo255(this.$a) + ')';
		},
		toRgb: function ColorModel$ToRgb() {
			if (this.$rgbStr === '') {
				return 'rgb(' + this.$r + ',' + this.$g + ',' + this.$b + ')';
			}
			return this.$rgbStr;
		},
		toRgbHex: function ColorModel$ToRgbHex() {
			return '#' + $tab_ColorModel.$toHex(this.$r, 2) + $tab_ColorModel.$toHex(this.$g, 2) + $tab_ColorModel.$toHex(this.$b, 2);
		},
		toArgbHex: function ColorModel$ToArgbHex() {
			var alpha255 = ss.Int32.trunc($tab_ColorModel.alphaFractionTo255(this.$a));
			return '#' + $tab_ColorModel.$toHex(alpha255, 2) + $tab_ColorModel.$toHex(this.$r, 2) + $tab_ColorModel.$toHex(this.$g, 2) + $tab_ColorModel.$toHex(this.$b, 2);
		},
		toArgbInt: function ColorModel$ToArgbInt() {
			var alpha255 = ss.Int32.trunc($tab_ColorModel.alphaFractionTo255(this.$a));
			return (alpha255 << 24) + (this.$r << 16) + (this.$g << 8) + this.$b;
		}
	});
	ss.initClass($tab_ColorPaletteCollectionModel, $asm, {
		get_paletteCollectionPresModel: function ColorPaletteCollectionModel$get_PaletteCollectionPresModel() {
			return this.pm;
		},
		get_qColorPaletteGroups: function ColorPaletteCollectionModel$get_QColorPaletteGroups() {
			return this.get_paletteCollectionPresModel().qColorPaletteGroups;
		},
		get_catColorPaletteGroups: function ColorPaletteCollectionModel$get_CatColorPaletteGroups() {
			return this.get_paletteCollectionPresModel().catColorPaletteGroups;
		},
		get_colorPalettes: function ColorPaletteCollectionModel$get_ColorPalettes() {
			var colorPresModel = this.pm;
			if (ss.isNullOrUndefined(colorPresModel)) {
				return [];
			}
			return colorPresModel.colorPalettes;
		},
		colorPaletteGroup: function ColorPaletteCollectionModel$ColorPaletteGroup(groupPresModel) {
			var indices = groupPresModel.palettesIndices;
			return _.map(indices, ss.mkdel(this, function(index) {
				return this.get_colorPalettes()[index];
			}));
		},
		update: function ColorPaletteCollectionModel$Update(newColorPalettes, context) {
			this.simpleSwapToUpdate(newColorPalettes, null, context);
		}
	}, $tab_Model);
	ss.initClass($tab_CommandController, $asm, {
		add_onUrlActionsResponse: function CommandController$add_OnUrlActionsResponse(value) {
			this.$1$OnUrlActionsResponseField = ss.delegateCombine(this.$1$OnUrlActionsResponseField, value);
		},
		remove_onUrlActionsResponse: function CommandController$remove_OnUrlActionsResponse(value) {
			this.$1$OnUrlActionsResponseField = ss.delegateRemove(this.$1$OnUrlActionsResponseField, value);
		},
		add_onInvalidation: function CommandController$add_OnInvalidation(value) {
			this.$1$OnInvalidationField = ss.delegateCombine(this.$1$OnInvalidationField, value);
		},
		remove_onInvalidation: function CommandController$remove_OnInvalidation(value) {
			this.$1$OnInvalidationField = ss.delegateRemove(this.$1$OnInvalidationField, value);
		},
		add_tabChangeCompleted: function CommandController$add_TabChangeCompleted(value) {
			this.$1$TabChangeCompletedField = ss.delegateCombine(this.$1$TabChangeCompletedField, value);
		},
		remove_tabChangeCompleted: function CommandController$remove_TabChangeCompleted(value) {
			this.$1$TabChangeCompletedField = ss.delegateRemove(this.$1$TabChangeCompletedField, value);
		},
		add_newLayoutId: function CommandController$add_NewLayoutId(value) {
			this.$1$NewLayoutIdField = ss.delegateCombine(this.$1$NewLayoutIdField, value);
		},
		remove_newLayoutId: function CommandController$remove_NewLayoutId(value) {
			this.$1$NewLayoutIdField = ss.delegateRemove(this.$1$NewLayoutIdField, value);
		},
		add_onPrimaryBootstrapSuccess: function CommandController$add_OnPrimaryBootstrapSuccess(value) {
			this.$1$OnPrimaryBootstrapSuccessField = ss.delegateCombine(this.$1$OnPrimaryBootstrapSuccessField, value);
		},
		remove_onPrimaryBootstrapSuccess: function CommandController$remove_OnPrimaryBootstrapSuccess(value) {
			this.$1$OnPrimaryBootstrapSuccessField = ss.delegateRemove(this.$1$OnPrimaryBootstrapSuccessField, value);
		},
		add_destroyView: function CommandController$add_DestroyView(value) {
			this.$1$DestroyViewField = ss.delegateCombine(this.$1$DestroyViewField, value);
		},
		remove_destroyView: function CommandController$remove_DestroyView(value) {
			this.$1$DestroyViewField = ss.delegateRemove(this.$1$DestroyViewField, value);
		},
		add_commandQueueComplete: function CommandController$add_CommandQueueComplete(value) {
			this.$1$CommandQueueCompleteField = ss.delegateCombine(this.$1$CommandQueueCompleteField, value);
		},
		remove_commandQueueComplete: function CommandController$remove_CommandQueueComplete(value) {
			this.$1$CommandQueueCompleteField = ss.delegateRemove(this.$1$CommandQueueCompleteField, value);
		},
		add_undoCommand: function CommandController$add_UndoCommand(value) {
			this.$1$UndoCommandField = ss.delegateCombine(this.$1$UndoCommandField, value);
		},
		remove_undoCommand: function CommandController$remove_UndoCommand(value) {
			this.$1$UndoCommandField = ss.delegateRemove(this.$1$UndoCommandField, value);
		},
		add_modelsUpdated: function CommandController$add_ModelsUpdated(value) {
			this.$1$ModelsUpdatedField = ss.delegateCombine(this.$1$ModelsUpdatedField, value);
		},
		remove_modelsUpdated: function CommandController$remove_ModelsUpdated(value) {
			this.$1$ModelsUpdatedField = ss.delegateRemove(this.$1$ModelsUpdatedField, value);
		},
		add_intermediateUpdate: function CommandController$add_IntermediateUpdate(value) {
			this.$1$IntermediateUpdateField = ss.delegateCombine(this.$1$IntermediateUpdateField, value);
		},
		remove_intermediateUpdate: function CommandController$remove_IntermediateUpdate(value) {
			this.$1$IntermediateUpdateField = ss.delegateRemove(this.$1$IntermediateUpdateField, value);
		},
		add_remoteCommandFailure: function CommandController$add_RemoteCommandFailure(value) {
			this.$1$RemoteCommandFailureField = ss.delegateCombine(this.$1$RemoteCommandFailureField, value);
		},
		remove_remoteCommandFailure: function CommandController$remove_RemoteCommandFailure(value) {
			this.$1$RemoteCommandFailureField = ss.delegateRemove(this.$1$RemoteCommandFailureField, value);
		},
		get_loader: function CommandController$get_Loader() {
			return this.$progressiveLoader;
		},
		get_$commandQueueEmpty: function CommandController$get_CommandQueueEmpty() {
			return this.$executingCommands.length === 0 && this.$waitingCommands.get_$count() === 0;
		},
		get_$commandQueueBlocked: function CommandController$get_CommandQueueBlocked() {
			return _.any(this.$executingCommands, $tab_CommandController.$isCommandBlocking);
		},
		get_legacySession: function CommandController$get_LegacySession() {
			return this.$session;
		},
		cancel: function CommandController$Cancel() {
			if (!tab.FeatureFlags.isEnabled('CommandCancellation')) {
				ss.Debug.assert(false, 'Should not be able to call Cancel() while feature flag is disabled.');
				return;
			}
			this.$abortProgressiveLoad();
			this.$waitIndicator.$show(true, false);
			this.$cancelling = true;
			while (ss.isValue(this.$waitingCommands.$dequeue())) {
			}
			ss.clear(this.$executingCommands);
			ss.clearKeys(this.$deferredServerResponseQueue);
			ss.clear(this.$invalidations);
			this.$deferredLayoutInfo = null;
			this.$commandHandler.cancelAllCommands(ss.mkdel(this, function(layoutStatus) {
				this.$cancelling = false;
				this.$shouldResetWorld = !!(this.$shouldResetWorld | layoutStatus.isWorldNew);
				this.$updateDeferredLayout(layoutStatus);
				var info = new $tab_InvalidationInfo();
				info.primarySheet = null;
				info.layoutStatus = layoutStatus;
				info.cmdResult = null;
				var tuple = { item1: layoutStatus.applicationPresModel, item2: info };
				this.$enqueueServerResponse(0, tuple);
				this.$processCommandResponses();
				this.$waitIndicator.$hide();
			}), function(e) {
			});
		},
		resetInvalidationHandlers: function CommandController$ResetInvalidationHandlers() {
			this.$1$OnUrlActionsResponseField = null;
			this.$1$OnInvalidationField = null;
			this.$1$OnPrimaryBootstrapSuccessField = null;
		},
		setBrowserViewportFunc: function CommandController$SetBrowserViewportFunc(viewportFunc) {
			this.$getViewportFunc = viewportFunc;
			if ($tab_ProgressiveLoader.get_progressiveLoadEnabled()) {
				this.$getViewportFunc(ss.mkdel(this, function(viewport) {
					this.$progressiveLoader.setViewport(viewport);
				}));
			}
		},
		prepareForSheetChange: function CommandController$PrepareForSheetChange() {
			this.$session.get_waitHandler().showAndLock(false);
		},
		refreshLayout: function CommandController$RefreshLayout() {
			$tab_CommandController.get_$log().debug('RefreshLayout', []);
			if (tabBootstrap.ViewerBootstrap.get_instance().get_hasBootstrapCompleted()) {
				return;
			}
			var onBootstrapSuccess = ss.mkdel(this, function(arg) {
				{
					var decodeContext = tabBootstrap.MetricsController.createContext('RLE Decode Primary', 32, null);
					try {
						arg = tab.RleDecoder.decode(arg);
					}
					finally {
						if (ss.isValue(decodeContext)) {
							decodeContext.dispose();
						}
					}
				}
				if (tab.ObjectCoverage.shouldTrack('bootstrap-initial')) {
					arg = (new tab.ObjectCoverage('bootstrap-initial')).instrument(arg, '');
				}
				var bootstrapResponse = arg;
				try {
					this.$updateTSConfigFromBootstrapResponse(bootstrapResponse);
					if (!ss.staticEquals(this.$1$OnPrimaryBootstrapSuccessField, null)) {
						this.$1$OnPrimaryBootstrapSuccessField();
					}
					var vizUriModel = $tab_VizUriModel.createForCurrentWindowLocation();
					if (vizUriModel.get_retry()) {
						vizUriModel.set_retry(false);
						vizUriModel.replaceState(null);
					}
					this.$handlePrimaryUpdate(bootstrapResponse.worldUpdate.applicationPresModel);
					this.$deferredConnectionsCommandHandler.handlePotentialBootstrapDataSourceException(bootstrapResponse);
				}
				catch ($t1) {
					var e = ss.Exception.wrap($t1);
					$tab_CommandController.handleBootstrapException(e, this.$commonDialogProvider);
				}
			});
			var onBootStrapSecondaryResponse = ss.mkdel(this, function(arg1) {
				var secondaryUpdate = arg1;
				if (ss.isValue(secondaryUpdate)) {
					$tab_CommandController.get_$log().debug('Deferring secondary payload processing', []);
					_.defer(ss.mkdel(this, function() {
						{
							var decodeContext1 = tabBootstrap.MetricsController.createContext('RLE Decode Secondary', 32, null);
							try {
								secondaryUpdate = tab.RleDecoder.decode(secondaryUpdate);
							}
							finally {
								if (ss.isValue(decodeContext1)) {
									decodeContext1.dispose();
								}
							}
						}
						{
							var secondaryContext = tabBootstrap.MetricsController.createContext('PROSEC'.toString(), 2, null);
							try {
								try {
									this.$handleSecondaryUpdate(secondaryUpdate);
								}
								catch ($t2) {
									var e1 = ss.Exception.wrap($t2);
									$tab_CommandController.handleBootstrapException(e1, this.$commonDialogProvider);
								}
							}
							finally {
								if (ss.isValue(secondaryContext)) {
									secondaryContext.dispose();
								}
							}
						}
						if ($tab_ProgressiveLoader.get_progressiveLoadEnabled()) {
							this.$startProgressiveLoad();
						}
						else {
							this.$onBootstrapComplete();
						}
					}));
				}
			});
			var onBootstrapFailure = ss.mkdel(this, function(err) {
				$tab_SessionHeartbeat.onVizqlPinged();
				var status = err['status'];
				if (status === 200) {
					var $t3 = err['message'];
					if (ss.isNullOrUndefined($t3)) {
						$t3 = err['_message'];
					}
					var message = $t3;
					if (ss.isValue(message) && message.substr(0, 12) === 'Invalid JSON') {
						$tab_CommandController.sendParentCompletedMessage();
						var errorMessage = tab.Strings.ServerErrorInvalidJSON + '<br>';
						this.$commonDialogProvider.showAlertDialog(errorMessage, tab.Strings.SessionUnknownErrorTitle, true, null);
						throw new ss.Exception('Invalid JSON');
					}
				}
				else if (status === 403) {
					var code = 0;
					var message1 = '';
					try {
						var exception = JSON.parse(err['responseText']);
						if (ss.isValue(exception)) {
							code = exception.code;
							message1 = exception.message;
						}
					}
					catch ($t4) {
					}
					$tab_CommandController.sendParentCompletedMessage();
					this.$session.get_sessionErrorHandler().handleSessionForbiddenAction(code, message1);
				}
				else if (status === 401) {
					if (tab.FeatureFlags.isEnabled('SkipConnectionsDuringLoad')) {
						var response = err['responseText'];
						var errorObject = tab.DataSourceConnectionAttemptErrorResponse.tryDeserialize(response);
						var url = (ss.isNullOrUndefined(errorObject) ? response : errorObject.RedirectUrl);
						tab.WindowHelper.locationReplace(window.self, url);
					}
					else {
						var response1 = err['responseText'];
						tab.WindowHelper.locationReplace(window.self, response1);
					}
				}
				else if (status === 410) {
					this.$session.get_sessionErrorHandler().handleSessionExpiration(true);
				}
				else if (status === 413) {
					$tab_CommandController.sendParentCompletedMessage();
					this.$session.get_sessionErrorHandler().handleSessionLimitExceeded();
				}
				else if (status !== 0) {
					$tab_CommandController.sendParentCompletedMessage();
					var errorDetails = err['responseText'];
					if (tab.FeatureFlags.isEnabled('SkipConnectionsDuringLoad')) {
						var errorObject1 = tab.DataSourceConnectionAttemptErrorResponse.tryDeserialize(errorDetails);
						if (ss.isValue(errorObject1)) {
							errorDetails = errorObject1.ErrorMessage;
						}
					}
					if (status === 502 || status === 503) {
						this.$session.get_sessionErrorHandler().handleSessionKilled(errorDetails);
					}
					else {
						this.$session.get_sessionErrorHandler().handleUnknownErrorStatus(errorDetails);
					}
					this.$session.nudgeWait();
				}
			});
			tabBootstrap.ViewerBootstrap.get_instance().waitOnInitialLayoutModel(onBootstrapSuccess, onBootstrapFailure, onBootStrapSecondaryResponse);
		},
		delayLocalUrlActions: function CommandController$DelayLocalUrlActions(urlActions) {
			this.$delayedLocalUrlActions = this.$delayedLocalUrlActions.concat.apply(this.$delayedLocalUrlActions, urlActions);
		},
		worldCheckpoint: function CommandController$WorldCheckpoint() {
			return this.$worldCheckpoint.worldCheckpoint();
		},
		$transitionGuestSession: function CommandController$TransitionGuestSession(successCallback) {
			var onSuccess = function() {
				successCallback();
			};
			var args = {};
			args.type = 'POST';
			args.url = $tab_CommandController.$formatSessionMethod('transitionGuest', this.$session);
			var pathnameParts = tab.MiscUtil.get_urlPathnameParts();
			var sheetId = (ss.keyExists(pathnameParts, 3) ? pathnameParts[3] : '');
			var authoringSheetname = tsConfig.current_sheet_name;
			var xhrData = ss.mkdict([':authSheet', authoringSheetname, 'sheet_id', sheetId]);
			args.data = xhrData;
			var handler = new $tab_SessionAjaxCallManager(this.$session, null, onSuccess, null, true, true);
			$tab_XhrUtil.helper(args, handler);
		},
		$onGlobalError: function CommandController$OnGlobalError(m, url, line, col, err) {
			var errorMessage = tab.Strings.UnhandledExceptionMessage(this.$session.get_id(), m);
			var links = $tab_CommandController.$appendErrorLinksToMessageIfPresent(this.$session.get_id(), m, err);
			this.$commonDialogProvider.showAlertDialog(errorMessage, tab.Strings.UnhandledExceptionTitle, true, links);
			return false;
		},
		$onProgressiveUpdate: function CommandController$OnProgressiveUpdate(progressivePM, finalUpdate) {
			if (ss.isValue(progressivePM)) {
				$tab_Model.nonWorldUpdate(ss.mkdel(this, function(ctx) {
					ctx.dialogProvider = this.$commonDialogProvider;
					$tab_ApplicationModel.get_instance().update(progressivePM, ctx);
					this.$worldCheckpoint.checkpointAppPresModel();
				}));
				this.$raiseModelsUpdated();
				if (!finalUpdate) {
					this.$notifyIntermediateUpdate();
				}
			}
		},
		$notifyIntermediateUpdate: function CommandController$NotifyIntermediateUpdate() {
			if (!ss.staticEquals(this.$1$IntermediateUpdateField, null)) {
				this.$1$IntermediateUpdateField();
			}
		},
		$initializeProgressiveLoader: function CommandController$InitializeProgressiveLoader() {
			ss.Debug.assert(ss.isNullOrUndefined(this.$progressiveLoader), 'CommandController tried to create ProgressiveLoader when it already exists');
			if ($tab_ProgressiveLoader.get_progressiveLoadEnabled()) {
				this.$progressiveLoader = new $tab_ProgressiveLoader();
				this.$progressiveLoader.add_progressiveLoad(ss.mkdel(this, this.$onProgressiveUpdate));
				this.$progressiveLoader.add_progressiveLoadComplete(ss.mkdel(this, this.$onProgressiveLoadComplete));
				this.$callOnProgLoadComplete = [];
			}
		},
		$startProgressiveLoad: function CommandController$StartProgressiveLoad() {
			$tab_CommandController.get_$log().info('Starting Progressive Load', []);
			this.$progressiveLoader.start();
		},
		$abortProgressiveLoad: function CommandController$AbortProgressiveLoad() {
			if ($tab_ProgressiveLoader.get_progressiveLoadEnabled() && this.$progressiveLoader.get_hasZonesToLoad()) {
				$tab_CommandController.get_$log().info('Aborting Progressive Load', []);
				this.$progressiveLoader.abort();
				this.$callOnProgLoadComplete = [];
				this.$onProgressiveLoadComplete();
			}
		},
		$onProgressiveLoadComplete: function CommandController$OnProgressiveLoadComplete() {
			$tab_CommandController.get_$log().info('Progressive Load Complete', []);
			this.$scheduleAllZonesLoaded();
			this.$onBootstrapComplete();
			$tab_WorldUpdateInterceptor.get().raiseOnProgressiveLoadComplete();
			for (var $t1 = 0; $t1 < this.$callOnProgLoadComplete.length; $t1++) {
				var act = this.$callOnProgLoadComplete[$t1];
				act();
			}
			this.$callOnProgLoadComplete = [];
		},
		$handlePrimaryUpdate: function CommandController$HandlePrimaryUpdate(appPM) {
			{
				var $t3 = tabBootstrap.MetricsController.createContext('PROPRI', 2, null);
				try {
					var $t1 = new $tab_DeferredModelEventHandler();
					$t1.exceptionHandler = ss.mkdel(this, function(e) {
						$tab_CommandController.handleBootstrapException(e, this.$commonDialogProvider);
					});
					var modelEventHandler = $t1;
					var modelUpdateContext = { dialogProvider: this.$commonDialogProvider, eventHandler: modelEventHandler };
					$tab_WorldUpdateInterceptor.get().raiseOnBootstrapResponse(appPM);
					if ($tab_ProgressiveLoader.get_progressiveLoadEnabled()) {
						appPM = this.$progressiveLoader.extractZoneContent(appPM);
					}
					{
						var initModelsContext = tabBootstrap.MetricsController.createContext('MDLINI'.toString(), 2, null);
						try {
							var applicationModel = $tab_ApplicationModel.get_instance();
							applicationModel.update(appPM, modelUpdateContext);
						}
						finally {
							if (ss.isValue(initModelsContext)) {
								initModelsContext.dispose();
							}
						}
					}
					this.$worldCheckpoint.checkpointAppPresModel();
					$tab_StartupUtils.notifyModelsInitialized();
					{
						var $t2 = tabBootstrap.MetricsController.createContext('MDLEVT'.toString(), 2, null);
						try {
							modelEventHandler.fireDeferredEvents();
						}
						finally {
							if (ss.isValue($t2)) {
								$t2.dispose();
							}
						}
					}
				}
				finally {
					if (ss.isValue($t3)) {
						$t3.dispose();
					}
				}
			}
			this.$raiseModelsUpdated();
			if (!$tab_ProgressiveLoader.get_progressiveLoadEnabled()) {
				this.$scheduleAllZonesLoaded();
			}
			this.get_legacySession().nudgeWait();
		},
		$handleSecondaryUpdate: function CommandController$HandleSecondaryUpdate(secondaryUpdate) {
			var secondaryInfo = secondaryUpdate['secondaryInfo'.toString()];
			if (!ss.isValue(secondaryInfo) || !ss.isValue(secondaryInfo.presModelMap) || ss.getKeyCount(secondaryInfo.presModelMap) === 0) {
				return;
			}
			var appClone = $tab_ApplicationModel.get_instance().get_appPresModel();
			if (ss.keyExists(secondaryInfo.presModelMap, 'dataDictionary')) {
				var presModelHolder = secondaryInfo.presModelMap['dataDictionary'].presModelHolder;
				var dataDictionary = presModelHolder['genDataDictionaryPresModel'];
				if (ss.isValue(dataDictionary)) {
					appClone.dataDictionary = dataDictionary;
				}
			}
			var $t1 = new $tab_DeferredModelEventHandler();
			$t1.exceptionHandler = ss.mkdel(this, function(e) {
				$tab_CommandController.handleBootstrapException(e, this.$commonDialogProvider);
			});
			var eventHandler = $t1;
			var modelUpdateContext = { dialogProvider: this.$commonDialogProvider, eventHandler: eventHandler };
			if (ss.keyExists(secondaryInfo.presModelMap, 'vizData')) {
				var dashboard = appClone.workbookPresModel.dashboardPresModel;
				var presModelHolder1 = secondaryInfo.presModelMap['vizData'].presModelHolder;
				var vizDatas = presModelHolder1['genPresModelMapPresModel'];
				if ($tab_ProgressiveLoader.get_progressiveLoadEnabled() && this.$progressiveLoader.get_hasZonesToLoad()) {
					this.$progressiveLoader.updateZonesWithVizData(vizDatas, modelUpdateContext);
				}
				else {
					$tab_VizDataUtils.addVizDataToZones(vizDatas.presModelMap, dashboard.zones);
				}
			}
			$tab_ApplicationModel.get_instance().update(appClone, modelUpdateContext);
			this.$worldCheckpoint.checkpointAppPresModel();
			if ($tab_ModelUtils.hasAnyImpliedSelection()) {
				eventHandler.fireDeferredEvents();
			}
			this.$raiseModelsUpdated();
			$tab_CommandController.get_$log().debug('Secondary bootstrap complete', []);
		},
		$updateTSConfigFromBootstrapResponse: function CommandController$UpdateTSConfigFromBootstrapResponse(bootstrapResponse) {
			tsConfig.layoutid = bootstrapResponse.layoutId;
			this.$session.set_layoutId(tsConfig.layoutid);
			var sessionId = bootstrapResponse.newSessionId;
			if (!tab.MiscUtil.isNullOrEmpty$1(sessionId)) {
				tsConfig.sessionid = sessionId;
			}
			var workbookLocale = bootstrapResponse.workbookLocale;
			if (!ss.isNullOrEmptyString(workbookLocale)) {
				tsConfig.workbookLocale = workbookLocale;
			}
			var clientNum = bootstrapResponse.newClientNum;
			if (!ss.isNullOrEmptyString(clientNum)) {
				tsConfig.clientNumber = clientNum;
				tabBootstrap.Utility.addToUrlHash(tabBootstrap.Utility.CLIENTNO, clientNum);
			}
			tsConfig.current_sheet_name = bootstrapResponse.sheetName;
			$tab_XhrUtil.set_currentTabName(tsConfig.current_sheet_name);
			tsConfig.workbook_allow_subscriptions = bootstrapResponse.allowSubscriptions;
			tsConfig.allow_subscribe_on_data_present = bootstrapResponse.allowSubscribeOnDataPresent;
			if (ss.isValue(bootstrapResponse.worldUpdate) && ss.isValue(bootstrapResponse.worldUpdate.applicationPresModel.workbookPresModel.dashboardPresModel)) {
				tsConfig.current_sheet_type = bootstrapResponse.worldUpdate.applicationPresModel.workbookPresModel.dashboardPresModel.sheetLayoutInfo.sheetType;
			}
		},
		$kickTheQueue: function CommandController$KickTheQueue() {
			while (this.$waitingCommands.get_$count() > 0 && !this.get_$commandQueueBlocked()) {
				this.$executeClientCommand(this.$waitingCommands.$dequeue());
			}
			$tab_CommandController.get_$log().debug('KickTheQueue: ' + this.$waitingCommands.get_$count() + ' are blocked and waiting.', []);
		},
		$executeClientCommand: function CommandController$ExecuteClientCommand(c) {
			$tab_CommandController.get_$log().debug('Executing client command, %o', [c]);
			this.$executingCommands.push(c);
			if (c.get_isBlocking()) {
				this.$waitIndicator.$show(c.get_blockType() === 'immediately' || c.get_blockType() === 'immediatelySubtle', c.get_blockType() === 'immediatelySubtle');
			}
			var eventHandler = new $tab_DeferredModelEventHandler();
			var modelUpdateContext = { dialogProvider: this.$commonDialogProvider, eventHandler: eventHandler };
			var t = this.$transactor.beginTransaction(modelUpdateContext);
			var localChange;
			try {
				c.execute(t, this.$commandHandler, ss.mkdel(this, function(executionResult) {
					this.$commandCompleted(c, executionResult);
				}));
				localChange = this.$transactor.endTransaction();
				if ($tab_ApplicationModel.get_instance().get_isLocalRenderMode() && !$tab_CommandController.fireDeferredUrlActions) {
					this.$executeUrlActions(this.$delayedLocalUrlActions);
				}
			}
			catch ($t1) {
				var e = ss.Exception.wrap($t1);
				tab.ErrorTrace.report(e, false);
				$tab_CommandController.get_$log().error('Error while executing a command: %s, %s', [c.get_commandName(), e.get_message()]);
				this.$transactor.rollbackTransaction();
				this.$commandCompleted(c, new $tab_CommandExecutionResult(false, e));
				return;
			}
			finally {
				this.$resetDelayedLocalUrlActions();
			}
			var mc = null;
			if (c.get_hasLocalComponent()) {
				mc = tabBootstrap.MetricsController.createContext('PROLOC'.toString(), 8, c.buildCommandMetricsParameters());
			}
			{
				var $t2 = mc;
				try {
					if (ss.isValue(localChange)) {
						if ($tab_ProgressiveLoader.get_progressiveLoadEnabled()) {
							localChange = this.$processUpdateForProgressiveLoad(localChange, modelUpdateContext, true);
						}
						$tab_ApplicationModel.get_instance().update(localChange, modelUpdateContext);
						this.$worldCheckpoint.markCurrentWorldAsDirty();
						eventHandler.fireDeferredEvents();
						this.$raiseModelsUpdated();
					}
				}
				finally {
					if (ss.isValue($t2)) {
						$t2.dispose();
					}
				}
			}
			if (this.$executingCommands.length > 0) {
				this.$allContentReady = false;
			}
		},
		$commandCompleted: function CommandController$CommandCompleted(c, executionResult) {
			var mc = null;
			if (c.get_hasRemoteComponent()) {
				mc = tabBootstrap.MetricsController.createContext('PROREM'.toString(), 8, c.buildCommandMetricsParameters());
			}
			{
				var $t1 = mc;
				try {
					try {
						ss.remove(this.$executingCommands, c);
						if (this.get_$commandQueueEmpty()) {
							this.$processCommandResponses();
						}
					}
					finally {
						this.processingRenderModeChange = false;
						this.processingStoryPointChange = false;
					}
				}
				finally {
					if (ss.isValue($t1)) {
						$t1.dispose();
					}
				}
			}
			this.$handleDataSourceExceptions(c, executionResult);
			if (this.get_$commandQueueEmpty()) {
				this.$waitIndicator.$hide();
			}
			this.$kickTheQueue();
		},
		$handleDataSourceExceptions: function CommandController$HandleDataSourceExceptions(c, executionResult) {
			if (!executionResult.succeeded && tab.FeatureFlags.isEnabled('SkipConnectionsDuringLoad')) {
				var wasHandled = this.$deferredConnectionsCommandHandler.handle(executionResult.error, c);
				if (wasHandled) {
					this.$worldCheckpoint.revertLocalChanges();
					this.$waitIndicator.$hide();
				}
			}
		},
		$executeUrlActions: function CommandController$ExecuteUrlActions(urlActions) {
			var urlsActionsToFire = (ss.isValue(urlActions) ? ss.arrayClone(urlActions) : []);
			this.$resetDelayedLocalUrlActions();
			if (ss.isValue(this.$1$OnUrlActionsResponseField)) {
				if (urlsActionsToFire.length > 0) {
					this.$1$OnUrlActionsResponseField(urlsActionsToFire, this.$commonDialogProvider);
				}
			}
		},
		$resetDelayedLocalUrlActions: function CommandController$ResetDelayedLocalUrlActions() {
			this.$delayedLocalUrlActions.length = 0;
		},
		$handleRemoteCommandSuccess: function CommandController$HandleRemoteCommandSuccess(sequenceID, c, o) {
			if (!ss.isValue(c) || !ss.isValue(o)) {
				return;
			}
			var response = o['vqlCmdResponse'.toString()];
			if (!ss.isValue(response)) {
				return;
			}
			if (ss.isValue(response.layoutStatus)) {
				var layoutStatus = response.layoutStatus;
				if (ss.isValue(layoutStatus.isWorldNew)) {
					this.$shouldResetWorld = !!(this.$shouldResetWorld | layoutStatus.isWorldNew);
				}
				if (ss.isValue(layoutStatus.urlActionList) && !$tab_ApplicationModel.get_instance().get_isLocalRenderMode() || $tab_CommandController.fireDeferredUrlActions) {
					if (layoutStatus.urlActionList.length > 0) {
						$tab_CommandController.fireDeferredUrlActions = false;
						this.$executeUrlActions(layoutStatus.urlActionList);
					}
				}
				this.$updateDeferredLayout(layoutStatus);
				var primarySheet = null;
				if (ss.isValue(c.commandParams) && !ss.referenceEquals(c.commandName, 'render-tooltip-server'.toString())) {
					if (ss.keyExists(c.commandParams, 'worksheet')) {
						primarySheet = c.commandParams['worksheet'];
					}
					else if (ss.keyExists(c.commandParams, 'visualIdPresModel')) {
						var visualIdPm;
						if (typeof(c.commandParams['visualIdPresModel']) === 'string') {
							var visualdIdJsonString = c.commandParams['visualIdPresModel'];
							visualIdPm = JSON.parse(visualdIdJsonString);
						}
						else {
							visualIdPm = c.commandParams['visualIdPresModel'];
						}
						primarySheet = (ss.isValue(visualIdPm.worksheet) ? visualIdPm.worksheet : null);
					}
				}
				var info = new $tab_InvalidationInfo();
				info.primarySheet = primarySheet;
				info.layoutStatus = response.layoutStatus;
				info.cmdResult = response.cmdResultList[0];
				var appPm = null;
				if (ss.isValue(response.layoutStatus.applicationPresModel)) {
					appPm = response.layoutStatus.applicationPresModel;
				}
				var tuple = { item1: appPm, item2: info };
				this.$enqueueServerResponse(sequenceID, tuple);
				var sheetChanged = ss.isValue(this.$deferredLayoutInfo) && !ss.referenceEquals(tsConfig.current_sheet_name, this.$deferredLayoutInfo.sheetName);
				var $t1 = new $tab_CommandResponseEventArgs();
				$t1.set_applicationPresModel(appPm);
				$t1.set_worldUpdateCommand(c);
				$t1.set_sheetChanged(sheetChanged);
				$t1.set_rebuildTheWorld(this.$shouldResetWorld);
				var args = $t1;
				$tab_WorldUpdateInterceptor.get().raiseOnCommandResponse(args);
			}
		},
		$updateDeferredLayout: function CommandController$UpdateDeferredLayout(layoutStatus) {
			if (ss.isValue(layoutStatus.applicationPresModel) && ss.isValue(layoutStatus.applicationPresModel.workbookPresModel) && ss.isValue(layoutStatus.applicationPresModel.workbookPresModel.dashboardPresModel) && ss.isValue(layoutStatus.applicationPresModel.workbookPresModel.dashboardPresModel.sheetLayoutInfo)) {
				this.$deferredLayoutInfo = layoutStatus.applicationPresModel.workbookPresModel.dashboardPresModel.sheetLayoutInfo;
			}
		},
		$handleRemoteCommandFailure: function CommandController$HandleRemoteCommandFailure(sequenceID, c, e) {
			$tab_CommandController.get_$log().debug('HandleRemoteCommandFailure: SequenceId:%d Command:%s, Exception: %s', [sequenceID, c.commandName, e.get_message()]);
			var $t1 = new $tab_InvalidationInfo();
			$t1.cmdResult = { commandName: c.commandName, commandReturn: e };
			var info = $t1;
			var tuple = { item1: null, item2: info };
			this.$enqueueServerResponse(sequenceID, tuple);
			this.$raiseRemoteCommandFailure(e);
		},
		$processCommandResponses: function CommandController$ProcessCommandResponses() {
			ss.Debug.assert(this.get_$commandQueueEmpty(), 'should only call after all commands have been processed');
			if ($tab_ApplicationModel.get_instance().get_isOffline()) {
				return;
			}
			var eventHandler = new $tab_DeferredModelEventHandler();
			var modelUpdateContext = { dialogProvider: this.$commonDialogProvider, eventHandler: eventHandler };
			var hasServerResponse = ss.getKeyCount(this.$deferredServerResponseQueue) > 0;
			var sheetChanged = false;
			var layoutSheetName = tsConfig.current_sheet_name;
			if (ss.isValue(this.$deferredLayoutInfo)) {
				sheetChanged = !ss.referenceEquals(tsConfig.current_sheet_name, this.$deferredLayoutInfo.sheetName);
				layoutSheetName = this.$deferredLayoutInfo.sheetName;
				this.get_legacySession().set_layoutId(this.$deferredLayoutInfo.layoutId.toString());
				if (sheetChanged) {
					if (!ss.staticEquals($tab_CommandController.$1$SheetNameChangedField, null)) {
						$tab_CommandController.$1$SheetNameChangedField();
					}
				}
				if (sheetChanged || this.$shouldResetWorld) {
					this.$1$DestroyViewField();
				}
			}
			$tab_CommandController.get_$log().debug('Flushing the queue of %d pending server responses, shouldResetWorld=%s, sheetChanged=%s, layoutId=%s', [ss.getKeyCount(this.$deferredServerResponseQueue), this.$shouldResetWorld, sheetChanged, this.get_legacySession().get_layoutId()]);
			var oldRenderMode = this._getRenderMode();
			var oldStoryState = this.$getStoryState();
			this.$transactor.rollbackTransactions(modelUpdateContext);
			if (this.$shouldResetWorld) {
				$tab_ApplicationModel.get_instance().get_workbook().handleWorldReset();
			}
			if (this.$shouldResetWorld || sheetChanged) {
				this.$abortProgressiveLoad();
			}
			this.$applyServerResponses(layoutSheetName, oldRenderMode, modelUpdateContext);
			ss.clearKeys(this.$deferredServerResponseQueue);
			this.$worldCheckpoint.checkpointAppPresModel();
			this.$transactor.resetTransactedState();
			this.$processStoryPointChanges(oldStoryState);
			this.$processDeferredLayout(sheetChanged);
			if (hasServerResponse) {
				$tab_ModelUtils.reValidateVisualModels(modelUpdateContext);
			}
			eventHandler.fireDeferredEvents();
			this.$handleInvalidations();
			this.$raiseModelsUpdated();
			this.$worldUpdateComplete();
		},
		$worldUpdateComplete: function CommandController$WorldUpdateComplete() {
			this.$postUpdateWorldActions.push(ss.mkdel(this, this.$raiseCommandQueueComplete));
			this.$postUpdateWorldActions.push(ss.mkdel(this, function() {
				$tab_ImageTileTracker.callWhenImagesLoaded(ss.mkdel(this, function() {
					this.$allContentReady = true;
				}));
			}));
			if ($tab_ProgressiveLoader.get_progressiveLoadEnabled() && this.$progressiveLoader.get_hasZonesToLoad()) {
				this.$callOnProgLoadComplete.push(ss.mkdel(this, function() {
					this.$doPostWorldUpdateActions();
				}));
			}
			else {
				this.$doPostWorldUpdateActions();
			}
			this.$shouldResetWorld = false;
		},
		$doPostWorldUpdateActions: function CommandController$DoPostWorldUpdateActions() {
			for (var $t1 = 0; $t1 < this.$postUpdateWorldActions.length; $t1++) {
				var action = this.$postUpdateWorldActions[$t1];
				action();
			}
			ss.clear(this.$postUpdateWorldActions);
		},
		$processStoryPointChanges: function CommandController$ProcessStoryPointChanges(prevStoryState) {
			if (prevStoryState.get_$isStory()) {
				var currentStoryState = this.$getStoryState();
				if (currentStoryState.get_$isStory() && prevStoryState.get_$storyPointId() !== currentStoryState.get_$storyPointId() && ss.isValue(prevStoryState.get_$sheetName()) && ss.referenceEquals(prevStoryState.get_$sheetName(), currentStoryState.get_$sheetName())) {
					this.processingStoryPointChange = true;
				}
			}
		},
		$processDeferredLayout: function CommandController$ProcessDeferredLayout(sheetChanged) {
			if (ss.isNullOrUndefined(this.$deferredLayoutInfo)) {
				return;
			}
			if (!sheetChanged && !this.$shouldResetWorld) {
				return;
			}
			if (sheetChanged) {
				try {
					if (ss.isValue(window.parent) && typeof(window.parent['handleSheetChanged']) === 'function') {
						window.parent['handleSheetChanged'](this.$deferredLayoutInfo.sheetName, this.$deferredLayoutInfo.repositoryUrl);
					}
				}
				catch ($t1) {
				}
			}
			if (tsConfig.is_mobile_app && !('sheetname' in this.$deferredLayoutInfo)) {
				this.$deferredLayoutInfo['sheetName'] = this.$deferredLayoutInfo.sheetName;
			}
			var oldNewSheetNames = { item1: tsConfig.current_sheet_name, item2: this.$deferredLayoutInfo.sheetName };
			if (!ss.staticEquals(this.$1$NewLayoutIdField, null)) {
				this.$1$NewLayoutIdField(this.$deferredLayoutInfo);
			}
			$tab_AckbarEventsHelper.get().onNewLayoutId([this.$deferredLayoutInfo]);
			this.$postUpdateWorldActions.push(ss.mkdel(this, function() {
				if (!ss.staticEquals(this.$1$TabChangeCompletedField, null)) {
					this.$1$TabChangeCompletedField(oldNewSheetNames);
				}
			}));
			this.$deferredLayoutInfo = null;
		},
		$applyServerResponses: function CommandController$ApplyServerResponses(layoutSheetName, oldRenderMode, context) {
			var commandSequenceIDs = _.keys(this.$deferredServerResponseQueue);
			commandSequenceIDs = commandSequenceIDs.sort(function(key1, key2) {
				var id1 = parseInt(key1);
				var id2 = parseInt(key2);
				return ((id1 > id2) ? 1 : -1);
			});
			var applicationModel = $tab_ApplicationModel.get_instance();
			for (var $t1 = 0; $t1 < commandSequenceIDs.length; $t1++) {
				var sequenceID = commandSequenceIDs[$t1];
				var tuple = this.$deferredServerResponseQueue[sequenceID];
				var commandApp = tuple.item1;
				var commandInvalidInfo = tuple.item2;
				if (ss.isNullOrUndefined(commandApp) || ss.isNullOrUndefined(commandInvalidInfo) || ss.isNullOrUndefined(commandInvalidInfo.layoutStatus)) {
					continue;
				}
				var commandSheetName = commandInvalidInfo.layoutStatus.active_tab || '';
				if (!ss.referenceEquals(commandSheetName, layoutSheetName)) {
					continue;
				}
				if ($tab_ProgressiveLoader.get_progressiveLoadEnabled()) {
					commandApp = this.$processUpdateForProgressiveLoad(commandApp, context, false);
				}
				applicationModel.update(commandApp, context);
				this.$invalidations.push(commandInvalidInfo);
				if (ss.isValue(commandInvalidInfo.layoutStatus.undoPosition)) {
					if (commandInvalidInfo.layoutStatus.undoPosition < this.get_legacySession().get_historyPosition()) {
						this.$raiseUndoCommand();
					}
					if (commandInvalidInfo.layoutStatus.undoPosition > this.get_legacySession().get_historyPosition()) {
						this.$session.$pushServerUndo('');
					}
					this.get_legacySession().set_historyPosition(commandInvalidInfo.layoutStatus.undoPosition);
				}
				if (!this.processingRenderModeChange && commandApp.renderMode !== oldRenderMode) {
					this.processingRenderModeChange = true;
					this.$waitIndicator.$showFullWaitHandlerNow(false);
				}
			}
		},
		$processUpdateForProgressiveLoad: function CommandController$ProcessUpdateForProgressiveLoad(updatePM, context, local) {
			if ($tab_ProgressiveLoader.get_progressiveLoadEnabled()) {
				var currentPM = $tab_ApplicationModel.get_instance().get_appPresModel();
				var storyChanged = false;
				if ($tab_ApplicationModel.get_instance().get_workbook().get_isCurrentSheetStoryboard() && ss.isValue($tab_ApplicationModel.get_instance().get_workbook().get_storyboard().get_flipboard())) {
					var currentStoryPointId = $tab_ApplicationModel.get_instance().get_workbook().get_storyboard().get_flipboard().get_currentStoryPointId();
					var newStoryId = $tab_CommandController.$getStoryPointIdFromUpdate(updatePM);
					storyChanged = ss.isValue(newStoryId) && newStoryId !== currentStoryPointId;
				}
				var newSheet = $tab_CommandController.$getSheetNameFromUpdate(updatePM);
				var sheetChanged = !ss.isNullOrEmptyString(newSheet) && !ss.referenceEquals(newSheet, $tab_CommandController.$getSheetNameFromUpdate(currentPM));
				if (storyChanged || sheetChanged) {
					this.$abortProgressiveLoad();
					updatePM = this.$progressiveLoader.extractZoneContent(updatePM);
					this.$startProgressiveLoad();
				}
				else {
					updatePM = this.$progressiveLoader.processModelUpdate(updatePM, context, local);
				}
			}
			return updatePM;
		},
		$handleInvalidations: function CommandController$HandleInvalidations() {
			for (var $t1 = 0; $t1 < this.$invalidations.length; $t1++) {
				var invalidationInfo = this.$invalidations[$t1];
				$tab_CommandController.get_$log().debug('OnInvalidation', []);
				if (!ss.staticEquals(this.$1$OnInvalidationField, null)) {
					this.$1$OnInvalidationField(invalidationInfo);
				}
				this.$deferredConnectionsCommandHandler.handlePotentialTabSwitchDataSourceException(invalidationInfo.layoutStatus);
			}
			ss.clear(this.$invalidations);
		},
		$onBootstrapComplete: function CommandController$OnBootstrapComplete() {
			if (this.$bootstrapComplete) {
				return;
			}
			this.$bootstrapComplete = true;
			$tab_CommandController.$logClientFullyLoaded();
			$tab_StartupUtils.$notifyClientFullyLoaded();
			$tab_ImageTileTracker.callWhenImagesLoaded(ss.mkdel(this, function() {
				this.$allContentReady = true;
			}));
			$tab_CommandController.sendParentCompletedMessage();
			$tab_SessionHeartbeat.onVizqlPinged();
			$tab_CommandControllerTelemetry.$bootstrapCompleteTelemetry();
		},
		$enqueueServerResponse: function CommandController$EnqueueServerResponse(sequenceID, tuple) {
			if (ss.isValue(tuple)) {
				$tab_CommandController.get_$log().debug('Adding a server response to the queue', []);
				this.$deferredServerResponseQueue[sequenceID.toString()] = tuple;
			}
		},
		_getRenderMode: function CommandController$GetRenderMode() {
			return $tab_ApplicationModel.get_instance().get_renderMode();
		},
		$getStoryState: function CommandController$GetStoryState() {
			return new $tab_$StoryState();
		},
		$raiseCommandQueueComplete: function CommandController$RaiseCommandQueueComplete() {
			if (ss.isValue(this.$1$CommandQueueCompleteField)) {
				this.$1$CommandQueueCompleteField();
			}
		},
		$raiseUndoCommand: function CommandController$RaiseUndoCommand() {
			if (ss.isValue(this.$1$UndoCommandField)) {
				this.$1$UndoCommandField();
			}
		},
		$raiseModelsUpdated: function CommandController$RaiseModelsUpdated() {
			if (ss.isValue(this.$1$ModelsUpdatedField)) {
				this.$1$ModelsUpdatedField();
			}
		},
		$raiseRemoteCommandFailure: function CommandController$RaiseRemoteCommandFailure(e) {
			if (ss.isValue(this.$1$RemoteCommandFailureField)) {
				this.$1$RemoteCommandFailureField(e);
			}
		},
		$scheduleAllZonesLoaded: function CommandController$ScheduleAllZonesLoaded() {
			if (this.$bootstrapComplete) {
				return;
			}
			var fireAllZonesEvent = function() {
				var parameters = {};
				parameters['t'] = tabBootstrap.MetricsController.getTiming();
				parameters['d'] = 'ALLZNS';
				var evt = new tabBootstrap.MetricsEvent('gen', 2, parameters);
				tabBootstrap.MetricsController.logEvent(evt);
			};
			$tab_ImageTileTracker.callWhenImagesLoaded(function() {
				$tab_ModuleManager.registerModulesLoadedCallback(fireAllZonesEvent);
			});
		},
		$abortLoadForCommandIfAppropriate: function CommandController$AbortLoadForCommandIfAppropriate(cmd) {
			var commandName = cmd.get_commandName();
			if (commandName === 'next-story-point' || commandName === 'previous-story-point' || commandName === 'set-active-story-point' || commandName === 'ensure-layout-for-sheet' || commandName === 'revert-workbook') {
				this.$abortProgressiveLoad();
			}
		},
		$isWaitingOnCommands: function CommandController$IsWaitingOnCommands() {
			return ss.getKeyCount(this.$deferredServerResponseQueue) > 0 || this.$executingCommands.length > 0 || this.$waitingCommands.get_$count() > 0;
		}
	});
	ss.initClass($tab_CommandControllerTelemetry, $asm, {});
	ss.initClass($tab_CommandExecutionResult, $asm, {});
	ss.initEnum($tab_CommandInterceptorResult, $asm, { proceed: 0, stop: 1 });
	ss.initInterface($tab_ICommandModel, $asm, { get_commandType: null, get_name: null });
	ss.initClass($tab_UbertipButtonModel, $asm, {
		get_serializedCommand: function UbertipButtonModel$get_SerializedCommand() {
			return this.$2$SerializedCommandField;
		},
		set_serializedCommand: function UbertipButtonModel$set_SerializedCommand(value) {
			this.$2$SerializedCommandField = value;
		},
		get_isMenuButton: function UbertipButtonModel$get_IsMenuButton() {
			return ss.isValue(this.get_wrappedCommandItemPresModel()) && ss.isValue(this.get_wrappedCommandItemPresModel().get_commands());
		},
		get_asMenuButton: function UbertipButtonModel$get_AsMenuButton() {
			ss.Debug.assert(this.get_isMenuButton(), 'expecting IsMenuButton to be true when casting this to a button menu');
			return this;
		},
		get_isPlaceholder: function UbertipButtonModel$get_IsPlaceholder() {
			return this.$2$IsPlaceholderField;
		},
		set_isPlaceholder: function UbertipButtonModel$set_IsPlaceholder(value) {
			this.$2$IsPlaceholderField = value;
		},
		get_legacyCommandModel: function UbertipButtonModel$get_LegacyCommandModel() {
			return this.$2$LegacyCommandModelField;
		},
		set_legacyCommandModel: function UbertipButtonModel$set_LegacyCommandModel(value) {
			this.$2$LegacyCommandModelField = value;
		},
		get_status: null,
		get_commandType: null,
		get_name: null,
		get_description: null,
		get_imageRes: null,
		get_wrappedCommandItemPresModel: null
	}, $tab_Model, [$tab_ICommandModel]);
	ss.initClass($tab_CommandItemBasedUbertipButtonModel, $asm, {
		get_legacyCommandModel: function CommandItemBasedUbertipButtonModel$get_LegacyCommandModel() {
			var $t1 = new $tab_CommandModel();
			$t1.set_commandType(this.get_commandType());
			$t1.command = this.get_serializedCommand();
			$t1.set_name(this.get_name());
			$t1.description = this.get_description();
			$t1.imageRes = this.get_imageRes();
			$t1.status = this.get_status();
			return $t1;
		},
		set_legacyCommandModel: function CommandItemBasedUbertipButtonModel$set_LegacyCommandModel(value) {
			ss.Debug.assert(false, 'CommandItemBased UbertipButtonModel should never set CommandModel explicitly.');
		},
		get_status: function CommandItemBasedUbertipButtonModel$get_Status() {
			var state = this.get_wrappedCommandItemPresModel().get_enabled();
			return ((ss.isNullOrUndefined(state) || state) ? 'enabled' : 'disabled');
		},
		get_commandType: function CommandItemBasedUbertipButtonModel$get_CommandType() {
			if (ss.isNullOrUndefined(this.get_serializedCommand())) {
				return 99;
			}
			var serializedCommandType = $tab_CommandSerializer.getCommandType(this.get_serializedCommand());
			return (ss.isValue(serializedCommandType) ? ss.unbox(serializedCommandType) : 99);
		},
		get_name: function CommandItemBasedUbertipButtonModel$get_Name() {
			return this.get_wrappedCommandItemPresModel().get_name();
		},
		get_description: function CommandItemBasedUbertipButtonModel$get_Description() {
			return this.get_wrappedCommandItemPresModel().get_description();
		},
		get_imageRes: function CommandItemBasedUbertipButtonModel$get_ImageRes() {
			if (ss.isNullOrUndefined(this.get_wrappedCommandItemPresModel().get_iconRes())) {
				return null;
			}
			return ss.coalesce($tab_TabResources.lookupFullResourceAlias(this.get_wrappedCommandItemPresModel().get_iconRes()), null);
		},
		get_wrappedCommandItemPresModel: function CommandItemBasedUbertipButtonModel$get_WrappedCommandItemPresModel() {
			if (ss.isNullOrUndefined(this.pm)) {
				return null;
			}
			return $tab_CommandItemWrapper.create(this.pm);
		},
		update: function CommandItemBasedUbertipButtonModel$Update(commandItemPresModel, tupleId) {
			this.pm = commandItemPresModel;
			this.set_serializedCommand($tab_CommandSerializer.deserialize(this.get_wrappedCommandItemPresModel().get_command()));
			if (ss.isValue(this.get_serializedCommand()) && tupleId !== $tab_VizDataUtils.invalidTupleId && !ss.isValue(this.get_serializedCommand().commandParams['selectAtPoint'])) {
				this.get_serializedCommand().commandParams['tupleId'] = tupleId.toString();
			}
		}
	}, $tab_UbertipButtonModel, [$tab_ICommandModel]);
	ss.initClass($tab_CommandItemWrapper, $asm, {
		get_item: function CommandItemWrapper$get_Item() {
			return this.$item;
		},
		get_name: function CommandItemWrapper$get_Name() {
			return this.$item['name'.toString()];
		},
		set_name: function CommandItemWrapper$set_Name(value) {
			this.$item['name'.toString()] = value;
		},
		get_description: function CommandItemWrapper$get_Description() {
			return this.$item['description'.toString()];
		},
		set_description: function CommandItemWrapper$set_Description(value) {
			this.$item['description'.toString()] = value;
		},
		get_commandsType: function CommandItemWrapper$get_CommandsType() {
			return this.$item['commandsType'.toString()];
		},
		set_commandsType: function CommandItemWrapper$set_CommandsType(value) {
			this.$item['commandsType'.toString()] = value;
		},
		get_enabled: function CommandItemWrapper$get_Enabled() {
			var enabled = this.$item['state'.toString()];
			if (ss.isNullOrUndefined(enabled)) {
				return true;
			}
			return enabled;
		},
		set_enabled: function CommandItemWrapper$set_Enabled(value) {
			this.$item['state'.toString()] = value;
		},
		get_isChecked: function CommandItemWrapper$get_IsChecked() {
			return this.$item['isChecked'.toString()];
		},
		set_isChecked: function CommandItemWrapper$set_IsChecked(value) {
			this.$item['isChecked'.toString()] = value;
		},
		get_isDefault: function CommandItemWrapper$get_IsDefault() {
			return this.$item['isDefault'.toString()];
		},
		set_isDefault: function CommandItemWrapper$set_IsDefault(value) {
			this.$item['isDefault'.toString()] = value;
		},
		get_isRadioOn: function CommandItemWrapper$get_IsRadioOn() {
			return this.$item['isRadioOn'.toString()];
		},
		set_isRadioOn: function CommandItemWrapper$set_IsRadioOn(value) {
			this.$item['isRadioOn'.toString()] = value;
		},
		get_isVisible: function CommandItemWrapper$get_IsVisible() {
			return ss.coalesce(this.$item['isVisible'.toString()], true);
		},
		set_isVisible: function CommandItemWrapper$set_IsVisible(value) {
			this.$item['isVisible'.toString()] = value;
		},
		get_commands: function CommandItemWrapper$get_Commands() {
			return this.$item['commands'.toString()];
		},
		set_commands: function CommandItemWrapper$set_Commands(value) {
			this.$item['commands'.toString()] = value;
		},
		get_command: function CommandItemWrapper$get_Command() {
			return this.$item['command'.toString()];
		},
		set_command: function CommandItemWrapper$set_Command(value) {
			this.$item['command'.toString()] = value;
		},
		get_argumentParams: function CommandItemWrapper$get_ArgumentParams() {
			return this.$item['argumentParams'.toString()];
		},
		set_argumentParams: function CommandItemWrapper$set_ArgumentParams(value) {
			this.$item['argumentParams'.toString()] = value;
		},
		get_hasIcon: function CommandItemWrapper$get_HasIcon() {
			return !ss.isNullOrEmptyString(this.get_iconRes());
		},
		get_iconRes: function CommandItemWrapper$get_IconRes() {
			return this.$item['iconRes'.toString()];
		},
		set_iconRes: function CommandItemWrapper$set_IconRes(value) {
			this.$item['iconRes'.toString()] = value;
		}
	});
	ss.initClass($tab_CommandModel, $asm, {
		get_commandType: function CommandModel$get_CommandType() {
			return this.$1$CommandTypeField;
		},
		set_commandType: function CommandModel$set_CommandType(value) {
			this.$1$CommandTypeField = value;
		},
		get_name: function CommandModel$get_Name() {
			return this.$1$NameField;
		},
		set_name: function CommandModel$set_Name(value) {
			this.$1$NameField = value;
		}
	}, null, [$tab_ICommandModel]);
	ss.initClass($tab_CommandModelBasedUbertipButtonModel, $asm, {
		get_status: function CommandModelBasedUbertipButtonModel$get_Status() {
			return this.get_legacyCommandModel().status;
		},
		get_commandType: function CommandModelBasedUbertipButtonModel$get_CommandType() {
			return this.get_legacyCommandModel().get_commandType();
		},
		get_name: function CommandModelBasedUbertipButtonModel$get_Name() {
			return this.get_legacyCommandModel().get_name();
		},
		get_description: function CommandModelBasedUbertipButtonModel$get_Description() {
			return this.get_legacyCommandModel().description;
		},
		get_imageRes: function CommandModelBasedUbertipButtonModel$get_ImageRes() {
			return this.get_legacyCommandModel().imageRes;
		},
		get_wrappedCommandItemPresModel: function CommandModelBasedUbertipButtonModel$get_WrappedCommandItemPresModel() {
			return null;
		},
		update: function CommandModelBasedUbertipButtonModel$Update(commandModel, isPlaceHolder) {
			this.pm = null;
			this.set_legacyCommandModel(commandModel);
			this.set_serializedCommand(this.get_legacyCommandModel().command);
			this.set_isPlaceholder(isPlaceHolder);
		}
	}, $tab_UbertipButtonModel, [$tab_ICommandModel]);
	ss.initClass($tab_CommandPermission, $asm, {
		test: function CommandPermission$Test(command) {
			tab.Param.verifyValue(command, 'command');
			if (ss.isNullOrUndefined(command.get_commandType())) {
				tab.Log.get(this).debug('Command type not defined for %s. Perhaps we need to add that command type?', [command.get_name()]);
			}
			return ss.isValue(command.get_commandType()) && command.get_commandType() !== 99 && ss.keyExists(this.$availableCommands, command.get_commandType()) && ss.referenceEquals(this.$availableCommands[command.get_commandType()], $tab_CommandPermission.$permissionGranted);
		}
	});
	ss.initClass($tab_CommandRecord, $asm, {
		get_commandToExecute: function CommandRecord$get_CommandToExecute() {
			return this.$command;
		},
		get_successCallback: function CommandRecord$get_SuccessCallback() {
			return this.$successCallback;
		},
		get_errorCallback: function CommandRecord$get_ErrorCallback() {
			return this.$errorCallback;
		}
	});
	ss.initClass($tab_CommandRedirectRegistry, $asm, {});
	ss.initClass($tab_CommandResponseEventArgs, $asm, {
		get_applicationPresModel: function CommandResponseEventArgs$get_ApplicationPresModel() {
			return this.$2$ApplicationPresModelField;
		},
		set_applicationPresModel: function CommandResponseEventArgs$set_ApplicationPresModel(value) {
			this.$2$ApplicationPresModelField = value;
		},
		get_worldUpdateCommand: function CommandResponseEventArgs$get_WorldUpdateCommand() {
			return this.$2$WorldUpdateCommandField;
		},
		set_worldUpdateCommand: function CommandResponseEventArgs$set_WorldUpdateCommand(value) {
			this.$2$WorldUpdateCommandField = value;
		},
		get_sheetChanged: function CommandResponseEventArgs$get_SheetChanged() {
			return this.$2$SheetChangedField;
		},
		set_sheetChanged: function CommandResponseEventArgs$set_SheetChanged(value) {
			this.$2$SheetChangedField = value;
		},
		get_rebuildTheWorld: function CommandResponseEventArgs$get_RebuildTheWorld() {
			return this.$2$RebuildTheWorldField;
		},
		set_rebuildTheWorld: function CommandResponseEventArgs$set_RebuildTheWorld(value) {
			this.$2$RebuildTheWorldField = value;
		}
	}, ss.EventArgs);
	ss.initClass($tab_CommandSerializer, $asm, {});
	ss.initClass($tab_CommandsModel, $asm, {
		add_commandsChanged: function CommandsModel$add_CommandsChanged(value) {
			this.$2$CommandsChangedField = ss.delegateCombine(this.$2$CommandsChangedField, value);
		},
		remove_commandsChanged: function CommandsModel$remove_CommandsChanged(value) {
			this.$2$CommandsChangedField = ss.delegateRemove(this.$2$CommandsChangedField, value);
		},
		get_shouldUpdate: function CommandsModel$get_ShouldUpdate() {
			return this.$shouldUpdate;
		},
		set_shouldUpdate: function CommandsModel$set_ShouldUpdate(value) {
			this.$shouldUpdate = value;
		},
		get_commands: function CommandsModel$get_Commands() {
			return this.pm;
		},
		update: function CommandsModel$Update(newCommands, context) {
			if (this.get_shouldUpdate()) {
				this.forceUpdate(newCommands, context);
			}
		},
		forceUpdate: function CommandsModel$ForceUpdate(newCommands, context) {
			this.simpleSwapToUpdate$1($tab_CommandsModel).call(this, newCommands, this.$2$CommandsChangedField, this, context);
		}
	}, $tab_Model);
	ss.initClass($tab_CommandsPresModelWrapper, $asm, {
		get_presModel: function CommandsPresModelWrapper$get_PresModel() {
			return this.$model;
		},
		get_commandItems: function CommandsPresModelWrapper$get_CommandItems() {
			return this.$model['commandItems'.toString()];
		},
		set_commandItems: function CommandsPresModelWrapper$set_CommandItems(value) {
			this.$model['commandItems'.toString()] = value;
		},
		get_defaultItem: function CommandsPresModelWrapper$get_DefaultItem() {
			return this.$model['defaultItem'.toString()];
		},
		set_defaultItem: function CommandsPresModelWrapper$set_DefaultItem(value) {
			this.$model['defaultItem'.toString()] = value;
		}
	});
	$tab_CommandsPresModelWrapper.$ctor1.prototype = $tab_CommandsPresModelWrapper.prototype;
	ss.initClass($tab_CommandThrottlerTarget, $asm, {});
	ss.initClass($tab_CommandUtils, $asm, {});
	ss.initClass($tab_CommentingServer, $asm, {
		sendRequest: function CommentingServer$SendRequest(request) {
			var deferred = { $: $.Deferred() };
			var requestParams = new $tab_WorkgroupServerRequest(request.method, request.params, ss.mkdel({ deferred: deferred, $this: this }, function(result) {
				this.$this.$resolveIfNoErrors(this.deferred, result);
			}), ss.mkdel({ deferred: deferred }, function(errorCode) {
				ss.Debug.fail(ss.formatString("Request to '{0}' failed with error code '{1}'", request.method, errorCode));
				this.deferred.$.reject(errorCode);
			}));
			var options = this.$createVizportalRequest(requestParams);
			$tab_XhrUtil.helper(options);
			return deferred.$;
		},
		$resolveIfNoErrors: function CommentingServer$ResolveIfNoErrors(deferred, resultFromServer) {
			if (ss.keyExists(resultFromServer, 'errors')) {
				deferred.$.reject(resultFromServer);
			}
			else {
				deferred.$.resolve(resultFromServer);
			}
		},
		sendVizqlRequest: function CommentingServer$SendVizqlRequest(request) {
			var deferred = $.Deferred();
			var onSuccess = function(data, textStatus, xhr) {
				var resultJson = data;
				delete resultJson['msg'];
				delete resultJson['status'];
				deferred.resolve(resultJson);
			};
			var onError = function(xhr1, status, e) {
				ss.Debug.fail(ss.formatString("Request to '{0}' failed with status '{1}'", request.method, xhr1.status));
			};
			var requestParams = new $tab_VizqlSessionRequest(request.method, request.params, onSuccess, onError);
			this.$sendVizqlSessionRequest(requestParams);
			return deferred;
		},
		$sendVizqlSessionRequest: function CommentingServer$SendVizqlSessionRequest(request) {
			var args = {};
			args.type = 'POST';
			args.url = this.$baseSession.$formatSessionMethod(request.methodName);
			args.headers = ss.mkdict(['Accept', 'text/javascript']);
			args.dataType = 'json';
			if (ss.isValue(request.methodParams)) {
				args.data = request.methodParams;
			}
			var handler = this.$baseSession.$createHandler(null, request.success, request.error, 'immediately');
			this.$baseSession.$request(args, handler);
		}
	}, null, [Object]);
	ss.initClass($tab_CompoundTableCalcModel, $asm, {
		add_compoundTableCalcUpdated: function CompoundTableCalcModel$add_CompoundTableCalcUpdated(value) {
			this.$2$CompoundTableCalcUpdatedField = ss.delegateCombine(this.$2$CompoundTableCalcUpdatedField, value);
		},
		remove_compoundTableCalcUpdated: function CompoundTableCalcModel$remove_CompoundTableCalcUpdated(value) {
			this.$2$CompoundTableCalcUpdatedField = ss.delegateRemove(this.$2$CompoundTableCalcUpdatedField, value);
		},
		get_tableCalcsPresModel: function CompoundTableCalcModel$get_TableCalcsPresModel() {
			return this.pm;
		},
		get_hasTableCalc: function CompoundTableCalcModel$get_HasTableCalc() {
			return this.get_primaryTableCalc().get_hasTableCalc();
		},
		get_fieldCaption: function CompoundTableCalcModel$get_FieldCaption() {
			return this.get_tableCalcsPresModel().fieldCaption;
		},
		get_primaryTableCalc: function CompoundTableCalcModel$get_PrimaryTableCalc() {
			return this.$primaryTableCalcModel;
		},
		get_allowSecondaryTableCalc: function CompoundTableCalcModel$get_AllowSecondaryTableCalc() {
			return ss.isValue(this.get_tableCalcsPresModel()) && this.get_tableCalcsPresModel().isSecondaryAllowed;
		},
		get_hasSecondaryTableCalc: function CompoundTableCalcModel$get_HasSecondaryTableCalc() {
			return this.get_allowSecondaryTableCalc() && this.get_secondaryTableCalc().get_hasTableCalc();
		},
		get_secondaryTableCalc: function CompoundTableCalcModel$get_SecondaryTableCalc() {
			return this.$secondaryTableCalcModel;
		},
		get_isCalcAssistanceEnabled: function CompoundTableCalcModel$get_IsCalcAssistanceEnabled() {
			return (ss.isNullOrUndefined(this.get_tableCalcsPresModel()) ? true : this.get_tableCalcsPresModel().isCalcAssistanceEnabled);
		},
		get_calcAssistanceWidgetState: function CompoundTableCalcModel$get_CalcAssistanceWidgetState() {
			return (ss.isNullOrUndefined(this.get_tableCalcsPresModel()) ? 'widget-state-enabled' : this.get_tableCalcsPresModel().tableCalcAssistanceWidgetState);
		},
		update: function CompoundTableCalcModel$Update(newPresModel, context) {
			if (this.isNewPresModelSameAsOld(newPresModel)) {
				return;
			}
			var newCompoundPresModel = newPresModel;
			this.$primaryTableCalcModel.update($tab_CompoundTableCalcModel.$getPresModelTableCalc(newCompoundPresModel, $tab_CompoundTableCalcModel.primaryTableCalcIndex), context);
			this.$secondaryTableCalcModel.update($tab_CompoundTableCalcModel.$getPresModelTableCalc(newCompoundPresModel, $tab_CompoundTableCalcModel.secondaryTableCalcIndex), context);
			this.swapAndCopyPresModel(newCompoundPresModel);
			this.raiseEvent(this.$2$CompoundTableCalcUpdatedField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_CreateDashboardTitleRichTextEditorCmd, $asm, {
		invoke: function CreateDashboardTitleRichTextEditorCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand('create-dashboard-title-rich-text-editor', this.cmdParams));
		},
		validateInvokeParams: function CreateDashboardTitleRichTextEditorCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_CreateDashboardTitleRichTextEditorCmd$Response]));
	ss.initClass($tab_CreateDashboardTitleRichTextEditorCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_CreateDataSourceFromFileUploadCmd, $asm, {
		invoke: function CreateDataSourceFromFileUploadCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand('create-data-source-from-file-upload', this.cmdParams));
		},
		validateInvokeParams: function CreateDataSourceFromFileUploadCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'dsClass')) {
				throw new ss.Exception('missing param DocParams.DSClass');
			}
			if (!ss.keyExists(this.cmdParams, 'fileNames')) {
				throw new ss.Exception('missing param DocParams.FileNames');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_CreateDataSourceFromFileUploadCmd$Response]));
	ss.initClass($tab_CreateDataSourceFromFileUploadCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_CreateTextObjectRichTextEditorCmd, $asm, {
		invoke: function CreateTextObjectRichTextEditorCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand('create-text-object-rich-text-editor', this.cmdParams));
		},
		validateInvokeParams: function CreateTextObjectRichTextEditorCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_CreateTextObjectRichTextEditorCmd$Response]));
	ss.initClass($tab_CreateTextObjectRichTextEditorCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_FieldModel, $asm, {
		get_instanceType: null,
		get_fieldsModel: function FieldModel$get_FieldsModel() {
			return ss.cast(this.parent, $tab_FieldsModel);
		},
		get_dataSourceName: function FieldModel$get_DataSourceName() {
			if (ss.isNullOrUndefined(this.get_dataSource())) {
				return '';
			}
			return this.get_dataSource().get_name();
		},
		get_canHaveChildren: function FieldModel$get_CanHaveChildren() {
			return false;
		},
		get_isParameter: function FieldModel$get_IsParameter() {
			return ss.isValue(this.get_dataSource()) && this.get_dataSource().get_isParametersDataSource();
		},
		get_isUnsortedContainer: function FieldModel$get_IsUnsortedContainer() {
			return false;
		},
		get_isSelectable: function FieldModel$get_IsSelectable() {
			return !this.get_isUnsortedContainer();
		},
		get_isDraggable: function FieldModel$get_IsDraggable() {
			return this.get_isSelectable() && !this.get_isHidden() && !this.get_isInvalid();
		},
		get_childToSelect: function FieldModel$get_ChildToSelect() {
			return (this.get_isUnsortedContainer() ? null : this);
		},
		get_isDerived: function FieldModel$get_IsDerived() {
			if (this.get_canHaveChildren()) {
				return false;
			}
			return this.get_isGenerated() || this.get_isAutoColumn() || this.get_isColumn() && this.asColumn().get_isInstance();
		},
		get_isMeasureNamesOrValues: function FieldModel$get_IsMeasureNamesOrValues() {
			return ss.referenceEquals(this.get_localName(), $tab_FieldModel.nameOfMeasuresColumn) || ss.referenceEquals(this.get_localName(), $tab_FieldModel.nameOfMeasureValuesColumn);
		},
		get_fieldIconResource: function FieldModel$get_FieldIconResource() {
			var iconString = this.pm.fieldIconRes || '';
			if (iconString.length === 0) {
				return iconString;
			}
			if (this.pm.isInvalid) {
				iconString += '-invalid';
			}
			return iconString;
		},
		get_isInstance: function FieldModel$get_IsInstance() {
			return !this.get_isGenerated() && this.get_isDerived();
		},
		get_isHidden: function FieldModel$get_IsHidden() {
			return this.pm.isHidden || this.get_isInstance();
		},
		get_isAutoHidden: function FieldModel$get_IsAutoHidden() {
			return this.pm.isAutoHidden || false;
		},
		get_isInvalid: function FieldModel$get_IsInvalid() {
			return this.pm.isInvalid;
		},
		get_isOrphaned: function FieldModel$get_IsOrphaned() {
			return this.pm.isOrphaned;
		},
		get_isGenerated: function FieldModel$get_IsGenerated() {
			return this.pm.isGenerated || false;
		},
		get_isAutoColumn: function FieldModel$get_IsAutoColumn() {
			return this.pm.isAutoColumn || false;
		},
		get_isAllowedInCalcs: function FieldModel$get_IsAllowedInCalcs() {
			return this.pm.isAllowedInCalcs;
		},
		get_isUnnamedCalc: function FieldModel$get_IsUnnamedCalc() {
			return this.pm.isUnnamed || false;
		},
		get_isQuickTableCalc: function FieldModel$get_IsQuickTableCalc() {
			return this.pm.isQuickTableCalc;
		},
		get_globalName: function FieldModel$get_GlobalName() {
			return this.pm.fn;
		},
		get_localName: function FieldModel$get_LocalName() {
			return this.pm.name;
		},
		get_qualifiedLocalName: function FieldModel$get_QualifiedLocalName() {
			return '[' + this.get_localName() + ']';
		},
		get_description: function FieldModel$get_Description() {
			return this.pm.description;
		},
		get_userCaption: function FieldModel$get_UserCaption() {
			return this.pm.userCaption;
		},
		get_ordinal: function FieldModel$get_Ordinal() {
			return this.pm.datasourceOrdinal;
		},
		get_isColumn: function FieldModel$get_IsColumn() {
			return this.get_instanceType() === 'column' || this.get_instanceType() === 'group';
		},
		get_isGroup: function FieldModel$get_IsGroup() {
			return this.get_instanceType() === 'group';
		},
		get_isCubeDimension: function FieldModel$get_IsCubeDimension() {
			return this.get_instanceType() === 'cubeDimension';
		},
		get_isDrillPath: function FieldModel$get_IsDrillPath() {
			return this.get_instanceType() === 'drillPath';
		},
		get_isCubeHierarchy: function FieldModel$get_IsCubeHierarchy() {
			return this.get_instanceType() === 'cubeHierarchy';
		},
		get_isCubeFolder: function FieldModel$get_IsCubeFolder() {
			return this.get_instanceType() === 'cubeFolder';
		},
		get_isFolder: function FieldModel$get_IsFolder() {
			return this.get_instanceType() === 'folder';
		},
		get_isRelationalTable: function FieldModel$get_IsRelationalTable() {
			return this.get_instanceType() === 'relationalTable';
		},
		get_defaultRole: function FieldModel$get_DefaultRole() {
			return this.pm.defaultFieldRole;
		},
		get_role: function FieldModel$get_Role() {
			return this.pm.fieldRole;
		},
		get_defaultFieldType: function FieldModel$get_DefaultFieldType() {
			return (this.get_isColumn() ? this.pm.defaultFieldType : 'unknown');
		},
		get_fieldType: function FieldModel$get_FieldType() {
			return (this.get_isColumn() ? this.pm.fieldType : 'unknown');
		},
		get_displayName: function FieldModel$get_DisplayName() {
			return (this.get_isDrillPath() ? (this.get_localName() || this.get_description()) : (this.get_description() || this.get_localName()));
		},
		get_tooltip: function FieldModel$get_Tooltip() {
			if (this.get_isInvalid()) {
				return this.pm.tooltipText;
			}
			else {
				return this.get_userCaption() || (this.get_description() || this.get_displayName());
			}
		},
		get_canBeUsedInCalculation: function FieldModel$get_CanBeUsedInCalculation() {
			return this.get_isAllowedInCalcs() || this.get_isUnnamedCalc() || this.get_isQuickTableCalc();
		},
		get_canBeAddedToDataSchema: function FieldModel$get_CanBeAddedToDataSchema() {
			return this.get_isUnnamedCalc() || this.get_isQuickTableCalc();
		},
		get_dataSource: function FieldModel$get_DataSource() {
			return (ss.isNullOrUndefined(this.get_fieldsModel()) ? null : this.get_fieldsModel().get_dataSource());
		},
		matchesFolderRole: function FieldModel$MatchesFolderRole(section) {
			if (this.get_isFolder()) {
				return this.asFolder().get_folderRole() === section;
			}
			else {
				switch (section) {
					case 'dimensions': {
						return this.get_defaultRole() === 'dimension';
					}
					case 'measure': {
						return this.get_defaultRole() === 'measure';
					}
					case 'groups': {
						return this.get_isGroup();
					}
					case 'parameters': {
						return true;
					}
					default: {
						return false;
					}
				}
			}
		},
		asColumn: function FieldModel$AsColumn() {
			ss.Debug.assert(this.get_isColumn(), 'Field is not a FieldColumnModel');
			return ss.safeCast(this, $tab_FieldColumnModel);
		},
		asGroup: function FieldModel$AsGroup() {
			ss.Debug.assert(this.get_isGroup(), 'Field is not a GroupModel');
			return ss.safeCast(this, $tab_GroupModel);
		},
		asDimension: function FieldModel$AsDimension() {
			ss.Debug.assert(this.get_isCubeDimension(), 'Field is not a CubeDimensionModel');
			return ss.safeCast(this, $tab_CubeDimensionModel);
		},
		asHierarchy: function FieldModel$AsHierarchy() {
			ss.Debug.assert(this.get_isCubeHierarchy(), 'Field is not a CubeHierarchyModel');
			return ss.safeCast(this, $tab_CubeHierarchyModel);
		},
		asCubeFolder: function FieldModel$AsCubeFolder() {
			ss.Debug.assert(this.get_isCubeFolder(), 'Field is not a CubeFolderModel');
			return ss.safeCast(this, $tab_CubeFolderModel);
		},
		asFolder: function FieldModel$AsFolder() {
			ss.Debug.assert(this.get_isFolder(), 'Field is not a FolderModel');
			return ss.safeCast(this, $tab_FolderModel);
		},
		asDrillPath: function FieldModel$AsDrillPath() {
			ss.Debug.assert(this.get_isDrillPath(), 'Field is not a DrillPathModel');
			return ss.safeCast(this, $tab_DrillPathModel);
		},
		asRelationalTable: function FieldModel$AsRelationalTable() {
			ss.Debug.assert(this.get_isRelationalTable(), 'Field is not a RelationalTableModel');
			return ss.safeCast(this, $tab_RelationalTableModel);
		}
	}, $tab_Model);
	ss.initClass($tab_CubeDimensionModel, $asm, {
		get_hierarchies: function CubeDimensionModel$get_Hierarchies() {
			return this.$hierarchies;
		},
		get_childToSelect: function CubeDimensionModel$get_ChildToSelect() {
			var defaultHierarchyName = this.pm.defaultHierarchyName;
			if (!ss.isNullOrEmptyString(defaultHierarchyName)) {
				for (var $t1 = 0; $t1 < this.$hierarchies.length; $t1++) {
					var h = this.$hierarchies[$t1];
					if (ss.referenceEquals(h.get_localName(), defaultHierarchyName)) {
						return h.get_levels()[0];
					}
				}
			}
			var hierarchyModels = [];
			for (var $t2 = 0; $t2 < this.$hierarchies.length; $t2++) {
				var h1 = this.$hierarchies[$t2];
				hierarchyModels.push(h1);
			}
			for (var $t3 = 0; $t3 < this.$folders.length; $t3++) {
				var f = this.$folders[$t3];
				var $t4 = f.get_hierarchies();
				for (var $t5 = 0; $t5 < $t4.length; $t5++) {
					var h2 = $t4[$t5];
					hierarchyModels.push(h2);
				}
			}
			hierarchyModels.sort(function(a, b) {
				if (a.get_levels().length > 1 && b.get_levels().length <= 1) {
					return -1;
				}
				else if (a.get_levels().length <= 1 && b.get_levels().length > 1) {
					return 1;
				}
				else {
					return 0;
				}
			});
			return ((hierarchyModels.length > 0) ? hierarchyModels[0].get_levels()[0] : null);
		},
		get_folders: function CubeDimensionModel$get_Folders() {
			return this.$folders;
		},
		get_attributes: function CubeDimensionModel$get_Attributes() {
			return this.$attributes;
		},
		get_instanceType: function CubeDimensionModel$get_InstanceType() {
			return 'cubeDimension';
		},
		get_canHaveChildren: function CubeDimensionModel$get_CanHaveChildren() {
			return true;
		},
		update: function CubeDimensionModel$Update(pm, newHierarchies, newFolders, newAttributes) {
			this.swapAndCopyPresModel(pm);
			this.$hierarchies = newHierarchies;
			this.$folders = newFolders;
			this.$attributes = newAttributes;
		}
	}, $tab_FieldModel);
	ss.initClass($tab_CubeFolderModel, $asm, {
		get_hierarchies: function CubeFolderModel$get_Hierarchies() {
			return this.$hierarchies;
		},
		get_childToSelect: function CubeFolderModel$get_ChildToSelect() {
			return this.$hierarchies[0];
		},
		get_columns: function CubeFolderModel$get_Columns() {
			return this.$columns;
		},
		get_instanceType: function CubeFolderModel$get_InstanceType() {
			return 'cubeFolder';
		},
		get_canHaveChildren: function CubeFolderModel$get_CanHaveChildren() {
			return true;
		},
		get_isUnsortedContainer: function CubeFolderModel$get_IsUnsortedContainer() {
			return true;
		},
		update: function CubeFolderModel$Update(pm, newHierarchies, newColumns) {
			this.swapAndCopyPresModel(pm);
			this.$hierarchies = newHierarchies;
			this.$columns = newColumns;
		}
	}, $tab_FieldModel);
	ss.initClass($tab_CubeHierarchyModel, $asm, {
		get_levels: function CubeHierarchyModel$get_Levels() {
			return this.$levels;
		},
		get_childToSelect: function CubeHierarchyModel$get_ChildToSelect() {
			return this.$levels[0];
		},
		get_instanceType: function CubeHierarchyModel$get_InstanceType() {
			return 'cubeHierarchy';
		},
		get_canHaveChildren: function CubeHierarchyModel$get_CanHaveChildren() {
			return true;
		},
		update: function CubeHierarchyModel$Update(pm, newLevels) {
			this.swapAndCopyPresModel(pm);
			this.$levels = newLevels;
		}
	}, $tab_FieldModel);
	ss.initClass($tab_TypeSpecificTableCalcModel, $asm, {
		get_tableCalcIdentifier: function TypeSpecificTableCalcModel$get_TableCalcIdentifier() {
			var tableCalcModelParent = this.parent;
			return (ss.isNullOrUndefined(tableCalcModelParent) ? new $tab_TableCalcIdentifierModel(null) : tableCalcModelParent.get_tableCalcIdentifier());
		},
		update: null
	}, $tab_Model);
	ss.initClass($tab_CumulativeTableCalcModel, $asm, {
		add_modelUpdated: function CumulativeTableCalcModel$add_ModelUpdated(value) {
			this.$3$ModelUpdatedField = ss.delegateCombine(this.$3$ModelUpdatedField, value);
		},
		remove_modelUpdated: function CumulativeTableCalcModel$remove_ModelUpdated(value) {
			this.$3$ModelUpdatedField = ss.delegateRemove(this.$3$ModelUpdatedField, value);
		},
		get_$cumulativePresModel: function CumulativeTableCalcModel$get_CumulativePresModel() {
			return this.pm;
		},
		get_aggregationIndex: function CumulativeTableCalcModel$get_AggregationIndex() {
			return this.get_$cumulativePresModel().aggregationIndex;
		},
		get_aggregationValues: function CumulativeTableCalcModel$get_AggregationValues() {
			return this.get_$cumulativePresModel().aggregationValues;
		},
		get_aggregationCaptions: function CumulativeTableCalcModel$get_AggregationCaptions() {
			return this.get_$cumulativePresModel().aggregationCaptions;
		},
		get_hasAggregation: function CumulativeTableCalcModel$get_HasAggregation() {
			return ss.isValue(this.get_aggregationValues()) && this.get_aggregationValues().length > 0;
		},
		update: function CumulativeTableCalcModel$Update(newPresModel, context) {
			this.simpleSwapToUpdate(newPresModel, this.$3$ModelUpdatedField, context);
		}
	}, $tab_TypeSpecificTableCalcModel);
	ss.initClass($tab_CustomizedViewSession, $asm, {
		navigateToCustomizedView: function CustomizedViewSession$NavigateToCustomizedView(cv) {
			var window = tabBootstrap.Utility.get_locationWindow();
			$tab_SessionServerCommands.destroySessionAndForward$1(window, $tab_CustomizedViewSession.buildUrl(cv, false));
		},
		navigateToOriginalView: function CustomizedViewSession$NavigateToOriginalView() {
			var window = tabBootstrap.Utility.get_locationWindow();
			$tab_SessionServerCommands.destroySessionAndForward$1(window, $tab_CustomizedViewSession.buildUrl(null, false));
		},
		getCustomizedViews: function CustomizedViewSession$GetCustomizedViews(success, failure) {
			var onSuccess = function(data, textStatus, xhr) {
				$tab_CustomizedViewSession.$log.debug('Got customized views: %o', [data]);
				if (!ss.isValue(success)) {
					return;
				}
				var cvs;
				var defCvId = null;
				if ('customizedViews' in data) {
					cvs = data['customizedViews'];
				}
				else {
					cvs = [];
				}
				if ('defaultCustomizedViewId' in data) {
					defCvId = data['defaultCustomizedViewId'];
				}
				success(cvs, defCvId);
			};
			this.$sendSessionCvRequest(onSuccess, $tab_CustomizedViewSession.$genericErrorCallback(failure), $tab_CustomizedViewSession.$methodGetCustomizedView, ss.mkdict(['sheet_id', tsConfig.current_sheet_name]), 'GET', 'none');
		},
		setDefaultCustomizedView: function CustomizedViewSession$SetDefaultCustomizedView(cv, success, failure) {
			var onSuccess = function(data, textStatus, xhr) {
				$tab_CustomizedViewSession.$log.debug('Set default customized view: %o', [data]);
				if (!ss.isValue(success)) {
					return;
				}
				var newDefault = null;
				if ('defaultCv' in data) {
					newDefault = data['defaultCv'];
				}
				success(newDefault);
			};
			var args = ss.mkdict(['sheet_id', tsConfig.current_sheet_name]);
			if (ss.isValue(cv)) {
				args['cvId'] = cv.id;
			}
			this.$sendSessionCvRequest(onSuccess, $tab_CustomizedViewSession.$genericErrorCallback(failure), $tab_CustomizedViewSession.$methodSetDefaultCustomizedView, args);
		},
		destroyCustomizedView: function CustomizedViewSession$DestroyCustomizedView(cv, success, failure) {
			tab.Param.verifyValue(cv, 'cv');
			var onSuccess = function(data, textStatus, xhr) {
				$tab_CustomizedViewSession.$log.debug('Delete customized view: %o', [data]);
				if (!ss.isValue(success)) {
					return;
				}
				success();
			};
			this.$sendCvRequest(onSuccess, $tab_CustomizedViewSession.$genericErrorCallback(failure), $tab_CustomizedViewSession.$methodDestroyCustomizedView, ss.mkdict(['cvId', cv.id]));
		},
		saveCustomizedView: function CustomizedViewSession$SaveCustomizedView(cv, success, failure) {
			tab.Param.verifyValue(cv, 'cv');
			var onSuccess = ss.mkdel(this, function(data, textStatus, xhr) {
				$tab_CustomizedViewSession.$log.debug('Save customized view: %o', [data]);
				if (!ss.isValue(success)) {
					return;
				}
				var savedCv = null;
				if ('cv' in data) {
					savedCv = data['cv'];
					this.updateTsConfig(savedCv, true);
				}
				success(savedCv);
			});
			var args = ss.mkdict(['sheet_id', tsConfig.current_sheet_name, 'name', cv.name, 'shared', cv.isPublic]);
			if (ss.isValue(cv.id)) {
				args['cvId'] = cv.id;
			}
			this.$sendSessionCvRequest(onSuccess, $tab_CustomizedViewSession.$genericErrorCallback(failure), $tab_CustomizedViewSession.$methodSaveCustomizedView, args);
		},
		updateTsConfig: function CustomizedViewSession$UpdateTsConfig(customizedView, updateCurrentView) {
			tsConfig.repositoryUrl = this.$generateRepositoryUrl(customizedView);
			if (updateCurrentView) {
				if (ss.isNullOrUndefined(customizedView)) {
					tsConfig.current_custom_view_id = null;
				}
				else {
					tsConfig.current_custom_view_id = customizedView.id;
				}
			}
		},
		$generateRepositoryUrl: function CustomizedViewSession$GenerateRepositoryUrl(customizedView) {
			var repoPathObject = new $tab_RepoPathObject(tsConfig.repositoryUrl);
			if (ss.isNullOrUndefined(customizedView)) {
				return ss.formatString('{0}/{1}', repoPathObject.get_workbookId(), repoPathObject.get_sheetId());
			}
			return ss.formatString('{0}/{1}/{2}/{3}', repoPathObject.get_workbookId(), repoPathObject.get_sheetId(), $tab_VizUriModel.encodeUserName(customizedView.owner.username), customizedView.urlId);
		},
		updateCustomizedView: function CustomizedViewSession$UpdateCustomizedView(cv, success, failure) {
			tab.Param.verifyValue(cv, 'cv');
			var onSuccess = ss.mkdel(this, function(data, textStatus, xhr) {
				$tab_CustomizedViewSession.$log.debug('Update customized view: %o', [data]);
				if (!ss.isValue(success)) {
					return;
				}
				var updatedCv = null;
				if ('cv' in data) {
					updatedCv = data['cv'];
					this.updateTsConfig(updatedCv, false);
				}
				success(updatedCv);
			});
			var args = ss.mkdict(['sheet_id', tsConfig.current_sheet_name, 'name', cv.name, 'shared', cv.isPublic, 'cvId', cv.id]);
			this.$sendSessionCvRequest(onSuccess, $tab_CustomizedViewSession.$genericErrorCallback(failure), $tab_CustomizedViewSession.$methodUpdateCustomizedView, args);
		},
		$sendCvRequest: function CustomizedViewSession$SendCvRequest(success, error, method, data) {
			var handler = this.$baseSession.$createHandler(null, success, error, 'immediately');
			var args = {};
			args.type = 'POST';
			args.url = this.$baseSession.$formatMethod(method);
			args.headers = ss.mkdict(['Accept', 'text/javascript']);
			args.dataType = 'json';
			if (ss.isValue(data)) {
				args.data = data;
			}
			this.$baseSession.$request(args, handler);
		},
		$sendSessionCvRequest: function CustomizedViewSession$SendSessionCvRequest(success, error, method, data, httpMethod, uiBlockType) {
			var args = {};
			args.type = httpMethod || 'POST';
			args.url = this.$baseSession.$formatSessionMethod(method);
			args.headers = ss.mkdict(['Accept', 'text/javascript']);
			args.dataType = 'json';
			if (ss.isValue(data)) {
				args.data = data;
			}
			var realuiBlockType = uiBlockType || 'immediately';
			var handler = this.$baseSession.$createHandler(null, success, error, realuiBlockType);
			this.$baseSession.$request(args, handler);
		}
	});
	ss.initClass($tab_CustomTableCalcModel, $asm, {
		add_modelUpdated: function CustomTableCalcModel$add_ModelUpdated(value) {
			this.$3$ModelUpdatedField = ss.delegateCombine(this.$3$ModelUpdatedField, value);
		},
		remove_modelUpdated: function CustomTableCalcModel$remove_ModelUpdated(value) {
			this.$3$ModelUpdatedField = ss.delegateRemove(this.$3$ModelUpdatedField, value);
		},
		get_$customPresModel: function CustomTableCalcModel$get_CustomPresModel() {
			return this.pm;
		},
		get_referenceModel: function CustomTableCalcModel$get_ReferenceModel() {
			return this.$3$ReferenceModelField;
		},
		set_referenceModel: function CustomTableCalcModel$set_ReferenceModel(value) {
			this.$3$ReferenceModelField = value;
		},
		get_nullIfIncomplete: function CustomTableCalcModel$get_NullIfIncomplete() {
			return this.get_$customPresModel().nullIfIncomplete;
		},
		get_nullIfIncompleteState: function CustomTableCalcModel$get_NullIfIncompleteState() {
			return this.get_$customPresModel().customNullIfIncompleteState;
		},
		get_allPages: function CustomTableCalcModel$get_AllPages() {
			return this.get_$customPresModel().includeAllPages;
		},
		get_allPagesState: function CustomTableCalcModel$get_AllPagesState() {
			return this.get_$customPresModel().allPagesState;
		},
		get_nestedCalcsWidgetState: function CustomTableCalcModel$get_NestedCalcsWidgetState() {
			return this.get_$customPresModel().nestedCalcsState;
		},
		get_nestedCalcsIndex: function CustomTableCalcModel$get_NestedCalcsIndex() {
			return this.get_$customPresModel().nestedCalcsIndex;
		},
		get_nestedTableCalcInfoArray: function CustomTableCalcModel$get_NestedTableCalcInfoArray() {
			return this.get_$customPresModel().nestedTableCalcInfos;
		},
		update: function CustomTableCalcModel$Update(newPresModel, context) {
			var newCustomPresModel = newPresModel;
			if (this.isNewPresModelSameAsOld(newCustomPresModel)) {
				return;
			}
			this.swapAndCopyPresModel(newCustomPresModel);
			this.get_referenceModel().update(newCustomPresModel.tableCalcReferenceOptionsPresModel, context);
			this.raiseEvent(this.$3$ModelUpdatedField, context);
		}
	}, $tab_TypeSpecificTableCalcModel);
	ss.initClass($tab_DashboardCommands, $asm, {});
	ss.initClass($tab_DashboardModel, $asm, {
		add_newDashboard: function DashboardModel$add_NewDashboard(value) {
			this.$2$NewDashboardField = ss.delegateCombine(this.$2$NewDashboardField, value);
		},
		remove_newDashboard: function DashboardModel$remove_NewDashboard(value) {
			this.$2$NewDashboardField = ss.delegateRemove(this.$2$NewDashboardField, value);
		},
		add_activeZoneChanged: function DashboardModel$add_ActiveZoneChanged(value) {
			this.$2$ActiveZoneChangedField = ss.delegateCombine(this.$2$ActiveZoneChangedField, value);
		},
		remove_activeZoneChanged: function DashboardModel$remove_ActiveZoneChanged(value) {
			this.$2$ActiveZoneChangedField = ss.delegateRemove(this.$2$ActiveZoneChangedField, value);
		},
		add_readyZoneChanged: function DashboardModel$add_ReadyZoneChanged(value) {
			this.$2$ReadyZoneChangedField = ss.delegateCombine(this.$2$ReadyZoneChangedField, value);
		},
		remove_readyZoneChanged: function DashboardModel$remove_ReadyZoneChanged(value) {
			this.$2$ReadyZoneChangedField = ss.delegateRemove(this.$2$ReadyZoneChangedField, value);
		},
		add_renderModeChanged: function DashboardModel$add_RenderModeChanged(value) {
			this.$2$RenderModeChangedField = ss.delegateCombine(this.$2$RenderModeChangedField, value);
		},
		remove_renderModeChanged: function DashboardModel$remove_RenderModeChanged(value) {
			this.$2$RenderModeChangedField = ss.delegateRemove(this.$2$RenderModeChangedField, value);
		},
		add_portSizeChanged: function DashboardModel$add_PortSizeChanged(value) {
			this.$2$PortSizeChangedField = ss.delegateCombine(this.$2$PortSizeChangedField, value);
		},
		remove_portSizeChanged: function DashboardModel$remove_PortSizeChanged(value) {
			this.$2$PortSizeChangedField = ss.delegateRemove(this.$2$PortSizeChangedField, value);
		},
		add_sizeChanged: function DashboardModel$add_SizeChanged(value) {
			this.$2$SizeChangedField = ss.delegateCombine(this.$2$SizeChangedField, value);
		},
		remove_sizeChanged: function DashboardModel$remove_SizeChanged(value) {
			this.$2$SizeChangedField = ss.delegateRemove(this.$2$SizeChangedField, value);
		},
		add_formatsChanged: function DashboardModel$add_FormatsChanged(value) {
			this.$2$FormatsChangedField = ss.delegateCombine(this.$2$FormatsChangedField, value);
		},
		remove_formatsChanged: function DashboardModel$remove_FormatsChanged(value) {
			this.$2$FormatsChangedField = ss.delegateRemove(this.$2$FormatsChangedField, value);
		},
		add_titleVisibilityChanged: function DashboardModel$add_TitleVisibilityChanged(value) {
			this.$2$TitleVisibilityChangedField = ss.delegateCombine(this.$2$TitleVisibilityChangedField, value);
		},
		remove_titleVisibilityChanged: function DashboardModel$remove_TitleVisibilityChanged(value) {
			this.$2$TitleVisibilityChangedField = ss.delegateRemove(this.$2$TitleVisibilityChangedField, value);
		},
		add_currentDeviceLayoutChanged: function DashboardModel$add_CurrentDeviceLayoutChanged(value) {
			this.$2$CurrentDeviceLayoutChangedField = ss.delegateCombine(this.$2$CurrentDeviceLayoutChangedField, value);
		},
		remove_currentDeviceLayoutChanged: function DashboardModel$remove_CurrentDeviceLayoutChanged(value) {
			this.$2$CurrentDeviceLayoutChangedField = ss.delegateRemove(this.$2$CurrentDeviceLayoutChangedField, value);
		},
		add_currentDeviceLayoutListChanged: function DashboardModel$add_CurrentDeviceLayoutListChanged(value) {
			this.$2$CurrentDeviceLayoutListChangedField = ss.delegateCombine(this.$2$CurrentDeviceLayoutListChangedField, value);
		},
		remove_currentDeviceLayoutListChanged: function DashboardModel$remove_CurrentDeviceLayoutListChanged(value) {
			this.$2$CurrentDeviceLayoutListChangedField = ss.delegateRemove(this.$2$CurrentDeviceLayoutListChangedField, value);
		},
		add_dashboardNameChanged: function DashboardModel$add_DashboardNameChanged(value) {
			this.$2$DashboardNameChangedField = ss.delegateCombine(this.$2$DashboardNameChangedField, value);
		},
		remove_dashboardNameChanged: function DashboardModel$remove_DashboardNameChanged(value) {
			this.$2$DashboardNameChangedField = ss.delegateRemove(this.$2$DashboardNameChangedField, value);
		},
		get_zoneModels: function DashboardModel$get_ZoneModels() {
			return this.zonesModel.get_zoneModels();
		},
		get_contentDashboard: function DashboardModel$get_ContentDashboard() {
			if (ss.isValue(this.pm) && this.pm.isStory) {
				this.$storyContentDashboard = this.$storyContentDashboard || this.$findStoryContentDashboard();
				return this.$storyContentDashboard;
			}
			return this;
		},
		get_actionPresModels: function DashboardModel$get_ActionPresModels() {
			if (ss.isValue(this.pm)) {
				return this.pm.userActions;
			}
			return null;
		},
		get_backgroundColor: function DashboardModel$get_BackgroundColor() {
			if (ss.isValue(this.pm) && ss.isValue(this.pm.cssAttrs)) {
				return this.pm.cssAttrs['backgroundColor'];
			}
			return null;
		},
		get_zonePlaceholderColor: function DashboardModel$get_ZonePlaceholderColor() {
			var $t1 = this.$zonePlaceholderColor;
			if (ss.isNullOrUndefined($t1)) {
				$t1 = this.$computeZonePlaceholderColor();
			}
			this.$zonePlaceholderColor = $t1;
			return this.$zonePlaceholderColor;
		},
		get_sheetName: function DashboardModel$get_SheetName() {
			if (ss.isValue(this.pm) && ss.isValue(this.pm.sheetLayoutInfo)) {
				return this.pm.sheetLayoutInfo.sheetName;
			}
			return null;
		},
		get_sheetPath: function DashboardModel$get_SheetPath() {
			if (ss.isValue(this.pm)) {
				return this.pm.sheetPath;
			}
			return null;
		},
		get_invalidSheets: function DashboardModel$get_InvalidSheets() {
			if (ss.isValue(this.pm)) {
				return this.pm.invalidSheets;
			}
			return [];
		},
		get_activeZoneID: function DashboardModel$get_ActiveZoneID() {
			var isAuthoringDevice = tsConfig.is_authoring && this.get_currentDeviceLayout() !== 'default';
			if (ss.isValue(this.pm) && !isAuthoringDevice) {
				return this.pm.activeZoneId;
			}
			return 0;
		},
		get_readyZoneID: function DashboardModel$get_ReadyZoneID() {
			return this.$readyZoneId;
		},
		set_readyZoneID: function DashboardModel$set_ReadyZoneID(value) {
			if (value === this.$readyZoneId) {
				return;
			}
			this.$readyZoneId = value;
			if (!ss.staticEquals(this.$2$ReadyZoneChangedField, null)) {
				this.$2$ReadyZoneChangedField();
			}
		},
		get_hasActiveZone: function DashboardModel$get_HasActiveZone() {
			if (this.get_activeZoneID() !== 0) {
				return true;
			}
			return false;
		},
		get_activeVisual: function DashboardModel$get_ActiveVisual() {
			if (ss.isNullOrUndefined(this.pm)) {
				return null;
			}
			if (this.get_activeZoneID() > 0) {
				var $t1 = this.get_zoneModels();
				for (var $t2 = 0; $t2 < $t1.length; $t2++) {
					var zone = $t1[$t2];
					if (zone.get_zoneId() === this.get_activeZoneID()) {
						return zone.get_visualModel();
					}
				}
			}
			return null;
		},
		get_renderMode: function DashboardModel$get_RenderMode() {
			return $tab_ApplicationModel.get_instance().get_renderMode();
		},
		get_formats: function DashboardModel$get_Formats() {
			if (ss.isValue(this.pm)) {
				return this.pm.cssAttrs;
			}
			return null;
		},
		get_portSize: function DashboardModel$get_PortSize() {
			return this.$portSize;
		},
		set_portSize: function DashboardModel$set_PortSize(value) {
			if (_.isEqual(this.$portSize, value)) {
				return;
			}
			this.$portSize = value;
			if (!ss.staticEquals(this.$2$PortSizeChangedField, null)) {
				this.$2$PortSizeChangedField();
			}
		},
		get_dashboardSize: function DashboardModel$get_DashboardSize() {
			return (ss.isValue(this.pm) ? this.pm.viewportSize : null);
		},
		get_dashboardSizeControlModel: function DashboardModel$get_DashboardSizeControlModel() {
			return this.$dashboardSizeControlModel;
		},
		get_isDashboard: function DashboardModel$get_IsDashboard() {
			if (ss.isValue(this.pm) && ss.isValue(this.pm.sheetPath)) {
				return this.pm.sheetPath.isDashboard;
			}
			return false;
		},
		get_flipboard: function DashboardModel$get_Flipboard() {
			var model = _.find(this.get_zoneModels(), function(z) {
				return z.get_zoneType() === 'flipboard';
			});
			return (ss.isNullOrUndefined(model) ? null : ss.cast(model.get_model(), $tab_FlipboardModel));
		},
		get_deviceLayouts: function DashboardModel$get_DeviceLayouts() {
			return this.pm.dashboardDeviceLayouts;
		},
		get_currentDeviceLayout: function DashboardModel$get_CurrentDeviceLayout() {
			if (ss.isNullOrUndefined(this.pm) || typeof(this.pm.dashboardDeviceLayout) === 'undefined') {
				return 'default';
			}
			return this.pm.dashboardDeviceLayout;
		},
		get_isTitleVisible: function DashboardModel$get_IsTitleVisible() {
			if (ss.isNullOrUndefined(this.pm)) {
				return false;
			}
			return this.pm.hasTitle;
		},
		get_flipboardNavModel: function DashboardModel$get_FlipboardNavModel() {
			var $t1 = this.get_zoneModels();
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var zone = $t1[$t2];
				if (zone.get_zoneType() === 'flipboard-nav') {
					return zone.get_model();
				}
			}
			return null;
		},
		get_hasDescription: function DashboardModel$get_HasDescription() {
			if (ss.isNullOrUndefined(this.get_flipboard())) {
				return false;
			}
			var dashboardTextObj = _.filter(this.get_zoneModels(), function(zm) {
				return ss.equalsT(zm.get_contentType(), 'dashboardText'.toString());
			});
			return ss.isValue(dashboardTextObj) && dashboardTextObj.length > 0;
		},
		getViewId: function DashboardModel$GetViewId(sheetName) {
			if (!ss.keyExists(this.pm.viewIds, sheetName)) {
				tab.Log.get(this).warn('Specified sheet does not exist. Returning null.', []);
				return null;
			}
			return this.pm.viewIds[sheetName];
		},
		getViewSession: function DashboardModel$GetViewSession(sheetName) {
			ss.Debug.assert(ss.keyExists(this.$viewSessions, sheetName), 'ViewSession not found');
			return this.$viewSessions[sheetName];
		},
		getZone: function DashboardModel$GetZone(zoneId) {
			return this.zonesModel.getZone(zoneId);
		},
		hasZone: function DashboardModel$HasZone(zoneId) {
			return this.zonesModel.hasZone(zoneId);
		},
		isValidSheet: function DashboardModel$IsValidSheet(zone) {
			return ss.isValue(this.pm.invalidSheets) && (zone.get_zoneCommonModel().get_zoneType() !== 'viz' || !_.any(this.pm.invalidSheets, function(invalidSheet) {
				return ss.referenceEquals(invalidSheet.worksheet, zone.get_worksheetName());
			}));
		},
		getMutableCopyOfPresModel: function DashboardModel$GetMutableCopyOfPresModel() {
			var zones = this.pm.zones;
			delete this.pm['zones'.toString()];
			var copy = $tab_Model.prototype.getMutableCopyOfPresModel.call(this);
			copy.dashboardDeviceLayouts = this.pm.dashboardDeviceLayouts;
			this.pm.zones = zones;
			return copy;
		},
		update: function DashboardModel$Update(dashboardPresModel, context) {
			if (ss.isValue(this.$oldRenderMode) && this.$oldRenderMode !== this.get_renderMode()) {
				tab.Log.get(this).debug('Render mode changed to: %s', [this.get_renderMode()]);
				this.raiseEvent(this.$2$RenderModeChangedField, context);
			}
			this.$oldRenderMode = this.get_renderMode();
			dashboardPresModel.isStory = dashboardPresModel.isStory || false;
			dashboardPresModel.hasTitle = dashboardPresModel.hasTitle || false;
			this.$storyContentDashboard = null;
			if (ss.isValue(dashboardPresModel.zones)) {
				this.zonesModel.update(dashboardPresModel.zones, context);
				if (!this.zonesModel.hasZone(this.get_readyZoneID())) {
					this.set_readyZoneID(0);
				}
			}
			if (ss.isValue(dashboardPresModel.hasSelection)) {
				tab.Log.get(this).debug('HasSelection: ' + dashboardPresModel.hasSelection, []);
			}
			if (ss.isValue(dashboardPresModel.autoUpdate)) {
				this.autoUpdate = dashboardPresModel.autoUpdate;
			}
			this.$updateViewSessions(dashboardPresModel, context.dialogProvider);
			if (ss.isValue(dashboardPresModel.activeZoneId)) {
				if (ss.isNullOrUndefined(this.pm) || this.pm.activeZoneId !== dashboardPresModel.activeZoneId) {
					this.raiseEvent(this.$2$ActiveZoneChangedField, context);
				}
			}
			if (!(typeof(dashboardPresModel.modifiedSheets) === 'undefined') && (ss.isNullOrUndefined(this.pm) || !_.isEqual(dashboardPresModel.modifiedSheets, this.pm.modifiedSheets))) {
				this.raiseEvent($tab_DashboardModel.$fireModifiedSheetsChanged, context);
			}
			if (ss.isValue(dashboardPresModel.sheetList)) {
				if (ss.isNullOrUndefined(this.sheetListModel)) {
					this.sheetListModel = new $tab_SheetListModel(this);
				}
				this.sheetListModel.update(dashboardPresModel.sheetList, context);
			}
			if (ss.isValue(dashboardPresModel.dashboardZoneHierarchy)) {
				if (ss.isNullOrUndefined(this.layoutTreeModel)) {
					this.layoutTreeModel = new $tab_LayoutTreeModel(this);
				}
				this.layoutTreeModel.update(dashboardPresModel.dashboardZoneHierarchy, context);
			}
			if (ss.isValue(this.pm)) {
				if (ss.isValue(dashboardPresModel.cssAttrs) && !_.isEqual(dashboardPresModel.cssAttrs, this.pm.cssAttrs)) {
					this.raiseEvent(this.$2$FormatsChangedField, context);
				}
			}
			if (ss.isNullOrUndefined(this.get_sheetName()) || ss.isValue(dashboardPresModel.sheetLayoutInfo) && !ss.referenceEquals(dashboardPresModel.sheetLayoutInfo.sheetName, this.get_sheetName())) {
				this.raiseEvent(this.$2$DashboardNameChangedField, context);
			}
			if (ss.isNullOrUndefined(this.pm) || this.pm.hasTitle !== dashboardPresModel.hasTitle) {
				this.raiseEvent(this.$2$TitleVisibilityChangedField, context);
			}
			this.$raiseDashboardSizeEvents(dashboardPresModel, context);
			this.$raiseDeviceLayoutEvents(dashboardPresModel, context);
			this.swapAndCopyPresModel(dashboardPresModel);
			this.raiseEvent(this.$2$NewDashboardField, context);
			this.$updateBrushingFromActions(context);
		},
		$updateViewSessions: function DashboardModel$UpdateViewSessions(dashboardPresModel, commonDialogProvider) {
			if (ss.isValue(dashboardPresModel.viewIds)) {
				var $t1 = _.keys(dashboardPresModel.viewIds);
				for (var $t2 = 0; $t2 < $t1.length; $t2++) {
					var sheetName = $t1[$t2];
					var viewId = dashboardPresModel.viewIds[sheetName];
					var vs = this.$viewSessions[sheetName];
					if (ss.isNullOrUndefined(vs)) {
						vs = new $tab_ViewSession($tab_CommandController.get().get_legacySession().get_urlRoot(), sheetName, viewId, commonDialogProvider);
						this.$viewSessions[sheetName] = vs;
					}
					vs.set_viewId(viewId);
				}
				var viewSessionKeys = _.keys(this.$viewSessions);
				var viewsToDelete = _.difference(viewSessionKeys, _.keys(dashboardPresModel.viewIds));
				for (var $t3 = 0; $t3 < viewsToDelete.length; $t3++) {
					var viewId1 = viewsToDelete[$t3];
					delete this.$viewSessions[viewId1];
				}
			}
		},
		$raiseDashboardSizeEvents: function DashboardModel$RaiseDashboardSizeEvents(dashboardPresModel, context) {
			if (ss.isValue(dashboardPresModel.dashboardSizeControl)) {
				if (ss.isNullOrUndefined(this.$dashboardSizeControlModel)) {
					this.$dashboardSizeControlModel = new $tab_DashboardSizeControlModel(this);
				}
				this.$dashboardSizeControlModel.update(dashboardPresModel.dashboardSizeControl, context);
			}
			if (ss.isNullOrUndefined(this.$portSize)) {
				this.set_portSize(dashboardPresModel.viewportSize);
			}
			if (ss.isValue(this.pm)) {
				if (ss.isValue(dashboardPresModel.viewportSize) && !_.isEqual(dashboardPresModel.viewportSize, this.pm.viewportSize)) {
					this.raiseEvent(this.$2$SizeChangedField, context);
				}
			}
		},
		$raiseDeviceLayoutEvents: function DashboardModel$RaiseDeviceLayoutEvents(dashboardPresModel, context) {
			dashboardPresModel.dashboardDeviceLayout = ss.coalesce(dashboardPresModel.dashboardDeviceLayout, 'default');
			if (ss.isNullOrUndefined(this.pm) || this.pm.dashboardDeviceLayout !== dashboardPresModel.dashboardDeviceLayout) {
				this.raiseEvent(this.$2$CurrentDeviceLayoutChangedField, context);
				this.raiseEvent(this.$2$ActiveZoneChangedField, context);
			}
			if (ss.isNullOrUndefined(dashboardPresModel.dashboardDeviceLayouts) || ss.isNullOrUndefined(this.pm) || !_.isEqual(this.pm.dashboardDeviceLayouts, dashboardPresModel.dashboardDeviceLayouts)) {
				this.raiseEvent(this.$2$CurrentDeviceLayoutListChangedField, context);
			}
		},
		$updateBrushingFromActions: function DashboardModel$UpdateBrushingFromActions(context) {
			if (!$tab_ApplicationModel.get_instance().get_isLocalRenderMode()) {
				return;
			}
			var vizModelLookup = $tab_ModelUtils.getVisualModelsFromDashboard(this);
			var dashboardSheetNames = _.keys(vizModelLookup);
			var hasBrushingFromLegendOrDataHL = _.any(dashboardSheetNames, ss.mkdel(this, function(sheetName) {
				var vizModel = vizModelLookup[sheetName];
				return this.$hasLegendSelectionForBrushing(vizModel) || this.$hasActiveDataHighlighter(vizModel);
			}));
			if (hasBrushingFromLegendOrDataHL) {
				for (var $t1 = 0; $t1 < dashboardSheetNames.length; $t1++) {
					var sheetName1 = dashboardSheetNames[$t1];
					vizModelLookup[sheetName1].setIsBrushedFromAction(true, context);
				}
			}
			else {
				var sheetsToBrush = $tab_DashboardModel.$getSheetsToBrushFromActions(dashboardSheetNames, vizModelLookup);
				for (var $t2 = 0; $t2 < dashboardSheetNames.length; $t2++) {
					var sheetName2 = dashboardSheetNames[$t2];
					var shouldBrush = sheetsToBrush.has(sheetName2);
					vizModelLookup[sheetName2].setIsBrushedFromAction(shouldBrush, context);
				}
			}
		},
		$hasLegendSelectionForBrushing: function DashboardModel$HasLegendSelectionForBrushing(vm) {
			var catLegendModels = $tab_ModelUtils.getModelsForViz($tab_CategoricalLegendModel).call(null, this.get_contentDashboard(), vm);
			return _.any(catLegendModels, function(model) {
				if (!model.get_isHighlightEnabled()) {
					return false;
				}
				var legendSelectionModel = vm.get_selectionsModel().getLegendSelection(model.get_legendTypeEnum(), model.get_legendNames());
				return !legendSelectionModel.isEmpty;
			});
		},
		$hasActiveDataHighlighter: function DashboardModel$HasActiveDataHighlighter(vm) {
			var dataHighlighterModels = $tab_ModelUtils.getModelsForViz($tab_DataHighlighterModel).call(null, this.get_contentDashboard(), vm);
			return _.any(dataHighlighterModels, function(model) {
				var dataHLSelectionModel = vm.get_selectionsModel().getLegendSelection('highlight', [model.get_fieldName()]);
				return !dataHLSelectionModel.isEmpty;
			});
		},
		$findStoryContentDashboard: function DashboardModel$FindStoryContentDashboard() {
			if (!this.pm.isStory) {
				return null;
			}
			var dashboard = null;
			var $t1 = this.zonesModel.get_zoneModels();
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var zone = $t1[$t2];
				if (ss.isInstanceOfType(zone.get_model(), $tab_FlipboardModel)) {
					dashboard = zone.get_model().get_dashboardModel();
					break;
				}
			}
			return dashboard;
		},
		$computeZonePlaceholderColor: function DashboardModel$ComputeZonePlaceholderColor() {
			var backgroundColor = $tab_ColorModel.fromColorCode(this.get_backgroundColor());
			backgroundColor = backgroundColor || $tab_ColorModel.white;
			var isLightBackground = backgroundColor.isLuminanceAboveThreshold(0.314999997615814);
			var blendFactor = (isLightBackground ? 0.0199999995529652 : 0.0299999993294477);
			var blendColor = (isLightBackground ? new $tab_ColorModel(0, 0, 0, blendFactor) : new $tab_ColorModel(255, 255, 255, blendFactor));
			var zonePlaceHolderColor = blendColor.toRgba();
			return zonePlaceHolderColor;
		}
	}, $tab_Model);
	ss.initClass($tab_DashboardNewObjectsModel, $asm, {
		get_addNewZoneAsFloating: function DashboardNewObjectsModel$get_AddNewZoneAsFloating() {
			return this.$addNewZoneAsFloating;
		},
		set_addNewZoneAsFloating: function DashboardNewObjectsModel$set_AddNewZoneAsFloating(value) {
			if (this.$addNewZoneAsFloating === value) {
				return;
			}
			this.$addNewZoneAsFloating = value;
		}
	}, $tab_Model);
	ss.initClass($tab_DashboardSizeControlModel, $asm, {
		add_sizeInfoUpdated: function DashboardSizeControlModel$add_SizeInfoUpdated(value) {
			this.$2$SizeInfoUpdatedField = ss.delegateCombine(this.$2$SizeInfoUpdatedField, value);
		},
		remove_sizeInfoUpdated: function DashboardSizeControlModel$remove_SizeInfoUpdated(value) {
			this.$2$SizeInfoUpdatedField = ss.delegateRemove(this.$2$SizeInfoUpdatedField, value);
		},
		get_minDimension: function DashboardSizeControlModel$get_MinDimension() {
			return this.pm.minSize;
		},
		get_maxDimension: function DashboardSizeControlModel$get_MaxDimension() {
			return this.pm.maxSize;
		},
		get_stepSize: function DashboardSizeControlModel$get_StepSize() {
			return this.pm.stepSize;
		},
		get_sizeModeOptions: function DashboardSizeControlModel$get_SizeModeOptions() {
			return this.pm.sizeModeOptions || [];
		},
		update: function DashboardSizeControlModel$Update(dashboardSizeControlPresModel, context) {
			if (ss.isValue(dashboardSizeControlPresModel.dashboardSizePresModel)) {
				if (ss.isNullOrUndefined(this.dashboardSizeModel)) {
					this.dashboardSizeModel = new $tab_DashboardSizeModel(this);
				}
				this.dashboardSizeModel.update(dashboardSizeControlPresModel.dashboardSizePresModel, context);
			}
			if (ss.isValue(dashboardSizeControlPresModel.deviceLayoutInfoItem)) {
				if (ss.isNullOrUndefined(this.layoutInfoModel)) {
					this.layoutInfoModel = new $tab_DeviceLayoutInfoItemModel(this);
				}
				this.layoutInfoModel.update(dashboardSizeControlPresModel.deviceLayoutInfoItem, context);
			}
			this.simpleSwapToUpdate(dashboardSizeControlPresModel, this.$2$SizeInfoUpdatedField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_DashboardSizeModel, $asm, {
		add_sizeUpdated: function DashboardSizeModel$add_SizeUpdated(value) {
			this.$2$SizeUpdatedField = ss.delegateCombine(this.$2$SizeUpdatedField, value);
		},
		remove_sizeUpdated: function DashboardSizeModel$remove_SizeUpdated(value) {
			this.$2$SizeUpdatedField = ss.delegateRemove(this.$2$SizeUpdatedField, value);
		},
		get_currentSizeText: function DashboardSizeModel$get_CurrentSizeText() {
			return this.pm.summaryText;
		},
		get_sizeMode: function DashboardSizeModel$get_SizeMode() {
			if (this.pm.dashboardSizingMode !== 'unspecified') {
				return this.pm.dashboardSizingMode;
			}
			switch (this.pm.sizeMode) {
				case 'size-mode-auto': {
					return 'automatic';
				}
				case 'size-mode-fixed': {
					return 'fixed';
				}
				default: {
					return 'range';
				}
			}
		},
		get_currentWidth: function DashboardSizeModel$get_CurrentWidth() {
			return this.pm.w;
		},
		get_currentMinWidth: function DashboardSizeModel$get_CurrentMinWidth() {
			return this.pm.minWidth;
		},
		get_currentMaxWidth: function DashboardSizeModel$get_CurrentMaxWidth() {
			return this.pm.maxWidth;
		},
		get_currentHeight: function DashboardSizeModel$get_CurrentHeight() {
			return this.pm.h;
		},
		get_currentMinHeight: function DashboardSizeModel$get_CurrentMinHeight() {
			return this.pm.minHeight;
		},
		get_currentMaxHeight: function DashboardSizeModel$get_CurrentMaxHeight() {
			return this.pm.maxHeight;
		},
		update: function DashboardSizeModel$Update(dashboardSizePresModel, context) {
			this.simpleSwapToUpdate(dashboardSizePresModel, this.$2$SizeUpdatedField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_DataAlert, $asm, {
		add_notificationIntervalChanged: function DataAlert$add_NotificationIntervalChanged(value) {
			this.$1$NotificationIntervalChangedField = ss.delegateCombine(this.$1$NotificationIntervalChangedField, value);
		},
		remove_notificationIntervalChanged: function DataAlert$remove_NotificationIntervalChanged(value) {
			this.$1$NotificationIntervalChangedField = ss.delegateRemove(this.$1$NotificationIntervalChangedField, value);
		},
		add_titleChanged: function DataAlert$add_TitleChanged(value) {
			this.$1$TitleChangedField = ss.delegateCombine(this.$1$TitleChangedField, value);
		},
		remove_titleChanged: function DataAlert$remove_TitleChanged(value) {
			this.$1$TitleChangedField = ss.delegateRemove(this.$1$TitleChangedField, value);
		},
		add_measureChanged: function DataAlert$add_MeasureChanged(value) {
			this.$1$MeasureChangedField = ss.delegateCombine(this.$1$MeasureChangedField, value);
		},
		remove_measureChanged: function DataAlert$remove_MeasureChanged(value) {
			this.$1$MeasureChangedField = ss.delegateRemove(this.$1$MeasureChangedField, value);
		},
		add_conditionChanged: function DataAlert$add_ConditionChanged(value) {
			this.$1$ConditionChangedField = ss.delegateCombine(this.$1$ConditionChangedField, value);
		},
		remove_conditionChanged: function DataAlert$remove_ConditionChanged(value) {
			this.$1$ConditionChangedField = ss.delegateRemove(this.$1$ConditionChangedField, value);
		},
		add_recipientsChanged: function DataAlert$add_RecipientsChanged(value) {
			this.$1$RecipientsChangedField = ss.delegateCombine(this.$1$RecipientsChangedField, value);
		},
		remove_recipientsChanged: function DataAlert$remove_RecipientsChanged(value) {
			this.$1$RecipientsChangedField = ss.delegateRemove(this.$1$RecipientsChangedField, value);
		},
		get_recipients: function DataAlert$get_Recipients() {
			return this.$1$RecipientsField;
		},
		set_recipients: function DataAlert$set_Recipients(value) {
			this.$1$RecipientsField = value;
		},
		get_userIds: function DataAlert$get_UserIds() {
			return _.map(this.get_recipients(), function(user) {
				return user.id.toString();
			});
		},
		get_notificationIntervalInMinutes: function DataAlert$get_NotificationIntervalInMinutes() {
			return this.$notificationInterval;
		},
		set_notificationIntervalInMinutes: function DataAlert$set_NotificationIntervalInMinutes(value) {
			if (this.$notificationInterval !== value) {
				this.$notificationInterval = value;
				if (!ss.staticEquals(this.$1$NotificationIntervalChangedField, null)) {
					this.$1$NotificationIntervalChangedField();
				}
			}
		},
		get_title: function DataAlert$get_Title() {
			return this.$title;
		},
		set_title: function DataAlert$set_Title(value) {
			if (!ss.referenceEquals(this.$title, value)) {
				this.$title = value;
				if (!ss.staticEquals(this.$1$TitleChangedField, null)) {
					this.$1$TitleChangedField();
				}
			}
		},
		get_selectionCaption: function DataAlert$get_SelectionCaption() {
			return this.$1$SelectionCaptionField;
		},
		set_selectionCaption: function DataAlert$set_SelectionCaption(value) {
			this.$1$SelectionCaptionField = value;
		},
		get_measurePresModel: function DataAlert$get_MeasurePresModel() {
			return this.$measurePresModel;
		},
		set_measurePresModel: function DataAlert$set_MeasurePresModel(value) {
			if (!ss.referenceEquals(this.$measurePresModel, value)) {
				this.$measurePresModel = value;
				if (!ss.staticEquals(this.$1$MeasureChangedField, null)) {
					this.$1$MeasureChangedField();
				}
			}
		},
		get_conditionPresModel: function DataAlert$get_ConditionPresModel() {
			return this.$conditionPresModel;
		},
		set_conditionPresModel: function DataAlert$set_ConditionPresModel(value) {
			if (!ss.referenceEquals(this.$conditionPresModel, value)) {
				this.$conditionPresModel = value;
				if (!ss.staticEquals(this.$1$ConditionChangedField, null)) {
					this.$1$ConditionChangedField();
				}
			}
		},
		get_operator: function DataAlert$get_Operator() {
			return this.$conditionPresModel.dataAlertConditionOp;
		},
		get_threshold: function DataAlert$get_Threshold() {
			return this.$threshold;
		},
		set_threshold: function DataAlert$set_Threshold(value) {
			if (ss.referenceEquals(this.$threshold, value)) {
				return;
			}
			this.$threshold = value;
			if (ss.isNullOrUndefined(this.get_conditionPresModel().dataType)) {
				return;
			}
			this.set_thresholdIsValid(this.isValidThresholdText(value));
		},
		get_thresholdIsValid: function DataAlert$get_ThresholdIsValid() {
			return this.$1$ThresholdIsValidField;
		},
		set_thresholdIsValid: function DataAlert$set_ThresholdIsValid(value) {
			this.$1$ThresholdIsValidField = value;
		},
		get_alertConditionMet: function DataAlert$get_AlertConditionMet() {
			return this.$1$AlertConditionMetField;
		},
		set_alertConditionMet: function DataAlert$set_AlertConditionMet(value) {
			this.$1$AlertConditionMetField = value;
		},
		$isValidFormattedThresholdText: function DataAlert$IsValidFormattedThresholdText(text) {
			return this.get_conditionPresModel().dataType === 'real' && tab.DoubleUtil.isValidDouble(text) || this.get_conditionPresModel().dataType === 'integer' && tab.DoubleUtil.isValid64BitInteger(text);
		},
		isValidThresholdText: function DataAlert$IsValidThresholdText(text) {
			if (ss.isNullOrEmptyString(text)) {
				return false;
			}
			if (ss.isNullOrUndefined($tab_ApplicationModel.get_instance().get_appPresModel())) {
				return this.$isValidFormattedThresholdText(text);
			}
			else {
				var format = $tab_ApplicationModel.get_instance().get_appPresModel().numberFormats;
				return this.$isValidFormattedThresholdText(tableau.format.reformatNumberToJsFormat(text, format));
			}
		},
		updateRecipients: function DataAlert$UpdateRecipients(users) {
			this.set_recipients(users);
			if (!ss.staticEquals(this.$1$RecipientsChangedField, null)) {
				this.$1$RecipientsChangedField();
			}
		}
	});
	$tab_DataAlert.$ctor2.prototype = $tab_DataAlert.$ctor1.prototype = $tab_DataAlert.prototype;
	ss.initClass($tab_DataAlertCommands, $asm, {});
	ss.initClass($tab_DataAlertConditionOperation, $asm, {});
	ss.initClass($tab_DataAlertDialogModel, $asm, {
		get_operation: function DataAlertDialogModel$get_Operation() {
			return this.pm.dataAlertConditionOp;
		},
		get_thresholdText: function DataAlertDialogModel$get_ThresholdText() {
			return this.pm.dataAlertThresholdText;
		},
		update: function DataAlertDialogModel$Update(dialogPresModel) {
			if (ss.isValue(dialogPresModel)) {
				this.swapAndCopyPresModel(dialogPresModel);
			}
		}
	}, $tab_Model);
	ss.initClass($tab_DataAlertNotificationInterval, $asm, {});
	ss.initClass($tab_DataConnectionAreaModel, $asm, {
		add_show: function DataConnectionAreaModel$add_Show(value) {
			this.$2$ShowField = ss.delegateCombine(this.$2$ShowField, value);
		},
		remove_show: function DataConnectionAreaModel$remove_Show(value) {
			this.$2$ShowField = ss.delegateRemove(this.$2$ShowField, value);
		},
		add_serverDataSourcesUpdated: function DataConnectionAreaModel$add_ServerDataSourcesUpdated(value) {
			this.$2$ServerDataSourcesUpdatedField = ss.delegateCombine(this.$2$ServerDataSourcesUpdatedField, value);
		},
		remove_serverDataSourcesUpdated: function DataConnectionAreaModel$remove_ServerDataSourcesUpdated(value) {
			this.$2$ServerDataSourcesUpdatedField = ss.delegateRemove(this.$2$ServerDataSourcesUpdatedField, value);
		},
		add_serverDataSourcesAppended: function DataConnectionAreaModel$add_ServerDataSourcesAppended(value) {
			this.$2$ServerDataSourcesAppendedField = ss.delegateCombine(this.$2$ServerDataSourcesAppendedField, value);
		},
		remove_serverDataSourcesAppended: function DataConnectionAreaModel$remove_ServerDataSourcesAppended(value) {
			this.$2$ServerDataSourcesAppendedField = ss.delegateRemove(this.$2$ServerDataSourcesAppendedField, value);
		},
		get_serverDataSources: function DataConnectionAreaModel$get_ServerDataSources() {
			return this.$serverDataSources;
		},
		updateServerDataSources: function DataConnectionAreaModel$UpdateServerDataSources(dataSources, context, replace) {
			if (replace) {
				this.$serverDataSources = dataSources;
				this.raiseEvent(this.$2$ServerDataSourcesUpdatedField, context);
			}
			else {
				ss.arrayAddRange(this.$serverDataSources, dataSources);
				this.raiseEvent$1(Array).call(this, this.$2$ServerDataSourcesAppendedField, dataSources, context);
			}
		},
		update: function DataConnectionAreaModel$Update(context) {
			this.updateServerDataSources(this.$serverDataSources, context, true);
			this.raiseEvent(this.$2$ShowField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_DataConnectionCommands, $asm, {});
	ss.initClass($tab_DataConnectionPromptModel, $asm, {
		get_$dataConnectionPromptPresModel: function DataConnectionPromptModel$get_DataConnectionPromptPresModel() {
			return this.pm;
		},
		get_connectionName: function DataConnectionPromptModel$get_ConnectionName() {
			return this.get_$dataConnectionPromptPresModel().connectionName || '';
		},
		get_promptTitle: function DataConnectionPromptModel$get_PromptTitle() {
			return this.get_$dataConnectionPromptPresModel().dialogTitle || '';
		},
		get_variableListInstruction: function DataConnectionPromptModel$get_VariableListInstruction() {
			return this.get_$dataConnectionPromptPresModel().valuesTableHeader || '';
		},
		get_variableListNameLabel: function DataConnectionPromptModel$get_VariableListNameLabel() {
			return this.get_$dataConnectionPromptPresModel().listViewNameLabel || '';
		},
		get_variableListValueLabel: function DataConnectionPromptModel$get_VariableListValueLabel() {
			return this.get_$dataConnectionPromptPresModel().listViewValueLabel || '';
		},
		get_addVariableLabel: function DataConnectionPromptModel$get_AddVariableLabel() {
			return this.get_$dataConnectionPromptPresModel().addVariableLabel || '';
		},
		get_addVariableTooltip: function DataConnectionPromptModel$get_AddVariableTooltip() {
			return this.get_$dataConnectionPromptPresModel().addVariableTooltip || '';
		},
		get_deleteVariableTooltip: function DataConnectionPromptModel$get_DeleteVariableTooltip() {
			return this.get_$dataConnectionPromptPresModel().deleteVariableTooltip || '';
		},
		get_requiredVariableMessage: function DataConnectionPromptModel$get_RequiredVariableMessage() {
			return this.get_$dataConnectionPromptPresModel().requiredVariableMessage || '';
		},
		get_editSectionTitle: function DataConnectionPromptModel$get_EditSectionTitle() {
			return this.get_$dataConnectionPromptPresModel().editWidgetHeader || '';
		},
		get_editSectionInstruction: function DataConnectionPromptModel$get_EditSectionInstruction() {
			return this.get_$dataConnectionPromptPresModel().editWidgetInstruction || '';
		},
		get_editSectionFromLabel: function DataConnectionPromptModel$get_EditSectionFromLabel() {
			return this.get_$dataConnectionPromptPresModel().fromLabel || '';
		},
		get_editSectionToLabel: function DataConnectionPromptModel$get_EditSectionToLabel() {
			return this.get_$dataConnectionPromptPresModel().toLabel || '';
		},
		get_connectionVariables: function DataConnectionPromptModel$get_ConnectionVariables() {
			return this.$connectionVariableModels;
		},
		update: function DataConnectionPromptModel$Update(promptPresModels) {
			this.swapAndCopyPresModel(promptPresModels);
			if (ss.isValue(this.get_$dataConnectionPromptPresModel().promptVariables)) {
				this.$connectionVariableModels = [];
				for (var i = 0; i < this.get_$dataConnectionPromptPresModel().promptVariables.length; i++) {
					var variableModel = new $tab_DataConnectionVariableModel(new $tab_DataConnectionVariableArrayModel(this), i);
					variableModel.update(this.get_$dataConnectionPromptPresModel().promptVariables[i]);
					this.$connectionVariableModels.push(variableModel);
				}
			}
		}
	}, $tab_Model);
	ss.initClass($tab_DataConnectionVariableArrayModel, $asm, {}, $tab_Model);
	ss.initClass($tab_DataConnectionVariableModel, $asm, {
		get_$variablePresModel: function DataConnectionVariableModel$get_VariablePresModel() {
			return this.pm;
		},
		get_displayName: function DataConnectionVariableModel$get_DisplayName() {
			return this.get_$variablePresModel().variableDisplayName;
		},
		get_description: function DataConnectionVariableModel$get_Description() {
			return this.get_$variablePresModel().variableDescription;
		},
		get_guid: function DataConnectionVariableModel$get_Guid() {
			return this.get_$variablePresModel().variableGuid;
		},
		get_isRequired: function DataConnectionVariableModel$get_IsRequired() {
			return this.get_$variablePresModel().isRequired;
		},
		get_defaultValue: function DataConnectionVariableModel$get_DefaultValue() {
			return this.$defaultValue;
		},
		get_supportMultiValue: function DataConnectionVariableModel$get_SupportMultiValue() {
			return this.get_$variablePresModel().supportsMultipleValues;
		},
		get_values: function DataConnectionVariableModel$get_Values() {
			return this.$valueModels;
		},
		get_selectableOperations: function DataConnectionVariableModel$get_SelectableOperations() {
			return this.get_$variablePresModel().serverVariableMetadata.variableValueOperations;
		},
		get_selectableValues: function DataConnectionVariableModel$get_SelectableValues() {
			return this.get_$variablePresModel().serverVariableMetadata.selectionValueList;
		},
		update: function DataConnectionVariableModel$Update(variablePresModel) {
			this.swapAndCopyPresModel(variablePresModel);
			this.$defaultValue = new $tab_DataConnectionVariableValueModel(null, -1);
			this.$defaultValue.update(this.get_$variablePresModel().serverVariableMetadata.variableValue);
			if (ss.isValue(this.get_$variablePresModel().variableValues)) {
				this.$valueModels = [];
				for (var i = 0; i < this.get_$variablePresModel().variableValues.length; i++) {
					var valueModel = new $tab_DataConnectionVariableValueModel(new $tab_DataConnectionVariableValueArrayModel(this), i);
					valueModel.update(this.get_$variablePresModel().variableValues[i]);
					this.$valueModels.push(valueModel);
				}
			}
		}
	}, $tab_Model);
	ss.initClass($tab_DataConnectionVariableValueArrayModel, $asm, {}, $tab_Model);
	ss.initClass($tab_DataConnectionVariableValueModel, $asm, {
		get_$valuePresModel: function DataConnectionVariableValueModel$get_ValuePresModel() {
			return this.pm;
		},
		get_displayValue: function DataConnectionVariableValueModel$get_DisplayValue() {
			return this.get_$valuePresModel().displayValue;
		},
		get_valueIndex: function DataConnectionVariableValueModel$get_ValueIndex() {
			return this.get_$valuePresModel().valueIndex;
		},
		get_operation: function DataConnectionVariableValueModel$get_Operation() {
			return this.get_$valuePresModel().serverVariableValue.variableValueOperation;
		},
		set_operation: function DataConnectionVariableValueModel$set_Operation(value) {
			this.get_$valuePresModel().serverVariableValue.variableValueOperation = value;
		},
		get_firstValue: function DataConnectionVariableValueModel$get_FirstValue() {
			return this.get_$valuePresModel().serverVariableValue.firstValue;
		},
		get_firstValueIndex: function DataConnectionVariableValueModel$get_FirstValueIndex() {
			return this.get_$valuePresModel().serverVariableValue.firstValueIndex;
		},
		get_secondValue: function DataConnectionVariableValueModel$get_SecondValue() {
			return (this.get_$valuePresModel().serverVariableValue.isTwoValued ? this.get_$valuePresModel().serverVariableValue.secondValue : null);
		},
		get_secondValueIndex: function DataConnectionVariableValueModel$get_SecondValueIndex() {
			return (this.get_$valuePresModel().serverVariableValue.isTwoValued ? this.get_$valuePresModel().serverVariableValue.secondValueIndex : -1);
		},
		update: function DataConnectionVariableValueModel$Update(variableValuePresModel) {
			this.swapAndCopyPresModel(variableValuePresModel);
		}
	}, $tab_Model);
	ss.initClass($tab_DataDictionaryModel, $asm, {
		get_isEmpty: function DataDictionaryModel$get_IsEmpty() {
			return tab.MiscUtil.isNullOrEmpty(this.get_$dataDictionaryPM()) || tab.MiscUtil.isNullOrEmpty(this.get_$dataDictionaryPM().dataSegments);
		},
		get_$dataDictionaryPM: function DataDictionaryModel$get_DataDictionaryPM() {
			return this.pm;
		},
		update: function DataDictionaryModel$Update(dataPM) {
			if (ss.isValue(this.get_$dataDictionaryPM()) && ss.isValue(dataPM)) {
				var newDataSegments = dataPM.dataSegments;
				if (ss.isValue(newDataSegments)) {
					var oldDataSegments = this.get_$dataDictionaryPM().dataSegments;
					if (ss.isValue(oldDataSegments)) {
						var $t1 = new ss.ObjectEnumerator(oldDataSegments);
						try {
							while ($t1.moveNext()) {
								var entry = $t1.current();
								if (!ss.keyExists(newDataSegments, entry.key)) {
									newDataSegments[entry.key] = entry.value;
								}
							}
						}
						finally {
							$t1.dispose();
						}
					}
					var $t2 = new ss.ObjectEnumerator(newDataSegments);
					try {
						while ($t2.moveNext()) {
							var entry1 = $t2.current();
							if (entry1.value === null) {
								delete newDataSegments[entry1.key];
							}
						}
					}
					finally {
						$t2.dispose();
					}
					this.$numSegments = null;
				}
			}
			this.pm = dataPM;
		},
		getRawValue: function DataDictionaryModel$GetRawValue(dt, index) {
			if (ss.isNullOrUndefined(this.get_$dataDictionaryPM()) || ss.isNullOrUndefined(this.get_$dataDictionaryPM().dataSegments)) {
				return null;
			}
			if (ss.isNullOrUndefined(this.$numSegments)) {
				this.$numSegments = ss.getKeyCount(this.get_$dataDictionaryPM().dataSegments);
			}
			for (var i = 0; ss.Nullable$1.lt(i, this.$numSegments); i++) {
				var dataSegment = this.get_$dataDictionaryPM().dataSegments[i.toString()];
				for (var $t1 = 0; $t1 < dataSegment.dataColumns.length; $t1++) {
					var dataColumn = dataSegment.dataColumns[$t1];
					if (ss.isNullOrUndefined(dataColumn) || dataColumn.dataType !== dt) {
						continue;
					}
					if (index < dataColumn.dataValues.length) {
						return dataColumn.dataValues[index];
					}
					index -= dataColumn.dataValues.length;
					break;
				}
			}
			return null;
		}
	}, $tab_Model);
	ss.initClass($tab_DataHighlighterModel, $asm, {
		add_newDataHighlighterPresModel: function DataHighlighterModel$add_NewDataHighlighterPresModel(value) {
			this.$2$NewDataHighlighterPresModelField = ss.delegateCombine(this.$2$NewDataHighlighterPresModelField, value);
		},
		remove_newDataHighlighterPresModel: function DataHighlighterModel$remove_NewDataHighlighterPresModel(value) {
			this.$2$NewDataHighlighterPresModelField = ss.delegateRemove(this.$2$NewDataHighlighterPresModelField, value);
		},
		get_fieldName: function DataHighlighterModel$get_FieldName() {
			return this.get_$dataHighlighterPresModel().fn;
		},
		get_searchPlaceholderString: function DataHighlighterModel$get_SearchPlaceholderString() {
			return this.get_$dataHighlighterPresModel().searchPlaceholder;
		},
		get_$dataHighlighterPresModel: function DataHighlighterModel$get_DataHighlighterPresModel() {
			return this.pm;
		},
		get_fullDomainItemSet: function DataHighlighterModel$get_FullDomainItemSet() {
			return this.get_$dataHighlighterPresModel().dataHighlighterItemSet;
		},
		get_searchText: function DataHighlighterModel$get_SearchText() {
			return this.get_$dataHighlighterPresModel().queryText;
		},
		get_maxNumberListItems: function DataHighlighterModel$get_MaxNumberListItems() {
			return this.get_$dataHighlighterPresModel().maxNumberWebListItems;
		},
		get_isActive: function DataHighlighterModel$get_IsActive() {
			return this.get_$dataHighlighterPresModel().isActive;
		},
		get_bodyTextStyle: function DataHighlighterModel$get_BodyTextStyle() {
			return this.get_$dataHighlighterPresModel().textStyle;
		},
		get_numHighlighted: function DataHighlighterModel$get_NumHighlighted() {
			return this.get_$dataHighlighterPresModel().numHighlighted;
		},
		get_zoneHasBorder: function DataHighlighterModel$get_ZoneHasBorder() {
			if (ss.isNullOrUndefined(this.parent)) {
				return false;
			}
			return ss.cast(this.parent, $tab_ZoneContentWrapperModel).get_zone().get_zoneCommonModel().get_hasBorder();
		},
		get_zoneWidth: function DataHighlighterModel$get_ZoneWidth() {
			if (ss.isNullOrUndefined(this.parent)) {
				return 0;
			}
			return ss.cast(this.parent, $tab_ZoneContentWrapperModel).get_zone().get_zoneCommonModel().get_width();
		},
		update: function DataHighlighterModel$Update(dataHighlighterPresModel, context) {
			if (ss.isValue(dataHighlighterPresModel)) {
				$tab_FontNotificationUtil.notifyFontsFromTextStylePresModel(dataHighlighterPresModel.textStyle);
			}
			this.$brushingLookupTable = null;
			this.simpleSwapToUpdate(dataHighlighterPresModel, this.$2$NewDataHighlighterPresModelField, context);
		},
		getItemNamesFromObjectId: function DataHighlighterModel$GetItemNamesFromObjectId(objectId) {
			if (ss.isNullOrUndefined(this.$brushingLookupTable)) {
				this.$buildLookupTable();
			}
			return [this.$brushingLookupTable[objectId]];
		},
		$buildLookupTable: function DataHighlighterModel$BuildLookupTable() {
			this.$brushingLookupTable = {};
			var $t1 = this.get_fullDomainItemSet().dataHighlighterItems;
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var item = $t1[$t2];
				this.$brushingLookupTable[item.objectId] = item.text;
			}
		}
	}, $tab_Model, [$tab_IBrushingModelInfo]);
	ss.initClass($tab_DataSchemaModel, $asm, {
		add_newActiveDataSource: function DataSchemaModel$add_NewActiveDataSource(value) {
			this.$2$NewActiveDataSourceField = ss.delegateCombine(this.$2$NewActiveDataSourceField, value);
		},
		remove_newActiveDataSource: function DataSchemaModel$remove_NewActiveDataSource(value) {
			this.$2$NewActiveDataSourceField = ss.delegateRemove(this.$2$NewActiveDataSourceField, value);
		},
		add_newDataSchema: function DataSchemaModel$add_NewDataSchema(value) {
			this.$2$NewDataSchemaField = ss.delegateCombine(this.$2$NewDataSchemaField, value);
		},
		remove_newDataSchema: function DataSchemaModel$remove_NewDataSchema(value) {
			this.$2$NewDataSchemaField = ss.delegateRemove(this.$2$NewDataSchemaField, value);
		},
		add_newDataSourceAdded: function DataSchemaModel$add_NewDataSourceAdded(value) {
			this.$2$NewDataSourceAddedField = ss.delegateCombine(this.$2$NewDataSourceAddedField, value);
		},
		remove_newDataSourceAdded: function DataSchemaModel$remove_NewDataSourceAdded(value) {
			this.$2$NewDataSourceAddedField = ss.delegateRemove(this.$2$NewDataSourceAddedField, value);
		},
		get_parametersDataSource: function DataSchemaModel$get_ParametersDataSource() {
			return (ss.isNullOrUndefined(this.dataSources) ? null : this.dataSources.getDataSource(this.$parametersDSName));
		},
		get_dataSchemaPresModel: function DataSchemaModel$get_DataSchemaPresModel() {
			return this.pm;
		},
		get_$activeDataSourceName: function DataSchemaModel$get_ActiveDataSourceName() {
			if (ss.isValue(this.get_dataSchemaPresModel()) && ss.isValue(this.get_dataSchemaPresModel().datasource)) {
				return this.get_dataSchemaPresModel().datasource;
			}
			else {
				return '';
			}
		},
		get_activeDataSource: function DataSchemaModel$get_ActiveDataSource() {
			return (ss.isNullOrUndefined(this.dataSources) ? null : this.dataSources.getDataSource(this.get_$activeDataSourceName()));
		},
		notifyNewDataSourceAdded: function DataSchemaModel$NotifyNewDataSourceAdded(context, name) {
			this.raiseEvent$1(String).call(this, this.$2$NewDataSourceAddedField, name, context);
		},
		getDefaultDataSourceForSheet: function DataSchemaModel$GetDefaultDataSourceForSheet(sheetName) {
			if (ss.isNullOrUndefined(this.get_dataSchemaPresModel())) {
				return null;
			}
			var primaryDatasourceName = null;
			if (ss.isValue(this.get_dataSchemaPresModel().worksheetDataSchemaMap) && ss.keyExists(this.get_dataSchemaPresModel().worksheetDataSchemaMap, sheetName)) {
				primaryDatasourceName = this.get_dataSchemaPresModel().worksheetDataSchemaMap[sheetName].primaryDatasource;
			}
			if (ss.isNullOrEmptyString(primaryDatasourceName)) {
				return _.chain(this.dataSources.get_dataSources()).filter(ss.mkdel(this, function(model) {
					return !ss.referenceEquals(model.get_name(), this.get_dataSchemaPresModel().parametersDatasource);
				})).first().value();
			}
			return this.dataSources.getDataSource(primaryDatasourceName);
		},
		getDataSourceCount: function DataSchemaModel$GetDataSourceCount(includeParameters) {
			var count = 0;
			if (ss.isValue(this.dataSources) && ss.isValue(this.dataSources.get_dataSources())) {
				count = this.dataSources.get_dataSources().length;
				if (!includeParameters && ss.isValue(this.get_parametersDataSource())) {
					count--;
				}
			}
			return count;
		},
		findField: function DataSchemaModel$FindField(globalFieldName) {
			var model = this.findDataSourceFromGlobalFieldName(globalFieldName);
			if (ss.isNullOrUndefined(model)) {
				return null;
			}
			return model.findField(globalFieldName);
		},
		findDataSourceByName: function DataSchemaModel$FindDataSourceByName(datasourceName) {
			return (ss.isNullOrUndefined(this.dataSources) ? null : this.dataSources.getDataSource(datasourceName));
		},
		findDataSourceFromGlobalFieldName: function DataSchemaModel$FindDataSourceFromGlobalFieldName(fn) {
			var fieldNameParts = $tab_DataSourceModel.splitGlobalFieldName(fn);
			if (fieldNameParts.length <= 1) {
				return null;
			}
			var sourceName = fieldNameParts[0].replace(new RegExp('\\]\\]'), ']');
			return this.findDataSourceByName(sourceName);
		},
		update: function DataSchemaModel$Update(newPresModel, context) {
			if (ss.isNullOrUndefined(newPresModel)) {
				return;
			}
			if (_.isEqual(newPresModel, this.pm)) {
				return;
			}
			var newBlendingFields = (ss.isValue(newPresModel.currentBlendingFields) ? newPresModel.currentBlendingFields : []);
			var newBlendingCandidates = (ss.isValue(newPresModel.blendingFieldCandidates) ? newPresModel.blendingFieldCandidates : []);
			this.currentBlendingFields = ss.arrayClone(newBlendingFields);
			this.blendingFieldCandidates = ss.arrayClone(newBlendingCandidates);
			if (ss.isValue(newPresModel.parametersDatasource)) {
				this.$parametersDSName = newPresModel.parametersDatasource;
			}
			tab.Log.get(this).debug('Updating DataSchemaModel', []);
			var prevDataSourcesCount = this.getDataSourceCount(true);
			if (ss.isValue(newPresModel.dataSources)) {
				this.dataSources = this.dataSources || new $tab_DataSourcesModel(this);
				this.dataSources.update(newPresModel.dataSources, context);
			}
			if (this.getDataSourceCount(true) > prevDataSourcesCount) {
				this.notifyNewDataSourceAdded(context, '');
			}
			if (ss.isValue(this.pm)) {
				var oldWorksheetSchemas = this.pm.worksheetDataSchemaMap;
				var newWorksheetSchemas = newPresModel.worksheetDataSchemaMap;
				$tab_ModelUtils.mergeMapPresModelDelta(oldWorksheetSchemas, newWorksheetSchemas);
			}
			if (!ss.referenceEquals(newPresModel.datasource, this.get_$activeDataSourceName())) {
				this.raiseEvent(this.$2$NewActiveDataSourceField, context);
			}
			this.swapAndCopyPresModel(newPresModel);
			this.raiseEvent(this.$2$NewDataSchemaField, context);
		}
	}, $tab_Model);
	ss.initInterface($tab_IHandleNotifications, $asm, { get_notificationId: null, onNotify: null });
	ss.initInterface($tab_IDetachableNotificationHandler, $asm, { add_stopNotifying: null, remove_stopNotifying: null }, [$tab_IHandleNotifications]);
	ss.initClass($tab_DataSourceDataModel, $asm, {
		add_modelUpdated: function DataSourceDataModel$add_ModelUpdated(value) {
			this.$2$ModelUpdatedField = ss.delegateCombine(this.$2$ModelUpdatedField, value);
		},
		remove_modelUpdated: function DataSourceDataModel$remove_ModelUpdated(value) {
			this.$2$ModelUpdatedField = ss.delegateRemove(this.$2$ModelUpdatedField, value);
		},
		add_stopNotifying: function DataSourceDataModel$add_StopNotifying(value) {
			this.$2$StopNotifyingField = ss.delegateCombine(this.$2$StopNotifyingField, value);
		},
		remove_stopNotifying: function DataSourceDataModel$remove_StopNotifying(value) {
			this.$2$StopNotifyingField = ss.delegateRemove(this.$2$StopNotifyingField, value);
		},
		get_notificationId: function DataSourceDataModel$get_NotificationId() {
			return 'update-data-source-data-event';
		},
		onNotify: function DataSourceDataModel$OnNotify(pm, context) {
			this.onNotify$1(pm, context);
		},
		onNotify$1: function DataSourceDataModel$OnNotify(newPresModel, context) {
			if (ss.isValue(newPresModel)) {
				this.update(newPresModel, context);
			}
		},
		detachNotifications: function DataSourceDataModel$DetachNotifications() {
			this.$2$StopNotifyingField();
		},
		getColumnByName: function DataSourceDataModel$GetColumnByName(fieldName) {
			if (ss.isValue(this.columnInfoLookup)) {
				return this.columnInfoLookup[fieldName];
			}
			return null;
		},
		clearModel: function DataSourceDataModel$ClearModel() {
			this.numRows = 0;
			this.isEmpty = true;
			this.isExtract = false;
			this.columnInfoLookup = null;
			this.dataDictionaryModel = new $tab_DataDictionaryModel(this);
		},
		update: function DataSourceDataModel$Update(dataPM, context) {
			if (ss.isNullOrUndefined(dataPM)) {
				return;
			}
			this.pm = dataPM;
			this.numRows = dataPM.numRows;
			this.isEmpty = dataPM.isEmpty;
			this.isExtract = dataPM.isExtract;
			this.dataDictionaryModel.update(dataPM.dataDictionary);
			this.columnInfoLookup = {};
			for (var $t1 = 0; $t1 < dataPM.columnInfos.length; $t1++) {
				var colInfo = dataPM.columnInfos[$t1];
				var temp = new $tab_DSColumnInfoModel(null);
				temp.update(colInfo);
				var colFieldName = temp.get_fieldName();
				this.columnInfoLookup[colFieldName] = temp;
			}
			this.raiseEvent(this.$2$ModelUpdatedField, context);
		}
	}, $tab_Model, [$tab_IHandleNotifications, $tab_IDetachableNotificationHandler]);
	ss.initClass($tab_DataSourceModel, $asm, {
		add_captionChanged: function DataSourceModel$add_CaptionChanged(value) {
			this.$2$CaptionChangedField = ss.delegateCombine(this.$2$CaptionChangedField, value);
		},
		remove_captionChanged: function DataSourceModel$remove_CaptionChanged(value) {
			this.$2$CaptionChangedField = ss.delegateRemove(this.$2$CaptionChangedField, value);
		},
		get_name: function DataSourceModel$get_Name() {
			return this.pm.datasource;
		},
		get_caption: function DataSourceModel$get_Caption() {
			return this.pm.datasourceCaption;
		},
		get_fields: function DataSourceModel$get_Fields() {
			return this.baseColumnsModel.rootFields;
		},
		get_dataSourceLayoutPresModel: function DataSourceModel$get_DataSourceLayoutPresModel() {
			return this.pm.dataSourceLayout;
		},
		get_isParametersDataSource: function DataSourceModel$get_IsParametersDataSource() {
			return ss.equals(this, $tab_ApplicationModel.get_instance().get_workbook().get_dataSchema().get_parametersDataSource());
		},
		get_fieldOrderType: function DataSourceModel$get_FieldOrderType() {
			return this.pm.fieldOrderType;
		},
		get_fieldSortOrder: function DataSourceModel$get_FieldSortOrder() {
			return this.pm.fieldSortOrder;
		},
		get_isDataTabViewSupported: function DataSourceModel$get_IsDataTabViewSupported() {
			return this.pm.isWebDataTabViewSupported;
		},
		get_specifiedWidth: function DataSourceModel$get_SpecifiedWidth() {
			return this.$2$SpecifiedWidthField;
		},
		set_specifiedWidth: function DataSourceModel$set_SpecifiedWidth(value) {
			this.$2$SpecifiedWidthField = value;
		},
		getFilteredFields: function DataSourceModel$GetFilteredFields(filter) {
			var fieldList = [];
			var $t1 = this.baseColumnsModel.get_allFields();
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var field = $t1[$t2];
				if (filter(field)) {
					fieldList.push(field);
				}
			}
			return fieldList;
		},
		findField: function DataSourceModel$FindField(fn) {
			var foundField = this.baseColumnsModel.findField(fn);
			if (ss.isValue(foundField)) {
				return foundField;
			}
			if (ss.isValue(this.$columnInstancesModel)) {
				return this.$columnInstancesModel.findField(fn);
			}
			return null;
		},
		update: function DataSourceModel$Update(datasourcePresModel, context) {
			if (ss.isNullOrUndefined(datasourcePresModel)) {
				return;
			}
			if (ss.isNullOrUndefined(this.pm) || !ss.referenceEquals(this.pm.datasourceCaption, datasourcePresModel.datasourceCaption)) {
				this.raiseEvent(this.$2$CaptionChangedField, context);
			}
			if (ss.isValue(datasourcePresModel.fieldList)) {
				this.baseColumnsModel.update(datasourcePresModel.fieldList, context);
			}
			if (ss.isValue(datasourcePresModel.columnList)) {
				this.$columnInstancesModel = this.$columnInstancesModel || new $tab_FieldsModel('columnList', this);
				this.$columnInstancesModel.update(datasourcePresModel.columnList, context);
			}
			this.swapAndCopyPresModel(datasourcePresModel);
		}
	}, $tab_Model);
	ss.initClass($tab_DataSourcesModel, $asm, {
		get_dataSources: function DataSourcesModel$get_DataSources() {
			return _.values(this.$dataSourceModels);
		},
		get_dataSourceCount: function DataSourcesModel$get_DataSourceCount() {
			return ss.getKeyCount(this.$dataSourceModels);
		},
		getDataSource: function DataSourcesModel$GetDataSource(dataSourceName) {
			return this.$dataSourceModels[dataSourceName];
		},
		update: function DataSourcesModel$Update(dataSources, context) {
			var dataSourceNames = _.keys(dataSources);
			for (var $t1 = 0; $t1 < dataSourceNames.length; $t1++) {
				var dataSourceName = dataSourceNames[$t1];
				var dataSourcePM = dataSources[dataSourceName];
				if (dataSourcePM === null) {
					delete this.$dataSourceModels[dataSourceName];
					tab.Log.get(this).debug('Removing data source: %s', [dataSourceName]);
				}
				else {
					var model = this.$dataSourceModels[dataSourceName];
					if (ss.isNullOrUndefined(model)) {
						model = new $tab_DataSourceModel(this, dataSourceName);
						this.$dataSourceModels[dataSourceName] = model;
					}
					model.update(dataSourcePM, context);
				}
			}
			if (ss.isValue(this.pm)) {
				$tab_ModelUtils.mergeMapPresModelDelta(this.pm, dataSources);
			}
			this.swapPresModel(dataSources);
		}
	}, $tab_Model);
	ss.initInterface($tab_ISessionErrorHandler, $asm, { handleCommandFailure: null });
	ss.initClass($tab_DefaultSessionErrorHandler, $asm, {
		handleCommandFailure: function DefaultSessionErrorHandler$HandleCommandFailure(error, xhr, command, noExceptionDialog) {
			if (tabBootstrap.ViewerBootstrap.get_instance().get_sessionBeingCleared()) {
				return false;
			}
			var match = null;
			if (!tab.MiscUtil.isNullOrEmpty$1(xhr.responseText)) {
				match = xhr.responseText.match(new RegExp('Fatal exception in vizql engine'));
			}
			if (xhr.status === 410 || xhr.status === 404 || xhr.status === 403) {
				this.handleSessionExpiration(false);
			}
			else if (xhr.status === 401) {
				this.handleAuthenticationFailure();
			}
			else if (xhr.status === 502 || xhr.status === 503) {
				this.handleSessionKilled(null);
			}
			else if (xhr.status === 500 && ss.isValue(match) && match.length > 0) {
				this.handleUnknownErrorStatus(xhr.responseText);
			}
			else if (xhr.status === 413) {
				this.handleSessionLimitExceeded();
			}
			else if (xhr.status === 0) {
				var status0Handler;
				if (!tab.MiscUtil.isNullOrEmpty$1(xhr.responseText)) {
					var sb = new ss.StringBuilder();
					sb.append('XHR Response Status: 0\nReadyState:');
					sb.append(xhr.readyState);
					sb.append('\nHeaders:\n');
					sb.append(xhr.getAllResponseHeaders());
					sb.append('\nResponse:\n');
					sb.append(xhr.responseText);
					status0Handler = ss.mkdel(this, function() {
						this.$commonDialogProvider.showAlertDialog(sb.toString(), tab.Strings.RequestAbortedByBrowser, true, null);
					});
				}
				else {
					status0Handler = ss.mkdel(this, function() {
						this.$displayErrorInDialog(error, xhr);
					});
				}
				window.setTimeout(status0Handler, 5000);
			}
			else if (ss.isNullOrUndefined(noExceptionDialog) || !noExceptionDialog) {
				this.$displayErrorInDialog(error, xhr);
			}
			return true;
		},
		handleSessionExpiration: function DefaultSessionErrorHandler$HandleSessionExpiration(limitAttempts) {
			var uriModel = $tab_VizUriModel.createForCurrentWindowLocation();
			if (limitAttempts && uriModel.get_retry()) {
				throw new ss.Exception('Failed to re-initialize session');
			}
			this.$reloadPage(limitAttempts);
		},
		handleAuthenticationFailure: function DefaultSessionErrorHandler$HandleAuthenticationFailure() {
			this.$reloadPage(false);
		},
		$displayErrorInDialog: function DefaultSessionErrorHandler$DisplayErrorInDialog(error, xhr) {
			var errorString = ss.safeCast(error, String);
			var errorException = ss.safeCast(error, ss.Exception);
			var msg = '';
			if (ss.isValue(errorString)) {
				msg = ss.replaceAllString(errorString, 'XMLHttpTransport.watchInFlight Error: ', '');
			}
			else if (ss.isValue(errorException)) {
				msg = ss.replaceAllString(errorException.get_message(), 'XMLHttpTransport.watchInFlight Error: ', '');
			}
			msg = ss.replaceAllString(msg, 'XMLHttpTransport Error: ', '');
			var title = tab.Strings.ServerErrorUnexpected;
			if (xhr.status < 400) {
				title = tab.Strings.BrowserErrorProcessing;
				msg = tab.Strings.BrowserErrorProcessingMessage + '<br>' + msg;
			}
			else if (xhr.status === 400) {
				title = tab.Strings.ServerErrorRejected;
				msg = tab.Strings.ServerErrorRejectedMessage + '<br>';
			}
			else {
				var show_to_user;
				try {
					show_to_user = ss.cast(eval('(' + xhr.responseText + ')'), String);
					show_to_user = show_to_user.replace(new RegExp('\n(?=s*[A-Z])', 'g'), '<li>').replace(new RegExp('\n', 'g'), '<br>');
					show_to_user = '<ul><li>' + show_to_user + '</ul>';
				}
				catch ($t1) {
					show_to_user = xhr.responseText;
					show_to_user = $tab_ExtraHtmlMarkupRemover.stripOutMarkup(show_to_user);
				}
				if (ss.isNullOrEmptyString(show_to_user)) {
					msg = tab.Strings.ServerErrorGeneral(xhr.status) + '<br>';
				}
				else {
					msg = show_to_user;
				}
			}
			this.$commonDialogProvider.showAlertDialog(msg, title, true, null);
		},
		$displayConnectionErrorMessage: function DefaultSessionErrorHandler$DisplayConnectionErrorMessage(info, dialogTitle, primaryMessage) {
			info = ss.coalesce(info, '').trim();
			info = $tab_ExtraHtmlMarkupRemover.stripOutMarkup(info);
			tabBootstrap.Utility.doPostMessage('tableau.completed'.toString());
			var msg = tab.Strings.UnhandledExceptionMessage(tsConfig.sessionid, info);
			if (!ss.isNullOrEmptyString(info)) {
				msg += '<br/><br/>';
			}
			msg += primaryMessage;
			var onYes = ss.mkdel(this, function() {
				this.$requestSetIgnore();
				document.body.style.cursor = 'wait';
				this.$reloadPage(false);
			});
			this.$commonDialogProvider.showConfirmationDialog(msg, dialogTitle, true, onYes, null);
		},
		$reloadPage: function DefaultSessionErrorHandler$ReloadPage(addRetryInfo) {
			document.body.style.cursor = 'wait';
			var repositoryUrl = tsConfig.repositoryUrl || tsConfig.origin_repository_url;
			var uriModel = $tab_VizUriModel.createForCurrentWindowLocationAndVizState(repositoryUrl, tsConfig.current_sheet_name);
			uriModel.set_retry(addRetryInfo);
			uriModel.explicitNotGuest = tsConfig.is_authoring && !tsConfig.is_guest;
			uriModel.fullPageLoad(null);
		},
		handleSessionForbiddenAction: function DefaultSessionErrorHandler$HandleSessionForbiddenAction(code, message) {
			var title = tab.Strings.SessionForbiddenActionTitle;
			var msg = tab.Strings.SessionForbiddenActionMsg;
			switch (code) {
				case 16:
				case 20:
				case 22:
				case 60011: {
					msg = message;
					break;
				}
			}
			this.$commonDialogProvider.showAlertDialog(msg, title, true, null);
		},
		handleSessionLimitExceeded: function DefaultSessionErrorHandler$HandleSessionLimitExceeded() {
			if ($tab_DefaultSessionErrorHandler.$limitExceeded) {
				return;
			}
			var msg = tab.Strings.TimeLimitExceededWarning;
			msg += '\n';
			msg += tab.Strings.PressBackButtonMessage;
			var title = tab.Strings.TimeLimitExceededTitle;
			$tab_DefaultSessionErrorHandler.$limitExceeded = true;
			this.$commonDialogProvider.showAlertDialog(msg, title, true, null);
		},
		handleSessionKilled: function DefaultSessionErrorHandler$HandleSessionKilled(info) {
			this.$displayConnectionErrorMessage(info, tab.Strings.SessionEndedAlertTitle, tab.Strings.SessionEndedAlertMessage);
		},
		handleUnknownErrorStatus: function DefaultSessionErrorHandler$HandleUnknownErrorStatus(info) {
			this.$displayConnectionErrorMessage(info, tab.Strings.SessionUnknownErrorTitle, tab.Strings.SessionEndedAlertMessage);
		},
		$requestSetIgnore: function DefaultSessionErrorHandler$RequestSetIgnore() {
			var args = { error: null, success: null, type: 'POST', url: this.$urlRoot + '/setignore/sessions' };
			var data = ss.mkdict(['_method', 'PUT', 'target', tsConfig.sessionid]);
			args.data = data;
			args.async = false;
			this.$request(args, null);
		},
		$request: function DefaultSessionErrorHandler$Request(args, handler) {
			return $tab_XhrUtil.helper(args, handler);
		}
	}, null, [$tab_ISessionErrorHandler]);
	ss.initClass($tab_DeferLayoutImpl, $asm, {
		get_isZoomin: function DeferLayoutImpl$get_IsZoomin() {
			return this.$isZoomin;
		},
		set_isZoomin: function DeferLayoutImpl$set_IsZoomin(value) {
			this.$isZoomin = value;
		},
		shouldDeferLayoutUpdates: function DeferLayoutImpl$ShouldDeferLayoutUpdates() {
			return this.$shouldDeferLayoutUpdates;
		},
		setDeferLayoutUpdates: function DeferLayoutImpl$SetDeferLayoutUpdates(b) {
			this.$shouldDeferLayoutUpdates = b;
		}
	});
	ss.initClass($tab_DeferredConnectionsCommandHandler, $asm, {
		handle: function DeferredConnectionsCommandHandler$Handle(error, failedCommand) {
			if (!this.$lazyConnectionsEnabled) {
				return false;
			}
			if (ss.isNullOrUndefined(error)) {
				return false;
			}
			var errorResponse = tab.DataSourceConnectionAttemptErrorResponse.tryDeserialize(error.get_message());
			if (ss.isNullOrUndefined(errorResponse)) {
				return false;
			}
			var status = error['status'];
			if (ss.isNullOrUndefined(status)) {
				ss.Debug.assert(false, "We've got properly formatted message, but can't get status.");
				return false;
			}
			if (!$tab_DeferredConnectionsCommandHandler.shouldHandleWithGivenStatus(status)) {
				return false;
			}
			this.$handleCommandFailure(failedCommand, errorResponse, false);
			return true;
		},
		$handleConnectionAttemptInfo: function DeferredConnectionsCommandHandler$HandleConnectionAttemptInfo(connectionAttemptInfoPM) {
			if (!this.$lazyConnectionsEnabled) {
				return;
			}
			if (ss.isNullOrUndefined(connectionAttemptInfoPM) || ss.isNullOrUndefined(connectionAttemptInfoPM.dataSourceConnectionAttemptInfos) || connectionAttemptInfoPM.dataSourceConnectionAttemptInfos.length === 0) {
				return;
			}
			var command = $tab_SheetClientCommands.createSwitchSheetsCommand(tsConfig.current_sheet_name);
			command.commandParams['forceConnectionAttempt'] = true;
			var clientCommand = $tab_RemoteClientCommand.create(command, 'immediately');
			var connectionAttemptInfo = connectionAttemptInfoPM.dataSourceConnectionAttemptInfos[0];
			var $t1 = new tab.DataSourceConnectionAttemptErrorResponse();
			$t1.ErrorType = connectionAttemptInfo.exceptionType;
			var errorResponse = $t1;
			var isBadPasswordError = $tab_DeferredConnectionsCommandHandler.$isBadPasswordError(connectionAttemptInfo.exceptionType);
			if (isBadPasswordError) {
				var path = $tab_DeferredConnectionsCommandHandler.$createRedirectPath(connectionAttemptInfo);
				errorResponse.RedirectUrl = path;
			}
			else {
				errorResponse.ErrorMessage = connectionAttemptInfo.exceptionMessage;
			}
			var suppressAutomaticPopup = !connectionAttemptInfo.triedToConnect;
			this.$handleCommandFailure(clientCommand, errorResponse, suppressAutomaticPopup);
		},
		handlePotentialTabSwitchDataSourceException: function DeferredConnectionsCommandHandler$HandlePotentialTabSwitchDataSourceException(layoutStatus) {
			if (!this.$lazyConnectionsEnabled) {
				return;
			}
			if (!ss.isNullOrUndefined(layoutStatus)) {
				this.$handleConnectionAttemptInfo(layoutStatus.connectionAttemptInfo);
			}
		},
		handlePotentialBootstrapDataSourceException: function DeferredConnectionsCommandHandler$HandlePotentialBootstrapDataSourceException(bootstrapResponse) {
			if (!this.$lazyConnectionsEnabled) {
				return;
			}
			if (!ss.isNullOrUndefined(bootstrapResponse)) {
				this.$handleConnectionAttemptInfo(bootstrapResponse.connectionAttemptInfo);
			}
		},
		$handleCommandFailure: function DeferredConnectionsCommandHandler$HandleCommandFailure(command, errorResponse, suppressAutomaticPopup) {
			ss.Debug.assert(!ss.isNullOrUndefined(command), 'Command must be passed so it can be retried');
			if (!ss.isNullOrEmptyString(errorResponse.RedirectUrl)) {
				var skipPopupArg = (suppressAutomaticPopup ? '&skippopup=1' : '');
				errorResponse.RedirectUrl = ss.formatString('{0}{1}&vizqlSessionId={2}', errorResponse.RedirectUrl, skipPopupArg, tsConfig.sessionid);
			}
			command.reEnqueueCompletedCommandRecords();
			var onProceed = function() {
				$tab_CommandController.SendCommand(command);
			};
			var isTabSwitchCommand = !ss.isNullOrUndefined(command.get_commandName()) && ss.equalsT(command.get_commandName().toString(), 'ensure-layout-for-sheet'.toString());
			var isBadPasswordError = $tab_DeferredConnectionsCommandHandler.$isBadPasswordError(errorResponse.ErrorType);
			if (isTabSwitchCommand) {
				if (isBadPasswordError) {
					this.$commonDialogProvider.showSheetAuthenticationOverlay(errorResponse, onProceed);
				}
				else {
					this.$commonDialogProvider.showGenericDataSourceErrorOverlay(errorResponse, onProceed);
				}
			}
			else if (isBadPasswordError) {
				this.$commonDialogProvider.showSheetAuthenticationDialog(errorResponse, onProceed);
			}
			else {
				this.$commonDialogProvider.showGenericDataSourceErrorDialog(errorResponse, onProceed);
			}
		}
	});
	ss.initClass($tab_DeferredConnectionsSessionErrorHandler, $asm, {
		handleCommandFailure: function DeferredConnectionsSessionErrorHandler$HandleCommandFailure(error, xhr, command, noExceptionDialog) {
			if (!this.$lazyConnectionsEnabled) {
				return false;
			}
			if (!$tab_DeferredConnectionsCommandHandler.shouldHandleWithGivenStatus(xhr.status)) {
				return false;
			}
			var errorResponse = tab.DataSourceConnectionAttemptErrorResponse.tryDeserialize(xhr.responseText);
			if (ss.isNullOrUndefined(errorResponse)) {
				return false;
			}
			return true;
		}
	}, null, [$tab_ISessionErrorHandler]);
	ss.initInterface($tab_IModelEventHandler, $asm, { processEvent: null });
	ss.initClass($tab_DeferredModelEventHandler, $asm, {
		dispose: function DeferredModelEventHandler$Dispose() {
			this.fireDeferredEvents();
		},
		fireDeferredEvents: function DeferredModelEventHandler$FireDeferredEvents() {
			tab.Log.get(this).debug('FireDeferredEvents', []);
			var eventsCopy = this.$deferredEvents;
			this.$deferredEvents = null;
			if (ss.isNullOrUndefined(eventsCopy)) {
				return;
			}
			for (var $t1 = 0; $t1 < eventsCopy.length; $t1++) {
				var deferredEvent = eventsCopy[$t1];
				try {
					deferredEvent();
				}
				catch ($t2) {
					var e = ss.Exception.wrap($t2);
					tab.Logger.getLogger($tab_ApplicationModel).warn('Error when processing deferred event', [e]);
					if (!ss.staticEquals(this.exceptionHandler, null)) {
						this.exceptionHandler(e);
					}
				}
			}
		},
		processEvent: function DeferredModelEventHandler$ProcessEvent(a) {
			if (ss.isNullOrUndefined(this.$deferredEvents)) {
				this.$deferredEvents = [];
			}
			this.$deferredEvents.push(a);
		}
	}, null, [$tab_IModelEventHandler, ss.IDisposable]);
	ss.initClass($tab_DeviceLayoutInfoItemModel, $asm, {
		add_layoutInfoUpdated: function DeviceLayoutInfoItemModel$add_LayoutInfoUpdated(value) {
			this.$2$LayoutInfoUpdatedField = ss.delegateCombine(this.$2$LayoutInfoUpdatedField, value);
		},
		remove_layoutInfoUpdated: function DeviceLayoutInfoItemModel$remove_LayoutInfoUpdated(value) {
			this.$2$LayoutInfoUpdatedField = ss.delegateRemove(this.$2$LayoutInfoUpdatedField, value);
		},
		get_presetSizes: function DeviceLayoutInfoItemModel$get_PresetSizes() {
			return this.$presetSizes;
		},
		get_defaultWidth: function DeviceLayoutInfoItemModel$get_DefaultWidth() {
			return this.pm.defaultWidth;
		},
		get_defaultHeight: function DeviceLayoutInfoItemModel$get_DefaultHeight() {
			return this.pm.defaultHeight;
		},
		get_defaultMaxWidth: function DeviceLayoutInfoItemModel$get_DefaultMaxWidth() {
			return this.pm.maxWidth;
		},
		get_defaultMaxHeight: function DeviceLayoutInfoItemModel$get_DefaultMaxHeight() {
			return this.pm.maxHeight;
		},
		get_defaultMinWidth: function DeviceLayoutInfoItemModel$get_DefaultMinWidth() {
			return this.pm.minWidth;
		},
		get_defaultMinHeight: function DeviceLayoutInfoItemModel$get_DefaultMinHeight() {
			return this.pm.minHeight;
		},
		update: function DeviceLayoutInfoItemModel$Update(deviceLayoutInfoItemPresModel, context) {
			if (ss.isValue(deviceLayoutInfoItemPresModel.presetSizesList)) {
				this.$presetSizes.length = 0;
				for (var i = 0; i < deviceLayoutInfoItemPresModel.presetSizesList.sizeItems.length; i++) {
					var sizeItem = new $tab_SizeItemModel(this.$presetSizesArray, i);
					sizeItem.update(deviceLayoutInfoItemPresModel.presetSizesList.sizeItems[i], context);
					this.$presetSizes.push(sizeItem);
				}
			}
			this.simpleSwapToUpdate(deviceLayoutInfoItemPresModel, this.$2$LayoutInfoUpdatedField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_DialogLifetimeManager, $asm, {
		sendCommand: function(TResponse) {
			return function DialogLifetimeManager$SendCommand(cmd) {
				if (!ss.staticEquals(this.$closeAction, null)) {
					var failDeferred = $.Deferred();
					failDeferred.reject();
					return failDeferred;
				}
				this.$addCommand(TResponse).call(this, cmd);
				var deferred = cmd.invoke().always(ss.mkdel(this, function(response) {
					this.$removeCommand(TResponse).call(this, cmd);
				}));
				return deferred;
			};
		},
		closeOnceCommandsComplete: function DialogLifetimeManager$CloseOnceCommandsComplete(closingAction) {
			this.$closeAction = closingAction;
			if (this.$commandList.length === 0) {
				this.$closeAction();
			}
		},
		$addCommand: function(TResponse) {
			return function DialogLifetimeManager$AddCommand(cmd) {
				this.$commandList.push(cmd);
			};
		},
		$removeCommand: function(TResponse) {
			return function DialogLifetimeManager$RemoveCommand(cmd) {
				ss.remove(this.$commandList, cmd);
				if (this.$commandList.length === 0 && !ss.staticEquals(this.$closeAction, null)) {
					this.$closeAction();
				}
			};
		}
	});
	ss.initClass($tab_DialogPlugins, $asm, {});
	ss.initClass($tab_DifferenceTableCalcModel, $asm, {
		add_modelUpdated: function DifferenceTableCalcModel$add_ModelUpdated(value) {
			this.$3$ModelUpdatedField = ss.delegateCombine(this.$3$ModelUpdatedField, value);
		},
		remove_modelUpdated: function DifferenceTableCalcModel$remove_ModelUpdated(value) {
			this.$3$ModelUpdatedField = ss.delegateRemove(this.$3$ModelUpdatedField, value);
		},
		get_$differencePresModel: function DifferenceTableCalcModel$get_DifferencePresModel() {
			return this.pm;
		},
		get_referenceModel: function DifferenceTableCalcModel$get_ReferenceModel() {
			return this.$3$ReferenceModelField;
		},
		set_referenceModel: function DifferenceTableCalcModel$set_ReferenceModel(value) {
			this.$3$ReferenceModelField = value;
		},
		get_computeCompoundedRate: function DifferenceTableCalcModel$get_ComputeCompoundedRate() {
			return this.get_$differencePresModel().computeCompoundedRate;
		},
		get_computeCompoundedRateState: function DifferenceTableCalcModel$get_ComputeCompoundedRateState() {
			return this.get_$differencePresModel().computeCompoundedRateState;
		},
		update: function DifferenceTableCalcModel$Update(newPresModel, context) {
			var newDifferencePresModel = newPresModel;
			if (this.isNewPresModelSameAsOld(newDifferencePresModel)) {
				return;
			}
			this.swapAndCopyPresModel(newDifferencePresModel);
			this.get_referenceModel().update(newDifferencePresModel.tableCalcReferenceOptionsPresModel, context);
			this.raiseEvent(this.$3$ModelUpdatedField, context);
		}
	}, $tab_TypeSpecificTableCalcModel);
	ss.initInterface($tab_IDrawItemFontExtractor, $asm, { canExtractFont: null, extractFontFromPresModel: null });
	ss.initClass($tab_DrawItemFontExtractor, $asm, {
		canExtractFont: function DrawItemFontExtractor$CanExtractFont(model) {
			return model.type === 'draw-text-props';
		},
		extractFontFromPresModel: function DrawItemFontExtractor$ExtractFontFromPresModel(model) {
			if (!this.canExtractFont(model)) {
				return null;
			}
			var textPropsPresModel = model;
			var fontName = textPropsPresModel.fontName;
			if (ss.isNullOrEmptyString(fontName)) {
				return null;
			}
			var fontProperties = [];
			var $t1 = new $tab_FontProperties();
			$t1.set_fontFamily(fontName);
			$t1.set_weight((textPropsPresModel.isBold ? $tab_DrawItemFontExtractor.boldWeight : $tab_DrawItemFontExtractor.normalWeight));
			fontProperties.push($t1);
			return fontProperties;
		}
	}, null, [$tab_IDrawItemFontExtractor]);
	ss.initClass($tab_DrillPathModel, $asm, {
		get_levels: function DrillPathModel$get_Levels() {
			return this.$levels;
		},
		get_childToSelect: function DrillPathModel$get_ChildToSelect() {
			return this.$levels[0];
		},
		get_instanceType: function DrillPathModel$get_InstanceType() {
			return 'drillPath';
		},
		get_canHaveChildren: function DrillPathModel$get_CanHaveChildren() {
			return true;
		},
		update: function DrillPathModel$Update(pm, newLevels) {
			this.swapAndCopyPresModel(pm);
			this.$levels = newLevels;
		}
	}, $tab_FieldModel);
	ss.initClass($tab_DSColumnInfoModel, $asm, {
		get_dataType: function DSColumnInfoModel$get_DataType() {
			if (ss.isNullOrUndefined(this.pm)) {
				return 'unknown';
			}
			return this.pm.dataType;
		},
		get_fieldName: function DSColumnInfoModel$get_FieldName() {
			if (ss.isNullOrUndefined(this.pm)) {
				return null;
			}
			return this.pm.fn;
		},
		get_valueIndexs: function DSColumnInfoModel$get_ValueIndexs() {
			if (ss.isNullOrUndefined(this.pm)) {
				return null;
			}
			return this.pm.valueIndices;
		},
		get_aliasIndexs: function DSColumnInfoModel$get_AliasIndexs() {
			if (ss.isNullOrUndefined(this.pm)) {
				return null;
			}
			return this.pm.aliasIndices;
		},
		get_formattedValueIndexs: function DSColumnInfoModel$get_FormattedValueIndexs() {
			if (ss.isNullOrUndefined(this.pm)) {
				return null;
			}
			return this.pm.formatValIdxs;
		},
		get_stringCollation: function DSColumnInfoModel$get_StringCollation() {
			if (ss.isNullOrUndefined(this.pm)) {
				return null;
			}
			return this.pm.stringCollation;
		},
		update: function DSColumnInfoModel$Update(newColInfoPM) {
			if (ss.isValue(newColInfoPM)) {
				this.pm = newColInfoPM;
			}
		}
	}, $tab_Model);
	ss.initClass($tab_EditValueWidgetModel, $asm, {
		add_modelUpdated: function EditValueWidgetModel$add_ModelUpdated(value) {
			this.$2$ModelUpdatedField = ss.delegateCombine(this.$2$ModelUpdatedField, value);
		},
		remove_modelUpdated: function EditValueWidgetModel$remove_ModelUpdated(value) {
			this.$2$ModelUpdatedField = ss.delegateRemove(this.$2$ModelUpdatedField, value);
		},
		get_$editValueWidgetPresModel: function EditValueWidgetModel$get_EditValueWidgetPresModel() {
			return this.pm;
		},
		get_selectedParameter: function EditValueWidgetModel$get_SelectedParameter() {
			var selectedParameter = this.get_$editValueWidgetPresModel().fieldCaptionPair;
			if (ss.isNullOrUndefined(selectedParameter)) {
				return null;
			}
			return { key: selectedParameter.fieldCaption, value: selectedParameter.fn };
		},
		get_parameters: function EditValueWidgetModel$get_Parameters() {
			return _.map(this.get_$editValueWidgetPresModel().fieldCaptionPairs, function(p) {
				return { key: p.fieldCaption, value: p.fn };
			});
		},
		get_selectedValue: function EditValueWidgetModel$get_SelectedValue() {
			return this.get_$editValueWidgetPresModel().selectedValue;
		},
		set_selectedValue: function EditValueWidgetModel$set_SelectedValue(value) {
			this.get_$editValueWidgetPresModel().selectedValue = value;
		},
		get_enterValueText: function EditValueWidgetModel$get_EnterValueText() {
			return this.get_$editValueWidgetPresModel().enterValueText;
		},
		get_isCustomValueEnabled: function EditValueWidgetModel$get_IsCustomValueEnabled() {
			return this.get_$editValueWidgetPresModel().isCustomValueEnabled;
		},
		get_precannedValues: function EditValueWidgetModel$get_PrecannedValues() {
			var values = [];
			var $t1 = this.get_$editValueWidgetPresModel().precannedDataValues;
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var value = $t1[$t2];
				values.push(value);
			}
			return values;
		},
		update: function EditValueWidgetModel$Update(editValueWidgetPresModel, context) {
			this.swapPresModel(editValueWidgetPresModel);
			this.raiseEvent(this.$2$ModelUpdatedField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_ErrorHandlerChain, $asm, {
		handle: function ErrorHandlerChain$Handle(error, xhr, command, noExceptionDialog) {
			var handlers = this.$errorHandlers;
			for (var i = 0; i < handlers.length; i++) {
				var handler = handlers[i];
				if (handler.handleCommandFailure(error, xhr, command, noExceptionDialog)) {
					return;
				}
			}
		}
	});
	ss.initClass($tab_ExportServerCommands, $asm, {});
	ss.initClass($tab_ExtraHtmlMarkupRemover, $asm, {});
	ss.initClass($tab_FailureHandler, $asm, {});
	ss.initClass($tab_FieldColumnModel, $asm, {
		get_instanceType: function FieldColumnModel$get_InstanceType() {
			return 'column';
		},
		get_defaultRole: function FieldColumnModel$get_DefaultRole() {
			return this.pm.defaultFieldRole;
		},
		get_role: function FieldColumnModel$get_Role() {
			return this.pm.fieldRole;
		},
		get_baseColumnName: function FieldColumnModel$get_BaseColumnName() {
			return (this.get_isInstance() ? this.pm.baseColumnName : this.get_globalName());
		},
		get_baseColumn: function FieldColumnModel$get_BaseColumn() {
			return (this.get_isInstance() ? ss.cast(this.get_dataSource().findField(this.get_baseColumnName()), $tab_FieldColumnModel) : this);
		},
		get_isInstance: function FieldColumnModel$get_IsInstance() {
			return !ss.isNullOrUndefined(this.pm.isInstance) && this.pm.isInstance;
		},
		get_isAllowedInCalcs: function FieldColumnModel$get_IsAllowedInCalcs() {
			var col = this.get_baseColumn();
			return (ss.referenceEquals(col, this) ? $tab_FieldModel.prototype.get_isAllowedInCalcs.call(this) : col.get_isAllowedInCalcs());
		},
		get_isCalculated: function FieldColumnModel$get_IsCalculated() {
			return this.pm.isCalculated;
		},
		get_formattedFamilyName: function FieldColumnModel$get_FormattedFamilyName() {
			return this.pm.formattedFamilyName;
		},
		update: function FieldColumnModel$Update(pm) {
			this.swapAndCopyPresModel(pm);
		}
	}, $tab_FieldModel);
	ss.initEnum($tab_FieldInstanceType, $asm, { column: 'column', drillPath: 'drillPath', cubeDimension: 'cubeDimension', group: 'group', cubeHierarchy: 'cubeHierarchy', relationalTable: 'relationalTable', cubeFolder: 'cubeFolder', folder: 'folder', multiple: 'multiple' }, true);
	ss.initClass($tab_FieldsModel, $asm, {
		get_allFields: function FieldsModel$get_AllFields() {
			if (ss.isValue(this.$allFieldsArray)) {
				return this.$allFieldsArray;
			}
			this.$allFieldsArray = [];
			var $t1 = _.keys(this.$allFields);
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var key = $t1[$t2];
				var field = this.$allFields[key];
				if (ss.referenceEquals(key, field.get_localName())) {
					this.$allFieldsArray.push(field);
				}
			}
			return this.$allFieldsArray;
		},
		get_dataSource: function FieldsModel$get_DataSource() {
			return this.$dataSourceModel;
		},
		findField: function FieldsModel$FindField(fn) {
			return this.$allFields[fn];
		},
		getMutableCopyOfPresModel: function FieldsModel$GetMutableCopyOfPresModel() {
			return this.getMutableCopyOfPresModelInternal(true);
		},
		update: function FieldsModel$Update(fields, context) {
			if (ss.isNullOrUndefined(fields)) {
				return;
			}
			if (_.isEqual(this.pm, fields)) {
				return;
			}
			this.$allFieldsArray = null;
			var oldAllFields = this.$allFields;
			var oldTables = this.$tableLookup;
			var oldFolders = this.$folderLookup;
			var oldDrillPaths = this.$drillPathLookup;
			this.$allFields = {};
			this.$tableLookup = {};
			this.$folderLookup = {};
			this.$drillPathLookup = {};
			this.rootFields = [];
			var folders = [];
			var columns = {};
			var drillPaths = {};
			for (var $t1 = 0; $t1 < fields.length; $t1++) {
				var f = fields[$t1];
				f.fieldIconRes = f.fieldIconRes || '';
				switch (f.type) {
					case 'field-folder': {
						folders.push(f);
						break;
					}
					case 'drill-path': {
						drillPaths[f.name] = this.$processDrillPath(f, oldDrillPaths, oldAllFields);
						break;
					}
					case 'relational-table': {
						var relationalTable = this.$processRelationalTable(f, oldTables, oldAllFields);
						this.rootFields.push(relationalTable);
						break;
					}
					case 'group': {
						columns[f.fn] = this.$processGroup(f, oldAllFields);
						break;
					}
					case 'column': {
						columns[f.fn] = this.$processColumn(f, oldAllFields);
						break;
					}
					case 'dimension': {
						var dimension = this.$processCubeDimension(f, oldAllFields);
						this.rootFields.push(dimension);
						break;
					}
					case 'display-folder': {
						var folder = this.$processCubeFolder(f, oldAllFields);
						this.rootFields.push(folder);
						break;
					}
				}
			}
			for (var $t2 = 0; $t2 < folders.length; $t2++) {
				var folderPM = folders[$t2];
				var folder1 = this.$processFolder(folderPM, oldFolders, columns, drillPaths);
				this.rootFields.push(folder1);
			}
			var $t3 = this.rootFields.concat.apply(this.rootFields, _.values(drillPaths));
			this.rootFields = $t3.concat.apply($t3, _.values(columns));
			var $t4 = _.keys(this.$allFields);
			for (var $t5 = 0; $t5 < $t4.length; $t5++) {
				var gfn = $t4[$t5];
				var field = this.$allFields[gfn];
				this.$allFields[field.get_localName()] = field;
			}
			this.swapPresModel(fields);
			this.raiseEvent(this.fieldsChanged, context);
		},
		$processColumn: function FieldsModel$ProcessColumn(columnPM, existingFields) {
			var columnModel = (ss.keyExists(existingFields, columnPM.fn) ? existingFields[columnPM.fn].asColumn() : new $tab_FieldColumnModel(this));
			columnModel.update(columnPM);
			this.$allFields[columnPM.fn] = columnModel;
			return columnModel;
		},
		$processRelationalTable: function FieldsModel$ProcessRelationalTable(tablePM, existingTables, existingFields) {
			var childCols = [];
			for (var $t1 = 0; $t1 < tablePM.columnList.length; $t1++) {
				var child = tablePM.columnList[$t1];
				childCols.push(this.$processColumn(child, existingFields));
			}
			var tableModel = (ss.keyExists(existingTables, tablePM.name) ? existingTables[tablePM.name].asRelationalTable() : new $tab_RelationalTableModel(this));
			tableModel.update(tablePM, childCols);
			this.$tableLookup[tablePM.name] = tableModel;
			return tableModel;
		},
		$processFolder: function FieldsModel$ProcessFolder(folderPM, existingFolders, columns, drillPaths) {
			var folderFields = [];
			for (var $t1 = 0; $t1 < folderPM.namesOfFields.length; $t1++) {
				var fn = folderPM.namesOfFields[$t1];
				var matchingField = this.$allFields[fn];
				if (ss.isValue(matchingField)) {
					folderFields.push(matchingField);
					delete columns[fn];
				}
			}
			for (var $t2 = 0; $t2 < folderPM.drillpathVector.length; $t2++) {
				var pathName = folderPM.drillpathVector[$t2];
				var matchingPath = this.$drillPathLookup[pathName];
				if (ss.isValue(matchingPath)) {
					folderFields.push(matchingPath);
					delete drillPaths[pathName];
				}
			}
			var folderKey = folderPM.name + folderPM.folderRole;
			var folderModel = (ss.keyExists(existingFolders, folderKey) ? existingFolders[folderKey].asFolder() : new $tab_FolderModel(this));
			folderModel.update(folderPM, folderFields);
			this.$folderLookup[folderKey] = folderModel;
			return folderModel;
		},
		$processGroup: function FieldsModel$ProcessGroup(groupPM, existingFields) {
			var groupModel = (ss.keyExists(existingFields, groupPM.fn) ? existingFields[groupPM.fn].asGroup() : new $tab_GroupModel(this));
			groupModel.update(groupPM);
			this.$allFields[groupPM.fn] = groupModel;
			return groupModel;
		},
		$processDrillPath: function FieldsModel$ProcessDrillPath(drillPM, existingDrillPaths, existingFields) {
			var levels = [];
			for (var $t1 = 0; $t1 < drillPM.columnList.length; $t1++) {
				var child = drillPM.columnList[$t1];
				levels.push(this.$processColumn(child, existingFields));
			}
			var drillModel = (ss.keyExists(existingDrillPaths, drillPM.name) ? existingDrillPaths[drillPM.name].asDrillPath() : new $tab_DrillPathModel(this));
			drillModel.update(drillPM, levels);
			this.$drillPathLookup[drillPM.name] = drillModel;
			return drillModel;
		},
		$processCubeHierarchy: function FieldsModel$ProcessCubeHierarchy(hierarchyPM, existingFields) {
			var hierLevels = [];
			for (var $t1 = 0; $t1 < hierarchyPM.columnList.length; $t1++) {
				var child = hierarchyPM.columnList[$t1];
				hierLevels.push(this.$processColumn(child, existingFields));
			}
			var hierarchyModel = (ss.keyExists(existingFields, hierarchyPM.fn) ? existingFields[hierarchyPM.fn].asHierarchy() : new $tab_CubeHierarchyModel(this));
			hierarchyModel.update(hierarchyPM, hierLevels);
			this.$allFields[hierarchyPM.fn] = hierarchyModel;
			return hierarchyModel;
		},
		$processCubeFolder: function FieldsModel$ProcessCubeFolder(folderPM, existingFields) {
			var folderHierarchies = [];
			for (var $t1 = 0; $t1 < folderPM.hierarchyList.length; $t1++) {
				var hierarchy = folderPM.hierarchyList[$t1];
				folderHierarchies.push(this.$processCubeHierarchy(hierarchy, existingFields));
			}
			var folderColumns = [];
			for (var $t2 = 0; $t2 < folderPM.columnList.length; $t2++) {
				var column = folderPM.columnList[$t2];
				folderColumns.push(this.$processColumn(column, existingFields));
			}
			var folderModel = (ss.keyExists(existingFields, folderPM.name) ? existingFields[folderPM.name].asCubeFolder() : new $tab_CubeFolderModel(this));
			folderModel.update(folderPM, folderHierarchies, folderColumns);
			return folderModel;
		},
		$processCubeDimension: function FieldsModel$ProcessCubeDimension(dimensionPM, existingFields) {
			var hierarchies = [];
			for (var $t1 = 0; $t1 < dimensionPM.hierarchyList.length; $t1++) {
				var h = dimensionPM.hierarchyList[$t1];
				hierarchies.push(this.$processCubeHierarchy(h, existingFields));
			}
			var folders = [];
			for (var $t2 = 0; $t2 < dimensionPM.displayFolderList.length; $t2++) {
				var folder = dimensionPM.displayFolderList[$t2];
				folders.push(this.$processCubeFolder(folder, existingFields));
			}
			var attributes = [];
			for (var $t3 = 0; $t3 < dimensionPM.attributeDimensionList.length; $t3++) {
				var attribute = dimensionPM.attributeDimensionList[$t3];
				attributes.push(this.$processCubeDimension(attribute, existingFields));
			}
			var dimensionModel = (ss.keyExists(existingFields, dimensionPM.fn) ? existingFields[dimensionPM.fn].asDimension() : new $tab_CubeDimensionModel(this));
			dimensionModel.update(dimensionPM, hierarchies, folders, attributes);
			this.$allFields[dimensionPM.fn] = dimensionModel;
			return dimensionModel;
		}
	}, $tab_Model);
	ss.initClass($tab_FifoCache, $asm, {
		clear: function FifoCache$Clear() {
			ss.clearKeys(this.cl);
			this.$nextIndex = 0;
		},
		add: function FifoCache$Add(key, value) {
			ss.Debug.assert(ss.isNullOrUndefined(this.cl[key]), 'Adding existing key into cache');
			var oldKey = this.$keyArray[this.$nextIndex];
			delete this.cl[oldKey];
			this.$keyArray[this.$nextIndex] = key;
			this.cl[key] = value;
			this.$nextIndex = (this.$nextIndex + 1) % this.$size;
		}
	});
	ss.initClass($tab_FileDownloadHelper, $asm, {
		openDownload: function FileDownloadHelper$OpenDownload(url, dialogData) {
			if (ss.isValue(dialogData.popup)) {
				this.$openDownloadUsingPopup(url, dialogData);
			}
			else {
				this.$openDownloadNoPopup(url, dialogData);
			}
		},
		$openDownloadNoPopup: function FileDownloadHelper$OpenDownloadNoPopup(url, dialogData) {
			var ch1 = ((url.indexOf(String.fromCharCode(63)) === -1) ? '?' : '&');
			url += ch1 + 'download=true';
			var urlTarget = '_blank';
			var urlCopy = url;
			if (ss.isNullOrUndefined(dialogData.noping)) {
				var onSuccess = ss.mkdel(this, function() {
					this.$commonDialogProvider.showFileDownloadDialog(dialogData.title, dialogData.message, urlCopy, urlTarget);
				});
				var ch = ((url.indexOf(String.fromCharCode(63)) === -1) ? '?' : '&');
				url += ch + 'nodata=true';
				var handler = this.$session.$createHandler(null, onSuccess, null, 'immediately');
				var args = {};
				args.headers = ss.mkdict(['Accept', 'text/plain']);
				args.dataType = 'text';
				args.type = 'GET';
				args.url = url;
				this.$session.$request(args, handler);
			}
			else {
				this.$commonDialogProvider.showFileDownloadDialog(dialogData.title, dialogData.message, urlCopy, urlTarget);
			}
		},
		$openDownloadUsingPopup: function FileDownloadHelper$OpenDownloadUsingPopup(url, dialogData) {
			var popupName = dialogData.popup;
			var downloadPopup = window.open('about:blank', popupName);
			window.setTimeout(ss.mkdel(this, function() {
				var h = new tab.WindowHelper(downloadPopup);
				if (ss.isValue(downloadPopup) && !downloadPopup.closed && h.get_innerWidth() !== 0 && h.get_innerHeight() !== 0) {
					downloadPopup.location.href = url;
				}
				else {
					if (ss.isValue(downloadPopup)) {
						downloadPopup.close();
					}
					dialogData.popup = null;
					this.openDownload(url, dialogData);
				}
			}), 500);
		}
	});
	ss.initClass($tab_FilterClientCommands, $asm, {});
	ss.initClass($tab_FlipboardModel, $asm, {
		add_invalidateZone: function FlipboardModel$add_InvalidateZone(value) {
			this.$2$InvalidateZoneField = ss.delegateCombine(this.$2$InvalidateZoneField, value);
		},
		remove_invalidateZone: function FlipboardModel$remove_InvalidateZone(value) {
			this.$2$InvalidateZoneField = ss.delegateRemove(this.$2$InvalidateZoneField, value);
		},
		get_flipboardPresModel: function FlipboardModel$get_FlipboardPresModel() {
			return this.pm;
		},
		get_storyPointModel: function FlipboardModel$get_StoryPointModel() {
			return this.$storyPointsModel.get_currentStoryPoint();
		},
		get_dashboardModel: function FlipboardModel$get_DashboardModel() {
			return this.get_storyPointModel().get_dashboardModel();
		},
		get_zoneId: function FlipboardModel$get_ZoneId() {
			return ss.cast(this.parent, $tab_ZoneContentWrapperModel).get_zone().get_zoneId();
		},
		get_currentStoryPointId: function FlipboardModel$get_CurrentStoryPointId() {
			return this.get_flipboardPresModel().activeStoryPointId;
		},
		get_isEmpty: function FlipboardModel$get_IsEmpty() {
			return ss.isNullOrEmptyString(this.get_storyPointModel().get_currentSheet());
		},
		invalidated: function FlipboardModel$Invalidated(context) {
			this.raiseEvent(this.$2$InvalidateZoneField, context);
		},
		update: function FlipboardModel$Update(flipboardPresModel, context) {
			if (ss.isValue(flipboardPresModel.activeStoryPointId)) {
				var storyPointPresModel = flipboardPresModel.storyPoints[flipboardPresModel.activeStoryPointId.toString()];
				this.$storyPointsModel.update(storyPointPresModel, context);
			}
			this.swapPresModel(flipboardPresModel);
		},
		getMutableCopyOfPresModel: function FlipboardModel$GetMutableCopyOfPresModel() {
			return this.getMutableCopyOfPresModelInternal(true);
		}
	}, $tab_Model);
	ss.initClass($tab_FlipboardNavigatorModel, $asm, {
		add_newFlipboardNav: function FlipboardNavigatorModel$add_NewFlipboardNav(value) {
			this.$2$NewFlipboardNavField = ss.delegateCombine(this.$2$NewFlipboardNavField, value);
		},
		remove_newFlipboardNav: function FlipboardNavigatorModel$remove_NewFlipboardNav(value) {
			this.$2$NewFlipboardNavField = ss.delegateRemove(this.$2$NewFlipboardNavField, value);
		},
		add_pointWasCaptured: function FlipboardNavigatorModel$add_PointWasCaptured(value) {
			this.$2$PointWasCapturedField = ss.delegateCombine(this.$2$PointWasCapturedField, value);
		},
		remove_pointWasCaptured: function FlipboardNavigatorModel$remove_PointWasCaptured(value) {
			this.$2$PointWasCapturedField = ss.delegateRemove(this.$2$PointWasCapturedField, value);
		},
		add_navArrowVisibilityChanged: function FlipboardNavigatorModel$add_NavArrowVisibilityChanged(value) {
			this.$2$NavArrowVisibilityChangedField = ss.delegateCombine(this.$2$NavArrowVisibilityChangedField, value);
		},
		remove_navArrowVisibilityChanged: function FlipboardNavigatorModel$remove_NavArrowVisibilityChanged(value) {
			this.$2$NavArrowVisibilityChangedField = ss.delegateRemove(this.$2$NavArrowVisibilityChangedField, value);
		},
		get_flipboardNavPresModel: function FlipboardNavigatorModel$get_FlipboardNavPresModel() {
			return this.pm;
		},
		get_currentPointIndex: function FlipboardNavigatorModel$get_CurrentPointIndex() {
			return this.get_flipboardNavPresModel().currentStorypointIndex;
		},
		get_storyPoints: function FlipboardNavigatorModel$get_StoryPoints() {
			return this.get_flipboardNavPresModel().storypointNavItems;
		},
		get_zone: function FlipboardNavigatorModel$get_Zone() {
			return ss.cast(this.parent, $tab_ZoneContentWrapperModel).get_zone();
		},
		get_navType: function FlipboardNavigatorModel$get_NavType() {
			return this.get_flipboardNavPresModel().flipboardNavStyle.flipboardNavType;
		},
		get_arrowVisibility: function FlipboardNavigatorModel$get_ArrowVisibility() {
			return this.get_flipboardNavPresModel().navArrowsVisible;
		},
		get_width: function FlipboardNavigatorModel$get_Width() {
			return ((this.get_navType() === 'dot' && !tab.FeatureFlags.isEnabled('StorytellingUberNavWidgetWeb')) ? 32 : this.get_flipboardNavPresModel().selectedStoryPointStyle.w);
		},
		get_height: function FlipboardNavigatorModel$get_Height() {
			return ((this.get_navType() === 'dot' && !tab.FeatureFlags.isEnabled('StorytellingUberNavWidgetWeb')) ? 32 : this.get_flipboardNavPresModel().selectedStoryPointStyle.h);
		},
		get_isStoryEmpty: function FlipboardNavigatorModel$get_IsStoryEmpty() {
			return this.get_flipboardNavPresModel().isStoryEmpty;
		},
		getMutableCopyOfPresModel: function FlipboardNavigatorModel$GetMutableCopyOfPresModel() {
			return this.getMutableCopyOfPresModelInternal(true);
		},
		update: function FlipboardNavigatorModel$Update(flipboardNavPresModel, context) {
			if (ss.isValue(flipboardNavPresModel)) {
				if (ss.isValue(flipboardNavPresModel.selectedStoryPointStyle)) {
					$tab_FontNotificationUtil.notifyFontsFromTextStylePresModel(flipboardNavPresModel.selectedStoryPointStyle.textStyle);
				}
				if (ss.isValue(flipboardNavPresModel.unselectedStoryPointStyle)) {
					$tab_FontNotificationUtil.notifyFontsFromTextStylePresModel(flipboardNavPresModel.unselectedStoryPointStyle.textStyle);
				}
			}
			var wasNavArrowVisibilityChanged = ss.isValue(this.get_flipboardNavPresModel()) && flipboardNavPresModel.navArrowsVisible !== this.get_flipboardNavPresModel().navArrowsVisible;
			this.$markCapturedPoints(flipboardNavPresModel);
			this.simpleSwapToUpdate(flipboardNavPresModel, this.$2$NewFlipboardNavField, context);
			this.$notifyCapturedPoints(context);
			if (wasNavArrowVisibilityChanged) {
				this.raiseEvent(this.$2$NavArrowVisibilityChangedField, context);
			}
		},
		$markCapturedPoints: function FlipboardNavigatorModel$MarkCapturedPoints(flipboardNavPresModel) {
			if (ss.isNullOrUndefined(this.get_flipboardNavPresModel())) {
				return;
			}
			ss.clear(this.$pointsCaptured);
			if (flipboardNavPresModel.storypointNavItems.length !== this.get_flipboardNavPresModel().storypointNavItems.length) {
				return;
			}
			var previousCurrentIndex = this.get_flipboardNavPresModel().currentStorypointIndex;
			var currentIndex = flipboardNavPresModel.currentStorypointIndex;
			var previousPoint = this.get_flipboardNavPresModel().storypointNavItems[previousCurrentIndex];
			var currentPoint = flipboardNavPresModel.storypointNavItems[currentIndex];
			if (previousCurrentIndex !== currentIndex && previousPoint.storyPointId === currentPoint.storyPointId && !previousPoint.isCaptured && currentPoint.isCaptured) {
				this.$pointsCaptured.push(currentPoint.storyPointId);
			}
			var capturedPoints = _.filter(flipboardNavPresModel.storypointNavItems, function(p, i) {
				return p.isCaptured === true && i !== flipboardNavPresModel.currentStorypointIndex;
			});
			for (var $t1 = 0; $t1 < capturedPoints.length; $t1++) {
				var point = capturedPoints[$t1];
				var currentId = { $: point.storyPointId };
				var oldPoint = _.find(this.get_flipboardNavPresModel().storypointNavItems, ss.mkdel({ currentId: currentId }, function(pm) {
					return pm.storyPointId === this.currentId.$;
				}));
				if (ss.isNullOrUndefined(oldPoint)) {
					continue;
				}
				if (!oldPoint.isCaptured) {
					this.$pointsCaptured.push(currentId.$);
				}
			}
		},
		$notifyCapturedPoints: function FlipboardNavigatorModel$NotifyCapturedPoints(context) {
			for (var $t1 = 0; $t1 < this.$pointsCaptured.length; $t1++) {
				var id = this.$pointsCaptured[$t1];
				this.raiseEvent$1(ss.Int32).call(this, this.$2$PointWasCapturedField, id, context);
			}
		}
	}, $tab_Model);
	ss.initClass($tab_FloatingToolbarClientCommands, $asm, {});
	ss.initClass($tab_FolderModel, $asm, {
		get_fields: function FolderModel$get_Fields() {
			return this.$fields;
		},
		get_folderRole: function FolderModel$get_FolderRole() {
			return this.pm.folderRole;
		},
		get_instanceType: function FolderModel$get_InstanceType() {
			return 'folder';
		},
		get_canHaveChildren: function FolderModel$get_CanHaveChildren() {
			return true;
		},
		get_isUnsortedContainer: function FolderModel$get_IsUnsortedContainer() {
			return true;
		},
		update: function FolderModel$Update(pm, newFields) {
			this.swapAndCopyPresModel(pm);
			this.$fields = newFields;
		}
	}, $tab_FieldModel);
	ss.initClass($tab_FontNotificationUtil, $asm, {});
	ss.initClass($tab_FontProperties, $asm, {
		get_fontFamily: function FontProperties$get_FontFamily() {
			return this.$internalFamily;
		},
		set_fontFamily: function FontProperties$set_FontFamily(value) {
			this.$internalFamily = value;
			this.$hash = '';
		},
		get_weight: function FontProperties$get_Weight() {
			return this.$internalWeight;
		},
		set_weight: function FontProperties$set_Weight(value) {
			if (ss.isNullOrEmptyString(value)) {
				this.$internalWeight = $tab_FontProperties.defaultWeight;
			}
			else {
				this.$internalWeight = value;
			}
			this.$hash = '';
		},
		get_style: function FontProperties$get_Style() {
			return this.$internalStyle;
		},
		set_style: function FontProperties$set_Style(value) {
			if (ss.isNullOrEmptyString(value)) {
				this.$internalStyle = $tab_FontProperties.defaultStyle;
			}
			else {
				this.$internalStyle = value;
			}
			this.$hash = '';
		},
		get_hash: function FontProperties$get_Hash() {
			if (this.$hash === '') {
				this.$hash = this.get_fontFamily().replace($tab_FontProperties.matchQuotes, '').toLowerCase() + $tab_FontProperties.hashSeparator + this.$internalWeight.toLowerCase() + $tab_FontProperties.hashSeparator + this.$internalStyle.toLowerCase();
			}
			return this.$hash;
		},
		equals$1: function FontProperties$Equals(compare) {
			var thisFontNameNoQuotes = ss.replaceAllString(ss.replaceAllString(this.get_fontFamily(), "'", ''), '"', '');
			var compareFontNameNoQuotes = ss.replaceAllString(ss.replaceAllString(compare.get_fontFamily(), "'", ''), '"', '');
			return ss.compareStrings(thisFontNameNoQuotes, compareFontNameNoQuotes, true) === 0 && ss.compareStrings(this.get_weight(), compare.get_weight(), true) === 0 && ss.compareStrings(this.get_style(), compare.get_style(), true) === 0;
		}
	});
	ss.initClass($tab_FormatItemModel, $asm, {
		add_updated: function FormatItemModel$add_Updated(value) {
			this.$2$UpdatedField = ss.delegateCombine(this.$2$UpdatedField, value);
		},
		remove_updated: function FormatItemModel$remove_Updated(value) {
			this.$2$UpdatedField = ss.delegateRemove(this.$2$UpdatedField, value);
		},
		get_$itemPresModel: function FormatItemModel$get_ItemPresModel() {
			return this.pm;
		},
		get_typeOfFormatItem: function FormatItemModel$get_TypeOfFormatItem() {
			return this.get_$itemPresModel().typeOfFormatItem;
		},
		get_widgetIdentifier: function FormatItemModel$get_WidgetIdentifier() {
			return this.get_$itemPresModel().widgetUniqueId;
		},
		get_isFormatContainer: function FormatItemModel$get_IsFormatContainer() {
			return this.get_typeOfFormatItem() === 'formatContainer';
		},
		get_isFormatPane: function FormatItemModel$get_IsFormatPane() {
			return this.get_isFormatContainer() && this.asFormatContainer().get_typeOfFormatContainer() === 'formatPane';
		},
		get_isFormatSection: function FormatItemModel$get_IsFormatSection() {
			return this.get_isFormatContainer() && this.asFormatContainer().get_typeOfFormatContainer() === 'formatSection';
		},
		get_isCollapsibleSection: function FormatItemModel$get_IsCollapsibleSection() {
			return this.get_isFormatContainer() && this.asFormatContainer().get_typeOfFormatContainer() === 'collapsibleSection';
		},
		get_isCompositeContainer: function FormatItemModel$get_IsCompositeContainer() {
			return this.get_isFormatContainer() && this.asFormatContainer().get_typeOfFormatContainer() === 'compositeContainer';
		},
		get_isUnitContainer: function FormatItemModel$get_IsUnitContainer() {
			return this.get_isFormatContainer() && this.asFormatContainer().get_typeOfFormatContainer() === 'unitContainer';
		},
		get_isTabGroup: function FormatItemModel$get_IsTabGroup() {
			return this.get_isFormatContainer() && this.asFormatContainer().get_typeOfFormatContainer() === 'tabGroup';
		},
		get_isTab: function FormatItemModel$get_IsTab() {
			return this.get_isFormatContainer() && this.asFormatContainer().get_typeOfFormatContainer() === 'tab';
		},
		get_isFormatControl: function FormatItemModel$get_IsFormatControl() {
			return this.get_typeOfFormatItem() === 'formatControl';
		},
		get_isTextControl: function FormatItemModel$get_IsTextControl() {
			return this.get_isFormatControl() && this.asFormatControl().get_typeOfFormatControl() === 'text-control';
		},
		raiseUpdated: function FormatItemModel$RaiseUpdated() {
			if (!ss.staticEquals(this.$2$UpdatedField, null) && ss.isValue(this.get_$itemPresModel())) {
				this.$2$UpdatedField();
			}
		},
		asFormatContainer: function FormatItemModel$AsFormatContainer() {
			ss.Debug.assert(this.get_isFormatContainer(), 'Item is not a FormatContainer');
			return ss.safeCast(this, $tab_FormatContainerModel);
		},
		asFormatControl: function FormatItemModel$AsFormatControl() {
			ss.Debug.assert(this.get_isFormatControl(), 'Item is not a FormatControl');
			return ss.safeCast(this, $tab_FormatControlModel);
		},
		update: function FormatItemModel$Update(newItemPresModel, context) {
			this.simpleSwapToUpdate(newItemPresModel, this.$2$UpdatedField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_FormatContainerModel, $asm, {
		get_typeOfFormatContainer: function FormatContainerModel$get_TypeOfFormatContainer() {
			return this.pm.typeOfFormatContainer;
		},
		get_items: function FormatContainerModel$get_Items() {
			return this.$children;
		},
		get_name: function FormatContainerModel$get_Name() {
			if (this.get_isFormatSection()) {
				return this.pm.name;
			}
			else if (this.get_isFormatPane()) {
				return this.pm.name;
			}
			else {
				return null;
			}
		},
		get_pickerType: function FormatContainerModel$get_PickerType() {
			if (this.get_isCompositeContainer()) {
				return this.pm.pickerType;
			}
			else if (this.get_isTabGroup()) {
				return this.pm.pickerType;
			}
			else {
				return 'none';
			}
		},
		get_previewProperties: function FormatContainerModel$get_PreviewProperties() {
			return this.$3$PreviewPropertiesField;
		},
		set_previewProperties: function FormatContainerModel$set_PreviewProperties(value) {
			this.$3$PreviewPropertiesField = value;
		},
		get_isCollapsedByDefault: function FormatContainerModel$get_IsCollapsedByDefault() {
			if (this.get_isCollapsibleSection()) {
				return this.pm.collapsed;
			}
			else {
				return false;
			}
		},
		get_label: function FormatContainerModel$get_Label() {
			if (this.get_isUnitContainer()) {
				return this.pm.label;
			}
			else if (this.get_isTab()) {
				return this.pm.label;
			}
			else {
				return null;
			}
		},
		get_isChanged: function FormatContainerModel$get_IsChanged() {
			if (this.get_isUnitContainer()) {
				return this.pm.isChanged;
			}
			else {
				return false;
			}
		},
		get_clearCommand: function FormatContainerModel$get_ClearCommand() {
			if (this.get_isUnitContainer()) {
				return this.pm.clearFormatCommandModel;
			}
			else {
				return null;
			}
		},
		get_isVisible: function FormatContainerModel$get_IsVisible() {
			return this.$isVisible;
		},
		set_isVisible: function FormatContainerModel$set_IsVisible(value) {
			if (this.$isVisible !== value) {
				this.$isVisible = value;
				this.raiseUpdated();
			}
		},
		get_subsections: function FormatContainerModel$get_Subsections() {
			var newModels = [];
			var showAllSections = tab.FeatureFlags.isEnabled('FormatWorkbookWebAll');
			var $t1 = this.asFormatContainer().get_items();
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var itemModel = $t1[$t2];
				if (showAllSections || ss.referenceEquals(itemModel.get_widgetIdentifier(), $tab_FormatContainerModel.$fontFormatWidgetUniqueId)) {
					newModels.push(itemModel);
				}
			}
			return newModels;
		},
		$buildPreviewProperties: function FormatContainerModel$BuildPreviewProperties(container) {
			this.set_previewProperties({});
			for (var $t1 = 0; $t1 < container.length; $t1++) {
				var item = container[$t1];
				if (!item.get_isFormatControl()) {
					continue;
				}
				var controlModel = item.asFormatControl();
				var widgetKey = controlModel.get_widgetKey();
				switch (widgetKey) {
					case 'fontSize':
					case 'lineSize': {
						this.get_previewProperties()[widgetKey] = controlModel.get_numericValue();
						break;
					}
					case 'fontFamily':
					case 'lineVisibility':
					case 'linePattern': {
						this.get_previewProperties()[widgetKey] = controlModel.get_textValue();
						break;
					}
					case 'colorSwatch': {
						this.get_previewProperties()[widgetKey] = controlModel.get_colorValue();
						break;
					}
					case 'bold':
					case 'italics':
					case 'underline': {
						this.get_previewProperties()[widgetKey] = controlModel.get_toggleValue();
						break;
					}
					default: {
						break;
					}
				}
			}
		},
		updatePreviewForTab: function FormatContainerModel$UpdatePreviewForTab(tabIndex) {
			if (tabIndex >= 0 && this.get_items().length >= tabIndex + 1 && this.get_items()[tabIndex].get_isTab()) {
				this.$buildPreviewProperties(this.get_items()[tabIndex].asFormatContainer().get_items());
			}
		},
		$containerItemPresModels: function FormatContainerModel$ContainerItemPresModels() {
			return this.pm.formatItemList.filter(ss.mkdel(this, function(item) {
				return !ss.keyExists(this.$blacklistedWidgetIds, item.widgetUniqueId);
			}));
		},
		update: function FormatContainerModel$Update(newItemPresModel, context) {
			this.simpleSwapToUpdate(newItemPresModel, ss.mkdel(this, function() {
				this.raiseUpdated();
			}), context);
			var containerItems = this.$containerItemPresModels();
			if (ss.isNullOrUndefined(this.$children)) {
				this.$children = [];
				for (var $t1 = 0; $t1 < containerItems.length; $t1++) {
					var item = containerItems[$t1];
					this.$children.push($tab_FormatItemModel.createModel(this, item, context));
				}
			}
			else if (ss.isValue(containerItems)) {
				for (var i = 0; i < containerItems.length; i++) {
					var item1 = containerItems[i];
					this.$children[i].update(item1, context);
				}
			}
			if (this.get_isTabGroup()) {
				this.updatePreviewForTab(0);
			}
			else {
				this.$buildPreviewProperties(this.get_items());
			}
		}
	}, $tab_FormatItemModel);
	ss.initClass($tab_FormatControlModel, $asm, {
		get_typeOfFormatControl: function FormatControlModel$get_TypeOfFormatControl() {
			return this.pm.typeOfFormatControl;
		},
		get_commandRedirectType: function FormatControlModel$get_CommandRedirectType() {
			return this.pm.commandRedirectType;
		},
		get_formatCommand: function FormatControlModel$get_FormatCommand() {
			return this.pm.formatCommandModel;
		},
		get_simpleCommand: function FormatControlModel$get_SimpleCommand() {
			return $tab_CommandSerializer.deserialize($tab_SimpleCommandsPresModelWrapper.create(this.get_formatCommand()).get_simpleCommand());
		},
		get_widgetKey: function FormatControlModel$get_WidgetKey() {
			return this.pm.formatWidgetKey;
		},
		get_isEnabled: function FormatControlModel$get_IsEnabled() {
			return this.pm.isEnabled;
		},
		get_textValue: function FormatControlModel$get_TextValue() {
			return this.pm.valueString;
		},
		get_numericValue: function FormatControlModel$get_NumericValue() {
			return this.pm.valueInt;
		},
		get_colorValue: function FormatControlModel$get_ColorValue() {
			return this.pm.color;
		},
		get_canBeAuto: function FormatControlModel$get_CanBeAuto() {
			return this.pm.canBeAuto;
		},
		get_canBeNone: function FormatControlModel$get_CanBeNone() {
			return this.pm.canBeNone;
		},
		get_canMatchMarkColor: function FormatControlModel$get_CanMatchMarkColor() {
			return this.pm.canMatchMarkColor;
		},
		get_hasOpacity: function FormatControlModel$get_HasOpacity() {
			return this.pm.hasOpacity;
		},
		get_colorSwatchType: function FormatControlModel$get_ColorSwatchType() {
			return this.pm.formatColorSwatchType;
		},
		get_selectorValue: function FormatControlModel$get_SelectorValue() {
			return this.pm.valueString;
		},
		get_toggleValue: function FormatControlModel$get_ToggleValue() {
			return this.pm.bool;
		}
	}, $tab_FormatItemModel);
	ss.initClass($tab_FormatItemExtensions, $asm, {});
	ss.initClass($tab_GetAlertMeasuresFromSelectionCmd, $asm, {
		invoke: function GetAlertMeasuresFromSelectionCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand('get-alert-measures-from-selection', this.cmdParams));
		},
		validateInvokeParams: function GetAlertMeasuresFromSelectionCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetAlertMeasuresFromSelectionCmd$Response]));
	ss.initClass($tab_GetAlertMeasuresFromSelectionCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'dataAlertMeasures')) {
				throw new ss.Exception('missing param DocParams.DataAlertMeasures');
			}
		}
	});
	ss.initClass($tab_GetDashboardDragDropCmd, $asm, {
		invoke: function GetDashboardDragDropCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand('get-dashboard-drag-drop', this.cmdParams));
		},
		validateInvokeParams: function GetDashboardDragDropCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetDashboardDragDropCmd$Response]));
	ss.initClass($tab_GetDashboardDragDropCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'zoneDragDrop')) {
				throw new ss.Exception('missing param DocParams.DashboardDragDrop');
			}
		}
	});
	ss.initClass($tab_GetDashboardSizingCmd, $asm, {
		invoke: function GetDashboardSizingCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand('get-dashboard-sizing', this.cmdParams));
		},
		validateInvokeParams: function GetDashboardSizingCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetDashboardSizingCmd$Response]));
	ss.initClass($tab_GetDashboardSizingCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'dashboardSizePresModel')) {
				throw new ss.Exception('missing param DocParams.DashboardSizePresModel');
			}
		}
	});
	ss.initClass($tab_GetDataSourceDataPresModelCmd, $asm, {
		invoke: function GetDataSourceDataPresModelCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand('get-datasource-data-pres-model', this.cmdParams));
		},
		validateInvokeParams: function GetDataSourceDataPresModelCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'cacheOnly')) {
				throw new ss.Exception('missing param DocParams.CacheOnly');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetDataSourceDataPresModelCmd$Response]));
	ss.initClass($tab_GetDataSourceDataPresModelCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'dataSrcData')) {
				throw new ss.Exception('missing param DocParams.DataSourceData');
			}
		}
	});
	ss.initClass($tab_GetThumbnailCmd, $asm, {
		invoke: function GetThumbnailCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand('get-thumbnail', this.cmdParams));
		},
		validateInvokeParams: function GetThumbnailCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetThumbnailCmd$Response]));
	ss.initClass($tab_GetThumbnailCmd$Response, $asm, {
		hasThumbnailImage: function Response$HasThumbnailImage() {
			return ss.keyExists(this.$$cmdParams, 'image');
		},
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_GetURLSubstitutionKeywordsCmd, $asm, {
		invoke: function GetURLSubstitutionKeywordsCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand('get-url-substitution-keywords', this.cmdParams));
		},
		validateInvokeParams: function GetURLSubstitutionKeywordsCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetURLSubstitutionKeywordsCmd$Response]));
	ss.initClass($tab_GetURLSubstitutionKeywordsCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'substitutionKeywordsList')) {
				throw new ss.Exception('missing param DocParams.SubstitutionKeywordList');
			}
		}
	});
	ss.initClass($tab_GetWebCategoricalColorDialogCmd, $asm, {
		invoke: function GetWebCategoricalColorDialogCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand('get-web-categorical-color-dialog', this.cmdParams));
		},
		validateInvokeParams: function GetWebCategoricalColorDialogCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'fieldVector')) {
				throw new ss.Exception('missing param DocParams.FieldVector');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetWebCategoricalColorDialogCmd$Response]));
	ss.initClass($tab_GetWebCategoricalColorDialogCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_GetWebQuantitativeColorDialogCmd, $asm, {
		invoke: function GetWebQuantitativeColorDialogCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand('get-web-quantitative-color-dialog', this.cmdParams));
		},
		validateInvokeParams: function GetWebQuantitativeColorDialogCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'fieldVector')) {
				throw new ss.Exception('missing param DocParams.FieldVector');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetWebQuantitativeColorDialogCmd$Response]));
	ss.initClass($tab_GetWebQuantitativeColorDialogCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_GroupFontExtractor, $asm, {
		canExtractFont: function GroupFontExtractor$CanExtractFont(model) {
			return model.type === 'draw-group';
		},
		extractFontFromPresModel: function GroupFontExtractor$ExtractFontFromPresModel(model) {
			if (!this.canExtractFont(model)) {
				return null;
			}
			var drawItemModels = model.drawItems;
			return this.$extractFromDrawItemPresModelArray(drawItemModels);
		},
		$extractFromDrawItemPresModelArray: function GroupFontExtractor$ExtractFromDrawItemPresModelArray(drawItemModels) {
			var uniqueFonts = {};
			for (var $t1 = 0; $t1 < drawItemModels.length; $t1++) {
				var drawItem = drawItemModels[$t1];
				for (var $t2 = 0; $t2 < $tab_GroupFontExtractor.$internalExtractors.length; $t2++) {
					var fontExtractor = $tab_GroupFontExtractor.$internalExtractors[$t2];
					if (fontExtractor.canExtractFont(drawItem)) {
						var currentFontProps = fontExtractor.extractFontFromPresModel(drawItem);
						if (ss.isValue(currentFontProps)) {
							for (var $t3 = 0; $t3 < currentFontProps.length; $t3++) {
								var fontProps = currentFontProps[$t3];
								uniqueFonts[fontProps.get_hash()] = fontProps;
							}
						}
						break;
					}
				}
			}
			return _.values(uniqueFonts);
		}
	}, null, [$tab_IDrawItemFontExtractor]);
	ss.initClass($tab_GroupModel, $asm, {
		get_instanceType: function GroupModel$get_InstanceType() {
			return 'group';
		},
		get_isCombinedField: function GroupModel$get_IsCombinedField() {
			return this.pm.isCombinedField || false;
		}
	}, $tab_FieldColumnModel);
	ss.initClass($tab_HighlightItemsByPatternMatchCmd, $asm, {
		invoke: function HighlightItemsByPatternMatchCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand('highlight-items-by-pattern-match', this.cmdParams));
		},
		validateInvokeParams: function HighlightItemsByPatternMatchCmd$ValidateInvokeParams() {
			if (ss.keyExists(this.cmdParams, 'qualifiedFieldCaption') === ss.keyExists(this.cmdParams, 'fn')) {
				throw new ss.Exception('must have one and only one of params DocParams.QualifiedFieldCaption and DocParams.FieldName');
			}
			if (!ss.keyExists(this.cmdParams, 'valueString')) {
				throw new ss.Exception('missing param DocParams.ValueStr');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_HighlightItemsByPatternMatchCmd$Response]));
	ss.initClass($tab_HighlightItemsByPatternMatchCmd$Response, $asm, {
		hasMatchedItemSet: function Response$HasMatchedItemSet() {
			return ss.keyExists(this.$$cmdParams, 'dataHighlighterItemSet');
		},
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_HistoryManager, $asm, {});
	ss.initClass($tab_HitTestSceneCmd, $asm, {
		invoke: function HitTestSceneCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand('hit-test-scene', this.cmdParams));
		},
		validateInvokeParams: function HitTestSceneCmd$ValidateInvokeParams() {
			if (ss.keyExists(this.cmdParams, 'regionRect') === ss.keyExists(this.cmdParams, 'pt1')) {
				throw new ss.Exception('must have one and only one of params DocParams.RegionRect and DocParams.Point1');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_HitTestSceneCmd$Response]));
	ss.initClass($tab_HitTestSceneCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'sceneElements')) {
				throw new ss.Exception('missing param DocParams.SceneElements');
			}
		}
	});
	ss.initEnum($tab_HTMLEscape, $asm, { escape: 0, noEscape: 1 });
	ss.initInterface($tab_IContinuousRangeModel, $asm, { add_sliderFractionUpdated: null, remove_sliderFractionUpdated: null, get_currentFraction: null, setCurrentFraction: null });
	ss.initInterface($tab_IDataSourceDataNotification, $asm, { returnDataSourceDataModel: null });
	ss.initInterface($tab_IExportImageHelper, $asm, { get_sheetScrollPositions: null });
	ss.initInterface($tab_IExportPdfHelper, $asm, { triggerExportPdfUI: null });
	ss.initClass($tab_ImageTileTracker, $asm, {});
	ss.initClass($tab_ImageZoneModel, $asm, {
		add_newImageZone: function ImageZoneModel$add_NewImageZone(value) {
			this.$2$NewImageZoneField = ss.delegateCombine(this.$2$NewImageZoneField, value);
		},
		remove_newImageZone: function ImageZoneModel$remove_NewImageZone(value) {
			this.$2$NewImageZoneField = ss.delegateRemove(this.$2$NewImageZoneField, value);
		},
		get_zoneModel: function ImageZoneModel$get_ZoneModel() {
			return this.$zoneModel;
		},
		update: function ImageZoneModel$Update(imageZonePresModel, context) {
			this.simpleSwapToUpdate(imageZonePresModel, this.$2$NewImageZoneField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_InvalidationInfo, $asm, {});
	ss.initClass($tab_IsWebZoneUrlValidCmd, $asm, {
		invoke: function IsWebZoneUrlValidCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand('is-web-zone-url-valid', this.cmdParams));
		},
		validateInvokeParams: function IsWebZoneUrlValidCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'urlString')) {
				throw new ss.Exception('missing param DocParams.URLString');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_IsWebZoneUrlValidCmd$Response]));
	ss.initClass($tab_IsWebZoneUrlValidCmd$Response, $asm, {
		hasValidationMessage: function Response$HasValidationMessage() {
			return ss.keyExists(this.$$cmdParams, 'validationMessage');
		},
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'isValid')) {
				throw new ss.Exception('missing param DocParams.IsValid');
			}
		}
	});
	ss.initClass($tab_JsModuleConfigurationBuilder, $asm, {
		andMarkAsRawJavaScriptModule: function JsModuleConfigurationBuilder$AndMarkAsRawJavaScriptModule() {
			this.moduleBeingConfigured.isRawJavaScriptModule = true;
			return this;
		},
		andMarkAsAlreadyLoadedInGlobalNamespace: function JsModuleConfigurationBuilder$AndMarkAsAlreadyLoadedInGlobalNamespace() {
			this.moduleBeingConfigured.loadingMethod = 'alreadyLoaded';
			return this;
		},
		andShowLoadingIndicator: function JsModuleConfigurationBuilder$AndShowLoadingIndicator() {
			this.moduleBeingConfigured.loadingMethod = 'synchronous';
			return this;
		},
		andLoadOnDemandIf: function JsModuleConfigurationBuilder$AndLoadOnDemandIf(condition) {
			this.moduleBeingConfigured.loadingMethod = (condition ? 'asynchronous' : 'alreadyLoaded');
			return this;
		},
		andExportResultAs: function JsModuleConfigurationBuilder$AndExportResultAs(globalName) {
			if (ss.isNullOrEmptyString(globalName)) {
				throw new ss.ArgumentNullException(globalName);
			}
			this.moduleBeingConfigured.shouldExportResult = true;
			this.moduleBeingConfigured.exportResultName = globalName;
			return this;
		}
	});
	ss.initClass($tab_JsModuleInfo, $asm, {
		get_dependencies: function JsModuleInfo$get_Dependencies() {
			return this.$dependencies;
		},
		get_stylesheetDependencies: function JsModuleInfo$get_StylesheetDependencies() {
			return this.$stylesheetDependencies;
		},
		get_hasDependencies: function JsModuleInfo$get_HasDependencies() {
			return this.$dependencies.length > 0;
		},
		get_hasDependenciesOnStylesheets: function JsModuleInfo$get_HasDependenciesOnStylesheets() {
			return this.$stylesheetDependencies.length > 0;
		},
		addDependency: function JsModuleInfo$AddDependency(dependency) {
			tab.Param.verifyValue(dependency, 'dependency');
			this.$dependencies.push(dependency);
		},
		addDependencyOnCssFile: function JsModuleInfo$AddDependencyOnCssFile(cssFile) {
			tab.Param.verifyString(cssFile, 'cssFile');
			this.$stylesheetDependencies.push(cssFile);
		}
	});
	ss.initClass($tab_LayerEncodingModel, $asm, {
		add_newLayerEncoding: function LayerEncodingModel$add_NewLayerEncoding(value) {
			this.$2$NewLayerEncodingField = ss.delegateCombine(this.$2$NewLayerEncodingField, value);
		},
		remove_newLayerEncoding: function LayerEncodingModel$remove_NewLayerEncoding(value) {
			this.$2$NewLayerEncodingField = ss.delegateRemove(this.$2$NewLayerEncodingField, value);
		},
		get_id: function LayerEncodingModel$get_Id() {
			return this.pm.paneSpec;
		},
		get_name: function LayerEncodingModel$get_Name() {
			return this.pm.name;
		},
		get_isTableCalc: function LayerEncodingModel$get_IsTableCalc() {
			return this.pm.isTableCalc;
		},
		get_paneDescriptorKeys: function LayerEncodingModel$get_PaneDescriptorKeys() {
			return this.pm.paneDescriptorKeys;
		},
		get_encodings: function LayerEncodingModel$get_Encodings() {
			return _.filter(this.pm.encodingUiItems, function(pm) {
				return pm.isVisible && pm.isEnabled;
			});
		},
		get_textEncodingDropdown: function LayerEncodingModel$get_TextEncodingDropdown() {
			return this.getDropdownPresModel('text-encoding');
		},
		get_colorEncodingDropdown: function LayerEncodingModel$get_ColorEncodingDropdown() {
			return this.getDropdownPresModel('color-encoding');
		},
		get_currentPrimitiveType: function LayerEncodingModel$get_CurrentPrimitiveType() {
			var selected = _.find(this.get_primitiveTypes(), function(pt) {
				return pt.isSelected;
			});
			return selected;
		},
		get_primitiveTypes: function LayerEncodingModel$get_PrimitiveTypes() {
			return _.filter(this.pm.primitiveTypeUiItems, function(pm) {
				return pm.isVisible && pm.isEnabled;
			});
		},
		get_markSizeModel: function LayerEncodingModel$get_MarkSizeModel() {
			return this.$markSizeModel;
		},
		update: function LayerEncodingModel$Update(newPresModel, context) {
			this.simpleSwapToUpdate(newPresModel, this.$2$NewLayerEncodingField, context);
			if (ss.isNullOrUndefined(this.$markSizeModel)) {
				this.$markSizeModel = new $tab_MarkSizeModel(this);
			}
			this.$markSizeModel.update(this.getDropdownPresModel('size-encoding'), context);
		},
		equals$1: function LayerEncodingModel$Equals(pm) {
			return this.get_id() === pm.paneSpec;
		},
		getDropdownPresModel: function LayerEncodingModel$GetDropdownPresModel(encoding) {
			var encodings = _.filter(this.pm.encodingUiItems, function(pm) {
				return pm.isVisible && pm.isEnabled && pm.encodingType === encoding;
			});
			if (ss.isNullOrUndefined(encodings) || encodings.length !== 1) {
				return null;
			}
			return encodings[0].marksCardDropdownItem;
		}
	}, $tab_Model);
	ss.initClass($tab_LayoutSession, $asm, {
		get_layoutId: function LayoutSession$get_LayoutId() {
			return this.layoutid;
		},
		set_layoutId: function LayoutSession$set_LayoutId(value) {
			this.layoutid = value;
		},
		formatDashboardTempfileReference: function LayoutSession$FormatDashboardTempfileReference(tempfileid, keepfile, attachment) {
			return this.formatLayoutMethod(this.layoutid, 'tempfile') + '/?key=' + tempfileid + (keepfile ? '&keepfile=yes' : '') + (attachment ? '&attachment=yes' : '');
		},
		saveSharedView: function LayoutSession$SaveSharedView(button, primaryContentUrl, doShareAction) {
			var onSuccess = function(data, textStatus, xhr) {
				data['button'] = button;
				if (ss.isValue(data['guid'])) {
					$tab_XhrUtil.guid = data['guid'];
				}
			};
			var onError = ss.mkdel(this, function(xhr1, textStatus1, error) {
				$tab_XhrUtil.guid = null;
				if (xhr1.status === 410 || xhr1.status === 403) {
					this.defaultSessionErrorHandler.handleSessionExpiration(false);
				}
				else if (xhr1.status === 401) {
					this.handleAuthenticationFailure();
				}
				else {
					var data1 = new Object();
					data1['button'] = button;
					doShareAction(data1);
				}
			});
			var handler = this.$createHandler(null, onSuccess, onError, 'none');
			var dat = {};
			dat['sheet_id'] = $tab_XhrUtil.get_currentTabName();
			dat['parent_id'] = $tab_XhrUtil.parentID;
			dat['primary_content_url'] = primaryContentUrl;
			dat['share_button'] = button;
			var args = this.basicPostOpts(this.$formatSessionMethod('save_shared_view'), dat);
			args.async = false;
			args.timeout = 2000;
			this.$request(args, handler);
		},
		saveAndOpenMetricsView: function LayoutSession$SaveAndOpenMetricsView() {
			window.open(this.$formatSessionMethod('save_metrics_view'), 'metrics', 'scrollbars,resizable');
		},
		metricsViewDownloadUrl: function LayoutSession$MetricsViewDownloadUrl() {
			return this.$formatSessionMethod('download_metrics_view');
		},
		getAutocompleteInfo: function LayoutSession$GetAutocompleteInfo(currentStr, updateFunc, field) {
			var onSuccess = function(resp, textStatus, xhr) {
				updateFunc(resp['new_value']);
			};
			var args = this.basicGetOpts(this.formatLayoutMethod(this.layoutid, 'getautocomplete'));
			var param = ss.mkdict(['fieldname', field, 'input_string', currentStr]);
			args.data = param;
			args.success = onSuccess;
			this.$request(args);
		},
		performPostLoadOperations: function LayoutSession$PerformPostLoadOperations(sheetId, responseCallback) {
			var onSuccess = function(resp, textStatus, xhr) {
				if (ss.isValue(responseCallback)) {
					responseCallback(resp);
				}
			};
			var onError = ss.mkdel(this, function(request, textStatus1, error) {
				this.$handleError(error, request, true, null);
			});
			var handler = this.$createHandler(null, onSuccess, onError, 'none');
			var param = ss.mkdict(['sheet_id', sheetId]);
			var args = {};
			args.data = param;
			args.async = true;
			args.type = 'GET';
			args.headers = ss.mkdict(['Accept', 'text/javascript']);
			args.dataType = 'json';
			args.url = this.formatLayoutMethod(this.layoutid, 'performPostLoadOperations');
			this.$request(args, handler);
		}
	}, $tab_BaseSession);
	ss.initClass($tab_LayoutTreeItem, $asm, {
		get_children: function LayoutTreeItem$get_Children() {
			return this.$children;
		},
		get_itemKey: function LayoutTreeItem$get_ItemKey() {
			return this.$dataPresModel.name + this.$dataPresModel.zoneId;
		},
		get_isFloating: function LayoutTreeItem$get_IsFloating() {
			return this.$dataPresModel.isFloating;
		},
		get_zoneType: function LayoutTreeItem$get_ZoneType() {
			return this.$dataPresModel.zoneType;
		},
		get_isHorizontal: function LayoutTreeItem$get_IsHorizontal() {
			return this.$dataPresModel.isHorizontal;
		},
		get_name: function LayoutTreeItem$get_Name() {
			return this.$dataPresModel.name;
		},
		get_zoneID: function LayoutTreeItem$get_ZoneID() {
			return this.$dataPresModel.zoneId;
		},
		appendChildren: function LayoutTreeItem$AppendChildren(item) {
			this.$children.push(item);
		}
	});
	ss.initClass($tab_LayoutTreeModel, $asm, {
		add_layoutTreeUpdated: function LayoutTreeModel$add_LayoutTreeUpdated(value) {
			this.$2$LayoutTreeUpdatedField = ss.delegateCombine(this.$2$LayoutTreeUpdatedField, value);
		},
		remove_layoutTreeUpdated: function LayoutTreeModel$remove_LayoutTreeUpdated(value) {
			this.$2$LayoutTreeUpdatedField = ss.delegateRemove(this.$2$LayoutTreeUpdatedField, value);
		},
		update: function LayoutTreeModel$Update(dashboardZoneHierarchyPresModel, context) {
			if (!_.isEqual(this.pm, dashboardZoneHierarchyPresModel)) {
				this.$resetLayoutTree();
				this.$buildLayoutTree(dashboardZoneHierarchyPresModel);
				this.$cleanUpExpandedStateDictionary();
				this.simpleSwapToUpdate(dashboardZoneHierarchyPresModel, this.$2$LayoutTreeUpdatedField, context);
			}
		},
		saveExpandedState: function LayoutTreeModel$SaveExpandedState(zoneId, isExpanded) {
			this.$expandedStateDictionary[zoneId] = isExpanded;
		},
		expandTreeToCurrent: function LayoutTreeModel$ExpandTreeToCurrent(currentNodeZoneId) {
			if (ss.isNullOrUndefined(this.$layoutTreeItemDictionary[currentNodeZoneId])) {
				return;
			}
			var parent = this.$layoutTreeItemDictionary[currentNodeZoneId].parent;
			while (ss.isValue(parent)) {
				var parentZoneId = parent.get_zoneID();
				this.$expandedStateDictionary[parentZoneId] = true;
				parent = this.$layoutTreeItemDictionary[parentZoneId].parent;
			}
		},
		isItemExpanded: function LayoutTreeModel$IsItemExpanded(zoneId) {
			return ss.keyExists(this.$expandedStateDictionary, zoneId) && this.$expandedStateDictionary[zoneId];
		},
		getItemFromIndex: function LayoutTreeModel$GetItemFromIndex(index) {
			return this.$layoutTreeItemDictionary[index];
		},
		$buildLayoutTree: function LayoutTreeModel$BuildLayoutTree(dashboardZoneHierarchyPresModel) {
			var zoneCommonList = dashboardZoneHierarchyPresModel.zoneCommonListItems;
			this.$layoutTreeItemDictionary = $tab_LayoutTreeModel.$createLayoutTreeItemLookUpTable(zoneCommonList);
			if (ss.isValue(zoneCommonList)) {
				for (var $t1 = 0; $t1 < zoneCommonList.length; $t1++) {
					var zoneCommon = zoneCommonList[$t1];
					var parentZoneId = zoneCommon.parentZoneId;
					var item = this.$layoutTreeItemDictionary[zoneCommon.zoneId];
					var isRootItem = parentZoneId === 0;
					if (isRootItem) {
						this.rootNodes.push(item);
					}
					else {
						var parentItem = this.$layoutTreeItemDictionary[parentZoneId];
						if (!ss.isNullOrUndefined(parentItem)) {
							parentItem.appendChildren(item);
							item.parent = parentItem;
						}
					}
				}
			}
		},
		$cleanUpExpandedStateDictionary: function LayoutTreeModel$CleanUpExpandedStateDictionary() {
			if (ss.getKeyCount(this.$layoutTreeItemDictionary) === 0) {
				this.$expandedStateDictionary = {};
			}
			else {
				var $t1 = new ss.ObjectEnumerator(this.$expandedStateDictionary);
				try {
					while ($t1.moveNext()) {
						var entry = $t1.current();
						if (!ss.keyExists(this.$layoutTreeItemDictionary, entry.key)) {
							delete this.$expandedStateDictionary[entry.key];
						}
					}
				}
				finally {
					$t1.dispose();
				}
			}
		},
		$resetLayoutTree: function LayoutTreeModel$ResetLayoutTree() {
			this.rootNodes = [];
		}
	}, $tab_Model);
	ss.initClass($tab_LegacyCategoricalQuickFilterData, $asm, {
		get_filterField: function LegacyCategoricalQuickFilterData$get_FilterField() {
			return this.$fieldName;
		},
		get_targetSheets: function LegacyCategoricalQuickFilterData$get_TargetSheets() {
			return this.$targetSheets;
		},
		set_targetSheets: function LegacyCategoricalQuickFilterData$set_TargetSheets(value) {
			this.$targetSheets = value;
		},
		get_includeAll: function LegacyCategoricalQuickFilterData$get_IncludeAll() {
			return this.$includeAll;
		},
		set_includeAll: function LegacyCategoricalQuickFilterData$set_IncludeAll(value) {
			this.$includeAll = value;
			this.clearValues();
		},
		get_isExclude: function LegacyCategoricalQuickFilterData$get_IsExclude() {
			return this.$isExclude;
		},
		addValue: function LegacyCategoricalQuickFilterData$AddValue(value) {
			if (ss.contains(this.$values, value)) {
				return false;
			}
			this.$values.push(value);
			return true;
		},
		clearValues: function LegacyCategoricalQuickFilterData$ClearValues() {
			ss.clear(this.$values);
		},
		getFilterValues: function LegacyCategoricalQuickFilterData$GetFilterValues() {
			return Array.prototype.slice.call(this.$values);
		},
		includesValue: function LegacyCategoricalQuickFilterData$IncludesValue(value) {
			if (this.get_includeAll()) {
				return true;
			}
			return this.$isExclude !== ss.contains(this.$values, value);
		},
		removeValue: function LegacyCategoricalQuickFilterData$RemoveValue(value) {
			if (ss.contains(this.$values, value)) {
				return false;
			}
			ss.remove(this.$values, value);
			return true;
		}
	});
	ss.initClass($tab_LegacyFilterModel, $asm, {
		add_filterUpdated: function LegacyFilterModel$add_FilterUpdated(value) {
			this.$2$FilterUpdatedField = ss.delegateCombine(this.$2$FilterUpdatedField, value);
		},
		remove_filterUpdated: function LegacyFilterModel$remove_FilterUpdated(value) {
			this.$2$FilterUpdatedField = ss.delegateRemove(this.$2$FilterUpdatedField, value);
		},
		get_filterPresModel: function LegacyFilterModel$get_FilterPresModel() {
			return this.pm;
		},
		get_filterType: function LegacyFilterModel$get_FilterType() {
			switch (this.get_filterPresModel().type) {
				case 'Q': {
					return 'Quantitative';
				}
				case 'H': {
					return 'Hierarchical';
				}
				case 'C': {
					return 'Categorical';
				}
				case 'RD': {
					if (this.get_filterPresModel().showRelDatePick) {
						return 'RelativeDatePick';
					}
					else {
						return 'RelativeDate';
					}
				}
				default: {
					return 'FilterDefault';
				}
			}
		},
		get_globalFieldName: function LegacyFilterModel$get_GlobalFieldName() {
			var pm = this.pm;
			var name = new String();
			name = '[';
			for (var ii = 0; ii < pm.name.length; ++ii) {
				if (ss.endsWithString(name, ']')) {
					name += '.';
					name += '[';
				}
				name += pm.name[ii];
				name += ']';
			}
			return name;
		},
		update: function LegacyFilterModel$Update(newFilterPresModel, context) {
			if (!this.isNewPresModelSameAsOld(newFilterPresModel)) {
				this.pm = newFilterPresModel;
				this.raiseEvent(this.$2$FilterUpdatedField, context);
			}
			else if (ss.isValue(newFilterPresModel) && newFilterPresModel.isTiled) {
				this.raiseEvent(this.$2$FilterUpdatedField, context);
			}
		}
	}, $tab_Model);
	ss.initClass($tab_LegacyCategoricalQuickFilterModel, $asm, {
		get_filterType: function LegacyCategoricalQuickFilterModel$get_FilterType() {
			return 'Categorical';
		},
		get_mode: function LegacyCategoricalQuickFilterModel$get_Mode() {
			switch (this.get_filterPresModel().mode) {
				case 'checklist': {
					return 'check-list';
				}
				case 'radiolist': {
					return 'radio-list';
				}
				case 'dropdown': {
					return 'dropdown';
				}
				case 'checkdropdown': {
					return 'check-dropdown';
				}
				case 'slider': {
					return 'slider';
				}
				case 'pattern': {
					return 'pattern';
				}
				case 'typeinlist': {
					return 'type-in-list';
				}
				default: {
					return 'check-list';
				}
			}
		},
		get_pattern: function LegacyCategoricalQuickFilterModel$get_Pattern() {
			return this.get_filterPresModel().pattern;
		},
		get_isAllMode: function LegacyCategoricalQuickFilterModel$get_IsAllMode() {
			return this.get_filterPresModel().all;
		},
		get_allItemsAreChecked: function LegacyCategoricalQuickFilterModel$get_AllItemsAreChecked() {
			return this.get_filterPresModel().allChecked;
		},
		get_noItemsAreChecked: function LegacyCategoricalQuickFilterModel$get_NoItemsAreChecked() {
			return this.get_filterPresModel().allNotChecked;
		},
		get_exclude: function LegacyCategoricalQuickFilterModel$get_Exclude() {
			return this.get_filterPresModel().exclude;
		},
		get_isTiled: function LegacyCategoricalQuickFilterModel$get_IsTiled() {
			return this.get_filterPresModel().isTiled;
		},
		get_isSearchable: function LegacyCategoricalQuickFilterModel$get_IsSearchable() {
			return this.get_filterPresModel().is_searchable;
		},
		get_summary: function LegacyCategoricalQuickFilterModel$get_Summary() {
			return this.get_filterPresModel().summary;
		},
		get_underlyingDataSourceIsCube: function LegacyCategoricalQuickFilterModel$get_UnderlyingDataSourceIsCube() {
			return this.get_filterPresModel().catIsHier;
		},
		get_condition: function LegacyCategoricalQuickFilterModel$get_Condition() {
			return this.get_filterPresModel().condition;
		},
		get_limit: function LegacyCategoricalQuickFilterModel$get_Limit() {
			return this.get_filterPresModel().limit;
		},
		get_rangeType: function LegacyCategoricalQuickFilterModel$get_RangeType() {
			return this.get_filterPresModel().rangeType;
		},
		get_catFilterTable: function LegacyCategoricalQuickFilterModel$get_CatFilterTable() {
			return this.get_filterPresModel().table;
		},
		get_domainActualSize: function LegacyCategoricalQuickFilterModel$get_DomainActualSize() {
			return this.get_catFilterTable().actual_size;
		},
		get_tuples: function LegacyCategoricalQuickFilterModel$get_Tuples() {
			return this.get_catFilterTable().tuples;
		}
	}, $tab_LegacyFilterModel);
	ss.initClass($tab_LegacyHierarchicalQuickFilterModel, $asm, {
		get_filterType: function LegacyHierarchicalQuickFilterModel$get_FilterType() {
			return 'Hierarchical';
		},
		get_hierarchyTables: function LegacyHierarchicalQuickFilterModel$get_HierarchyTables() {
			return this.get_filterPresModel().table;
		},
		get_levels: function LegacyHierarchicalQuickFilterModel$get_Levels() {
			return this.get_filterPresModel().levels;
		},
		get_isSearchable: function LegacyHierarchicalQuickFilterModel$get_IsSearchable() {
			return this.get_filterPresModel().is_searchable;
		}
	}, $tab_LegacyFilterModel);
	ss.initClass($tab_LegacyLegendModel, $asm, {
		add_newLegacyLegend: function LegacyLegendModel$add_NewLegacyLegend(value) {
			this.$2$NewLegacyLegendField = ss.delegateCombine(this.$2$NewLegacyLegendField, value);
		},
		remove_newLegacyLegend: function LegacyLegendModel$remove_NewLegacyLegend(value) {
			this.$2$NewLegacyLegendField = ss.delegateRemove(this.$2$NewLegacyLegendField, value);
		},
		update: function LegacyLegendModel$Update(newPresModel, context) {
			$tab_FontNotificationUtil.notifyFontsFromServerRenderedLegendPresModel(newPresModel);
			this.simpleSwapToUpdate(newPresModel, this.$2$NewLegacyLegendField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_LegacyQuantitativeQuickFilterModel, $asm, {
		get_filterType: function LegacyQuantitativeQuickFilterModel$get_FilterType() {
			return 'Quantitative';
		},
		get_range: function LegacyQuantitativeQuickFilterModel$get_Range() {
			return this.get_filterPresModel().range;
		},
		get_data: function LegacyQuantitativeQuickFilterModel$get_Data() {
			return this.get_filterPresModel().data;
		},
		get_dateFormat: function LegacyQuantitativeQuickFilterModel$get_DateFormat() {
			return this.get_filterPresModel().date_format;
		},
		get_editingFormat: function LegacyQuantitativeQuickFilterModel$get_EditingFormat() {
			return this.get_filterPresModel().editing_format;
		},
		get_format: function LegacyQuantitativeQuickFilterModel$get_Format() {
			return this.get_filterPresModel().format;
		},
		get_calendarControlStartOfWeek: function LegacyQuantitativeQuickFilterModel$get_CalendarControlStartOfWeek() {
			return this.get_filterPresModel().first_day_of_week;
		},
		get_dataSourceStartOfWeek: function LegacyQuantitativeQuickFilterModel$get_DataSourceStartOfWeek() {
			return this.get_filterPresModel().start_of_week;
		},
		get_quantitativeFilterTable: function LegacyQuantitativeQuickFilterModel$get_QuantitativeFilterTable() {
			return this.get_filterPresModel().table;
		}
	}, $tab_LegacyFilterModel);
	ss.initClass($tab_LegacyQuickFilterDisplayModel, $asm, {
		add_quickFilterDisplayUpdated: function LegacyQuickFilterDisplayModel$add_QuickFilterDisplayUpdated(value) {
			this.$2$QuickFilterDisplayUpdatedField = ss.delegateCombine(this.$2$QuickFilterDisplayUpdatedField, value);
		},
		remove_quickFilterDisplayUpdated: function LegacyQuickFilterDisplayModel$remove_QuickFilterDisplayUpdated(value) {
			this.$2$QuickFilterDisplayUpdatedField = ss.delegateRemove(this.$2$QuickFilterDisplayUpdatedField, value);
		},
		get_quickFilterTitle: function LegacyQuickFilterDisplayModel$get_QuickFilterTitle() {
			return this.get_quickFilterDisplayPresModel().quickFilterTitle;
		},
		get_quickFilterCommands: function LegacyQuickFilterDisplayModel$get_QuickFilterCommands() {
			return this.get_quickFilterDisplayPresModel().quickFilterCommands;
		},
		get_quickFilterModeMatrix: function LegacyQuickFilterDisplayModel$get_QuickFilterModeMatrix() {
			var newFilter = tab.FeatureParamsLookup.getBool(4);
			if (newFilter) {
				return this.$buildTempQuickFilterModeMatrix();
			}
			else {
				return null;
			}
		},
		get_quickFilterDisplayPresModel: function LegacyQuickFilterDisplayModel$get_QuickFilterDisplayPresModel() {
			return this.pm;
		},
		get_frame: function LegacyQuickFilterDisplayModel$get_Frame() {
			return this.$frame;
		},
		get_zoneModel: function LegacyQuickFilterDisplayModel$get_ZoneModel() {
			return ss.cast(this.parent, $tab_ZoneContentWrapperModel).get_zone();
		},
		get_contentStyle: function LegacyQuickFilterDisplayModel$get_ContentStyle() {
			if (!tab.FeatureFlags.isEnabled('NewDashboardSpacing')) {
				return this.get_zoneModel().get_styledBoxModel();
			}
			return this.get_zoneModel().get_zoneCommonModel().get_contentStyle();
		},
		update: function LegacyQuickFilterDisplayModel$Update(newQuickFilterDisplayPresModel, newFrame, context) {
			var frameUpdated = !_.isEqual(this.$frame, newFrame);
			this.$frame = newFrame;
			if (this.isNewPresModelSameAsOld(newQuickFilterDisplayPresModel)) {
				if (frameUpdated) {
					this.raiseEvent$1(Object).call(this, this.$2$QuickFilterDisplayUpdatedField, newQuickFilterDisplayPresModel, context);
				}
				return;
			}
			if (ss.isValue(newQuickFilterDisplayPresModel)) {
				$tab_FontNotificationUtil.notifyFontsFromTextStylePresModel(newQuickFilterDisplayPresModel.textStyle);
			}
			if (ss.isValue(newQuickFilterDisplayPresModel) && ss.isValue(newQuickFilterDisplayPresModel.quickFilterCommands)) {
				this.$quickFilterCommandsModel = new $tab_CommandsModel(this);
			}
			this.$quickFilterCommandsModel.update(newQuickFilterDisplayPresModel.quickFilterCommands, context);
			this.simpleSwapToUpdate$1(Object).call(this, newQuickFilterDisplayPresModel, this.$2$QuickFilterDisplayUpdatedField, newQuickFilterDisplayPresModel, context);
		},
		$buildTempQuickFilterModeMatrix: function LegacyQuickFilterDisplayModel$BuildTempQuickFilterModeMatrix() {
			var modes = [];
			var aggTypes = ['year', 'qtr', 'month', 'day', 'hour', 'minute', 'second', 'week', 'weekday', 'month-year', 'mdy', 'none', 'trunc-year', 'trunc-qtr', 'trunc-month', 'trunc-week', 'trunc-day', 'trunc-hour', 'trunc-minute', 'trunc-second'];
			var catModes = ['check-list', 'radio-list', 'dropdown', 'slider', 'pattern', 'type-in-list', 'check-dropdown'];
			var quantModes = ['min-max', 'min-only', 'max-only', 'rel-date', 'rel-pick'];
			for (var $t1 = 0; $t1 < aggTypes.length; $t1++) {
				var aggType = aggTypes[$t1];
				for (var $t2 = 0; $t2 < catModes.length; $t2++) {
					var catMode = catModes[$t2];
					var mode = {};
					mode.aggregation = aggType;
					mode.categoricalMode = catMode;
					modes.push(mode);
				}
				for (var $t3 = 0; $t3 < quantModes.length; $t3++) {
					var quantMode = quantModes[$t3];
					var mode1 = {};
					mode1.aggregation = aggType;
					mode1.quantitativeMode = quantMode;
					modes.push(mode1);
				}
			}
			return modes;
		}
	}, $tab_Model);
	ss.initClass($tab_LegacyRelativeDateQuickFilterModel, $asm, {
		get_filterType: function LegacyRelativeDateQuickFilterModel$get_FilterType() {
			return (this.get_isRelativeDatePick() ? 'RelativeDatePick' : 'RelativeDate');
		},
		get_defaultFormat: function LegacyRelativeDateQuickFilterModel$get_DefaultFormat() {
			return this.get_filterPresModel().default_format;
		},
		get_fiscalYearStart: function LegacyRelativeDateQuickFilterModel$get_FiscalYearStart() {
			return this.get_filterPresModel().fy;
		},
		get_noTime: function LegacyRelativeDateQuickFilterModel$get_NoTime() {
			return this.get_filterPresModel().noTime;
		},
		get_isRelativeDatePick: function LegacyRelativeDateQuickFilterModel$get_IsRelativeDatePick() {
			return this.get_filterPresModel().showRelDatePick;
		},
		get_text: function LegacyRelativeDateQuickFilterModel$get_Text() {
			return this.get_filterPresModel().text;
		},
		get_relativeDateTable: function LegacyRelativeDateQuickFilterModel$get_RelativeDateTable() {
			return this.get_filterPresModel().table;
		},
		get_periodType: function LegacyRelativeDateQuickFilterModel$get_PeriodType() {
			return this.get_relativeDateTable().periodType;
		},
		get_rangeType: function LegacyRelativeDateQuickFilterModel$get_RangeType() {
			return this.get_relativeDateTable().rangeType;
		},
		get_rangeN: function LegacyRelativeDateQuickFilterModel$get_RangeN() {
			return this.get_relativeDateTable().rangeN;
		},
		get_anchor: function LegacyRelativeDateQuickFilterModel$get_Anchor() {
			return this.get_relativeDateTable().anchor;
		}
	}, $tab_LegacyFilterModel);
	ss.initClass($tab_LinearRangeTransform, $asm, {
		fractionToValue: function LinearRangeTransform$FractionToValue(fract) {
			return this.$min + fract * (this.$max - this.$min);
		},
		valueToFraction: function LinearRangeTransform$ValueToFraction(value) {
			return ((this.$min === this.$max) ? 0 : ((value - this.$min) / (this.$max - this.$min)));
		}
	}, $tab_RangeTransform);
	ss.initClass($tab_LocalUbertipInfo, $asm, {
		get_interactedTupleId: function LocalUbertipInfo$get_InteractedTupleId() {
			return this.$interactedTupleId;
		},
		get_affectedTupleIds: function LocalUbertipInfo$get_AffectedTupleIds() {
			return this.$affectedTupleIds;
		},
		get_paneDescriptorKey: function LocalUbertipInfo$get_PaneDescriptorKey() {
			return this.$paneDescriptorKey;
		},
		get_needRemoteUbertip: function LocalUbertipInfo$get_NeedRemoteUbertip() {
			return this.$needRemoteUbertip;
		}
	});
	ss.initClass($tab_MapOptionsInfoModel, $asm, {
		add_updatedMapOptionsInfo: function MapOptionsInfoModel$add_UpdatedMapOptionsInfo(value) {
			this.$2$UpdatedMapOptionsInfoField = ss.delegateCombine(this.$2$UpdatedMapOptionsInfoField, value);
		},
		remove_updatedMapOptionsInfo: function MapOptionsInfoModel$remove_UpdatedMapOptionsInfo(value) {
			this.$2$UpdatedMapOptionsInfoField = ss.delegateRemove(this.$2$UpdatedMapOptionsInfoField, value);
		},
		add_stopNotifying: function MapOptionsInfoModel$add_StopNotifying(value) {
			this.$2$StopNotifyingField = ss.delegateCombine(this.$2$StopNotifyingField, value);
		},
		remove_stopNotifying: function MapOptionsInfoModel$remove_StopNotifying(value) {
			this.$2$StopNotifyingField = ss.delegateRemove(this.$2$StopNotifyingField, value);
		},
		get_lightweightMapOptionsPresModel: function MapOptionsInfoModel$get_LightweightMapOptionsPresModel() {
			return this.pm;
		},
		get_shouldShowGeographicSearch: function MapOptionsInfoModel$get_ShouldShowGeographicSearch() {
			return this.get_lightweightMapOptionsPresModel().showGeographicSearch;
		},
		get_shouldShowFloatingZoomToolbar: function MapOptionsInfoModel$get_ShouldShowFloatingZoomToolbar() {
			return this.get_lightweightMapOptionsPresModel().showFloatingZoomToolbar;
		},
		get_shouldAllowPanZoom: function MapOptionsInfoModel$get_ShouldAllowPanZoom() {
			return this.get_lightweightMapOptionsPresModel().allowPanZoom;
		},
		get_canToggleGeographicSearch: function MapOptionsInfoModel$get_CanToggleGeographicSearch() {
			return this.get_lightweightMapOptionsPresModel().canToggleGeographicSearch;
		},
		get_shouldShowMapScale: function MapOptionsInfoModel$get_ShouldShowMapScale() {
			return this.get_lightweightMapOptionsPresModel().showMapScale;
		},
		get_canToggleMapScale: function MapOptionsInfoModel$get_CanToggleMapScale() {
			return this.get_lightweightMapOptionsPresModel().canToggleMapScale;
		},
		get_canSetMapUnit: function MapOptionsInfoModel$get_CanSetMapUnit() {
			return this.get_lightweightMapOptionsPresModel().canSetMapUnit;
		},
		get_hasPresModel: function MapOptionsInfoModel$get_HasPresModel() {
			return ss.isValue(this.get_lightweightMapOptionsPresModel());
		},
		get_dialogTitle: function MapOptionsInfoModel$get_DialogTitle() {
			return tab.Strings.MapOptionsDialogTitle;
		},
		get_notificationId: function MapOptionsInfoModel$get_NotificationId() {
			return 'map-options-dialog-event';
		},
		get_vizID: function MapOptionsInfoModel$get_VizID() {
			return this.get_lightweightMapOptionsPresModel().visualIdPresModel;
		},
		get_dialogWidth: function MapOptionsInfoModel$get_DialogWidth() {
			return $tab_MapOptionsInfoModel.mapOptionsDialogWidth;
		},
		get_mapUnitSelection: function MapOptionsInfoModel$get_MapUnitSelection() {
			return this.get_lightweightMapOptionsPresModel().defaultMapUnitEnum;
		},
		get_canToggleAutomaticDrill: function MapOptionsInfoModel$get_CanToggleAutomaticDrill() {
			return this.get_lightweightMapOptionsPresModel().canToggleAutomaticDrill;
		},
		get_shouldShowAutomaticDrill: function MapOptionsInfoModel$get_ShouldShowAutomaticDrill() {
			return this.get_lightweightMapOptionsPresModel().enableAutomaticDrill;
		},
		onNotify: function MapOptionsInfoModel$OnNotify(pm, context) {
			this.simpleSwapToUpdate(pm, this.$2$UpdatedMapOptionsInfoField, context);
		},
		detachNotifications: function MapOptionsInfoModel$DetachNotifications() {
			this.pm = null;
			if (!ss.staticEquals(this.$2$StopNotifyingField, null)) {
				this.$2$StopNotifyingField();
			}
		},
		update: function MapOptionsInfoModel$Update(newPresModel, context) {
			this.swapAndCopyPresModel(newPresModel);
			this.raiseEvent(this.$2$UpdatedMapOptionsInfoField, context);
		}
	}, $tab_Model, [$tab_IHandleNotifications, $tab_IDetachableNotificationHandler]);
	ss.initClass($tab_MapScaleInfoModel, $asm, {
		add_updatedMapScaleInfo: function MapScaleInfoModel$add_UpdatedMapScaleInfo(value) {
			this.$2$UpdatedMapScaleInfoField = ss.delegateCombine(this.$2$UpdatedMapScaleInfoField, value);
		},
		remove_updatedMapScaleInfo: function MapScaleInfoModel$remove_UpdatedMapScaleInfo(value) {
			this.$2$UpdatedMapScaleInfoField = ss.delegateRemove(this.$2$UpdatedMapScaleInfoField, value);
		},
		get_mapScaleInfoPresModel: function MapScaleInfoModel$get_MapScaleInfoPresModel() {
			return this.pm;
		},
		get_shouldShowMapScale: function MapScaleInfoModel$get_ShouldShowMapScale() {
			return this.get_mapScaleInfoPresModel().shouldShowMapScale;
		},
		get_mapScaleMarginOfError: function MapScaleInfoModel$get_MapScaleMarginOfError() {
			return this.get_mapScaleInfoPresModel().mapScaleMarginOfError;
		},
		get_mapScaleWidth: function MapScaleInfoModel$get_MapScaleWidth() {
			return this.get_mapScaleInfoPresModel().mapScaleWidth;
		},
		get_mapScaleReadoutString: function MapScaleInfoModel$get_MapScaleReadoutString() {
			return this.get_mapScaleInfoPresModel().mapScaleReadoutString;
		},
		get_mapScaleReadoutNumber: function MapScaleInfoModel$get_MapScaleReadoutNumber() {
			return this.get_mapScaleInfoPresModel().mapScaleReadoutNumber;
		},
		get_mapScaleReadoutUnit: function MapScaleInfoModel$get_MapScaleReadoutUnit() {
			return this.get_mapScaleInfoPresModel().mapScaleReadoutUnit;
		},
		get_mapScaleFontSizePixels: function MapScaleInfoModel$get_MapScaleFontSizePixels() {
			return this.get_mapScaleInfoPresModel().mapScaleFontSizePixels;
		},
		get_mapScaleColor: function MapScaleInfoModel$get_MapScaleColor() {
			return this.get_mapScaleInfoPresModel().mapScaleColor;
		},
		get_mapScaleTooltipString: function MapScaleInfoModel$get_MapScaleTooltipString() {
			return this.get_mapScaleInfoPresModel().mapScaleTooltipString;
		},
		get_mapScaleBorderColor: function MapScaleInfoModel$get_MapScaleBorderColor() {
			return this.get_mapScaleInfoPresModel().mapScaleBorderColor;
		},
		get_hasPresModel: function MapScaleInfoModel$get_HasPresModel() {
			return ss.isValue(this.get_mapScaleInfoPresModel());
		},
		update: function MapScaleInfoModel$Update(newPresModel, context) {
			if (!this.isNewPresModelSameAsOld(newPresModel)) {
				this.swapAndCopyPresModel(newPresModel);
				this.raiseEvent(this.$2$UpdatedMapScaleInfoField, context);
			}
		}
	}, $tab_Model);
	ss.initClass($tab_MapServerModel, $asm, {
		add_newMapServerInfo: function MapServerModel$add_NewMapServerInfo(value) {
			this.$2$NewMapServerInfoField = ss.delegateCombine(this.$2$NewMapServerInfoField, value);
		},
		remove_newMapServerInfo: function MapServerModel$remove_NewMapServerInfo(value) {
			this.$2$NewMapServerInfoField = ss.delegateRemove(this.$2$NewMapServerInfoField, value);
		},
		add_tileSourceChanged: function MapServerModel$add_TileSourceChanged(value) {
			this.$2$TileSourceChangedField = ss.delegateCombine(this.$2$TileSourceChangedField, value);
		},
		remove_tileSourceChanged: function MapServerModel$remove_TileSourceChanged(value) {
			this.$2$TileSourceChangedField = ss.delegateRemove(this.$2$TileSourceChangedField, value);
		},
		get_useFastMaps: function MapServerModel$get_UseFastMaps() {
			return this.get_hasPresModel() && this.get_mapServerPresModel().clientRequestsMapTiles;
		},
		get_hasPresModel: function MapServerModel$get_HasPresModel() {
			return ss.isValue(this.pm);
		},
		get_isAttributionVisible: function MapServerModel$get_IsAttributionVisible() {
			return this.get_mapServerPresModel().showAttribution;
		},
		get_minZoom: function MapServerModel$get_MinZoom() {
			return this.get_mapServerPresModel().mapMinZoom;
		},
		get_maxZoom: function MapServerModel$get_MaxZoom() {
			return this.get_mapServerPresModel().mapMaxZoom;
		},
		get_zoom: function MapServerModel$get_Zoom() {
			var zoomStretchInLogSpace = Math.log(this.get_mapServerPresModel().mapDisplayScale) / Math.LN2;
			var zoom = this.get_mapServerPresModel().mapRequestZoom + zoomStretchInLogSpace;
			if (this.get_useFastMaps()) {
				zoom -= tab.MapUtil.getLeafletZoomOffsetForTileSize(this.get_tilePixelSize());
			}
			return zoom;
		},
		get_centerLatitude: function MapServerModel$get_CenterLatitude() {
			return this.get_mapServerPresModel().mapCenterLatitude;
		},
		get_centerLongitude: function MapServerModel$get_CenterLongitude() {
			return this.get_mapServerPresModel().mapCenterLongitude;
		},
		get_tilePixelSize: function MapServerModel$get_TilePixelSize() {
			return this.get_mapServerPresModel().mapTileSize;
		},
		get_numWorldRepeats: function MapServerModel$get_NumWorldRepeats() {
			return this.get_mapServerPresModel().mapWorldRepeats;
		},
		get_tileUrl: function MapServerModel$get_TileUrl() {
			var ms = this.get_mapServerPresModel();
			var toRet;
			if (ss.startsWithString(ms.mapTileServer.toString(), 'http://') || ss.startsWithString(ms.mapTileServer.toString(), 'https://')) {
				toRet = '';
			}
			else {
				var protocol = tab.WindowHelper.getLocation(window.self).protocol;
				toRet = protocol + '//';
			}
			toRet += ms.mapTileServer;
			if (!ss.endsWithString(toRet, String.fromCharCode(47)) && !ss.startsWithString(ms.mapTileUrl.toString(), String.fromCharCode(47))) {
				toRet += '/';
			}
			toRet += ms.mapTileUrl;
			toRet = ss.replaceAllString(toRet, '{K}', ms.mapServerKey);
			toRet = ss.replaceAllString(toRet, '{L}', ms.mapLayerRequest);
			var useHighDPITiles = tab.DoubleUtil.isGreaterThanOrApproximatelyEqual(tab.BrowserSupport.get_devicePixelRatio(), 2);
			toRet = ss.replaceAllString(toRet, '{D}', (useHighDPITiles ? $tab_MapServerModel.$highDpiTileIndicator : ''));
			toRet = ss.replaceAllString(toRet, '{X}', '{x}');
			toRet = ss.replaceAllString(toRet, '{Y}', '{y}');
			toRet = ss.replaceAllString(toRet, '{Z}', '{z}');
			toRet = ss.replaceAllString(toRet, '{P}', '{p}');
			return toRet;
		},
		get_hasValidTileLayer: function MapServerModel$get_HasValidTileLayer() {
			return this.get_mapServerPresModel().mapHasValidLayer;
		},
		get_attributionUrl: function MapServerModel$get_AttributionUrl() {
			return this.get_mapServerPresModel().mapAttributionUrl;
		},
		get_attributionText: function MapServerModel$get_AttributionText() {
			return this.get_mapServerPresModel().mapAttributionText;
		},
		get_attributionTextColor: function MapServerModel$get_AttributionTextColor() {
			return this.get_mapServerPresModel().mapAttributionTextColor;
		},
		get_attributionTextSize: function MapServerModel$get_AttributionTextSize() {
			return this.get_mapServerPresModel().mapAttributionTextSize;
		},
		get_attributionBGColor: function MapServerModel$get_AttributionBGColor() {
			return this.$convertColorOrUseDefault(this.get_mapServerPresModel().mapAttributionFill);
		},
		get_mapBGFillColor: function MapServerModel$get_MapBGFillColor() {
			return this.$convertColorOrUseDefault(this.get_mapServerPresModel().mapPaneBackgroundFill);
		},
		get_hasWashout: function MapServerModel$get_HasWashout() {
			return this.get_mapServerPresModel().mapWashout > 0;
		},
		get_washoutColor: function MapServerModel$get_WashoutColor() {
			var alpha = Math.max(0, Math.min(1, this.get_mapServerPresModel().mapWashout));
			return new $tab_ColorModel(255, 255, 255, alpha);
		},
		get_intermediateTileLevels: function MapServerModel$get_IntermediateTileLevels() {
			return this.get_mapServerPresModel().mapIntermediateLevels;
		},
		get_mapServerPresModel: function MapServerModel$get_MapServerPresModel() {
			return this.pm;
		},
		get_mapScaleInfoModel: function MapServerModel$get_MapScaleInfoModel() {
			return this.$mapScaleInfoModel;
		},
		get_radialSelectionDistanceInfoModel: function MapServerModel$get_RadialSelectionDistanceInfoModel() {
			return this.$radialSelectionDistanceInfoModel;
		},
		update: function MapServerModel$Update(mapServerPresModel, context) {
			var isSwapOfValidPresModels = ss.isValue(this.get_mapServerPresModel()) && ss.isValue(mapServerPresModel);
			if (isSwapOfValidPresModels) {
				var tileServerChanged = !ss.referenceEquals(this.get_mapServerPresModel().mapTileServer, mapServerPresModel.mapTileServer);
				var mapLayerRequestChanged = !ss.referenceEquals(this.get_mapServerPresModel().mapLayerRequest, mapServerPresModel.mapLayerRequest);
				if (tileServerChanged || mapLayerRequestChanged) {
					this.raiseEvent(this.$2$TileSourceChangedField, context);
				}
			}
			this.simpleSwapToUpdate(mapServerPresModel, this.$2$NewMapServerInfoField, context);
			if (this.get_hasPresModel()) {
				this.$radialSelectionDistanceInfoModel.update(this.get_mapServerPresModel().radialSelectionDistanceInfo);
				this.$mapScaleInfoModel.update(this.get_mapServerPresModel().mapScaleInfo, context);
			}
		},
		$convertColorOrUseDefault: function MapServerModel$ConvertColorOrUseDefault(colorFromPM) {
			return $tab_ColorModel.fromColorCode(colorFromPM || $tab_MapServerModel.$defaultBackgroundFillColor).toString();
		}
	}, $tab_Model);
	ss.initClass($tab_SpacingDefinition, $asm, {
		get_defaultValue: function SpacingDefinition$get_DefaultValue() {
			return ss.coalesce(this.defaultSpace, 0);
		},
		set_defaultValue: function SpacingDefinition$set_DefaultValue(value) {
			this.defaultSpace = value;
		},
		get_leftValue: function SpacingDefinition$get_LeftValue() {
			var $t1 = this.left;
			if (ss.isNullOrUndefined($t1)) {
				$t1 = this.get_defaultValue();
			}
			return $t1;
		},
		set_leftValue: function SpacingDefinition$set_LeftValue(value) {
			this.left = value;
		},
		get_topValue: function SpacingDefinition$get_TopValue() {
			var $t1 = this.top;
			if (ss.isNullOrUndefined($t1)) {
				$t1 = this.get_defaultValue();
			}
			return $t1;
		},
		set_topValue: function SpacingDefinition$set_TopValue(value) {
			this.top = value;
		},
		get_rightValue: function SpacingDefinition$get_RightValue() {
			var $t1 = this.right;
			if (ss.isNullOrUndefined($t1)) {
				$t1 = this.get_defaultValue();
			}
			return $t1;
		},
		set_rightValue: function SpacingDefinition$set_RightValue(value) {
			this.right = value;
		},
		get_bottomValue: function SpacingDefinition$get_BottomValue() {
			var $t1 = this.bottom;
			if (ss.isNullOrUndefined($t1)) {
				$t1 = this.get_defaultValue();
			}
			return $t1;
		},
		set_bottomValue: function SpacingDefinition$set_BottomValue(value) {
			this.bottom = value;
		},
		get_allSidesTheSame: function SpacingDefinition$get_AllSidesTheSame() {
			var $t1 = this.$allSidesTheSameLocal;
			if (ss.isNullOrUndefined($t1)) {
				$t1 = ss.isNullOrUndefined(this.bottom) && ss.isNullOrUndefined(this.top) && ss.isNullOrUndefined(this.left) && ss.isNullOrUndefined(this.right);
			}
			return $t1;
		},
		set_allSidesTheSame: function SpacingDefinition$set_AllSidesTheSame(value) {
			this.$allSidesTheSameLocal = value;
			if (value) {
				this.top = null;
				this.bottom = null;
				this.left = null;
				this.right = null;
			}
		},
		mergeWithExisitingStyle: null
	});
	ss.initClass($tab_MarginDefinition, $asm, {
		mergeWithExisitingStyle: function MarginDefinition$MergeWithExisitingStyle(exisitingStyle) {
			var newStyle = $.extend({}, exisitingStyle);
			if (ss.isValue(this.defaultSpace)) {
				newStyle.margin = ss.unbox(this.defaultSpace);
			}
			else {
				delete newStyle.margin;
			}
			if (ss.isValue(this.top)) {
				newStyle.marginTop = ss.unbox(this.top);
			}
			else {
				delete newStyle.marginTop;
			}
			if (ss.isValue(this.bottom)) {
				newStyle.marginBottom = ss.unbox(this.bottom);
			}
			else {
				delete newStyle.marginBottom;
			}
			if (ss.isValue(this.left)) {
				newStyle.marginLeft = ss.unbox(this.left);
			}
			else {
				delete newStyle.marginLeft;
			}
			if (ss.isValue(this.right)) {
				newStyle.marginRight = ss.unbox(this.right);
			}
			else {
				delete newStyle.marginRight;
			}
			return newStyle;
		}
	}, $tab_SpacingDefinition);
	$tab_MarginDefinition.$ctor1.prototype = $tab_MarginDefinition.prototype;
	ss.initClass($tab_MarksCardModel, $asm, {
		add_newMarksCard: function MarksCardModel$add_NewMarksCard(value) {
			this.$2$NewMarksCardField = ss.delegateCombine(this.$2$NewMarksCardField, value);
		},
		remove_newMarksCard: function MarksCardModel$remove_NewMarksCard(value) {
			this.$2$NewMarksCardField = ss.delegateRemove(this.$2$NewMarksCardField, value);
		},
		get_layers: function MarksCardModel$get_Layers() {
			return this.$layers;
		},
		get_activePaneSpecId: function MarksCardModel$get_ActivePaneSpecId() {
			return this.$activePaneSpecId;
		},
		set_activePaneSpecId: function MarksCardModel$set_ActivePaneSpecId(value) {
			this.$activePaneSpecId = value;
		},
		update: function MarksCardModel$Update(newPresModel, context) {
			if (this.isNewPresModelSameAsOld(newPresModel)) {
				return;
			}
			var newLayers = [];
			if (ss.isValue(newPresModel) && ss.isValue(newPresModel.layer)) {
				this.$updateHelper(newPresModel.layer, newLayers, context);
			}
			if (ss.isValue(newPresModel) && ss.isValue(newPresModel.layers)) {
				for (var $t1 = 0; $t1 < newPresModel.layers.length; $t1++) {
					var layerPM = newPresModel.layers[$t1];
					this.$updateHelper(layerPM, newLayers, context);
				}
			}
			this.$layers = newLayers;
			this.swapAndCopyPresModel(newPresModel);
			this.raiseEvent(this.$2$NewMarksCardField, context);
		},
		$updateHelper: function MarksCardModel$UpdateHelper(layer, newLayers, context) {
			var m = _.find(this.$layers, function(model) {
				return model.equals$1(layer);
			});
			if (ss.isNullOrUndefined(m)) {
				m = new $tab_LayerEncodingModel(this, layer.paneSpec);
			}
			m.update(layer, context);
			newLayers.push(m);
		}
	}, $tab_Model);
	ss.initClass($tab_MarkSizeModel, $asm, {
		add_sliderFractionUpdated: function MarkSizeModel$add_SliderFractionUpdated(value) {
			this.$2$SliderFractionUpdatedField = ss.delegateCombine(this.$2$SliderFractionUpdatedField, value);
		},
		remove_sliderFractionUpdated: function MarkSizeModel$remove_SliderFractionUpdated(value) {
			this.$2$SliderFractionUpdatedField = ss.delegateRemove(this.$2$SliderFractionUpdatedField, value);
		},
		get_minMarkSize: function MarkSizeModel$get_MinMarkSize() {
			return this.pm.minMarkSize;
		},
		get_maxMarkSize: function MarkSizeModel$get_MaxMarkSize() {
			return this.pm.maxMarkSize;
		},
		get_currentMarkSize: function MarkSizeModel$get_CurrentMarkSize() {
			return this.pm.markSize;
		},
		get_currentSliderFraction: function MarkSizeModel$get_CurrentSliderFraction() {
			return this.$transform.valueToFraction(this.get_currentMarkSize());
		},
		get_transform: function MarkSizeModel$get_Transform() {
			return this.$transform;
		},
		get_parentModel: function MarkSizeModel$get_ParentModel() {
			return this.$parentModel;
		},
		get_currentFraction: function MarkSizeModel$get_CurrentFraction() {
			return this.get_currentSliderFraction();
		},
		setCurrentFraction: function MarkSizeModel$SetCurrentFraction(fraction) {
		},
		markSizeUpdated: function MarkSizeModel$MarkSizeUpdated() {
			if (ss.isValue(this.$2$SliderFractionUpdatedField)) {
				this.$2$SliderFractionUpdatedField(this.get_currentSliderFraction());
			}
		},
		update: function MarkSizeModel$Update(pmodel, context) {
			if (ss.isValue(pmodel)) {
				this.$updateTransformFor(pmodel);
			}
			this.simpleSwapToUpdate(pmodel, ss.mkdel(this, this.markSizeUpdated), context);
		},
		$updateTransformFor: function MarkSizeModel$UpdateTransformFor(presModel) {
			switch (presModel.inflectionPoints.length) {
				case 0: {
					this.$transform = new $tab_LinearRangeTransform(presModel.minMarkSize, presModel.maxMarkSize);
					break;
				}
				case 1: {
					var point = presModel.inflectionPoints[0];
					this.$transform = new $tab_AcceleratingRangeTransform(presModel.minMarkSize, presModel.maxMarkSize, point.inflectionFraction, point.inflectionValue, point.inflectionFraction, point.inflectionValue);
					break;
				}
				case 2:
				default: {
					var point1 = presModel.inflectionPoints[0];
					var point2 = presModel.inflectionPoints[1];
					this.$transform = new $tab_AcceleratingRangeTransform(presModel.minMarkSize, presModel.maxMarkSize, point1.inflectionFraction, point1.inflectionValue, point2.inflectionFraction, point2.inflectionValue);
					break;
				}
			}
		}
	}, $tab_Model, [$tab_IContinuousRangeModel]);
	ss.initClass($tab_ModelUtils, $asm, {});
	ss.initClass($tab_ModuleManager, $asm, {});
	ss.initClass($tab_ModuleTracker, $asm, {
		loadRequested: function ModuleTracker$LoadRequested() {
			this.$pendingModuleCount++;
		},
		moduleLoaded: function ModuleTracker$ModuleLoaded() {
			ss.Debug.assert(this.$pendingModuleCount > 0, 'Currently not tracking any module');
			this.$pendingModuleCount = Math.max(this.$pendingModuleCount - 1, 0);
			if (this.$areAllModulesLoaded()) {
				this.$invokeCallbacks();
			}
		},
		registerModulesLoadedCallback: function ModuleTracker$RegisterModulesLoadedCallback(toInvokeWhenAllModulesLoaded) {
			if (this.$areAllModulesLoaded()) {
				toInvokeWhenAllModulesLoaded();
				return;
			}
			this.$loadCompleteCallbacks.push(toInvokeWhenAllModulesLoaded);
		},
		$areAllModulesLoaded: function ModuleTracker$AreAllModulesLoaded() {
			return this.$pendingModuleCount === 0;
		},
		$invokeCallbacks: function ModuleTracker$InvokeCallbacks() {
			for (var $t1 = 0; $t1 < this.$loadCompleteCallbacks.length; $t1++) {
				var action = this.$loadCompleteCallbacks[$t1];
				_.defer(action);
			}
			this.$loadCompleteCallbacks.length = 0;
		}
	});
	ss.initClass($tab_MultipleFieldsModel, $asm, {
		get_instanceType: function MultipleFieldsModel$get_InstanceType() {
			return 'multiple';
		}
	}, $tab_FieldModel);
	ss.initClass($tab_NoopModelEventsHandler, $asm, {
		processEvent: function NoopModelEventsHandler$ProcessEvent(a) {
		}
	}, null, [$tab_IModelEventHandler]);
	ss.initClass($tab_NotificationHandlerLauncher, $asm, {
		get_notificationId: function NotificationHandlerLauncher$get_NotificationId() {
			return this.$1$NotificationIdField;
		},
		set_notificationId: function NotificationHandlerLauncher$set_NotificationId(value) {
			this.$1$NotificationIdField = value;
		},
		onNotify: function NotificationHandlerLauncher$OnNotify(pm, context) {
			var deferred = $.Deferred();
			var promise = deferred.promise();
			promise.done(ss.mkdel(this, function() {
				if (ss.isValue(this.$handler)) {
					$tab_Model.nonWorldUpdate(ss.mkdel(this, function(ctx) {
						this.$handler.onNotify(pm, ctx);
					}));
				}
			}));
			if (ss.isValue(this.$handler)) {
				deferred.resolve();
			}
			else {
				this.$createHandlerCallback().done(ss.mkdel(this, function(h) {
					if (ss.isValue(h)) {
						this.$handler = h;
						this.$handler.add_stopNotifying(ss.mkdel(this, this.$onHandlerStopNotifying));
					}
					deferred.resolve();
				}));
			}
		},
		$onHandlerStopNotifying: function NotificationHandlerLauncher$OnHandlerStopNotifying() {
			this.$handler = null;
		}
	}, null, [$tab_IHandleNotifications]);
	ss.initClass($tab_OnlineAnalyticsClient, $asm, {
		$log: function OnlineAnalyticsClient$Log(type, properties) {
			this.$initialize().done([ss.mkdel(this, function() {
				var eventBuilder = this.$eventFactory.createEvent();
				eventBuilder.ofType(type);
				var $t1 = new ss.ObjectEnumerator(properties);
				try {
					while ($t1.moveNext()) {
						var keyValuePair = $t1.current();
						ss.Debug.assert(!ss.isNullOrEmptyString(keyValuePair.key), 'Expected a non-empty property name.');
						$tab_OnlineAnalyticsClient.$validatePropertyName(keyValuePair.key);
						ss.Debug.assert(!_.isObject(keyValuePair.value), 'Expected a primitive property value.');
						eventBuilder.withProperty(keyValuePair.key, keyValuePair.value);
					}
				}
				finally {
					$t1.dispose();
				}
				eventBuilder.withProperty('SiteId', this.$siteId);
				eventBuilder.withProperty('SiteLuid', this.$siteLuid);
				eventBuilder.withProperty('SiteUrlName', this.$siteUrlName);
				eventBuilder.withProperty('UserId', this.$userId);
				eventBuilder.withProperty('Language', tsConfig.language);
				eventBuilder.withProperty('Locale', tsConfig.locale);
				eventBuilder.withProperty('SessionId', tsConfig.sessionIdHash);
				eventBuilder.withProperty('ProjectId', tsConfig.current_project_id);
				eventBuilder.withProperty('WorkbookId', tsConfig.current_workbook_id);
				eventBuilder.withProperty('Public', tsConfig.isPublic);
				eventBuilder.withProperty('SaaS', tsConfig.is_saas);
				var $t2 = this.$reporter;
				var $t3 = eventBuilder.build();
				console.log('AnalyticsClient.Reporter.ReportEvent', $t3.type, $t3);
				$t2.reportEvent($t3);
			})]);
			var handler = $tab_OnlineAnalyticsClient.$1$OnLogEventField;
			if (!ss.staticEquals(handler, null)) {
				handler(type, properties);
			}
		},
		$loadAnalyticsClientLibrary: function OnlineAnalyticsClient$LoadAnalyticsClientLibrary() {
			return this.$analyticsClientLibraryPromise || (this.$analyticsClientLibraryPromise = $tab_ModuleManager.load$1($tab_OnlineAnalyticsClient.analyticsClientLibrary, []));
		},
		$getServerInfo: function OnlineAnalyticsClient$GetServerInfo() {
			return this.$serverInfoPromise || (this.$serverInfoPromise = $tab_WorkgroupServerCommands.get_getSessionInfo().done(ss.mkdel(this, function(info) {
				this.$serverInfo = info;
			})).fail(ss.mkdel(this, function(error) {
				this.$logger.error('Error fetching server info.', [error]);
			})));
		},
		$initialize: function OnlineAnalyticsClient$Initialize() {
			return this.$initializePromise || (this.$initializePromise = $.when(this.$getServerInfo(), this.$loadAnalyticsClientLibrary()).done([ss.mkdel(this, function() {
				var success = !!ss.isValue(this.$serverInfo);
				if (success) {
					var server = this.$serverInfo.server;
					var site = this.$serverInfo.site;
					var user = this.$serverInfo.user;
					success = !!(ss.isValue(server) && ss.isValue(site) && ss.isValue(user));
					if (success) {
						this.$analyticsEndpointUrl = ss.cast(server.analyticsEndpoint, String);
						this.$onlineServerInstanceId = ss.cast(server.logicalServerInstanceId, String);
						this.$siteId = ss.cast(site.id, String);
						this.$siteLuid = ss.cast(site.luid, String);
						this.$siteUrlName = ss.cast(site.urlName, String);
						this.$userId = ss.cast(user.id, String);
					}
				}
				if (!success) {
					this.$logger.error(ss.formatString("Unexpected response from '{0}' command when fetching online analytics server info.", 'GetSessionInfo'), []);
				}
				this.$reporter = new AnalyticsClient.Reporter(this.$analyticsEndpointUrl);
				this.$eventFactory = new AnalyticsClient.AnalyticsEventFactory($tab_OnlineAnalyticsClient.serviceName, this.$onlineServerInstanceId, window.location.hostname);
			})]));
		}
	});
	ss.initClass($tab_OrderClause, $asm, {});
	ss.initClass($tab_PaddingDefinition, $asm, {
		mergeWithExisitingStyle: function PaddingDefinition$MergeWithExisitingStyle(exisitingStyle) {
			var newStyle = $.extend({}, exisitingStyle);
			if (ss.isValue(this.defaultSpace)) {
				newStyle.padding = ss.unbox(this.defaultSpace);
			}
			else {
				delete newStyle.padding;
			}
			if (ss.isValue(this.top)) {
				newStyle.paddingTop = ss.unbox(this.top);
			}
			else {
				delete newStyle.paddingTop;
			}
			if (ss.isValue(this.bottom)) {
				newStyle.paddingBottom = ss.unbox(this.bottom);
			}
			else {
				delete newStyle.paddingBottom;
			}
			if (ss.isValue(this.left)) {
				newStyle.paddingLeft = ss.unbox(this.left);
			}
			else {
				delete newStyle.paddingLeft;
			}
			if (ss.isValue(this.right)) {
				newStyle.paddingRight = ss.unbox(this.right);
			}
			else {
				delete newStyle.paddingRight;
			}
			return newStyle;
		}
	}, $tab_SpacingDefinition);
	$tab_PaddingDefinition.$ctor1.prototype = $tab_PaddingDefinition.prototype;
	ss.initClass($tab_PageModel, $asm, {
		add_newPage: function PageModel$add_NewPage(value) {
			this.$2$NewPageField = ss.delegateCombine(this.$2$NewPageField, value);
		},
		remove_newPage: function PageModel$remove_NewPage(value) {
			this.$2$NewPageField = ss.delegateRemove(this.$2$NewPageField, value);
		},
		get_title: function PageModel$get_Title() {
			return tableau.format.stripFormattedText(this.pm.title);
		},
		get_frame: function PageModel$get_Frame() {
			return this.$frame;
		},
		get_zoneModel: function PageModel$get_ZoneModel() {
			return this.$zoneModel;
		},
		update: function PageModel$Update(pagePresModel, newFrame, fireEvent, context) {
			this.$frame = newFrame;
			if (this.isNewPresModelSameAsOld(pagePresModel)) {
				return;
			}
			$tab_FontNotificationUtil.notifyFontsFromPagePresModel(pagePresModel);
			if (fireEvent) {
				this.simpleSwapToUpdate$1(Object).call(this, pagePresModel, this.$2$NewPageField, pagePresModel, context);
			}
			else {
				this.swapAndCopyPresModel(pagePresModel);
			}
		}
	}, $tab_Model);
	ss.initClass($tab_PageServerCommands, $asm, {});
	ss.initClass($tab_PaneClientCommands, $asm, {});
	ss.initClass($tab_PaneIdModel, $asm, {
		get_rowIndex: function PaneIdModel$get_RowIndex() {
			return this.$presModel['rowIndex'];
		},
		get_columnIndex: function PaneIdModel$get_ColumnIndex() {
			return this.$presModel['columnIndex'];
		},
		get_pageIndex: function PaneIdModel$get_PageIndex() {
			return (ss.keyExists(this.$presModel, 'pageIndex') ? this.$presModel['pageIndex'] : 0);
		},
		get_presModel: function PaneIdModel$get_PresModel() {
			return this.$presModel;
		},
		update: function PaneIdModel$Update(paneId) {
			if (ss.isValue(paneId)) {
				this.$presModel = paneId;
				ss.Debug.assert(ss.keyExists(this.$presModel, 'columnIndex'), 'required key ColumnIndex is missing');
				ss.Debug.assert(ss.keyExists(this.$presModel, 'rowIndex'), 'required key RowIndex is missing');
			}
			else {
				this.$presModel = {};
				this.$presModel['columnIndex'] = 0;
				this.$presModel['rowIndex'] = 0;
			}
		}
	});
	$tab_PaneIdModel.$ctor1.prototype = $tab_PaneIdModel.prototype;
	ss.initClass($tab_PanZoomCommands, $asm, {});
	ss.initClass($tab_ParameterCtrlModel, $asm, {
		add_newParameterCtrl: function ParameterCtrlModel$add_NewParameterCtrl(value) {
			this.$2$NewParameterCtrlField = ss.delegateCombine(this.$2$NewParameterCtrlField, value);
		},
		remove_newParameterCtrl: function ParameterCtrlModel$remove_NewParameterCtrl(value) {
			this.$2$NewParameterCtrlField = ss.delegateRemove(this.$2$NewParameterCtrlField, value);
		},
		get_parameterCtrlPresModel: function ParameterCtrlModel$get_ParameterCtrlPresModel() {
			return this.pm;
		},
		get_parameterCtrlJsonPresModel: function ParameterCtrlModel$get_ParameterCtrlJsonPresModel() {
			return this.get_parameterCtrlPresModel().legacyPresModel;
		},
		get_zone: function ParameterCtrlModel$get_Zone() {
			return this.get_zoneModel().pm;
		},
		get_frame: function ParameterCtrlModel$get_Frame() {
			return this.$frame;
		},
		get_zoneModel: function ParameterCtrlModel$get_ZoneModel() {
			return ss.cast(this.parent, $tab_ZoneContentWrapperModel).get_zone();
		},
		update: function ParameterCtrlModel$Update(newPresModel, newFrame, context) {
			if (ss.isValue(newPresModel)) {
				$tab_FontNotificationUtil.notifyFontsFromTextStylePresModel(newPresModel.textStyle);
			}
			this.$frame = newFrame;
			this.simpleSwapToUpdate$1(Object).call(this, newPresModel, this.$2$NewParameterCtrlField, newPresModel, context);
		},
		updateFrame: function ParameterCtrlModel$UpdateFrame(newFrame, context) {
			if (!ss.referenceEquals(this.$frame, newFrame)) {
				this.$frame = newFrame;
				this.raiseEvent$1(Object).call(this, this.$2$NewParameterCtrlField, this.get_parameterCtrlPresModel(), context);
			}
		}
	}, $tab_Model);
	ss.initClass($tab_ParameterFilterDisplayModel, $asm, {
		add_filterUpdated: function ParameterFilterDisplayModel$add_FilterUpdated(value) {
			this.$2$FilterUpdatedField = ss.delegateCombine(this.$2$FilterUpdatedField, value);
		},
		remove_filterUpdated: function ParameterFilterDisplayModel$remove_FilterUpdated(value) {
			this.$2$FilterUpdatedField = ss.delegateRemove(this.$2$FilterUpdatedField, value);
		},
		get_displayMode: function ParameterFilterDisplayModel$get_DisplayMode() {
			return this.get_$parameterControlPresModel().paramDisplayMode;
		},
		get_fieldName: function ParameterFilterDisplayModel$get_FieldName() {
			return this.get_$parameterControlPresModel().parameterName;
		},
		get_titleHtml: function ParameterFilterDisplayModel$get_TitleHtml() {
			return (this.get_$zonePresModel().zoneCommon.hasTitle ? this.get_$zonePresModel().zoneTitle.html : '');
		},
		get_titleCaption: function ParameterFilterDisplayModel$get_TitleCaption() {
			return (this.get_$zonePresModel().zoneCommon.hasTitle ? this.get_$zonePresModel().zoneTitle.caption : '');
		},
		get_titleHeight: function ParameterFilterDisplayModel$get_TitleHeight() {
			return (this.get_$zonePresModel().zoneCommon.hasTitle ? this.get_$zonePresModel().titleHeight : 0);
		},
		get_zoneBackgroundColor: function ParameterFilterDisplayModel$get_ZoneBackgroundColor() {
			return this.get_$zonePresModel().zoneCommon.styledBox.fillColor;
		},
		get_itemsHeight: function ParameterFilterDisplayModel$get_ItemsHeight() {
			return this.get_$parameterControlPresModel().lineHeight;
		},
		get_itemsFontName: function ParameterFilterDisplayModel$get_ItemsFontName() {
			return this.get_$parameterControlPresModel().textStyle.fontName.toString();
		},
		get_itemsFontSize: function ParameterFilterDisplayModel$get_ItemsFontSize() {
			return this.get_$parameterControlPresModel().textStyle.fontSize + 'pt';
		},
		get_itemsTextColor: function ParameterFilterDisplayModel$get_ItemsTextColor() {
			return this.get_$parameterControlPresModel().textStyle.color;
		},
		get_itemsFontWeight: function ParameterFilterDisplayModel$get_ItemsFontWeight() {
			return this.get_$parameterControlPresModel().textStyle.fontWeight;
		},
		get_itemsFontStyle: function ParameterFilterDisplayModel$get_ItemsFontStyle() {
			return this.get_$parameterControlPresModel().textStyle.fontStyle;
		},
		get_itemsTextDecoration: function ParameterFilterDisplayModel$get_ItemsTextDecoration() {
			return this.get_$parameterControlPresModel().textStyle.textDecoration;
		},
		get_items: function ParameterFilterDisplayModel$get_Items() {
			var items = [];
			for (var i = 0; i < this.get_$parameterControlPresModel().formattedValues.length; i++) {
				items.push(new $tab_ParameterFilterItem(this.get_$parameterControlPresModel().formattedValues[i], this.get_$parameterControlJsonPresModel().domain[i]));
			}
			return items;
		},
		get_selectedItem: function ParameterFilterDisplayModel$get_SelectedItem() {
			return this.get_$parameterControlPresModel().formattedValue;
		},
		get_$parameterControlPresModel: function ParameterFilterDisplayModel$get_ParameterControlPresModel() {
			return this.pm;
		},
		get_$parameterControlJsonPresModel: function ParameterFilterDisplayModel$get_ParameterControlJsonPresModel() {
			return this.get_$parameterControlPresModel().legacyPresModel;
		},
		get_$zonePresModel: function ParameterFilterDisplayModel$get_ZonePresModel() {
			return ss.cast(this.parent, $tab_ZoneContentWrapperModel).get_zone().pm;
		},
		update: function ParameterFilterDisplayModel$Update(newPresModel, context) {
			ss.Debug.assert($tab_ParameterFilterDisplayModel.supportsParameterType(newPresModel), 'Catch uses of ParameterFilterDisplayModel with not-yet-supported parameter types.');
			if (!this.isNewPresModelSameAsOld(newPresModel)) {
				this.swapAndCopyPresModel(newPresModel);
				this.raiseEvent$1(Object).call(this, this.$2$FilterUpdatedField, newPresModel, context);
			}
		}
	}, $tab_Model);
	ss.initClass($tab_ParameterFilterItem, $asm, {});
	ss.initClass($tab_ParameterServerCommands, $asm, {});
	ss.initClass($tab_PercentTotalTableCalcModel, $asm, {
		add_modelUpdated: function PercentTotalTableCalcModel$add_ModelUpdated(value) {
			this.$3$ModelUpdatedField = ss.delegateCombine(this.$3$ModelUpdatedField, value);
		},
		remove_modelUpdated: function PercentTotalTableCalcModel$remove_ModelUpdated(value) {
			this.$3$ModelUpdatedField = ss.delegateRemove(this.$3$ModelUpdatedField, value);
		},
		get_$percentTotalPresModel: function PercentTotalTableCalcModel$get_PercentTotalPresModel() {
			return this.pm;
		},
		get_allPages: function PercentTotalTableCalcModel$get_AllPages() {
			return this.get_$percentTotalPresModel().includeAllPages;
		},
		get_allPagesState: function PercentTotalTableCalcModel$get_AllPagesState() {
			return this.get_$percentTotalPresModel().allPagesState;
		},
		update: function PercentTotalTableCalcModel$Update(newPresModel, context) {
			this.simpleSwapToUpdate(newPresModel, this.$3$ModelUpdatedField, context);
		}
	}, $tab_TypeSpecificTableCalcModel);
	ss.initClass($tab_PermissionManager, $asm, {});
	ss.initClass($tab_PillModel, $asm, {
		get_encodingType: function PillModel$get_EncodingType() {
			if (ss.isNullOrUndefined(this.pm) || ss.isNullOrUndefined(this.pm.encodingType)) {
				return 'invalid-encoding';
			}
			return this.pm.encodingType;
		},
		get_alternateEncodings: function PillModel$get_AlternateEncodings() {
			if (ss.isNullOrUndefined(this.pm) || ss.isNullOrUndefined(this.pm.encodingUiItems)) {
				return [];
			}
			return _.filter(this.pm.encodingUiItems, function(pm) {
				return pm.isVisible && pm.isEnabled;
			});
		},
		get_filterType: function PillModel$get_FilterType() {
			if (ss.isNullOrUndefined(this.pm) || ss.isNullOrUndefined(this.pm.filterIconType)) {
				return 'no-filter';
			}
			return this.pm.filterIconType;
		},
		get_hasDrill: function PillModel$get_HasDrill() {
			return this.pm.hasDrill || false;
		},
		get_shouldDrill: function PillModel$get_ShouldDrill() {
			return this.get_hasDrill() && (this.pm.shouldDrill || false);
		},
		get_column: function PillModel$get_Column() {
			return this.$column;
		},
		get_tooltip: function PillModel$get_Tooltip() {
			return tableau.format.stripFormattedText(this.pm.tooltip);
		},
		get_sideIconToolip: function PillModel$get_SideIconToolip() {
			return tableau.format.stripFormattedText(this.pm.iconTooltip);
		},
		get_displayName: function PillModel$get_DisplayName() {
			return this.pm.displayText;
		},
		get_contextMenuCommands: function PillModel$get_ContextMenuCommands() {
			return this.pm.commands;
		},
		get_isMultipleFields: function PillModel$get_IsMultipleFields() {
			return this.pm.encodingType !== 'invalid-encoding' && ss.isInstanceOfType(this.$column, $tab_MultipleFieldsModel);
		},
		get_isSortPill: function PillModel$get_IsSortPill() {
			return this.pm.isSortPill;
		},
		get_sortMeasure: function PillModel$get_SortMeasure() {
			return this.pm.sortMeasureName;
		},
		get_sortDirection: function PillModel$get_SortDirection() {
			return this.pm.sortOrder;
		},
		update: function PillModel$Update(item, newColumn) {
			if (this.isNewPresModelSameAsOld(item)) {
				return;
			}
			this.$column = newColumn;
			this.swapAndCopyPresModel(item);
		}
	}, $tab_Model);
	ss.initClass($tab_PingSessionCmd, $asm, {
		invoke: function PingSessionCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand$1('ping-session', this.cmdParams));
		},
		validateInvokeParams: function PingSessionCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_PingSessionCmd$Response]));
	ss.initClass($tab_PingSessionCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_PluginDialogNotificationHandler, $asm, {
		add_stopNotifying: function PluginDialogNotificationHandler$add_StopNotifying(value) {
			this.$1$StopNotifyingField = ss.delegateCombine(this.$1$StopNotifyingField, value);
		},
		remove_stopNotifying: function PluginDialogNotificationHandler$remove_StopNotifying(value) {
			this.$1$StopNotifyingField = ss.delegateRemove(this.$1$StopNotifyingField, value);
		},
		get_notificationId: function PluginDialogNotificationHandler$get_NotificationId() {
			return this.$1$NotificationIdField;
		},
		set_notificationId: function PluginDialogNotificationHandler$set_NotificationId(value) {
			this.$1$NotificationIdField = value;
		},
		onNotify: function PluginDialogNotificationHandler$OnNotify(pm, context) {
			if (ss.isValue(this.$plugin)) {
				return;
			}
			this.$plugin = ss.createInstance(this.$pluginType);
			this.$root = document.createElement('div');
			this.$dialogParent.appendChild(this.$root);
			this.$plugin.showDialog(pm, this.$root, ss.mkdel(this, this.$onPluginDone));
		},
		$onPluginDone: function PluginDialogNotificationHandler$OnPluginDone() {
			this.$plugin = null;
			if (ss.isValue(this.$root)) {
				this.$dialogParent.removeChild(this.$root);
				this.$root = null;
			}
		},
		dispose: function PluginDialogNotificationHandler$Dispose() {
			if (!ss.staticEquals(this.$1$StopNotifyingField, null)) {
				this.$1$StopNotifyingField();
			}
			this.$onPluginDone();
		}
	}, null, [$tab_IHandleNotifications, $tab_IDetachableNotificationHandler, ss.IDisposable]);
	ss.initClass($tab_PluginPresentationLayer, $asm, {
		invokeCommand: function PluginPresentationLayer$InvokeCommand(commandNamespace, commandName, parameters) {
			var deferred = $.Deferred();
			var successHandler = function(pm) {
				deferred.resolve(pm);
			};
			var failureHandler = function(e) {
				deferred.reject();
			};
			var cmd = { commandName: commandName, commandNamespace: commandNamespace, commandParams: parameters };
			$tab_CommandController.SendCommand(new $tab_ClientCommand('immediatelySubtle', null, cmd, successHandler, failureHandler));
			return deferred.promise();
		},
		dispose: function PluginPresentationLayer$Dispose() {
			this.$disposables.dispose();
		},
		registerNotificationHandler: function PluginPresentationLayer$RegisterNotificationHandler(eventId, handler) {
			var appModel = $tab_ApplicationModel.get_instance();
			var unregisterHandle = appModel.registerNotificationHandler(eventId, function(model, context) {
				handler(model);
			});
			var disposable = function() {
				appModel.unRegisterNotificationHandler(eventId, unregisterHandle);
			};
			this.$disposables.add(disposable);
			return disposable;
		}
	}, null, [ss.IDisposable]);
	ss.initClass($tab_PresentationModel, $asm, {});
	ss.initClass($tab_PresModelPath, $asm, {
		get_pathList: function PresModelPath$get_PathList() {
			return this.$path;
		},
		get_pathAsString: function PresModelPath$get_PathAsString() {
			if (ss.isNullOrUndefined(this.$pathAsString)) {
				this.$pathAsString = _.map(this.$path, function(item) {
					return item.name;
				}).join(':');
			}
			return this.$pathAsString;
		},
		add: function PresModelPath$Add(s) {
			this.$path.push(s);
			this.$pathAsString = null;
		},
		reverse: function PresModelPath$Reverse() {
			this.$path.reverse();
			this.$pathAsString = null;
		}
	});
	ss.initClass($tab_PresModelPathItem, $asm, {});
	ss.initEnum($tab_PresModelPathItemType, $asm, { simple: 0, array: 1 });
	ss.initClass($tab_ProgressiveLoader, $asm, {
		add_progressiveLoad: function ProgressiveLoader$add_ProgressiveLoad(value) {
			this.$1$ProgressiveLoadField = ss.delegateCombine(this.$1$ProgressiveLoadField, value);
		},
		remove_progressiveLoad: function ProgressiveLoader$remove_ProgressiveLoad(value) {
			this.$1$ProgressiveLoadField = ss.delegateRemove(this.$1$ProgressiveLoadField, value);
		},
		add_progressiveLoadComplete: function ProgressiveLoader$add_ProgressiveLoadComplete(value) {
			this.$1$ProgressiveLoadCompleteField = ss.delegateCombine(this.$1$ProgressiveLoadCompleteField, value);
		},
		remove_progressiveLoadComplete: function ProgressiveLoader$remove_ProgressiveLoadComplete(value) {
			this.$1$ProgressiveLoadCompleteField = ss.delegateRemove(this.$1$ProgressiveLoadCompleteField, value);
		},
		get_hasZonesToLoad: function ProgressiveLoader$get_HasZonesToLoad() {
			if (ss.isValue(this.$offscreenVizZones) && ss.getKeyCount(this.$offscreenVizZones) > 0) {
				return true;
			}
			if (ss.isNullOrUndefined(this.$deferredZonesByPriority)) {
				return false;
			}
			for (var $t1 = 0; $t1 < $tab_ProgressiveLoader.$zoneCreationOrder.length; $t1++) {
				var priority = $tab_ProgressiveLoader.$zoneCreationOrder[$t1];
				if (ss.isNullOrUndefined(this.$deferredZonesByPriority[priority])) {
					continue;
				}
				return true;
			}
			return false;
		},
		extractZoneContent: function ProgressiveLoader$ExtractZoneContent(appModel) {
			if (!$tab_ProgressiveLoader.$validateZonesPath(appModel)) {
				return appModel;
			}
			var localZonesRoot = this.$extractAndCloneZonesRoot(appModel);
			if (ss.isNullOrUndefined(localZonesRoot)) {
				return appModel;
			}
			this.$updateZoneTypeMap(localZonesRoot);
			localZonesRoot.zones = this.$extractDeferredZones(localZonesRoot.zones);
			return appModel;
		},
		updateZonesWithVizData: function ProgressiveLoader$UpdateZonesWithVizData(vizDatas, context) {
			if (ss.isNullOrUndefined(this.$vizZones) || ss.getKeyCount(this.$vizZones) === 0) {
				return;
			}
			$tab_VizDataUtils.addVizDataToZones(vizDatas.presModelMap, this.$vizZones);
			var $t1 = _.keys(this.$vizZones);
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var zoneID = $t1[$t2];
				var zm = this.$zoneModels[zoneID] || this.$createZoneModel(this.$vizZones[zoneID]);
				if (ss.isValue(zm) && ss.isValue(zm.get_visualModel())) {
					var vm = zm.get_visualModel();
					vm.update(vm.pm, context);
				}
			}
		},
		processModelUpdate: function ProgressiveLoader$ProcessModelUpdate(appModel, context, local) {
			if (!$tab_ProgressiveLoader.$validateZonesPath(appModel) || !this.get_hasZonesToLoad()) {
				return appModel;
			}
			var localZonesRoot = this.$extractAndCloneZonesRoot(appModel);
			if (ss.isNullOrUndefined(localZonesRoot)) {
				return appModel;
			}
			this.$updateZoneTypeMap(localZonesRoot);
			var oldVal = $tab_Model.removeUndefinedBoolsOnSwapCopy;
			if (local) {
				$tab_Model.removeUndefinedBoolsOnSwapCopy = false;
			}
			try {
				var zonesModel = localZonesRoot.zones;
				var $t1 = _.keys(zonesModel);
				for (var $t2 = 0; $t2 < $t1.length; $t2++) {
					var zoneKey = $t1[$t2];
					var zonePM = zonesModel[zoneKey];
					if (ss.isNullOrUndefined(zonePM)) {
						continue;
					}
					var zoneType = this.$getZoneType(zonePM);
					if (!ss.contains($tab_ProgressiveLoader.zonesThatDeferContentCreation, zoneType)) {
						continue;
					}
					var found = false;
					var zoneID = zonePM.zoneId;
					var prioritiesToCheck = [$tab_ProgressiveLoader.$zonePriorityMap[zoneType], $tab_ProgressiveLoader.$offscreenPriority];
					for (var $t3 = 0; $t3 < prioritiesToCheck.length; $t3++) {
						var priority = prioritiesToCheck[$t3];
						var deferredZones = this.$deferredZonesByPriority[priority];
						if (ss.isValue(deferredZones)) {
							var zoneCount = deferredZones.length;
							for (var i = 0; i < zoneCount; i++) {
								var deferredZone = deferredZones[i];
								if (ss.isValue(deferredZone) && deferredZone.zoneId === zoneID) {
									found = true;
									deferredZones[i] = this.$cloneAndUpdateZonePM(deferredZone, zonePM, context);
									break;
								}
							}
						}
						if (found) {
							break;
						}
					}
					if (!found && zoneType === 'viz') {
						var $t4 = _.keys(this.$offscreenVizZones);
						for (var $t5 = 0; $t5 < $t4.length; $t5++) {
							var sheetName = $t4[$t5];
							var offscreenZonePM = this.$offscreenVizZones[sheetName];
							if (zoneID === offscreenZonePM.zoneId) {
								found = true;
								this.$offscreenVizZones[sheetName] = this.$cloneAndUpdateZonePM(offscreenZonePM, zonePM, context);
								break;
							}
						}
					}
					if (found) {
						zonePM = $tab_ProgressiveLoader.removeZoneContent(zonePM);
					}
				}
			}
			finally {
				$tab_Model.removeUndefinedBoolsOnSwapCopy = oldVal;
			}
			return appModel;
		},
		start: function ProgressiveLoader$Start() {
			if (!this.get_hasZonesToLoad()) {
				this.$fireLoadCompleteEvent();
				this.$reset();
				return;
			}
			this.$scheduleCallback();
			this.$reprioritizeNonVisibleZones();
			this.$sortDeferredZones();
		},
		abort: function ProgressiveLoader$Abort() {
			this.stopTimers();
			this.$reset();
		},
		setViewport: function ProgressiveLoader$SetViewport(viewport) {
			var dimensions = viewport.get_dimensions();
			if (dimensions.w === 1 && dimensions.h === 1) {
				return;
			}
			this.$viewportRect = { x: dimensions.l, y: dimensions.t, w: dimensions.w, h: dimensions.h };
			this.$reprioritizeNonVisibleZones();
		},
		getPendingVisuals: function ProgressiveLoader$GetPendingVisuals() {
			var pendingVisuals = {};
			var $t1 = _.keys(this.$vizZones);
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var zoneID = $t1[$t2];
				var sheetName = this.$vizZones[zoneID].worksheet;
				var vm = this.getPendingVisual(sheetName);
				if (ss.isValue(vm)) {
					pendingVisuals[sheetName] = vm;
				}
			}
			return pendingVisuals;
		},
		getPendingVisual: function ProgressiveLoader$GetPendingVisual(sheetName) {
			var zonePM = null;
			var $t1 = _.keys(this.$vizZones);
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var key = $t1[$t2];
				if (ss.referenceEquals(this.$vizZones[key].worksheet, sheetName)) {
					zonePM = this.$vizZones[key];
					break;
				}
			}
			if (ss.isNullOrUndefined(zonePM)) {
				return null;
			}
			var zm = this.$zoneModels[zonePM.zoneId] || this.$createZoneModel(zonePM);
			return zm.get_visualModel();
		},
		getPendingZoneContentModel: function ProgressiveLoader$GetPendingZoneContentModel(zoneId) {
			if (ss.isNullOrUndefined(this.$pendingZoneContentModels)) {
				return null;
			}
			return this.$pendingZoneContentModels[zoneId];
		},
		stopTimers: function ProgressiveLoader$StopTimers() {
			if (ss.isValue(this.$timer)) {
				if (ss.isValue(tab.FeatureParamsLookup.getInt(39))) {
					window.clearTimeout(ss.unbox(this.$timer));
				}
				else {
					tab.WindowHelper.cancelAnimationFrame(ss.unbox(this.$timer));
				}
				this.$timer = null;
			}
		},
		$reset: function ProgressiveLoader$Reset() {
			this.$deferredZonesByPriority = null;
			this.$offscreenVizZones = null;
			this.$vizZones = null;
			this.$zoneModels = null;
			this.$pendingZoneContentModels = null;
			this.$updateRoot = null;
			this.$timer = null;
			this.$viewportRect = null;
			ss.clearKeys(this.$zoneTypeMap);
		},
		$getNextZoneBatch: function ProgressiveLoader$GetNextZoneBatch() {
			var zoneBatch = {};
			for (var $t1 = 0; $t1 < $tab_ProgressiveLoader.$zoneCreationOrder.length; $t1++) {
				var priority = $tab_ProgressiveLoader.$zoneCreationOrder[$t1];
				if (priority === $tab_ProgressiveLoader.$offscreenPriority && ss.isValue(this.$offscreenVizZones) && ss.getKeyCount(this.$offscreenVizZones) > 0) {
					this.$deferredZonesByPriority[$tab_ProgressiveLoader.$offscreenPriority] = this.$deferredZonesByPriority[$tab_ProgressiveLoader.$offscreenPriority] || [];
					var $t2 = _.keys(this.$offscreenVizZones);
					for (var $t3 = 0; $t3 < $t2.length; $t3++) {
						var sheetName = $t2[$t3];
						this.$deferredZonesByPriority[$tab_ProgressiveLoader.$offscreenPriority].push(this.$offscreenVizZones[sheetName]);
					}
					this.$offscreenVizZones = null;
				}
				var zones = this.$deferredZonesByPriority[priority];
				if (ss.isNullOrUndefined(zones)) {
					continue;
				}
				var numZones = zones.length;
				var batchInfo = $tab_ProgressiveLoader.$priorityBatchSize[priority];
				var batchSize = 0;
				if (batchInfo.item1 === -1) {
					batchSize = numZones;
				}
				else {
					var floatBatchSize = batchInfo.item2 * numZones;
					if (batchInfo.item1 < floatBatchSize) {
						var zonesRemaining = 0;
						for (var $t4 = 0; $t4 < zones.length; $t4++) {
							var zone = zones[$t4];
							if (ss.isValue(zone)) {
								++zonesRemaining;
							}
						}
						batchSize = Math.floor(floatBatchSize);
						if (zonesRemaining % batchSize > 0) {
							batchSize = batchSize + 1;
						}
					}
					else {
						batchSize = batchInfo.item1;
					}
				}
				var zonesAdded = 0;
				var i = 0;
				while (zonesAdded < batchSize && i < numZones) {
					var zone1 = zones[i];
					zones[i] = null;
					i++;
					if (ss.isNullOrUndefined(zone1)) {
						continue;
					}
					if ($tab_ProgressiveLoader.$isDependentZoneType(this.$getZoneType(zone1))) {
						var sheetName1 = zone1.worksheet;
						if (ss.isValue(this.$offscreenVizZones) && ss.keyExists(this.$offscreenVizZones, sheetName1)) {
							var vizZone = this.$offscreenVizZones[sheetName1];
							delete this.$offscreenVizZones[sheetName1];
							delete this.$vizZones[vizZone.zoneId];
							zoneBatch[vizZone.zoneId.toString()] = vizZone;
						}
					}
					delete this.$vizZones[zone1.zoneId];
					var zoneModel = this.$zoneModels[zone1.zoneId];
					if (ss.isValue(zoneModel)) {
						delete this.$zoneModels[zone1.zoneId];
						this.$pendingZoneContentModels = this.$pendingZoneContentModels || {};
						this.$pendingZoneContentModels[zone1.zoneId] = zoneModel.get_model();
					}
					zoneBatch[zone1.zoneId.toString()] = zone1;
					++zonesAdded;
				}
				if (i === numZones) {
					this.$deferredZonesByPriority[priority] = null;
				}
				break;
			}
			return zoneBatch;
		},
		$isZoneVisible: function ProgressiveLoader$IsZoneVisible(zonePM) {
			if (ss.isNullOrUndefined(this.$viewportRect)) {
				var self = new tab.WindowHelper(window.self);
				var viewportWidth = self.get_innerWidth();
				var viewportHeight = self.get_innerHeight();
				var viewportLeft = self.get_pageXOffset();
				var viewportTop = self.get_pageYOffset();
				this.$viewportRect = { x: viewportLeft, y: viewportTop, w: viewportWidth, h: viewportHeight };
			}
			var zoneRect = { x: zonePM.zoneCommon.x, y: zonePM.zoneCommon.y, w: zonePM.zoneCommon.w, h: zonePM.zoneCommon.h };
			return tab.RectXYUtil.intersectsWith(zoneRect, this.$viewportRect);
		},
		$buildProgressiveUpdate: function ProgressiveLoader$BuildProgressiveUpdate() {
			ss.Debug.assert(ss.isValue(this.$updateRoot), 'No ApplicationPresModel root to be used with Progressive Update');
			var zoneBatch = this.$getNextZoneBatch();
			if (ss.isNullOrUndefined(zoneBatch) || ss.getKeyCount(zoneBatch) === 0) {
				return null;
			}
			var appUpdate = tab.MiscUtil.cloneObject(this.$updateRoot);
			$tab_ProgressiveLoader.getZoneRoot(appUpdate).zones = zoneBatch;
			return appUpdate;
		},
		$scheduleCallback: function ProgressiveLoader$ScheduleCallback() {
			var testDelay = tab.FeatureParamsLookup.getInt(39);
			if (ss.isValue(testDelay)) {
				this.$timer = window.setTimeout(ss.mkdel(this, this.$progressiveLoadCallback), ss.unbox(testDelay));
			}
			else {
				this.$timer = tab.WindowHelper.requestAnimationFrame(ss.mkdel(this, function() {
					this.$progressiveLoadCallback();
				}));
			}
		},
		$progressiveLoadCallback: function ProgressiveLoader$ProgressiveLoadCallback() {
			ss.Debug.assert(this.get_hasZonesToLoad(), 'Progressive load callback called with no zones to load');
			var progressiveAppModel = this.$buildProgressiveUpdate();
			var zonesLeft = this.get_hasZonesToLoad();
			if (zonesLeft) {
				this.$scheduleCallback();
			}
			this.$fireProgressiveLoadEvent(progressiveAppModel, !zonesLeft);
			if (!zonesLeft) {
				this.$fireLoadCompleteEvent();
				this.$reset();
			}
		},
		$fireProgressiveLoadEvent: function ProgressiveLoader$FireProgressiveLoadEvent(progressiveAppModel, final1) {
			if (!ss.staticEquals(this.$1$ProgressiveLoadField, null)) {
				this.$1$ProgressiveLoadField(progressiveAppModel, final1);
			}
		},
		$fireLoadCompleteEvent: function ProgressiveLoader$FireLoadCompleteEvent() {
			if (!ss.staticEquals(this.$1$ProgressiveLoadCompleteField, null)) {
				this.$1$ProgressiveLoadCompleteField();
			}
		},
		$extractAndCloneZonesRoot: function ProgressiveLoader$ExtractAndCloneZonesRoot(appModel) {
			if (ss.isNullOrUndefined(appModel)) {
				return null;
			}
			var zoneRoot = $tab_ProgressiveLoader.getZoneRoot(appModel);
			if (ss.isNullOrUndefined(zoneRoot) && ss.isNullOrUndefined(this.$updateRoot)) {
				return null;
			}
			this.$cloneZonesRoot(appModel);
			return zoneRoot;
		},
		$extractDeferredZones: function ProgressiveLoader$ExtractDeferredZones(zonesModel) {
			if (ss.isNullOrUndefined(zonesModel)) {
				return null;
			}
			$tab_ProgressiveLoader.$initStaticLookups();
			this.$vizZones = {};
			this.$deferredZonesByPriority = {};
			this.$zoneModels = {};
			var $t1 = _.keys(zonesModel);
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var key = $t1[$t2];
				var zone = zonesModel[key];
				if (!ss.contains($tab_ProgressiveLoader.zonesThatDeferContentCreation, this.$getZoneType(zone))) {
					continue;
				}
				var clone = $tab_ProgressiveLoader.cloneZone(zone);
				zone = $tab_ProgressiveLoader.removeZoneContent(zone);
				var cloneType = this.$getZoneType(clone);
				if (cloneType === 'viz') {
					this.$vizZones[key] = clone;
				}
				var priority = 5;
				if (ss.keyExists($tab_ProgressiveLoader.$zonePriorityMap, cloneType)) {
					priority = $tab_ProgressiveLoader.$zonePriorityMap[cloneType];
				}
				this.$deferredZonesByPriority[priority] = this.$deferredZonesByPriority[priority] || [];
				this.$deferredZonesByPriority[priority].push(clone);
			}
			return zonesModel;
		},
		$reprioritizeNonVisibleZones: function ProgressiveLoader$ReprioritizeNonVisibleZones() {
			if (ss.isNullOrUndefined(this.$deferredZonesByPriority) || this.$checkedForNonVisibleZones) {
				return;
			}
			this.$offscreenVizZones = this.$offscreenVizZones || {};
			for (var $t1 = 0; $t1 < $tab_ProgressiveLoader.$zoneCreationOrder.length; $t1++) {
				var priority = $tab_ProgressiveLoader.$zoneCreationOrder[$t1];
				if (priority === $tab_ProgressiveLoader.$offscreenPriority) {
					continue;
				}
				var zones = this.$deferredZonesByPriority[priority];
				if (ss.isNullOrUndefined(zones) || zones.length === 0) {
					continue;
				}
				var visibleZoneCount = 0;
				var visibleZones = new Array(zones.length);
				for (var $t2 = 0; $t2 < zones.length; $t2++) {
					var zone = zones[$t2];
					if (this.$isZoneVisible(zone)) {
						visibleZones[visibleZoneCount] = zone;
						visibleZoneCount++;
					}
					else if (this.$getZoneType(zone) === 'viz') {
						this.$offscreenVizZones[zone.worksheet] = zone;
					}
					else {
						this.$deferredZonesByPriority[$tab_ProgressiveLoader.$offscreenPriority] = this.$deferredZonesByPriority[$tab_ProgressiveLoader.$offscreenPriority] || [];
						this.$deferredZonesByPriority[$tab_ProgressiveLoader.$offscreenPriority].push(zone);
					}
				}
				if (visibleZoneCount > 0) {
					visibleZones.length = visibleZoneCount;
					this.$deferredZonesByPriority[priority] = visibleZones;
				}
				else {
					this.$deferredZonesByPriority[priority] = null;
				}
			}
			this.$checkedForNonVisibleZones = true;
		},
		$sortZoneArray: function ProgressiveLoader$SortZoneArray(zones) {
			if (ss.isNullOrUndefined(zones) || zones.length === 0) {
				return null;
			}
			var zoneCount = zones.length;
			var priorityList = {};
			var zonePriorities = new Array(zoneCount);
			for (var i = 0; i < zoneCount; i++) {
				var zone = zones[i];
				var zonePriority = zone.zoneCommon.y * 5000 + zone.zoneCommon.x;
				while (ss.isValue(priorityList[zonePriority])) {
					zonePriority += 1;
				}
				priorityList[zonePriority] = zone;
				zonePriorities[i] = zonePriority;
			}
			zonePriorities = zonePriorities.sort(function(id1, id2) {
				return ((id1 > id2) ? 1 : -1);
			});
			for (var i1 = 0; i1 < zoneCount; i1++) {
				var key = zonePriorities[i1];
				var zone1 = priorityList[key];
				zones[i1] = zone1;
			}
			return zones;
		},
		$sortDeferredZones: function ProgressiveLoader$SortDeferredZones() {
			if (ss.isNullOrUndefined(this.$deferredZonesByPriority)) {
				return;
			}
			for (var $t1 = 0; $t1 < $tab_ProgressiveLoader.$zoneCreationOrder.length; $t1++) {
				var priority = $tab_ProgressiveLoader.$zoneCreationOrder[$t1];
				if (priority === $tab_ProgressiveLoader.$offscreenPriority) {
					continue;
				}
				var zones = this.$deferredZonesByPriority[priority];
				this.$deferredZonesByPriority[priority] = this.$sortZoneArray(zones);
			}
		},
		$createZoneModel: function ProgressiveLoader$CreateZoneModel(zonePM) {
			ss.Debug.assert(!ss.keyExists(this.$zoneModels, zonePM.zoneId), 'Creating ZoneModel that already exists');
			var dashModel = $tab_ModelUtils.findContentDashboard();
			var zm = new $tab_ZoneModel(dashModel.zonesModel, dashModel, zonePM.zoneId);
			zm.update(zonePM, $tab_NoopModelEventsHandler.get_noopContext());
			this.$zoneModels[zonePM.zoneId] = zm;
			return zm;
		},
		$cloneAndUpdateZonePM: function ProgressiveLoader$CloneAndUpdateZonePM(existingZoneData, newZoneData, context) {
			var zm = this.$zoneModels[existingZoneData.zoneId] || this.$createZoneModel(existingZoneData);
			var clone = $tab_ProgressiveLoader.cloneZone(newZoneData);
			zm.update(clone, context);
			return clone;
		},
		$updateZoneTypeMap: function ProgressiveLoader$UpdateZoneTypeMap(dashboardPresModel) {
			$.extend(this.$zoneTypeMap, $tab_ProgressiveLoader.$buildZoneTypeMap(dashboardPresModel));
		},
		$getZoneType: function ProgressiveLoader$GetZoneType(zonePresModel) {
			if (ss.isValue(zonePresModel.zoneCommon)) {
				return zonePresModel.zoneCommon.zoneType;
			}
			return ss.coalesce(this.$zoneTypeMap[zonePresModel.zoneId], 'invalid');
		},
		$cloneZonesRoot: function ProgressiveLoader$CloneZonesRoot(appModel) {
			if (ss.isNullOrUndefined(appModel)) {
				return;
			}
			var existingPMPtr = this.$updateRoot;
			var newPMPtr = appModel;
			var newRootPtr = null;
			this.$updateRoot = $tab_ProgressiveLoader.$cloneOrReturnDefault(newPMPtr, existingPMPtr);
			newRootPtr = this.$updateRoot;
			newPMPtr = newPMPtr.workbookPresModel;
			existingPMPtr = (ss.isNullOrUndefined(existingPMPtr) ? null : existingPMPtr.workbookPresModel);
			newRootPtr.workbookPresModel = $tab_ProgressiveLoader.$cloneOrReturnDefault(newPMPtr, existingPMPtr);
			if (ss.isNullOrUndefined(newPMPtr)) {
				return;
			}
			newRootPtr = newRootPtr.workbookPresModel;
			newPMPtr = newPMPtr.dashboardPresModel;
			existingPMPtr = (ss.isNullOrUndefined(existingPMPtr) ? null : existingPMPtr.dashboardPresModel);
			newRootPtr.dashboardPresModel = $tab_ProgressiveLoader.$cloneOrReturnDefault(newPMPtr, existingPMPtr);
			if (ss.isNullOrUndefined(newPMPtr)) {
				return;
			}
			if (appModel.workbookPresModel.dashboardPresModel.isStory) {
				newRootPtr = newRootPtr.dashboardPresModel;
				newPMPtr = newPMPtr.zones;
				existingPMPtr = (ss.isNullOrUndefined(existingPMPtr) ? null : existingPMPtr.zones);
				var flipboardZonePM = null;
				var flipboardZoneKey = '';
				if (ss.isValue(newPMPtr)) {
					var zones = newPMPtr;
					var $t1 = _.keys(zones);
					for (var $t2 = 0; $t2 < $t1.length; $t2++) {
						var key = $t1[$t2];
						if (this.$getZoneType(zones[key]) !== 'flipboard') {
							continue;
						}
						flipboardZonePM = zones[key];
						flipboardZoneKey = key;
						break;
					}
				}
				if (ss.isNullOrUndefined(flipboardZonePM)) {
					newRootPtr.zones = existingPMPtr;
					return;
				}
				newRootPtr.zones = {};
				newRootPtr.zones[flipboardZoneKey] = $tab_PresentationModel.cloneObjWithScalarsOnly(flipboardZonePM);
				newRootPtr = newRootPtr.zones[flipboardZoneKey];
				newPMPtr = newPMPtr[flipboardZoneKey].presModelHolder;
				existingPMPtr = (ss.isNullOrUndefined(existingPMPtr) ? null : existingPMPtr[flipboardZoneKey].presModelHolder);
				newRootPtr.presModelHolder = $tab_ProgressiveLoader.$cloneOrReturnDefault(newPMPtr, existingPMPtr);
				if (ss.isNullOrUndefined(newPMPtr)) {
					return;
				}
				newRootPtr = newRootPtr.presModelHolder;
				newPMPtr = newPMPtr['flipboard'];
				existingPMPtr = (ss.isNullOrUndefined(existingPMPtr) ? null : existingPMPtr['flipboard']);
				newRootPtr['flipboard'] = $tab_ProgressiveLoader.$cloneOrReturnDefault(newPMPtr, existingPMPtr);
				if (ss.isNullOrUndefined(newPMPtr)) {
					return;
				}
				var storyPointId = newPMPtr.activeStoryPointId;
				newRootPtr = newRootPtr['flipboard'];
				newPMPtr = newPMPtr.storyPoints;
				existingPMPtr = (ss.isNullOrUndefined(existingPMPtr) ? null : existingPMPtr.storyPoints);
				newRootPtr.storyPoints = $tab_ProgressiveLoader.$cloneOrReturnDefault(newPMPtr, existingPMPtr);
				if (ss.isNullOrUndefined(newPMPtr)) {
					return;
				}
				newRootPtr = newRootPtr.storyPoints;
				newPMPtr = newPMPtr[storyPointId.toString()];
				existingPMPtr = (ss.isNullOrUndefined(existingPMPtr) ? null : existingPMPtr[storyPointId.toString()]);
				newRootPtr[storyPointId.toString()] = $tab_ProgressiveLoader.$cloneOrReturnDefault(newPMPtr, existingPMPtr);
				if (ss.isNullOrUndefined(newPMPtr)) {
					return;
				}
				newRootPtr = newRootPtr[storyPointId.toString()];
				newPMPtr = newPMPtr.dashboardPresModel;
				existingPMPtr = (ss.isNullOrUndefined(existingPMPtr) ? null : existingPMPtr.dashboardPresModel);
				newRootPtr.dashboardPresModel = $tab_ProgressiveLoader.$cloneOrReturnDefault(newPMPtr, existingPMPtr);
			}
		}
	});
	ss.initClass($tab_QuantitativeColorLegendModel, $asm, {
		add_legendChanged: function QuantitativeColorLegendModel$add_LegendChanged(value) {
			this.$2$LegendChangedField = ss.delegateCombine(this.$2$LegendChangedField, value);
		},
		remove_legendChanged: function QuantitativeColorLegendModel$remove_LegendChanged(value) {
			this.$2$LegendChangedField = ss.delegateRemove(this.$2$LegendChangedField, value);
		},
		get_quantColorLegendPresModel: function QuantitativeColorLegendModel$get_QuantColorLegendPresModel() {
			return this.pm;
		},
		update: function QuantitativeColorLegendModel$Update(quantLegendPresModel, context) {
			if (this.isNewPresModelSameAsOld(quantLegendPresModel)) {
				return;
			}
			$tab_FontNotificationUtil.notifyFontsFromQuantitativeColorLegendPresModel(quantLegendPresModel);
			this.swapAndCopyPresModel(quantLegendPresModel);
			this.raiseEvent(this.$2$LegendChangedField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_QuantitativeFilterData, $asm, {
		get_filterField: function QuantitativeFilterData$get_FilterField() {
			return this.$fieldName;
		},
		get_currentMaxVal: function QuantitativeFilterData$get_CurrentMaxVal() {
			return this.$currentMaxVal;
		},
		get_currentMinVal: function QuantitativeFilterData$get_CurrentMinVal() {
			return this.$currentMinVal;
		},
		get_targetSheets: function QuantitativeFilterData$get_TargetSheets() {
			return this.$targetSheets;
		},
		get_previousMaxVal: function QuantitativeFilterData$get_PreviousMaxVal() {
			return this.$previousMaxVal;
		},
		get_previousMinVal: function QuantitativeFilterData$get_PreviousMinVal() {
			return this.$previousMinVal;
		},
		valueInRange: function QuantitativeFilterData$ValueInRange(val) {
			var valInRange = true;
			if (ss.isValue(this.$currentMinVal)) {
				valInRange = valInRange && tab.DoubleUtil.isGreaterThanOrApproximatelyEqual(val, ss.unbox(this.$currentMinVal));
			}
			if (ss.isValue(this.$currentMaxVal)) {
				valInRange = valInRange && tab.DoubleUtil.isLessThanOrApproximatelyEqual(val, ss.unbox(this.$currentMaxVal));
			}
			return valInRange;
		}
	});
	ss.initClass($tab_QuickFilterDisplayModel, $asm, {
		add_filterUpdated: function QuickFilterDisplayModel$add_FilterUpdated(value) {
			this.$2$FilterUpdatedField = ss.delegateCombine(this.$2$FilterUpdatedField, value);
		},
		remove_filterUpdated: function QuickFilterDisplayModel$remove_FilterUpdated(value) {
			this.$2$FilterUpdatedField = ss.delegateRemove(this.$2$FilterUpdatedField, value);
		},
		get_quickFilterModel: function QuickFilterDisplayModel$get_QuickFilterModel() {
			return this.$2$QuickFilterModelField;
		},
		set_quickFilterModel: function QuickFilterDisplayModel$set_QuickFilterModel(value) {
			this.$2$QuickFilterModelField = value;
		},
		get_quickFilterType: function QuickFilterDisplayModel$get_QuickFilterType() {
			return this.$2$QuickFilterTypeField;
		},
		set_quickFilterType: function QuickFilterDisplayModel$set_QuickFilterType(value) {
			this.$2$QuickFilterTypeField = value;
		},
		get_quickFilterCommands: function QuickFilterDisplayModel$get_QuickFilterCommands() {
			return this.get_$quickFilterDisplayPresModel().quickFilterCommands;
		},
		get_zoneHasTitle: function QuickFilterDisplayModel$get_ZoneHasTitle() {
			return ss.cast(this.parent, $tab_ZoneContentWrapperModel).get_zone().get_hasTitle();
		},
		get_titleCaption: function QuickFilterDisplayModel$get_TitleCaption() {
			return this.get_$quickFilterDisplayPresModel().quickFilterTitle.caption;
		},
		get_titleHtml: function QuickFilterDisplayModel$get_TitleHtml() {
			return this.get_$quickFilterDisplayPresModel().quickFilterTitle.html;
		},
		get_titleHeight: function QuickFilterDisplayModel$get_TitleHeight() {
			return this.get_$quickFilterDisplayPresModel().quickFilterTitle.h;
		},
		get_itemsHeight: function QuickFilterDisplayModel$get_ItemsHeight() {
			return this.get_$quickFilterDisplayPresModel().lineHeight;
		},
		get_itemsFontName: function QuickFilterDisplayModel$get_ItemsFontName() {
			return this.get_$quickFilterDisplayPresModel().textStyle.fontName.toString();
		},
		get_itemsFontSize: function QuickFilterDisplayModel$get_ItemsFontSize() {
			return this.get_$quickFilterDisplayPresModel().textStyle.fontSize + 'pt';
		},
		get_itemsTextColor: function QuickFilterDisplayModel$get_ItemsTextColor() {
			return this.get_$quickFilterDisplayPresModel().textStyle.color;
		},
		get_itemsFontWeight: function QuickFilterDisplayModel$get_ItemsFontWeight() {
			return this.get_$quickFilterDisplayPresModel().textStyle.fontWeight;
		},
		get_itemsFontStyle: function QuickFilterDisplayModel$get_ItemsFontStyle() {
			return this.get_$quickFilterDisplayPresModel().textStyle.fontStyle;
		},
		get_itemsTextDecoration: function QuickFilterDisplayModel$get_ItemsTextDecoration() {
			return this.get_$quickFilterDisplayPresModel().textStyle.textDecoration;
		},
		get_zoneBackgroundColor: function QuickFilterDisplayModel$get_ZoneBackgroundColor() {
			var zoneContentWrapperModel = ss.cast(this.parent, $tab_ZoneContentWrapperModel);
			return zoneContentWrapperModel.get_zone().pm.zoneCommon.styledBox.fillColor;
		},
		get_visualId: function QuickFilterDisplayModel$get_VisualId() {
			var zoneContentWrapperModel = ss.cast(this.parent, $tab_ZoneContentWrapperModel);
			return $tab_ModelUtils.getVisualId(zoneContentWrapperModel.get_zone().pm.sheet);
		},
		get_fieldName: function QuickFilterDisplayModel$get_FieldName() {
			return this.get_$quickFilterDisplayPresModel().quickFilter.fn;
		},
		get_$quickFilterDisplayPresModel: function QuickFilterDisplayModel$get_QuickFilterDisplayPresModel() {
			return this.pm;
		},
		update: function QuickFilterDisplayModel$Update(newPresModel, context) {
			ss.Debug.assert($tab_QuickFilterDisplayModel.supportsQuickFilterType(newPresModel), 'Catch uses of QuickFilterDisplayModel with not-yet-supported quick-filter types.');
			if (!this.isNewPresModelSameAsOld(newPresModel)) {
				if (ss.isValue(newPresModel)) {
					$tab_FontNotificationUtil.notifyFontsFromTextStylePresModel(newPresModel.textStyle);
				}
				this.swapAndCopyPresModel(newPresModel);
				if (newPresModel.quickFilter.quickFilterType !== this.get_quickFilterType()) {
					this.set_quickFilterModel(this.$quickFilterModelFromPresModel(newPresModel.quickFilter));
					this.set_quickFilterType(newPresModel.quickFilter.quickFilterType);
				}
				if (ss.isValue(this.get_quickFilterModel())) {
					this.get_quickFilterModel().update(newPresModel.quickFilter, context);
				}
				this.raiseEvent(this.$2$FilterUpdatedField, context);
			}
		},
		$quickFilterModelFromPresModel: function QuickFilterDisplayModel$QuickFilterModelFromPresModel(presModel) {
			switch (presModel.quickFilterType) {
				case 'categorical': {
					return new $tab_CategoricalQuickFilterModel(this);
				}
				default: {
					return null;
				}
			}
		}
	}, $tab_Model);
	ss.initClass($tab_RadialSelectionDistanceInfoModel, $asm, {
		get_radialSelectionDistanceInfoPresModel: function RadialSelectionDistanceInfoModel$get_RadialSelectionDistanceInfoPresModel() {
			return this.pm;
		},
		get_earthRadius: function RadialSelectionDistanceInfoModel$get_EarthRadius() {
			return this.get_radialSelectionDistanceInfoPresModel().earthRadius;
		},
		get_fontSizePixels: function RadialSelectionDistanceInfoModel$get_FontSizePixels() {
			return this.get_radialSelectionDistanceInfoPresModel().fontSize;
		},
		get_largeUnitDisplay: function RadialSelectionDistanceInfoModel$get_LargeUnitDisplay() {
			return this.get_radialSelectionDistanceInfoPresModel().largeUnitDisplay;
		},
		get_latLongRect: function RadialSelectionDistanceInfoModel$get_LatLongRect() {
			return this.get_radialSelectionDistanceInfoPresModel().mapLatLongRect;
		},
		get_mapHeight: function RadialSelectionDistanceInfoModel$get_MapHeight() {
			return this.get_radialSelectionDistanceInfoPresModel().h;
		},
		get_mapWidth: function RadialSelectionDistanceInfoModel$get_MapWidth() {
			return this.get_radialSelectionDistanceInfoPresModel().w;
		},
		get_readoutOffsetPixels: function RadialSelectionDistanceInfoModel$get_ReadoutOffsetPixels() {
			return this.get_radialSelectionDistanceInfoPresModel().readoutOffset;
		},
		get_shouldShowDistance: function RadialSelectionDistanceInfoModel$get_ShouldShowDistance() {
			return this.get_radialSelectionDistanceInfoPresModel().shouldShowDistance;
		},
		get_sigFigs: function RadialSelectionDistanceInfoModel$get_SigFigs() {
			return this.get_radialSelectionDistanceInfoPresModel().sigFigs;
		},
		get_smallToLargeUnitDivisor: function RadialSelectionDistanceInfoModel$get_SmallToLargeUnitDivisor() {
			return this.get_radialSelectionDistanceInfoPresModel().unitDivisor;
		},
		get_smallUnitDisplay: function RadialSelectionDistanceInfoModel$get_SmallUnitDisplay() {
			return this.get_radialSelectionDistanceInfoPresModel().smallUnitDisplay;
		},
		get_unitTransition: function RadialSelectionDistanceInfoModel$get_UnitTransition() {
			return this.get_radialSelectionDistanceInfoPresModel().unitTransition;
		},
		get_decimalMark: function RadialSelectionDistanceInfoModel$get_DecimalMark() {
			return this.get_radialSelectionDistanceInfoPresModel().decimalMark;
		},
		get_fontColor: function RadialSelectionDistanceInfoModel$get_FontColor() {
			return this.get_radialSelectionDistanceInfoPresModel().distanceFontColor;
		},
		update: function RadialSelectionDistanceInfoModel$Update(newPresModel) {
			if (!this.isNewPresModelSameAsOld(newPresModel)) {
				this.swapAndCopyPresModel(newPresModel);
			}
		}
	}, $tab_Model);
	ss.initClass($tab_RankTableCalcModel, $asm, {
		add_modelUpdated: function RankTableCalcModel$add_ModelUpdated(value) {
			this.$3$ModelUpdatedField = ss.delegateCombine(this.$3$ModelUpdatedField, value);
		},
		remove_modelUpdated: function RankTableCalcModel$remove_ModelUpdated(value) {
			this.$3$ModelUpdatedField = ss.delegateRemove(this.$3$ModelUpdatedField, value);
		},
		get_$rankPresModel: function RankTableCalcModel$get_RankPresModel() {
			return this.pm;
		},
		get_rankTypeValues: function RankTableCalcModel$get_RankTypeValues() {
			return this.get_$rankPresModel().rankTypeValues;
		},
		get_rankTypeCaptions: function RankTableCalcModel$get_RankTypeCaptions() {
			return this.get_$rankPresModel().rankTypeCaptions;
		},
		get_rankTypeIndex: function RankTableCalcModel$get_RankTypeIndex() {
			return this.get_$rankPresModel().rankTypeIndex;
		},
		get_rankType: function RankTableCalcModel$get_RankType() {
			return this.get_rankTypeValues()[this.get_rankTypeIndex()];
		},
		get_rankTypeState: function RankTableCalcModel$get_RankTypeState() {
			return this.get_$rankPresModel().rankTypeState;
		},
		get_sortDirectionValues: function RankTableCalcModel$get_SortDirectionValues() {
			return this.get_$rankPresModel().sortDirectionValues;
		},
		get_sortDirectionCaptions: function RankTableCalcModel$get_SortDirectionCaptions() {
			return this.get_$rankPresModel().sortDirectionCaptions;
		},
		get_sortDirectionIndex: function RankTableCalcModel$get_SortDirectionIndex() {
			return this.get_$rankPresModel().sortDirectionIndex;
		},
		get_sortDirection: function RankTableCalcModel$get_SortDirection() {
			return this.get_sortDirectionValues()[this.get_sortDirectionIndex()];
		},
		update: function RankTableCalcModel$Update(newPresModel, context) {
			this.simpleSwapToUpdate(newPresModel, this.$3$ModelUpdatedField, context);
		}
	}, $tab_TypeSpecificTableCalcModel);
	ss.initClass($tab_RelationalTableModel, $asm, {
		get_columns: function RelationalTableModel$get_Columns() {
			return this.$columns;
		},
		get_instanceType: function RelationalTableModel$get_InstanceType() {
			return 'relationalTable';
		},
		get_canHaveChildren: function RelationalTableModel$get_CanHaveChildren() {
			return true;
		},
		get_isUnsortedContainer: function RelationalTableModel$get_IsUnsortedContainer() {
			return true;
		},
		update: function RelationalTableModel$Update(pm, newColumns) {
			this.swapAndCopyPresModel(pm);
			this.$columns = newColumns;
		}
	}, $tab_FieldModel);
	ss.initClass($tab_RemoteClientCommand, $asm, {}, $tab_ClientCommand);
	ss.initClass($tab_ReplaceFileConnectionFromFileUploadCmd, $asm, {
		invoke: function ReplaceFileConnectionFromFileUploadCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand('replace-file-connection-from-file-upload', this.cmdParams));
		},
		validateInvokeParams: function ReplaceFileConnectionFromFileUploadCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'connectionName')) {
				throw new ss.Exception('missing param DocParams.ConnectionName');
			}
			if (!ss.keyExists(this.cmdParams, 'dsClass')) {
				throw new ss.Exception('missing param DocParams.DSClass');
			}
			if (!ss.keyExists(this.cmdParams, 'fileNames')) {
				throw new ss.Exception('missing param DocParams.FileNames');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ReplaceFileConnectionFromFileUploadCmd$Response]));
	ss.initClass($tab_ReplaceFileConnectionFromFileUploadCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_RepoPathObject, $asm, {
		get_workbookId: function RepoPathObject$get_WorkbookId() {
			return this.$workbookId;
		},
		get_sheetId: function RepoPathObject$get_SheetId() {
			return this.$sheetId;
		},
		get_customizedView: function RepoPathObject$get_CustomizedView() {
			return this.$customizedView;
		},
		get_originalViewURL: function RepoPathObject$get_OriginalViewURL() {
			return ss.formatString('{0}/{1}', this.get_workbookId(), this.get_sheetId());
		}
	});
	ss.initClass($tab_ResizeAxisRegionCmd, $asm, {
		invoke: function ResizeAxisRegionCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand('resize-axis-region', this.cmdParams));
		},
		validateInvokeParams: function ResizeAxisRegionCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'sizeDelta')) {
				throw new ss.Exception('missing param DocParams.SizeDifference');
			}
			if (!ss.keyExists(this.cmdParams, 'isXAxis')) {
				throw new ss.Exception('missing param DocParams.IsXAxis');
			}
			if (!ss.keyExists(this.cmdParams, 'isFolded')) {
				throw new ss.Exception('missing param DocParams.IsFolded');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ResizeAxisRegionCmd$Response]));
	ss.initClass($tab_ResizeAxisRegionCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_ResizeHeaderRegionCmd, $asm, {
		invoke: function ResizeHeaderRegionCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand('resize-header-region', this.cmdParams));
		},
		validateInvokeParams: function ResizeHeaderRegionCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'sizeDelta')) {
				throw new ss.Exception('missing param DocParams.SizeDifference');
			}
			if (!ss.keyExists(this.cmdParams, 'isXAxis')) {
				throw new ss.Exception('missing param DocParams.IsXAxis');
			}
			if (!ss.keyExists(this.cmdParams, 'regionPoint')) {
				throw new ss.Exception('missing param DocParams.RegionPoint');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ResizeHeaderRegionCmd$Response]));
	ss.initClass($tab_ResizeHeaderRegionCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_SaveServerCommands, $asm, {});
	ss.initClass($tab_SceneDataUtil, $asm, {});
	ss.initClass($tab_SceneElementModel, $asm, {
		get_sceneElementPM: function SceneElementModel$get_SceneElementPM() {
			return this.$2$SceneElementPMField;
		},
		set_sceneElementPM: function SceneElementModel$set_SceneElementPM(value) {
			this.$2$SceneElementPMField = value;
		},
		get_paneId: function SceneElementModel$get_PaneId() {
			return this.$2$PaneIdField;
		},
		set_paneId: function SceneElementModel$set_PaneId(value) {
			this.$2$PaneIdField = value;
		},
		get_index: function SceneElementModel$get_Index() {
			return this.get_sceneElementPM().uindex;
		},
		get_paneIndex: function SceneElementModel$get_PaneIndex() {
			return this.get_sceneElementPM().paneIndex;
		},
		get_tupleId: function SceneElementModel$get_TupleId() {
			return this.get_sceneElementPM().tupleId;
		},
		get_bounds: function SceneElementModel$get_Bounds() {
			return this.$2$BoundsField;
		},
		set_bounds: function SceneElementModel$set_Bounds(value) {
			this.$2$BoundsField = value;
		},
		get_visualPart: function SceneElementModel$get_VisualPart() {
			return this.get_sceneElementPM().visualPart;
		},
		get_detail: function SceneElementModel$get_Detail() {
			return this.get_sceneElementPM().sceneModelDetailEnum;
		},
		get_hitType: function SceneElementModel$get_HitType() {
			return this.get_sceneElementPM().sceneModelHitType;
		},
		get_detailId: function SceneElementModel$get_DetailId() {
			return this.get_sceneElementPM().detailId;
		},
		get_cellId: function SceneElementModel$get_CellId() {
			return this.get_sceneElementPM().cellId;
		},
		get_worldOffset: function SceneElementModel$get_WorldOffset() {
			return this.get_sceneElementPM().worldOffset;
		},
		get_markState: function SceneElementModel$get_MarkState() {
			return this.get_sceneElementPM().markState;
		},
		get_hitDistance: function SceneElementModel$get_HitDistance() {
			return this.get_sceneElementPM().distance;
		},
		get_overlayHit: function SceneElementModel$get_OverlayHit() {
			return this.get_sceneElementPM().useForOverlayHitTest;
		}
	}, $tab_Model);
	ss.initClass($tab_SceneModel, $asm, {
		add_newSceneModel: function SceneModel$add_NewSceneModel(value) {
			this.$2$NewSceneModelField = ss.delegateCombine(this.$2$NewSceneModelField, value);
		},
		remove_newSceneModel: function SceneModel$remove_NewSceneModel(value) {
			this.$2$NewSceneModelField = ss.delegateRemove(this.$2$NewSceneModelField, value);
		},
		get_visualListModels: function SceneModel$get_VisualListModels() {
			return this.$visualListModels;
		},
		get_refLineVisualLists: function SceneModel$get_RefLineVisualLists() {
			return this.$refLineVisualLists;
		},
		get_trendLineVisualLists: function SceneModel$get_TrendLineVisualLists() {
			return this.$trendLineVisualLists;
		},
		get_drawFirstParts: function SceneModel$get_DrawFirstParts() {
			return this.$drawFirstParts;
		},
		get_drawLastParts: function SceneModel$get_DrawLastParts() {
			return this.$drawLastParts;
		},
		get_backgroundColor: function SceneModel$get_BackgroundColor() {
			return this.$backgroundColor;
		},
		get_paneDescriptorCount: function SceneModel$get_PaneDescriptorCount() {
			return ss.getKeyCount(this.pm.pdMarksMap);
		},
		update: function SceneModel$Update(scenePresModel, context) {
			if (ss.isValue(scenePresModel.markShapeList)) {
				$tab_ApplicationModel.get_instance().get_shapeManager().updateCustomImageMap(scenePresModel.markShapeList);
			}
			this.$killInvalidVisualParts(scenePresModel);
			if (ss.isValue(scenePresModel.drawFirst)) {
				ss.clear(this.$drawFirstParts);
				for (var $t1 = 0; $t1 < scenePresModel.drawFirst.length; $t1++) {
					var vlistPM = scenePresModel.drawFirst[$t1];
					$tab_FontNotificationUtil.notifyFontsFromVisualListPresModel(vlistPM);
					var part = vlistPM.visualPart;
					if (!ss.keyExists(this.$visualListModels, part)) {
						this.$visualListModels[part] = new $tab_VisualListModel(this);
					}
					if (ss.contains(this.$drawFirstParts, part)) {
						continue;
					}
					this.$drawFirstParts.push(part);
					this.$visualListModels[part].update(vlistPM, context);
				}
			}
			if (ss.isValue(scenePresModel.drawLast)) {
				ss.clear(this.$drawLastParts);
				for (var $t2 = 0; $t2 < scenePresModel.drawLast.length; $t2++) {
					var vlistPM1 = scenePresModel.drawLast[$t2];
					$tab_FontNotificationUtil.notifyFontsFromVisualListPresModel(vlistPM1);
					var part1 = vlistPM1.visualPart;
					if (!ss.keyExists(this.$visualListModels, part1)) {
						this.$visualListModels[part1] = new $tab_VisualListModel(this);
					}
					this.$drawLastParts.push(part1);
					this.$visualListModels[part1].update(vlistPM1, context);
				}
			}
			if (ss.isValue(scenePresModel.panes)) {
				for (var $t3 = 0; $t3 < scenePresModel.panes.length; $t3++) {
					var pane = scenePresModel.panes[$t3];
					for (var $t4 = 0; $t4 < pane.drawPane.length; $t4++) {
						var vlistPM2 = pane.drawPane[$t4];
						$tab_FontNotificationUtil.notifyFontsFromVisualListPresModel(vlistPM2);
					}
				}
			}
			if (ss.isValue(scenePresModel.pdMarksMap)) {
				var pdMarks = _.values(scenePresModel.pdMarksMap);
				for (var $t5 = 0; $t5 < pdMarks.length; $t5++) {
					var pdMark = pdMarks[$t5];
					if (ss.isValue(pdMark)) {
						$tab_FontNotificationUtil.notifyFontsFromPDMarksPresModel(pdMark);
					}
				}
			}
			var clearUserPanes = ss.isNullOrUndefined(scenePresModel.userPaneInfo);
			this.swapAndCopyPresModel(scenePresModel);
			if (clearUserPanes) {
				this.pm.userPaneInfo = null;
			}
			this.$backgroundColor = $tab_SceneModel.$getBackgroundColor(this.$visualListModels, scenePresModel);
			this.$cacheNewRefAndTrendLines();
			this.raiseEvent(this.$2$NewSceneModelField, context);
		},
		getMutableCopyOfPresModel: function SceneModel$GetMutableCopyOfPresModel() {
			return this.getMutableCopyOfPresModelInternal(true);
		},
		$cacheNewRefAndTrendLines: function SceneModel$CacheNewRefAndTrendLines() {
			ss.clear(this.$refLineVisualLists);
			ss.clear(this.$trendLineVisualLists);
			if (ss.isValue(this.pm.panes)) {
				for (var $t1 = 0; $t1 < this.pm.panes.length; $t1++) {
					var ppm = this.pm.panes[$t1];
					if (ss.isValue(ppm.drawPane)) {
						for (var $t2 = 0; $t2 < ppm.drawPane.length; $t2++) {
							var vlpm = ppm.drawPane[$t2];
							if (ss.isValue(vlpm)) {
								if (vlpm.visualPart === 'ref-lines') {
									this.$refLineVisualLists.push(vlpm);
								}
								else if (vlpm.visualPart === 'trend-lines') {
									this.$trendLineVisualLists.push(vlpm);
								}
							}
						}
					}
				}
			}
		},
		$killInvalidVisualParts: function SceneModel$KillInvalidVisualParts(newScenePresModel) {
			var $t1 = new ss.ObjectEnumerator(this.get_visualListModels());
			try {
				while ($t1.moveNext()) {
					var pair = $t1.current();
					var currentPart = { $: pair.key };
					var visualPartExist = _.find(newScenePresModel.drawFirst, ss.mkdel({ currentPart: currentPart }, function(vlpm) {
						return this.currentPart.$ === vlpm.visualPart;
					}));
					if (ss.isNullOrUndefined(visualPartExist)) {
						visualPartExist = _.find(newScenePresModel.drawLast, ss.mkdel({ currentPart: currentPart }, function(vlpm1) {
							return this.currentPart.$ === vlpm1.visualPart;
						}));
					}
					if (ss.isNullOrUndefined(visualPartExist)) {
						delete this.get_visualListModels()[currentPart.$];
					}
				}
			}
			finally {
				$t1.dispose();
			}
		}
	}, $tab_Model);
	ss.initClass($tab_SceneUtils, $asm, {});
	ss.initClass($tab_Schedule, $asm, {
		get_schedulePresModel: function Schedule$get_SchedulePresModel() {
			return this.$schedulePresModel;
		},
		set_schedulePresModel: function Schedule$set_SchedulePresModel(value) {
			this.$schedulePresModel = value;
		},
		get_scheduleFrequencyDescription: function Schedule$get_ScheduleFrequencyDescription() {
			return this.$scheduleFrequencyDescription;
		},
		set_scheduleFrequencyDescription: function Schedule$set_ScheduleFrequencyDescription(value) {
			this.$scheduleFrequencyDescription = value;
		},
		generateFrequencyDescription: function Schedule$GenerateFrequencyDescription() {
			var now = new Date();
			var clientTimeZoneOffset = 0 - now.getTimezoneOffset();
			var diffMinutes = 0;
			var newStartTime = this.$schedulePresModel.scheduleDetails.startTime;
			var dayOffset = 0;
			var description = '';
			if (tsConfig.display_schedules_in_client_timezone) {
				diffMinutes = clientTimeZoneOffset - this.$schedulePresModel.serverTimezoneOffset;
				newStartTime = $tab_Schedule.$offsetStartTime(this.$schedulePresModel.scheduleDetails.startTime, diffMinutes);
				dayOffset = $tab_Schedule.$computeDayOffset(this.$schedulePresModel.scheduleDetails.startTime, diffMinutes);
			}
			switch (this.$schedulePresModel.scheduleType) {
				case 'Hourly': {
					description = this.$formatHourly(newStartTime, diffMinutes);
					break;
				}
				case 'Daily': {
					description = this.$formatDaily(newStartTime);
					break;
				}
				case 'Weekly': {
					description = this.$formatWeekly(newStartTime, dayOffset);
					break;
				}
				case 'Monthly': {
					description = this.$formatMonthly(newStartTime, dayOffset);
					break;
				}
				default: {
					throw new ss.Exception('Unknown schedule type: ' + this.$schedulePresModel.scheduleType);
				}
			}
			if (!this.$schedulePresModel.parallel) {
				description = tab.Strings.SerialScheduleDescription(description, tab.Strings.SerialScheduleDescriptionSuffix);
			}
			return description;
		},
		$translateDayHourlySchedule: function Schedule$TranslateDayHourlySchedule(recurrenceMinutes, minutesAfterHour, startTime) {
			var frequency = ss.Int32.div(recurrenceMinutes, 60);
			if (minutesAfterHour === 0) {
				if (recurrenceMinutes < 60) {
					return tab.Strings.ScheduleEveryXMinutesDescription(recurrenceMinutes);
				}
				else if (frequency === 1) {
					return tab.Strings.ScheduleEveryOneHourDescription;
				}
				else {
					return tab.Strings.ScheduleEveryXHoursStartingAtYDescription(ss.Int32.div(recurrenceMinutes, 60), $tab_Schedule.$formatTime(startTime));
				}
			}
			else if (minutesAfterHour === 15) {
				if (recurrenceMinutes < 60) {
					if (recurrenceMinutes === 30) {
						return tab.Strings.ScheduleEvery30MinutesDescription;
					}
					else {
						return tab.Strings.ScheduleEveryXMinutesDescription(recurrenceMinutes);
					}
				}
				else {
					if (frequency === 1) {
						return tab.Strings.ScheduleEveryOneHourAtXMinutesPastDescription(minutesAfterHour);
					}
					return tab.Strings.ScheduleEveryXHoursStartingAtYDescription(frequency, $tab_Schedule.$formatTime(startTime));
				}
			}
			else if (minutesAfterHour === 30) {
				if (recurrenceMinutes < 60) {
					return tab.Strings.ScheduleEveryXMinutesDescription(recurrenceMinutes);
				}
				else {
					if (frequency === 1) {
						return tab.Strings.ScheduleEveryOneHourAtXMinutesPastDescription(minutesAfterHour);
					}
					return tab.Strings.ScheduleEveryXHoursStartingAtYDescription(frequency, $tab_Schedule.$formatTime(startTime));
				}
			}
			else if (minutesAfterHour === 45) {
				if (recurrenceMinutes < 60) {
					if (recurrenceMinutes === 30) {
						return tab.Strings.ScheduleEvery30MinutesDescription;
					}
					else {
						return tab.Strings.ScheduleEveryXMinutesDescription(recurrenceMinutes);
					}
				}
				else {
					if (frequency === 1) {
						return tab.Strings.ScheduleEveryOneHourAtXMinutesPastDescription(minutesAfterHour);
					}
					return tab.Strings.ScheduleEveryXHoursStartingAtYDescription(frequency, $tab_Schedule.$formatTime(startTime));
				}
			}
			else {
				throw new ss.Exception('Unsupported schedule minutes after the hour: ' + minutesAfterHour);
			}
		},
		$formatHourly: function Schedule$FormatHourly(startTime, diffMinutes) {
			var newEnd = (this.$schedulePresModel.scheduleDetails.endTime + diffMinutes) % $tab_Schedule.$minutesPerDay;
			if (startTime === newEnd) {
				return this.$translateDayHourlySchedule(this.$schedulePresModel.scheduleDetails.recurrenceMinutes, startTime % 60, startTime);
			}
			var frequency;
			if (this.$schedulePresModel.scheduleDetails.recurrenceMinutes < 60) {
				frequency = tab.Strings.Minutes(this.$schedulePresModel.scheduleDetails.recurrenceMinutes);
			}
			else if (this.$schedulePresModel.scheduleDetails.recurrenceMinutes > 60) {
				frequency = tab.Strings.Hours(ss.Int32.div(this.$schedulePresModel.scheduleDetails.recurrenceMinutes, 60));
			}
			else {
				frequency = tab.Strings.Hour;
			}
			return tab.Strings.ScheduleHourlyDescription(frequency, $tab_Schedule.$formatTime(startTime), $tab_Schedule.$formatTime(newEnd));
		},
		$formatDaily: function Schedule$FormatDaily(startTime) {
			return tab.Strings.ScheduleDailyDescription($tab_Schedule.$formatTime(startTime));
		},
		$formatWeekly: function Schedule$FormatWeekly(startTime, dayOffset) {
			var recurrenceDaysOfWeek = this.$schedulePresModel.scheduleDetails.recurrenceDaysOfWeek;
			if (dayOffset !== 0) {
				recurrenceDaysOfWeek = this.$shiftDayOfWeek(this.$schedulePresModel.scheduleDetails.recurrenceDaysOfWeek, dayOffset);
			}
			var days = this.$formatDays(recurrenceDaysOfWeek);
			return tab.Strings.ScheduleWeeklyDescription($tab_Schedule.$formatTime(startTime), days);
		},
		$shiftDayOfWeek: function Schedule$ShiftDayOfWeek(recurrenceDaysOfWeek, dayOffset) {
			var releventDaysOfWeek = [];
			for (var i = 0; i < recurrenceDaysOfWeek.length; i++) {
				var dayIndex = ss.indexOf($tab_Schedule.$dayNames, recurrenceDaysOfWeek[i]);
				var shiftedDayIndex = (dayIndex + dayOffset + $tab_Schedule.$dayNames.length) % $tab_Schedule.$dayNames.length;
				releventDaysOfWeek.push($tab_Schedule.$dayNames[shiftedDayIndex]);
			}
			return releventDaysOfWeek;
		},
		$formatDays: function Schedule$FormatDays(recurrenceDaysOfWeek) {
			switch (recurrenceDaysOfWeek.length) {
				case 1: {
					return this.$dayMap[recurrenceDaysOfWeek[0]];
				}
				case 2: {
					return tab.Strings.ListLengthTwo(this.$dayMap[recurrenceDaysOfWeek[0]], this.$dayMap[recurrenceDaysOfWeek[1]]);
				}
				case 3: {
					return tab.Strings.ListLengthThree(this.$dayMap[recurrenceDaysOfWeek[0]], this.$dayMap[recurrenceDaysOfWeek[1]], this.$dayMap[recurrenceDaysOfWeek[2]]);
				}
				case 4: {
					return tab.Strings.ListLengthFour(this.$dayMap[recurrenceDaysOfWeek[0]], this.$dayMap[recurrenceDaysOfWeek[1]], this.$dayMap[recurrenceDaysOfWeek[2]], this.$dayMap[recurrenceDaysOfWeek[3]]);
				}
				case 5: {
					return tab.Strings.ListLengthFive(this.$dayMap[recurrenceDaysOfWeek[0]], this.$dayMap[recurrenceDaysOfWeek[1]], this.$dayMap[recurrenceDaysOfWeek[2]], this.$dayMap[recurrenceDaysOfWeek[3]], this.$dayMap[recurrenceDaysOfWeek[4]]);
				}
				case 6: {
					return tab.Strings.ListLengthSix(this.$dayMap[recurrenceDaysOfWeek[0]], this.$dayMap[recurrenceDaysOfWeek[1]], this.$dayMap[recurrenceDaysOfWeek[2]], this.$dayMap[recurrenceDaysOfWeek[3]], this.$dayMap[recurrenceDaysOfWeek[4]], this.$dayMap[recurrenceDaysOfWeek[5]]);
				}
				case 7: {
					return tab.Strings.ListLengthSeven(this.$dayMap[recurrenceDaysOfWeek[0]], this.$dayMap[recurrenceDaysOfWeek[1]], this.$dayMap[recurrenceDaysOfWeek[2]], this.$dayMap[recurrenceDaysOfWeek[3]], this.$dayMap[recurrenceDaysOfWeek[4]], this.$dayMap[recurrenceDaysOfWeek[5]], this.$dayMap[recurrenceDaysOfWeek[6]]);
				}
				default: {
					throw new ss.Exception('Unknown list length: ' + recurrenceDaysOfWeek.length);
				}
			}
		},
		$formatMonthly: function Schedule$FormatMonthly(startTime, dayOffset) {
			var recurrenceDayOfMonth = this.$schedulePresModel.scheduleDetails.recurrenceDayOfMonth;
			if (dayOffset !== 0) {
				recurrenceDayOfMonth = this.$shiftDayOfMonth(this.$schedulePresModel.scheduleDetails.recurrenceDayOfMonth, dayOffset);
			}
			if (ss.referenceEquals(recurrenceDayOfMonth, $tab_Schedule.$scheduleLastDayOfMonth)) {
				return tab.Strings.ScheduleMonthlyDescriptionLast($tab_Schedule.$formatTime(startTime));
			}
			else if (ss.referenceEquals(recurrenceDayOfMonth, $tab_Schedule.$scheduleSecondToLastDayOfMonth)) {
				return tab.Strings.ScheduleMonthlyDescriptionSecondToLast($tab_Schedule.$formatTime(startTime));
			}
			var lastChar = recurrenceDayOfMonth.charCodeAt(recurrenceDayOfMonth.length - 1);
			var translatedRecurrenceDayOfMonth = '';
			if (lastChar === 49) {
				translatedRecurrenceDayOfMonth = tab.Strings.FirstEnding(recurrenceDayOfMonth);
			}
			else if (lastChar === 50 && recurrenceDayOfMonth !== '12') {
				translatedRecurrenceDayOfMonth = tab.Strings.SecondEnding(recurrenceDayOfMonth);
			}
			else if (lastChar === 51 && recurrenceDayOfMonth !== '13') {
				translatedRecurrenceDayOfMonth = tab.Strings.ThirdEnding(recurrenceDayOfMonth);
			}
			else {
				translatedRecurrenceDayOfMonth = tab.Strings.NumberEnding(recurrenceDayOfMonth);
			}
			return tab.Strings.ScheduleMonthlyDescription(translatedRecurrenceDayOfMonth, $tab_Schedule.$formatTime(startTime));
		},
		$shiftDayOfMonth: function Schedule$ShiftDayOfMonth(recurrenceDayOfMonth, dayOffset) {
			var d = new Date();
			var daysInMonth = (new Date(d.getFullYear(), d.getMonth() + 1, 0)).getDate();
			if (ss.referenceEquals(recurrenceDayOfMonth, $tab_Schedule.$scheduleLastDayOfMonth)) {
				if (dayOffset > 0) {
					return '1';
				}
				else if (dayOffset < 0) {
					return $tab_Schedule.$scheduleSecondToLastDayOfMonth;
				}
				else {
					return $tab_Schedule.$scheduleLastDayOfMonth;
				}
			}
			if (recurrenceDayOfMonth === '1' && dayOffset < 0) {
				return $tab_Schedule.$scheduleLastDayOfMonth;
			}
			var index = parseInt(recurrenceDayOfMonth);
			var shiftedIndex = (index + dayOffset + daysInMonth) % daysInMonth;
			return shiftedIndex.toString();
		}
	});
	ss.initClass($tab_SchemaClientCommands, $asm, {});
	ss.initClass($tab_SelectByTupleValueCmd, $asm, {
		invoke: function SelectByTupleValueCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand('select-by-tuple-value', this.cmdParams));
		},
		validateInvokeParams: function SelectByTupleValueCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'fn')) {
				throw new ss.Exception('missing param DocParams.FieldName');
			}
			if (!ss.keyExists(this.cmdParams, 'tupleId')) {
				throw new ss.Exception('missing param DocParams.TupleID');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_SelectByTupleValueCmd$Response]));
	ss.initClass($tab_SelectByTupleValueCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_SelectionClientCommands, $asm, {});
	ss.initClass($tab_SelectionModel, $asm, {
		add_newSelection: function SelectionModel$add_NewSelection(value) {
			this.$2$NewSelectionField = ss.delegateCombine(this.$2$NewSelectionField, value);
		},
		remove_newSelection: function SelectionModel$remove_NewSelection(value) {
			this.$2$NewSelectionField = ss.delegateRemove(this.$2$NewSelectionField, value);
		},
		get_selectionPresModel: function SelectionModel$get_SelectionPresModel() {
			if (ss.isValue(this.$overriddenTupleIds)) {
				var temp = {};
				temp.selectionType = 'tuples';
				temp.objectIds = this.$overriddenTupleIds;
				return temp;
			}
			return this.get_$origSelectionPresModel();
		},
		get_selectionType: function SelectionModel$get_SelectionType() {
			return this.get_$origSelectionPresModel().selectionType;
		},
		get_nodes: function SelectionModel$get_Nodes() {
			return this.get_$origSelectionPresModel().selectedNodes;
		},
		get_ids: function SelectionModel$get_Ids() {
			if (ss.isValue(this.$overriddenTupleIds)) {
				return this.$overriddenTupleIds;
			}
			return this.get_$origSelectionPresModel().objectIds;
		},
		get_hashKey: function SelectionModel$get_HashKey() {
			var toRet = this.get_selectionType().toString();
			if (this.get_selectionType() === 'legend-items') {
				toRet += '-' + this.get_selectionPresModel().legendSelectionInfo.legendType + ':' + this.get_selectionPresModel().legendSelectionInfo.legendColumns.join(';');
			}
			return toRet;
		},
		get_$origSelectionPresModel: function SelectionModel$get_OrigSelectionPresModel() {
			return this.pm;
		},
		getMutableCopyOfPresModel: function SelectionModel$GetMutableCopyOfPresModel() {
			return this.getMutableCopyOfPresModelInternal(true);
		},
		isObjectSelected: function SelectionModel$IsObjectSelected(objectId) {
			if (ss.isNullOrUndefined(this.get_$origSelectionPresModel())) {
				tab.Log.get(this).warn("SelectionPresModel doesn't exist.", []);
				return false;
			}
			if (ss.isNullOrUndefined(this.get_ids())) {
				return false;
			}
			return ss.contains(this.get_ids(), objectId);
		},
		isLegendItemSelected: function SelectionModel$IsLegendItemSelected(item) {
			if (this.get_selectionType() !== 'legend-items') {
				return false;
			}
			if (ss.isNullOrUndefined(this.$selectedLegendItemsLookup)) {
				this.$selectedLegendItemsLookup = {};
				if (ss.isValue(this.get_ids())) {
					var $t1 = this.get_ids();
					for (var $t2 = 0; $t2 < $t1.length; $t2++) {
						var objectId = $t1[$t2];
						this.$selectedLegendItemsLookup[objectId] = true;
					}
				}
			}
			return ss.keyExists(this.$selectedLegendItemsLookup, item.objectId);
		},
		isAnyLegendItemSelected: function SelectionModel$IsAnyLegendItemSelected() {
			if (this.get_selectionType() !== 'legend-items') {
				return false;
			}
			if (ss.isValue(this.get_ids())) {
				return this.get_ids().length > 0;
			}
			return false;
		},
		isNodeSelected: function SelectionModel$IsNodeSelected(drawGroup) {
			if (this.isEmpty || ss.isNullOrUndefined(drawGroup.node)) {
				return false;
			}
			return ss.isValue(this.$getNodeSelectionByPath(drawGroup.node));
		},
		findNodeSelection: function SelectionModel$FindNodeSelection(drawGroup) {
			return this.$getNodeSelectionByPath(drawGroup.node);
		},
		isNodeAncestorSelected: function SelectionModel$IsNodeAncestorSelected(drawGroup) {
			if (ss.isNullOrUndefined(drawGroup.node) || ss.isNullOrUndefined(drawGroup.node.columnIndices)) {
				return false;
			}
			var node = drawGroup.node;
			var columnIndices = node.columnIndices;
			var aliasIndices = node.aliasIndices;
			for (var i = 0; i < node.columnIndices.length; i++) {
				var ancestorCols = ss.arrayExtract(columnIndices, i);
				var ancestorVals = ss.arrayExtract(aliasIndices, i);
				if (ss.isValue(this.$getNodeSelectionByPath$1(ancestorCols, ancestorVals, node.axisOrientation, null, node.duplicateIndex, node.pageIndex))) {
					return true;
				}
			}
			return false;
		},
		setOverriddenTupleIds: function SelectionModel$SetOverriddenTupleIds(tupleIds, context) {
			if (this.get_$origSelectionPresModel().selectionType !== 'tuples') {
				return;
			}
			if (_.isEqual(this.$overriddenTupleIds, tupleIds) || tab.MiscUtil.isNullOrEmpty(this.$overriddenTupleIds) && tab.MiscUtil.isNullOrEmpty(tupleIds)) {
				return;
			}
			this.$overriddenTupleIds = tupleIds;
			this.$refreshEmpty();
			this.raiseEvent(this.$2$NewSelectionField, context);
		},
		update: function SelectionModel$Update(selectionPresModel, context) {
			if (this.isNewPresModelSameAsOld(selectionPresModel) && ss.isNullOrUndefined(this.$overriddenTupleIds)) {
				return;
			}
			this.$selectedNodesLookup = null;
			this.$selectedLegendItemsLookup = null;
			this.$overriddenTupleIds = null;
			this.swapAndCopyPresModel(selectionPresModel);
			this.$refreshEmpty();
			this.raiseEvent(this.$2$NewSelectionField, context);
		},
		isNewPresModelSameAsOld: function SelectionModel$IsNewPresModelSameAsOld(newPM) {
			if (ss.isNullOrUndefined(this.pm) !== ss.isNullOrUndefined(newPM)) {
				return false;
			}
			var newSelPM = newPM;
			if (newSelPM.selectionType !== this.get_selectionPresModel().selectionType) {
				return false;
			}
			if (ss.isValue(newSelPM.objectIds) && !_.isEqual(newSelPM.objectIds, this.get_selectionPresModel().objectIds)) {
				return false;
			}
			if (ss.isValue(newSelPM.selectedNodes) && !_.isEqual(newSelPM.selectedNodes, this.get_selectionPresModel().selectedNodes)) {
				return false;
			}
			if (ss.isValue(newSelPM.legendSelectionInfo) && !_.isEqual(newSelPM.legendSelectionInfo, this.get_selectionPresModel().legendSelectionInfo)) {
				return false;
			}
			return true;
		},
		$getNodeSelectionByPath: function SelectionModel$GetNodeSelectionByPath(node) {
			return this.$getNodeSelectionByPath$1(node.columnIndices, node.aliasIndices, node.axisOrientation, node.fn, node.duplicateIndex, node.pageIndex);
		},
		$getNodeSelectionByPath$1: function SelectionModel$GetNodeSelectionByPath(colIndices, valueIndices, orientation, axisName, duplicateId, pageIndex) {
			if (ss.isNullOrUndefined(colIndices) && ss.isNullOrUndefined(valueIndices) && ss.isNullOrUndefined(axisName) && ss.isNullOrUndefined(orientation)) {
				return null;
			}
			if (ss.isNullOrUndefined(this.$selectedNodesLookup)) {
				this.$selectedNodesLookup = {};
				var pm = this.get_$origSelectionPresModel();
				if (ss.isValue(pm.selectedNodes)) {
					for (var $t1 = 0; $t1 < pm.selectedNodes.length; $t1++) {
						var nodePm = pm.selectedNodes[$t1];
						this.$selectedNodesLookup[$tab_SelectionModel.$makeSelectionKey(nodePm.columnIndices, nodePm.aliasIndices, nodePm.axisOrientation, nodePm.fn, nodePm.duplicateIndex, nodePm.pageIndex)] = nodePm;
					}
				}
			}
			if (ss.getKeyCount(this.$selectedNodesLookup) === 0) {
				return null;
			}
			return this.$selectedNodesLookup[$tab_SelectionModel.$makeSelectionKey(colIndices, valueIndices, orientation, axisName, duplicateId, pageIndex)];
		},
		createSelectionToken: function SelectionModel$CreateSelectionToken() {
			return this.get_selectionPresModel();
		},
		$refreshEmpty: function SelectionModel$RefreshEmpty() {
			this.isEmpty = tab.MiscUtil.isNullOrEmpty(this.get_ids()) && tab.MiscUtil.isNullOrEmpty(this.get_$origSelectionPresModel().selectedNodes);
		}
	}, $tab_Model);
	ss.initClass($tab_SelectionsDifference, $asm, {
		get_invalidateViz: function SelectionsDifference$get_InvalidateViz() {
			return this.$1$InvalidateVizField;
		},
		set_invalidateViz: function SelectionsDifference$set_InvalidateViz(value) {
			this.$1$InvalidateVizField = value;
		},
		get_reason: function SelectionsDifference$get_Reason() {
			return this.$1$ReasonField;
		},
		set_reason: function SelectionsDifference$set_Reason(value) {
			this.$1$ReasonField = value;
		},
		get_objectIds: function SelectionsDifference$get_ObjectIds() {
			return this.$1$ObjectIdsField;
		},
		set_objectIds: function SelectionsDifference$set_ObjectIds(value) {
			this.$1$ObjectIdsField = value;
		}
	});
	ss.initEnum($tab_SelectionsDiffReason, $asm, { none: 0, noPreviousToCompare: 1, differentTuples: 2, differentTrendOrRefLines: 3 });
	ss.initClass($tab_SelectionsModel, $asm, {
		add_newSelections: function SelectionsModel$add_NewSelections(value) {
			this.$2$NewSelectionsField = ss.delegateCombine(this.$2$NewSelectionsField, value);
		},
		remove_newSelections: function SelectionsModel$remove_NewSelections(value) {
			this.$2$NewSelectionsField = ss.delegateRemove(this.$2$NewSelectionsField, value);
		},
		get_isEmpty: function SelectionsModel$get_IsEmpty() {
			for (var $t1 = 0; $t1 < this.selectionModels.length; $t1++) {
				var selectionModel = this.selectionModels[$t1];
				if (!selectionModel.isEmpty) {
					return false;
				}
			}
			return true;
		},
		get_hasPaneTableObjectSelection: function SelectionsModel$get_HasPaneTableObjectSelection() {
			for (var $t1 = 0; $t1 < this.selectionModels.length; $t1++) {
				var selectionModel = this.selectionModels[$t1];
				if (!selectionModel.isEmpty && selectionModel.get_selectionType() !== 'legend-items' && selectionModel.get_selectionType() !== 'nodes') {
					return true;
				}
			}
			return false;
		},
		get_allLegendSelections: function SelectionsModel$get_AllLegendSelections() {
			return _.filter(this.selectionModels, function(model) {
				return model.get_selectionType() === 'legend-items';
			});
		},
		get_brushVizForNodeSelection: function SelectionsModel$get_BrushVizForNodeSelection() {
			if (this.nodeSelection.isEmpty) {
				return false;
			}
			var $t1 = this.nodeSelection.get_nodes();
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var node = $t1[$t2];
				if ($tab_SelectionUtils.isCategoricalAndTupleAssociatedHeader(node)) {
					return true;
				}
			}
			return false;
		},
		getLegendSelection: function SelectionsModel$GetLegendSelection(key, legendColumns) {
			var found = _.find(this.selectionModels, function(model) {
				return model.get_selectionType() === 'legend-items' && ss.isValue(model.get_selectionPresModel()) && model.get_selectionPresModel().legendSelectionInfo.legendType === key && _.isEqual(model.get_selectionPresModel().legendSelectionInfo.legendColumns, legendColumns);
			});
			if (ss.isNullOrUndefined(found)) {
				tab.Log.get(this).debug('Adding a new legend selection: %s', [key]);
				found = this.$addSelectionModel('legend-items', $tab_NoopModelEventsHandler.get_noopContext());
				found.get_selectionPresModel().legendSelectionInfo.legendType = key;
				found.get_selectionPresModel().legendSelectionInfo.legendColumns = legendColumns;
			}
			return found;
		},
		update: function SelectionsModel$Update(presModels, context) {
			var compactPresModels = _.compact(presModels);
			var resultingSelections = [];
			var updated = [];
			for (var $t1 = 0; $t1 < compactPresModels.length; $t1++) {
				var selectionPresModel = compactPresModels[$t1];
				var model;
				if (selectionPresModel.selectionType === 'legend-items') {
					model = this.getLegendSelection(selectionPresModel.legendSelectionInfo.legendType, selectionPresModel.legendSelectionInfo.legendColumns);
				}
				else {
					model = this.$getSelection(selectionPresModel.selectionType);
				}
				if (ss.isNullOrUndefined(model)) {
					model = new $tab_SelectionModel(this, this.selectionModels.length);
					this.selectionModels.push(model);
				}
				var position = parseInt(model.presModelKey.name);
				resultingSelections[position] = selectionPresModel;
				model.update(selectionPresModel, context);
				updated.push(model.get_hashKey());
			}
			for (var $t2 = 0; $t2 < this.selectionModels.length; $t2++) {
				var selectionModel = this.selectionModels[$t2];
				if (ss.contains(updated, selectionModel.get_hashKey())) {
					continue;
				}
				var pm = $tab_SelectionsModel.$createEmptySelectionPm(selectionModel.get_selectionType());
				if (pm.selectionType === 'legend-items') {
					pm.legendSelectionInfo = selectionModel.get_selectionPresModel().legendSelectionInfo;
				}
				selectionModel.update(pm, context);
				var position1 = parseInt(selectionModel.presModelKey.name);
				resultingSelections[position1] = selectionModel.get_selectionPresModel();
			}
			ss.Debug.assert(resultingSelections.length >= presModels.length, 'the pres model array we create should never be shorter than the pres model array passed in');
			for (var ii = 0; ii < resultingSelections.length; ++ii) {
				presModels[ii] = resultingSelections[ii];
			}
			var selPresModel = new $tab_SelectionsPresModel();
			selPresModel.selections = presModels;
			if (this.isNewPresModelSameAsOld(selPresModel)) {
				return;
			}
			this.swapAndCopyPresModel(selPresModel);
			this.raiseEvent(this.$2$NewSelectionsField, context);
		},
		$getSelection: function SelectionsModel$GetSelection(type) {
			return _.find(this.selectionModels, function(model) {
				return model.get_selectionType() === type;
			});
		},
		$addSelectionModel: function SelectionsModel$AddSelectionModel(type, context) {
			tab.Log.get(this).debug('Creating a new selection model: %s', [type]);
			var model = new $tab_SelectionModel(this, this.selectionModels.length);
			this.selectionModels.push(model);
			var pm = $tab_SelectionsModel.$createEmptySelectionPm(type);
			model.update(pm, context);
			return model;
		},
		createSelectionsToken: function SelectionsModel$CreateSelectionsToken() {
			return this.pm;
		},
		computeSelectionsDiff: function SelectionsModel$ComputeSelectionsDiff(selectionsToken, impliedSelectionToken, currentImpliedSelectionModel) {
			if (ss.isNullOrUndefined(selectionsToken)) {
				return new $tab_SelectionsDifference(true, 1, null);
			}
			var difference = $tab_SelectionsDifference.noDifference();
			var $t1 = ss.cast(selectionsToken, $tab_SelectionsPresModel).selections;
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var oldSelectionPresModel = $t1[$t2];
				switch (oldSelectionPresModel.selectionType) {
					case 'ref-lines':
					case 'trend-lines': {
						var oldIds = oldSelectionPresModel.objectIds || [];
						var delta = $tab_SelectionsModel.$computeTupleArrayDifference(oldIds, this.$getSelection(oldSelectionPresModel.selectionType).get_ids());
						if (delta.length > 0) {
							return new $tab_SelectionsDifference(true, 3, null);
						}
						break;
					}
					case 'tuples': {
						var oldSelTuples = oldSelectionPresModel.objectIds;
						var newSelTuples = this.tupleSelection.get_ids();
						var oldImpliedTuples = (ss.isValue(impliedSelectionToken) ? impliedSelectionToken.objectIds : []);
						var newImpliedTuples = (ss.isValue(currentImpliedSelectionModel) ? currentImpliedSelectionModel.get_ids() : []);
						var invalidateEntireViz = oldSelTuples.length + oldImpliedTuples.length !== 0 !== (newSelTuples.length + newImpliedTuples.length !== 0);
						if (invalidateEntireViz) {
							return new $tab_SelectionsDifference(true, 2, null);
						}
						var selDelta = $tab_SelectionsModel.$computeTupleArrayDifference(oldSelTuples, newSelTuples);
						var impliedDelta = $tab_SelectionsModel.$computeTupleArrayDifference(oldImpliedTuples, newImpliedTuples);
						var combindDelta = [];
						ss.arrayAddRange(combindDelta, selDelta);
						ss.arrayAddRange(combindDelta, impliedDelta);
						difference = new $tab_SelectionsDifference(false, 2, Array.prototype.slice.call(combindDelta));
						break;
					}
					default: {
						break;
					}
				}
			}
			return difference;
		},
		hasTupleSelection: function SelectionsModel$HasTupleSelection() {
			if (ss.isNullOrUndefined(this.pm)) {
				return false;
			}
			var presModels = ss.cast(this.pm, $tab_SelectionsPresModel).selections;
			return _.any(presModels, function(pm) {
				return pm.selectionType === 'tuples' && pm.objectIds.length > 0;
			});
		}
	}, $tab_Model);
	ss.initClass($tab_SelectionsPresModel, $asm, {});
	ss.initClass($tab_SelectionUtils, $asm, {});
	ss.initClass($tab_SelfServiceSchedule, $asm, {});
	ss.initClass($tab_ServerCommands, $asm, {});
	ss.initClass($tab_SessionAjaxCallManager, $asm, {
		get_completedDelegate: function SessionAjaxCallManager$get_CompletedDelegate() {
			return ss.mkdel(this, this.onComplete);
		},
		get_successDelegate: function SessionAjaxCallManager$get_SuccessDelegate() {
			return ss.mkdel(this, this.onSuccess);
		},
		get_errorDelegate: function SessionAjaxCallManager$get_ErrorDelegate() {
			return ss.mkdel(this, this.onError);
		},
		onComplete: function SessionAjaxCallManager$OnComplete(xhr, textStatus) {
			try {
				if (ss.isValue(this.$onComplete)) {
					this.$onComplete(xhr, textStatus);
				}
			}
			finally {
				this.$postProcess();
			}
		},
		onSuccess: function SessionAjaxCallManager$OnSuccess(data, textStatus, xhr) {
			try {
				var detectedError = ss.isInstanceOfType(data, Error);
				if (detectedError) {
					this.$session.$handleError(data, xhr, false, null);
				}
				else if (xhr.status === 202) {
					var args = xhr['args'];
					var handler = new $tab_SessionAjaxHandler(this.$session, args);
					handler.requestStatus();
					detectedError = true;
				}
				if (!detectedError) {
					if (ss.isValue(this.$onSuccess)) {
						this.$onSuccess(data, textStatus, xhr);
					}
				}
			}
			finally {
				this.$postProcess();
			}
		},
		onError: function SessionAjaxCallManager$OnError(xhr, textStatus, errorThrown) {
			try {
				if (ss.isValue(this.$onError)) {
					this.$onError(xhr, textStatus, errorThrown);
				}
				else {
					this.$session.$handleError(errorThrown, xhr, false, null);
				}
			}
			finally {
				this.$postProcess();
			}
		},
		$postProcess: function SessionAjaxCallManager$PostProcess() {
			if (this.$didWait) {
				this.$didWait = false;
				this.$session.decrementWait();
			}
		}
	});
	ss.initClass($tab_SessionAjaxHandler, $asm, {
		requestStatus: function SessionAjaxHandler$RequestStatus() {
			var onSuccess = ss.mkdel(this, function(data, textStatus, xhr) {
				this.$onSuccess(textStatus, xhr);
			});
			var onError = ss.mkdel(this, function(xhr1, textStatus1, errorThrown) {
				this.$onError(xhr1, textStatus1);
			});
			var handler = new $tab_SessionAjaxCallManager(this.$session, null, onSuccess, onError, false, false);
			var args = {};
			args.type = 'GET';
			args.url = this.$url;
			args.cache = false;
			$tab_XhrUtil.helper(args, handler);
		},
		$onSuccess: function SessionAjaxHandler$OnSuccess(textStatus, xhr) {
			if (xhr.status === 204) {
				this.$ready = true;
			}
			this.$queueNextRequest(textStatus, xhr);
		},
		$onError: function SessionAjaxHandler$OnError(xhr, textStatus) {
			if (ss.isNullOrUndefined(this.$originalArgs.complete)) {
				this.$originalArgs.complete(xhr, textStatus);
			}
		},
		$queueNextRequest: function SessionAjaxHandler$QueueNextRequest(textStatus, xhr) {
			++this.$requests;
			if (this.$requests % 10 === 0 && this.$interval < 4000) {
				this.$interval *= 2;
			}
			if (!this.$ready) {
				window.setTimeout(ss.mkdel(this, function() {
					this.requestStatus();
				}), this.$interval);
			}
			else {
				var skipResendOriginal = this.$originalArgs['skipResendOriginal'];
				if (ss.isValue(skipResendOriginal) && skipResendOriginal) {
					if (ss.isValue(this.$originalArgs.complete)) {
						this.$originalArgs.complete(xhr, textStatus);
					}
				}
				else {
					window.setTimeout(ss.mkdel(this, function() {
						this.$resendOriginal();
					}), 0);
				}
			}
		},
		$resendOriginal: function SessionAjaxHandler$ResendOriginal() {
			if (!this.$originalArgs.async) {
				delete this.$originalArgs['async'];
			}
			$tab_XhrUtil.helper(this.$originalArgs);
		}
	});
	ss.initClass($tab_SessionCommands, $asm, {});
	ss.initClass($tab_SessionHeartbeat, $asm, {});
	ss.initClass($tab_SessionServerCommands, $asm, {});
	ss.initClass($tab_SetDashboardCurrentLayoutCmd, $asm, {
		invoke: function SetDashboardCurrentLayoutCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand('set-dashboard-current-layout', this.cmdParams));
		},
		validateInvokeParams: function SetDashboardCurrentLayoutCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'dashboardDeviceLayout')) {
				throw new ss.Exception('missing param DocParams.DashboardDeviceLayout');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_SetDashboardCurrentLayoutCmd$Response]));
	ss.initClass($tab_SetDashboardCurrentLayoutCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_SetDashboardSizingWithValidationCmd, $asm, {
		invoke: function SetDashboardSizingWithValidationCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand('set-dashboard-sizing-with-validation', this.cmdParams));
		},
		validateInvokeParams: function SetDashboardSizingWithValidationCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'dashboardSizingMode')) {
				throw new ss.Exception('missing param DocParams.DashboardSizingMode');
			}
			if (!ss.keyExists(this.cmdParams, 'minWidth')) {
				throw new ss.Exception('missing param DocParams.MinWidth');
			}
			if (!ss.keyExists(this.cmdParams, 'minHeight')) {
				throw new ss.Exception('missing param DocParams.MinHeight');
			}
			if (!ss.keyExists(this.cmdParams, 'maxWidth')) {
				throw new ss.Exception('missing param DocParams.MaxWidth');
			}
			if (!ss.keyExists(this.cmdParams, 'maxHeight')) {
				throw new ss.Exception('missing param DocParams.MaxHeight');
			}
			if (!ss.keyExists(this.cmdParams, 'dashboardSizingDimension')) {
				throw new ss.Exception('missing param DocParams.DashboardSizingDimension');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_SetDashboardSizingWithValidationCmd$Response]));
	ss.initClass($tab_SetDashboardSizingWithValidationCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'dashboardSizeWithValidationPresModel')) {
				throw new ss.Exception('missing param DocParams.DashboardSizeWithValidationPresModel');
			}
		}
	});
	ss.initClass($tab_SetDataSourceDataRowCountCmd, $asm, {
		invoke: function SetDataSourceDataRowCountCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand('set-data-source-data-row-count', this.cmdParams));
		},
		validateInvokeParams: function SetDataSourceDataRowCountCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'rowCount')) {
				throw new ss.Exception('missing param DocParams.RowCount');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_SetDataSourceDataRowCountCmd$Response]));
	ss.initClass($tab_SetDataSourceDataRowCountCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_SetVariablesPromptRespondedCmd, $asm, {
		invoke: function SetVariablesPromptRespondedCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand('set-variables-prompt-responded', this.cmdParams));
		},
		validateInvokeParams: function SetVariablesPromptRespondedCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'connectionName')) {
				throw new ss.Exception('missing param DocParams.ConnectionName');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_SetVariablesPromptRespondedCmd$Response]));
	ss.initClass($tab_SetVariablesPromptRespondedCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_ShapeManager, $asm, {
		add_shapeLoaded: function ShapeManager$add_ShapeLoaded(value) {
			this.$1$ShapeLoadedField = ss.delegateCombine(this.$1$ShapeLoadedField, value);
		},
		remove_shapeLoaded: function ShapeManager$remove_ShapeLoaded(value) {
			this.$1$ShapeLoadedField = ss.delegateRemove(this.$1$ShapeLoadedField, value);
		},
		get_imageKeys: function ShapeManager$get_ImageKeys() {
			return _.keys(this.$idToImageMap);
		},
		getImageElement: function ShapeManager$GetImageElement(shapeId) {
			return this.$idToImageMap[shapeId];
		},
		getCachedCanvas: function ShapeManager$GetCachedCanvas(cacheKey) {
			return this.$idToCanvasCache[cacheKey];
		},
		generateCachedCanvas: function ShapeManager$GenerateCachedCanvas(cacheKey, cacheableCanvasGenerator) {
			var canvas = null;
			if (ss.isValue(cacheableCanvasGenerator)) {
				canvas = cacheableCanvasGenerator();
				if (ss.isValue(canvas)) {
					this.$idToCanvasCache[cacheKey] = canvas;
				}
			}
			return canvas;
		},
		getCachedStampCanvas: function ShapeManager$GetCachedStampCanvas(cacheKey) {
			return this.$shapeStampCache[cacheKey];
		},
		generateCachedStampCanvas: function ShapeManager$GenerateCachedStampCanvas(cacheKey, cacheableCanvasGenerator) {
			var canvas = null;
			if (ss.getKeyCount(this.$shapeStampCache) < $tab_ShapeManager.get_canvasCacheCapacity()) {
				if (ss.isValue(cacheableCanvasGenerator)) {
					canvas = cacheableCanvasGenerator();
					if (ss.isValue(canvas)) {
						this.$shapeStampCache[cacheKey] = canvas;
					}
				}
			}
			return canvas;
		},
		updateCustomImageMap: function ShapeManager$UpdateCustomImageMap(customShapes) {
			for (var $t1 = 0; $t1 < customShapes.length; $t1++) {
				var mark = customShapes[$t1];
				if (ss.isValue(mark)) {
					var shapeId = { $: mark.shapeId };
					var imageKey = shapeId.$.toString();
					var existingImage = null;
					var doesMapContainImage = { $: false };
					if (ss.keyExists(this.$idToImageMap, imageKey)) {
						doesMapContainImage.$ = true;
						existingImage = this.$idToImageMap[imageKey];
					}
					var imageData = mark.image;
					var $t2 = document.createElement('img');
					var imgElt = { $: ss.cast($t2, ss.isValue($t2) && (ss.isInstanceOfType($t2, Element) && $t2.tagName === 'IMG')) };
					imgElt.$.src = $tab_ShapeManager.$imageFormatString + imageData;
					if (!doesMapContainImage.$ || ss.isValue(existingImage) && imgElt.$.height > existingImage.height && imgElt.$.width > existingImage.width) {
						this.$idToImageMap[imageKey] = imgElt.$;
						var imageFinishedLoad = { $: null };
						imageFinishedLoad.$ = ss.thisFix(ss.mkdel({ doesMapContainImage: doesMapContainImage, shapeId: shapeId, imgElt: imgElt, imageFinishedLoad: imageFinishedLoad, $this: this }, function() {
							if (this.doesMapContainImage.$) {
								ss.clearKeys(this.$this.$idToCanvasCache);
							}
							this.$this.$notifyShapeLoaded(this.shapeId.$);
							this.imgElt.$.removeEventListener('load', this.imageFinishedLoad.$, false);
						}));
						imgElt.$.addEventListener('load', imageFinishedLoad.$, false);
					}
				}
			}
		},
		hasShape: function ShapeManager$HasShape(shapeId) {
			return ss.keyExists(this.$idToImageMap, shapeId.toString()) && this.$idToImageMap[shapeId.toString()].complete;
		},
		$notifyShapeLoaded: function ShapeManager$NotifyShapeLoaded(shapeId) {
			if (!ss.staticEquals(this.$1$ShapeLoadedField, null)) {
				this.$1$ShapeLoadedField(shapeId);
			}
		},
		clearShapeStampCache: function ShapeManager$ClearShapeStampCache() {
			ss.clearKeys(this.$shapeStampCache);
		}
	});
	ss.initClass($tab_ShapeModel, $asm, {
		get_palette: function ShapeModel$get_Palette() {
			return this.$shapePalette;
		},
		get_shapeType: function ShapeModel$get_ShapeType() {
			return this.$shapeType;
		},
		equals$1: function ShapeModel$Equals(selectedShape) {
			return ss.isValue(selectedShape) && ss.referenceEquals(this.$shapePalette, selectedShape.$shapePalette) && this.$shapeType === selectedShape.$shapeType;
		},
		toString: function ShapeModel$ToString() {
			if (ss.isNullOrUndefined(this.$shapePalette)) {
				return this.get_shapeType().toString();
			}
			return ':' + this.get_palette() + '/' + this.get_shapeType();
		}
	});
	ss.initClass($tab_SheetClientCommands, $asm, {});
	ss.initClass($tab_SheetListItemModel, $asm, {
		get_isDashboard: function SheetListItemModel$get_IsDashboard() {
			return this.pm.isDashboard;
		},
		get_isIncluded: function SheetListItemModel$get_IsIncluded() {
			return this.pm.isIncluded;
		},
		get_name: function SheetListItemModel$get_Name() {
			return this.pm.name;
		},
		update: function SheetListItemModel$Update(sheetListItemPresModel) {
			this.swapAndCopyPresModel(sheetListItemPresModel);
		}
	}, $tab_Model);
	ss.initClass($tab_SheetListModel, $asm, {
		add_sheetListUpdated: function SheetListModel$add_SheetListUpdated(value) {
			this.$2$SheetListUpdatedField = ss.delegateCombine(this.$2$SheetListUpdatedField, value);
		},
		remove_sheetListUpdated: function SheetListModel$remove_SheetListUpdated(value) {
			this.$2$SheetListUpdatedField = ss.delegateRemove(this.$2$SheetListUpdatedField, value);
		},
		get_sheets: function SheetListModel$get_Sheets() {
			return this.$sheetModels;
		},
		update: function SheetListModel$Update(sheetListPresModel, context) {
			if (ss.isValue(sheetListPresModel.sheetListItems)) {
				this.$sheetModels = [];
				for (var i = 0; i < sheetListPresModel.sheetListItems.length; i++) {
					var sheetModel = new $tab_SheetListItemModel(this.$sheetListItemArrayModel, i);
					sheetModel.update(sheetListPresModel.sheetListItems[i]);
					this.$sheetModels.push(sheetModel);
				}
			}
			this.simpleSwapToUpdate(sheetListPresModel, this.$2$SheetListUpdatedField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_SheetSession, $asm, {
		get_visualId: function SheetSession$get_VisualId() {
			return $tab_ModelUtils.getVisualId(this.sheetId);
		},
		requestHSMChildren: function SheetSession$RequestHSMChildren(field, member, onComplete, onError) {
			if (!tsConfig.allow_filter) {
				return;
			}
			var onSuccess = function(resp, textStatus, xhr) {
				onComplete(ss.cast(resp, Array));
			};
			var handler = this.$createHandler(null, onSuccess, null, 'none');
			var file = new Object();
			file['name'] = 'file';
			file['filename'] = 'file';
			file['contentType'] = 'text/javascript';
			file['content'] = JSON.stringify(member);
			var dict = ss.mkdict(['_method', 'PUT']);
			var payload = $tab_XhrUtil.getMultipartData(file, dict);
			var args = {};
			args.type = 'POST';
			args.url = this.formatFilterReference(this.sheetId, field, 'show_children');
			args.dataType = 'json';
			args.contentType = 'multipart/form-data; boundary=' + payload.header;
			args.data = payload.body;
			this.$request(args, handler);
		},
		getFilterItems: function SheetSession$GetFilterItems(field, domain, itemRange, onComplete, onError) {
			if (!tsConfig.allow_filter) {
				return;
			}
			var onSuccess = function(resp, textStatus, xhr) {
				onComplete(resp);
			};
			var handler = this.$createHandler(null, onSuccess, null, 'none');
			var dat = {};
			dat['fromIndex'] = itemRange.get_from();
			dat['toIndex'] = itemRange.get_to();
			dat['domain'] = domain;
			var args = this.basicGetOpts(this.formatFilterReference(this.sheetId, field, 'getfilteritems'));
			args.data = dat;
			this.$request(args, handler);
		},
		searchFilter: function SheetSession$SearchFilter(field, query, maxRows, shouldGetIndex, domain, successHandler, errorHandler) {
			if (!tsConfig.allow_filter) {
				return null;
			}
			var onSuccess = function(resp, textStatus, xhr) {
				var data = resp;
				successHandler(data);
			};
			var onError = function(xhr1, textStatus1, errorThrown) {
				errorHandler(errorThrown);
			};
			var handler = this.$createHandler(null, onSuccess, onError, 'none');
			var urlSlug = (shouldGetIndex ? 'searchwithindex' : 'search');
			var args = this.basicGetOpts(this.formatFilterReference(this.sheetId, field, urlSlug));
			var param = ss.mkdict(['query', query, 'maxRows', maxRows, 'domain', domain]);
			args.data = param;
			return this.$request(args, handler);
		}
	}, $tab_BaseSession);
	ss.initClass($tab_ShelfItemsArrayModel, $asm, {}, $tab_Model);
	ss.initClass($tab_ShelfListArrayModel, $asm, {}, $tab_Model);
	ss.initClass($tab_ShelfModel, $asm, {
		add_shelfChanged: function ShelfModel$add_ShelfChanged(value) {
			this.$2$ShelfChangedField = ss.delegateCombine(this.$2$ShelfChangedField, value);
		},
		remove_shelfChanged: function ShelfModel$remove_ShelfChanged(value) {
			this.$2$ShelfChangedField = ss.delegateRemove(this.$2$ShelfChangedField, value);
		},
		get_paneId: function ShelfModel$get_PaneId() {
			return (ss.isValue(this.get_$shelf().paneSpec) ? this.get_$shelf().paneSpec : 0);
		},
		get_shelfType: function ShelfModel$get_ShelfType() {
			return this.get_$shelf().shelfType;
		},
		get_pills: function ShelfModel$get_Pills() {
			return this.$pills;
		},
		get_tooltip: function ShelfModel$get_Tooltip() {
			return tableau.format.stripFormattedText(this.get_$shelf().tooltip);
		},
		get_isVisible: function ShelfModel$get_IsVisible() {
			return this.get_$shelf().showShelf;
		},
		get_sortPillCanBeDragged: function ShelfModel$get_SortPillCanBeDragged() {
			return this.get_$shelf().sortPillCanBeDragged;
		},
		get_$shelf: function ShelfModel$get_Shelf() {
			return this.pm;
		},
		getMutableCopyOfPresModel: function ShelfModel$GetMutableCopyOfPresModel() {
			return this.getMutableCopyOfPresModelInternal(true);
		},
		update: function ShelfModel$Update(shelf, schema, context) {
			if (this.isNewPresModelSameAsOld(shelf)) {
				return;
			}
			if (shelf.shelfItems === null) {
				this.$pills = [];
			}
			else if (ss.isValue(shelf.shelfItems)) {
				var newPills = [];
				var arrayModel = new $tab_ShelfItemsArrayModel(this);
				for (var i = 0; i < shelf.shelfItems.length; i++) {
					var shelfItem = shelf.shelfItems[i];
					var fieldName = shelfItem.fn;
					var col;
					if (ss.isNullOrEmptyString(fieldName) && shelf.shelfType === 'encoding-shelf') {
						col = new $tab_MultipleFieldsModel();
					}
					else {
						col = schema.findField(fieldName);
					}
					if (ss.isNullOrUndefined(col)) {
						tab.Logger.getLogger($tab_ShelvesModel).warn('Unable to locate field, invalidating pill: %s', [fieldName]);
						shelfItem.isInvalid = true;
					}
					if (shelfItem.isInvalid) {
						var fakeColumn = new $tab_FieldColumnModel(new $tab_FieldsModel('', schema.findDataSourceFromGlobalFieldName(fieldName)));
						var fakePresModel = { type: 'column', fn: fieldName, description: fieldName, fieldIconIdx: 0 };
						fakeColumn.update(fakePresModel);
						col = fakeColumn;
					}
					var p = new $tab_PillModel(arrayModel, i);
					p.update(shelfItem, col);
					newPills.push(p);
				}
				this.$pills = newPills;
			}
			this.swapAndCopyPresModel(shelf);
			this.raiseEvent$1($tab_ShelfModel).call(this, this.$2$ShelfChangedField, this, context);
		}
	}, $tab_Model);
	ss.initClass($tab_ShelvesModel, $asm, {
		add_newShelves: function ShelvesModel$add_NewShelves(value) {
			this.$2$NewShelvesField = ss.delegateCombine(this.$2$NewShelvesField, value);
		},
		remove_newShelves: function ShelvesModel$remove_NewShelves(value) {
			this.$2$NewShelvesField = ss.delegateRemove(this.$2$NewShelvesField, value);
		},
		get_shelves: function ShelvesModel$get_Shelves() {
			return this.$shelfModels;
		},
		findShelf: function ShelvesModel$FindShelf(st) {
			return this.$findShelfInList(this.$shelfModels, st);
		},
		update: function ShelvesModel$Update(pm, schema, defaultPaneSpecId, context) {
			if (this.isNewPresModelSameAsOld(pm)) {
				return;
			}
			this.swapAndCopyPresModel(pm);
			this.$buildShelfModels(pm, schema, defaultPaneSpecId, context);
			this.raiseEvent(this.$2$NewShelvesField, context);
		},
		$buildShelfModels: function ShelvesModel$BuildShelfModels(pm, schema, defaultPaneSpecId, context) {
			if (ss.isValue(pm)) {
				var shelvesToKill = ss.arrayClone(this.$shelfModels);
				for (var i = 0; i < pm.shelfList.length; i++) {
					var shelf = { $: pm.shelfList[i] };
					if (ss.isNullOrUndefined(shelf.$.paneSpec) && ss.isValue(defaultPaneSpecId)) {
						shelf.$.paneSpec = ss.unbox(defaultPaneSpecId);
					}
					var sm = _.find(this.$shelfModels, ss.mkdel({ shelf: shelf }, function(model) {
						return model.get_shelfType() === this.shelf.$.shelfType && model.get_paneId() === (this.shelf.$.paneSpec || 0);
					}));
					if (ss.isValue(sm)) {
						tab.Log.get(this).debug('Updating shelf: type=%s, paneId=%s', [shelf.$.shelfType, shelf.$.paneSpec]);
						ss.remove(shelvesToKill, sm);
						sm.update(shelf.$, schema, context);
					}
					else {
						tab.Log.get(this).debug('Creating shelf: type=%s, paneId=%s', [shelf.$.shelfType, shelf.$.paneSpec]);
						this.$shelfModels.push($tab_ShelvesModel.createShelfModel(this, shelf.$, schema, i, context));
					}
				}
				for (var $t1 = 0; $t1 < shelvesToKill.length; $t1++) {
					var toKill = shelvesToKill[$t1];
					tab.Log.get(this).debug('Removing shelf: type=%s, paneId=%s', [toKill.get_shelfType(), toKill.get_paneId()]);
					ss.remove(this.$shelfModels, toKill);
				}
			}
		},
		$findShelfInList: function ShelvesModel$FindShelfInList(newModels, shelfType) {
			return _.find(newModels, function(model) {
				return model.get_shelfType() === shelfType;
			});
		}
	}, $tab_Model);
	ss.initClass($tab_ShowDashboardTitleCmd, $asm, {
		invoke: function ShowDashboardTitleCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand('show-dashboard-title', this.cmdParams));
		},
		validateInvokeParams: function ShowDashboardTitleCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ShowDashboardTitleCmd$Response]));
	ss.initClass($tab_ShowDashboardTitleCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_ShowEditAxisDialogCmd, $asm, {
		invoke: function ShowEditAxisDialogCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand('show-edit-axis-dialog', this.cmdParams));
		},
		validateInvokeParams: function ShowEditAxisDialogCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'fn')) {
				throw new ss.Exception('missing param DocParams.FieldName');
			}
			if (!ss.keyExists(this.cmdParams, 'axisOrientation')) {
				throw new ss.Exception('missing param DocParams.AxisOrientation');
			}
			if (!ss.keyExists(this.cmdParams, 'duplicateIndex')) {
				throw new ss.Exception('missing param DocParams.DuplicateIndex');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ShowEditAxisDialogCmd$Response]));
	ss.initClass($tab_ShowEditAxisDialogCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_SimpleCommandsPresModelWrapper, $asm, {
		get_simpleCommand: function SimpleCommandsPresModelWrapper$get_SimpleCommand() {
			return this.$model['simpleCommand'.toString()];
		},
		set_simpleCommand: function SimpleCommandsPresModelWrapper$set_SimpleCommand(value) {
			this.$model['simpleCommand'.toString()] = value;
		}
	});
	ss.initClass($tab_SizeItemModel, $asm, {
		add_sizeInfoUpdated: function SizeItemModel$add_SizeInfoUpdated(value) {
			this.$2$SizeInfoUpdatedField = ss.delegateCombine(this.$2$SizeInfoUpdatedField, value);
		},
		remove_sizeInfoUpdated: function SizeItemModel$remove_SizeInfoUpdated(value) {
			this.$2$SizeInfoUpdatedField = ss.delegateRemove(this.$2$SizeInfoUpdatedField, value);
		},
		get_name: function SizeItemModel$get_Name() {
			return this.pm.name;
		},
		get_width: function SizeItemModel$get_Width() {
			return this.pm.w;
		},
		get_height: function SizeItemModel$get_Height() {
			return this.pm.h;
		},
		update: function SizeItemModel$Update(sizeItemPresModel, context) {
			this.simpleSwapToUpdate(sizeItemPresModel, this.$2$SizeInfoUpdatedField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_SortIndicatorsModel, $asm, {
		add_newSortIndicators: function SortIndicatorsModel$add_NewSortIndicators(value) {
			this.$2$NewSortIndicatorsField = ss.delegateCombine(this.$2$NewSortIndicatorsField, value);
		},
		remove_newSortIndicators: function SortIndicatorsModel$remove_NewSortIndicators(value) {
			this.$2$NewSortIndicatorsField = ss.delegateRemove(this.$2$NewSortIndicatorsField, value);
		},
		get_sortIndicatorsPresModel: function SortIndicatorsModel$get_SortIndicatorsPresModel() {
			return this.pm;
		},
		update: function SortIndicatorsModel$Update(sortIndicatorsPresModel, context) {
			this.simpleSwapToUpdate$1(Object).call(this, sortIndicatorsPresModel, this.$2$NewSortIndicatorsField, sortIndicatorsPresModel, context);
		}
	}, $tab_Model);
	ss.initClass($tab_SortServerCommands, $asm, {});
	ss.initClass($tab_StartNewDataAlertCmd, $asm, {
		invoke: function StartNewDataAlertCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand('start-new-data-alert', this.cmdParams));
		},
		validateInvokeParams: function StartNewDataAlertCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_StartNewDataAlertCmd$Response]));
	ss.initClass($tab_StartNewDataAlertCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'dataAlertMeasures')) {
				throw new ss.Exception('missing param DocParams.DataAlertMeasures');
			}
			if (!ss.keyExists(this.$$cmdParams, 'dataAlertMeasure')) {
				throw new ss.Exception('missing param DocParams.DataAlertMeasure');
			}
			if (!ss.keyExists(this.$$cmdParams, 'fieldName')) {
				throw new ss.Exception('missing param DocParams.FieldNameString');
			}
			if (!ss.keyExists(this.$$cmdParams, 'dataAlertConstantCondition')) {
				throw new ss.Exception('missing param DocParams.DataAlertConstantCondition');
			}
			if (!ss.keyExists(this.$$cmdParams, 'referenceLineId')) {
				throw new ss.Exception('missing param DocParams.ReferenceLineSpecificationId');
			}
			if (!ss.keyExists(this.$$cmdParams, 'isDataAlertConditionMet')) {
				throw new ss.Exception('missing param DocParams.IsDataAlertConditionMet');
			}
		}
	});
	ss.initClass($tab_StartupUtils, $asm, {});
	ss.initClass($tab_StoryPointModel, $asm, {
		add_dashboardDisposal: function StoryPointModel$add_DashboardDisposal(value) {
			this.$2$DashboardDisposalField = ss.delegateCombine(this.$2$DashboardDisposalField, value);
		},
		remove_dashboardDisposal: function StoryPointModel$remove_DashboardDisposal(value) {
			this.$2$DashboardDisposalField = ss.delegateRemove(this.$2$DashboardDisposalField, value);
		},
		add_newStoryPoint: function StoryPointModel$add_NewStoryPoint(value) {
			this.$2$NewStoryPointField = ss.delegateCombine(this.$2$NewStoryPointField, value);
		},
		remove_newStoryPoint: function StoryPointModel$remove_NewStoryPoint(value) {
			this.$2$NewStoryPointField = ss.delegateRemove(this.$2$NewStoryPointField, value);
		},
		get_dashboardModel: function StoryPointModel$get_DashboardModel() {
			return this.$dashboardModel;
		},
		get_isBackingSheetDashboard: function StoryPointModel$get_IsBackingSheetDashboard() {
			return this.get_$storyPointPresModel().isBackingSheetDashboard;
		},
		get_$storyPointPresModel: function StoryPointModel$get_StoryPointPresModel() {
			return this.pm;
		},
		get_storyPointId: function StoryPointModel$get_StoryPointId() {
			return this.get_$storyPointPresModel().storyPointId;
		},
		get_currentSheet: function StoryPointModel$get_CurrentSheet() {
			return this.get_$storyPointPresModel().currentSheet;
		},
		update: function StoryPointModel$Update(storyPointPresModel, context) {
			if (ss.isValue(this.get_$storyPointPresModel()) && (ss.isNullOrEmptyString(this.get_currentSheet()) || this.get_storyPointId() !== storyPointPresModel.storyPointId || this.$pointWasRemoved(storyPointPresModel))) {
				$tab_ApplicationModel.get_instance().get_shapeManager().clearShapeStampCache();
				this.presModelKey = new $tab_PresModelPathItem(storyPointPresModel.storyPointId.toString(), 0);
				if (ss.isValue(this.$dashboardModel)) {
					this.raiseEvent(this.$2$DashboardDisposalField, context);
					this.$dashboardModel = null;
				}
				this.$dashboardModel = new $tab_DashboardModel(this);
				this.$updateDashboard(storyPointPresModel.dashboardPresModel, context);
				this.raiseEvent(this.$2$NewStoryPointField, context);
			}
			else {
				this.$updateDashboard(storyPointPresModel.dashboardPresModel, context);
			}
			this.swapPresModel(storyPointPresModel);
		},
		$updateDashboard: function StoryPointModel$UpdateDashboard(dashboardPresModel, context) {
			if (ss.isValue(dashboardPresModel)) {
				this.get_dashboardModel().update(dashboardPresModel, context);
			}
		},
		$pointWasRemoved: function StoryPointModel$PointWasRemoved(storyPointPresModel) {
			return ss.isNullOrEmptyString(storyPointPresModel.currentSheet.toString()) && !ss.isNullOrEmptyString(this.get_currentSheet());
		}
	}, $tab_Model);
	ss.initClass($tab_StoryPointsModel, $asm, {
		get_currentStoryPoint: function StoryPointsModel$get_CurrentStoryPoint() {
			return this.$pointModel;
		},
		update: function StoryPointsModel$Update(storyPoint, context) {
			if (!ss.isValue(this.$pointModel)) {
				this.$pointModel = new $tab_StoryPointModel(this, storyPoint.storyPointId);
			}
			this.$pointModel.update(storyPoint, context);
		}
	}, $tab_Model);
	ss.initClass($tab_StoryPointsPresModelCache, $asm, {
		hasStoryPoint: function StoryPointsPresModelCache$HasStoryPoint(storyPointID) {
			return this.$storyPointCache.has(storyPointID.toString());
		},
		getStoryPoint: function StoryPointsPresModelCache$GetStoryPoint(storyPointID) {
			var record = this.$storyPointCache.get(storyPointID.toString());
			return record.get_$storyPoint();
		},
		addStoryPoint: function StoryPointsPresModelCache$AddStoryPoint(storyPointID, storyPM) {
			this.$storyPointCache.add(storyPointID.toString(), new $tab_$StoryCacheRecord(storyPM));
		},
		$cacheStoryPointPresModelIfApplicable: function StoryPointsPresModelCache$CacheStoryPointPresModelIfApplicable(args) {
			var command = args.get_worldUpdateCommand();
			var appModel = args.get_applicationPresModel();
			var sheetChanged = args.get_sheetChanged();
			ss.Debug.assert(ss.isValue(command) && ss.isValue(appModel), "Can't process, input is empty");
			if (this.$shouldClearCacheDispose(appModel, sheetChanged)) {
				this.$clearCache();
			}
			if (!$tab_StoryPointsPresModelCache.$shouldCachePresModel(appModel)) {
				return;
			}
			if (!_.contains($tab_StoryPointsPresModelCache.$commandsToCache.value(), command.commandName)) {
				return;
			}
			var storyPoint = $tab_StoryPointsPresModelCache.$extractStoryPoint(appModel);
			if (ss.isNullOrUndefined(storyPoint)) {
				return;
			}
			var currentStoryPointId = storyPoint.storyPointId.toString();
			this.$storyPointCache.add(currentStoryPointId, new $tab_$StoryCacheRecord(storyPoint));
		},
		$shouldClearCacheDispose: function StoryPointsPresModelCache$ShouldClearCacheDispose(appModel, sheetChanged) {
			if ($tab_StoryPointsPresModelCache.$isEmptyModel(appModel)) {
				return false;
			}
			if (!appModel.workbookPresModel.dashboardPresModel.isStory || sheetChanged) {
				return true;
			}
			return false;
		},
		$clearCache: function StoryPointsPresModelCache$ClearCache() {
			this.$storyPointCache.clear();
			$tab_StoryPointsPresModelCache.$bootstrapRecord = null;
		},
		dispose: function StoryPointsPresModelCache$Dispose() {
			this.$clearCache();
			$tab_WorldUpdateInterceptor.get().remove_onCommandResponse(ss.mkdel(this, this.$cacheStoryPointPresModelIfApplicable));
		}
	}, null, [ss.IDisposable]);
	ss.initClass($tab_StyledBoxModel, $asm, {
		add_styleUpdated: function StyledBoxModel$add_StyleUpdated(value) {
			this.$2$StyleUpdatedField = ss.delegateCombine(this.$2$StyleUpdatedField, value);
		},
		remove_styleUpdated: function StyledBoxModel$remove_StyleUpdated(value) {
			this.$2$StyleUpdatedField = ss.delegateRemove(this.$2$StyleUpdatedField, value);
		},
		get_styledBoxPresModel: function StyledBoxModel$get_StyledBoxPresModel() {
			return ss.coalesce(this.pm, new Object());
		},
		get_hasFill: function StyledBoxModel$get_HasFill() {
			return ss.coalesce(this.get_styledBoxPresModel().hasFill, false);
		},
		get_fillColor: function StyledBoxModel$get_FillColor() {
			return ss.coalesce(this.get_styledBoxPresModel().fillColor, 'rgba(0, 0, 0, 0)');
		},
		get_margin: function StyledBoxModel$get_Margin() {
			return this.$margins.get_defaultValue();
		},
		get_marginTop: function StyledBoxModel$get_MarginTop() {
			return this.$margins.get_topValue();
		},
		get_marginLeft: function StyledBoxModel$get_MarginLeft() {
			return this.$margins.get_leftValue();
		},
		get_marginBottom: function StyledBoxModel$get_MarginBottom() {
			return this.$margins.get_bottomValue();
		},
		get_marginRight: function StyledBoxModel$get_MarginRight() {
			return this.$margins.get_rightValue();
		},
		get_marginDefinition: function StyledBoxModel$get_MarginDefinition() {
			return new $tab_MarginDefinition.$ctor1(this.get_styledBoxPresModel());
		},
		get_padding: function StyledBoxModel$get_Padding() {
			return this.$padding.get_defaultValue();
		},
		get_paddingTop: function StyledBoxModel$get_PaddingTop() {
			return this.$padding.get_topValue();
		},
		get_paddingLeft: function StyledBoxModel$get_PaddingLeft() {
			return this.$padding.get_leftValue();
		},
		get_paddingBottom: function StyledBoxModel$get_PaddingBottom() {
			return this.$padding.get_bottomValue();
		},
		get_paddingRight: function StyledBoxModel$get_PaddingRight() {
			return this.$padding.get_rightValue();
		},
		get_paddingDefinition: function StyledBoxModel$get_PaddingDefinition() {
			return new $tab_PaddingDefinition.$ctor1(this.get_styledBoxPresModel());
		},
		get_borderStyle: function StyledBoxModel$get_BorderStyle() {
			return ss.coalesce(this.get_styledBoxPresModel().borderStyle, 'bs-none');
		},
		get_borderStyleTop: function StyledBoxModel$get_BorderStyleTop() {
			return ss.coalesce(this.get_styledBoxPresModel().borderStyleTop, this.get_borderStyle());
		},
		get_borderStyleLeft: function StyledBoxModel$get_BorderStyleLeft() {
			return ss.coalesce(this.get_styledBoxPresModel().borderStyleLeft, this.get_borderStyle());
		},
		get_borderStyleBottom: function StyledBoxModel$get_BorderStyleBottom() {
			return ss.coalesce(this.get_styledBoxPresModel().borderStyleBottom, this.get_borderStyle());
		},
		get_borderStyleRight: function StyledBoxModel$get_BorderStyleRight() {
			return ss.coalesce(this.get_styledBoxPresModel().borderStyleRight, this.get_borderStyle());
		},
		get_borderColor: function StyledBoxModel$get_BorderColor() {
			return ss.coalesce(this.get_styledBoxPresModel().borderColor, 'rgba(0, 0, 0, 0)');
		},
		get_borderColorTop: function StyledBoxModel$get_BorderColorTop() {
			return ss.coalesce(this.get_styledBoxPresModel().borderColorTop, this.get_borderColor());
		},
		get_borderColorLeft: function StyledBoxModel$get_BorderColorLeft() {
			return ss.coalesce(this.get_styledBoxPresModel().borderColorLeft, this.get_borderColor());
		},
		get_borderColorBottom: function StyledBoxModel$get_BorderColorBottom() {
			return ss.coalesce(this.get_styledBoxPresModel().borderColorBottom, this.get_borderColor());
		},
		get_borderColorRight: function StyledBoxModel$get_BorderColorRight() {
			return ss.coalesce(this.get_styledBoxPresModel().borderColorRight, this.get_borderColor());
		},
		get_borderWidth: function StyledBoxModel$get_BorderWidth() {
			return ss.coalesce(this.get_styledBoxPresModel().uw, 0);
		},
		get_borderWidthTop: function StyledBoxModel$get_BorderWidthTop() {
			return ss.coalesce(this.get_styledBoxPresModel().uwt, this.get_borderWidth());
		},
		get_borderWidthLeft: function StyledBoxModel$get_BorderWidthLeft() {
			return ss.coalesce(this.get_styledBoxPresModel().uwl, this.get_borderWidth());
		},
		get_borderWidthBottom: function StyledBoxModel$get_BorderWidthBottom() {
			return ss.coalesce(this.get_styledBoxPresModel().uwb, this.get_borderWidth());
		},
		get_borderWidthRight: function StyledBoxModel$get_BorderWidthRight() {
			return ss.coalesce(this.get_styledBoxPresModel().uwr, this.get_borderWidth());
		},
		get_border: function StyledBoxModel$get_Border() {
			return new $tab_BorderDefinition(this.get_borderWidth(), this.get_borderStyle(), this.get_borderColor(), 0);
		},
		get_borderTop: function StyledBoxModel$get_BorderTop() {
			return new $tab_BorderDefinition(this.get_borderWidthTop(), this.get_borderStyleTop(), this.get_borderColorTop(), 1);
		},
		get_borderLeft: function StyledBoxModel$get_BorderLeft() {
			return new $tab_BorderDefinition(this.get_borderWidthLeft(), this.get_borderStyleLeft(), this.get_borderColorLeft(), 2);
		},
		get_borderBottom: function StyledBoxModel$get_BorderBottom() {
			return new $tab_BorderDefinition(this.get_borderWidthBottom(), this.get_borderStyleBottom(), this.get_borderColorBottom(), 4);
		},
		get_borderRight: function StyledBoxModel$get_BorderRight() {
			return new $tab_BorderDefinition(this.get_borderWidthRight(), this.get_borderStyleRight(), this.get_borderColorRight(), 3);
		},
		update: function StyledBoxModel$Update(newModel, context) {
			if (this.isNewPresModelSameAsOld(newModel)) {
				return;
			}
			this.pm = newModel;
			this.$padding = new $tab_PaddingDefinition.$ctor1(this.get_styledBoxPresModel());
			this.$margins = new $tab_MarginDefinition.$ctor1(this.get_styledBoxPresModel());
			this.raiseEvent(this.$2$StyleUpdatedField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_TableCalcIdentifierModel, $asm, {
		get_nestingLevel: function TableCalcIdentifierModel$get_NestingLevel() {
			return this.$nestingLevel;
		},
		get_fieldName: function TableCalcIdentifierModel$get_FieldName() {
			return this.$fieldName;
		},
		update: function TableCalcIdentifierModel$Update(presModel) {
			if (ss.isNullOrUndefined(presModel)) {
				this.$nestingLevel = 'primary';
				this.$fieldName = '';
				return;
			}
			this.$nestingLevel = presModel.calcNestingLevel;
			this.$fieldName = presModel.fn;
		}
	});
	ss.initClass($tab_TableCalcModel, $asm, {
		add_modelUpdated: function TableCalcModel$add_ModelUpdated(value) {
			this.$2$ModelUpdatedField = ss.delegateCombine(this.$2$ModelUpdatedField, value);
		},
		remove_modelUpdated: function TableCalcModel$remove_ModelUpdated(value) {
			this.$2$ModelUpdatedField = ss.delegateRemove(this.$2$ModelUpdatedField, value);
		},
		get_$tableCalcPresModel: function TableCalcModel$get_TableCalcPresModel() {
			return this.pm;
		},
		get_hasTableCalc: function TableCalcModel$get_HasTableCalc() {
			return ss.isValue(this.pm);
		},
		get_tableCalcTypeWidgetState: function TableCalcModel$get_TableCalcTypeWidgetState() {
			return this.get_$tableCalcPresModel().tableCalcTypeState;
		},
		get_tableCalcType: function TableCalcModel$get_TableCalcType() {
			return (this.get_hasTableCalc() ? this.get_tableCalcTypeValues()[this.get_tableCalcTypeIndex()] : 'none');
		},
		get_tableCalcTypeIndex: function TableCalcModel$get_TableCalcTypeIndex() {
			return this.get_$tableCalcPresModel().tableCalcTypeIndex;
		},
		get_tableCalcTypeCaptions: function TableCalcModel$get_TableCalcTypeCaptions() {
			return this.get_$tableCalcPresModel().tableCalcTypeCaptions;
		},
		get_tableCalcTypeValues: function TableCalcModel$get_TableCalcTypeValues() {
			return this.get_$tableCalcPresModel().tableCalcTypeValues;
		},
		get_typeSpecificTableCalcModel: function TableCalcModel$get_TypeSpecificTableCalcModel() {
			return this.$typeSpecificTableCalcModel;
		},
		get_tableCalcOrderingModel: function TableCalcModel$get_TableCalcOrderingModel() {
			return this.$tableCalcOrderingModel;
		},
		get_tableCalcIdentifier: function TableCalcModel$get_TableCalcIdentifier() {
			return this.$2$TableCalcIdentifierField;
		},
		set_tableCalcIdentifier: function TableCalcModel$set_TableCalcIdentifier(value) {
			this.$2$TableCalcIdentifierField = value;
		},
		update: function TableCalcModel$Update(deltaPresModel, context) {
			var deltaTableCalcPresModel = deltaPresModel;
			if (this.isNewPresModelSameAsOld(deltaTableCalcPresModel)) {
				return;
			}
			this.swapAndCopyPresModel(deltaTableCalcPresModel);
			if (this.get_hasTableCalc()) {
				this.get_tableCalcIdentifier().update(deltaTableCalcPresModel.tableCalcIdentifier);
				this.$tableCalcOrderingModel.update(deltaTableCalcPresModel.tableCalcOrderingPresModel, context);
				this.$createTypeSpecificTableCalcModel(context);
			}
			else {
				this.get_tableCalcIdentifier().update(null);
				this.$tableCalcOrderingModel.update(null, context);
			}
			this.raiseEvent(this.$2$ModelUpdatedField, context);
		},
		$createTypeSpecificTableCalcModel: function TableCalcModel$CreateTypeSpecificTableCalcModel(context) {
			var modelType = null;
			var holderFieldName = null;
			switch (this.get_tableCalcType()) {
				case 'diff':
				case 'pct-diff':
				case 'pct-value': {
					modelType = $tab_DifferenceTableCalcModel;
					holderFieldName = 'differenceTableCalcPresModel'.toString();
					break;
				}
				case 'pct-total': {
					modelType = $tab_PercentTotalTableCalcModel;
					holderFieldName = 'percentTotalTableCalcPresModel'.toString();
					break;
				}
				case 'rank':
				case 'pct-rank': {
					modelType = $tab_RankTableCalcModel;
					holderFieldName = 'rankTableCalcPresModel'.toString();
					break;
				}
				case 'cumulative': {
					modelType = $tab_CumulativeTableCalcModel;
					holderFieldName = 'cumulativeTableCalcPresModel'.toString();
					break;
				}
				case 'window': {
					modelType = $tab_WindowTableCalcModel;
					holderFieldName = 'windowTableCalcPresModel'.toString();
					break;
				}
				case 'custom': {
					modelType = $tab_CustomTableCalcModel;
					holderFieldName = 'customTableCalcPresModel'.toString();
					break;
				}
				default: {
					tab.Logger.lazyGetLogger($tab_TableCalcModel).warn('%s is not a supported table calc type', [this.get_tableCalcType()]);
					break;
				}
			}
			if (ss.isNullOrUndefined(modelType)) {
				this.$typeSpecificTableCalcModel = null;
				return;
			}
			if (ss.isNullOrUndefined(this.$typeSpecificTableCalcModel) || !ss.referenceEquals(ss.getInstanceType(this.$typeSpecificTableCalcModel), modelType)) {
				this.$typeSpecificTableCalcModel = new modelType(this);
			}
			this.$typeSpecificTableCalcModel.update($tab_TableCalcModel.$getTypeSpecificTableCalcPresModel(this.get_$tableCalcPresModel(), holderFieldName), context);
		}
	}, $tab_Model);
	ss.initClass($tab_TableCalcOrderingModel, $asm, {
		add_modelUpdated: function TableCalcOrderingModel$add_ModelUpdated(value) {
			this.$2$ModelUpdatedField = ss.delegateCombine(this.$2$ModelUpdatedField, value);
		},
		remove_modelUpdated: function TableCalcOrderingModel$remove_ModelUpdated(value) {
			this.$2$ModelUpdatedField = ss.delegateRemove(this.$2$ModelUpdatedField, value);
		},
		get_orderingTypeValues: function TableCalcOrderingModel$get_OrderingTypeValues() {
			return this.get_ordering().orderingTypeValues;
		},
		get_orderingTypeIndex: function TableCalcOrderingModel$get_OrderingTypeIndex() {
			return this.get_ordering().orderingTypeIndex;
		},
		get_orderingTypeCaptions: function TableCalcOrderingModel$get_OrderingTypeCaptions() {
			return this.get_ordering().orderingTypeCaptions;
		},
		get_addressingIndexes: function TableCalcOrderingModel$get_AddressingIndexes() {
			return this.get_ordering().addressingIndices;
		},
		get_addressingInvalidIndexes: function TableCalcOrderingModel$get_AddressingInvalidIndexes() {
			return this.get_ordering().addressingInvalidIndices;
		},
		get_addressingCaptions: function TableCalcOrderingModel$get_AddressingCaptions() {
			return this.get_ordering().addressingCaptions;
		},
		get_addressingValues: function TableCalcOrderingModel$get_AddressingValues() {
			return this.get_ordering().addressingValues;
		},
		get_addressingState: function TableCalcOrderingModel$get_AddressingState() {
			return this.get_ordering().addressingState;
		},
		get_atTheLevelState: function TableCalcOrderingModel$get_AtTheLevelState() {
			return this.get_ordering().atTheLevelState;
		},
		get_atTheLevelCaptions: function TableCalcOrderingModel$get_AtTheLevelCaptions() {
			return this.get_ordering().atTheLevelCaptions;
		},
		get_atTheLevelValues: function TableCalcOrderingModel$get_AtTheLevelValues() {
			return this.get_ordering().atTheLevelValues;
		},
		get_atTheLevelIndex: function TableCalcOrderingModel$get_AtTheLevelIndex() {
			return this.get_ordering().atTheLevelIndex;
		},
		get_isAtTheLevelFieldInvalid: function TableCalcOrderingModel$get_IsAtTheLevelFieldInvalid() {
			return this.get_ordering().atTheLevelFieldIsInvalid;
		},
		get_atTheLevelInvalidFieldCaption: function TableCalcOrderingModel$get_AtTheLevelInvalidFieldCaption() {
			return this.get_ordering().atTheLevelInvalidFieldCaption;
		},
		get_atTheLevelSpecialCaption: function TableCalcOrderingModel$get_AtTheLevelSpecialCaption() {
			return this.get_ordering().atTheLevelSpecialCaption;
		},
		get_atTheLevelSpecialValue: function TableCalcOrderingModel$get_AtTheLevelSpecialValue() {
			return '';
		},
		get_atTheLevelValue: function TableCalcOrderingModel$get_AtTheLevelValue() {
			return ((this.get_atTheLevelIndex() === -1) ? this.get_atTheLevelSpecialValue() : this.get_atTheLevelValues()[this.get_atTheLevelIndex()]);
		},
		get_restartEveryState: function TableCalcOrderingModel$get_RestartEveryState() {
			return this.get_ordering().restartEveryState;
		},
		get_restartEveryCaptions: function TableCalcOrderingModel$get_RestartEveryCaptions() {
			return this.get_ordering().restartEveryCaptions;
		},
		get_restartEveryIndex: function TableCalcOrderingModel$get_RestartEveryIndex() {
			return this.get_ordering().restartEveryIndex;
		},
		get_isRestartEveryFieldInvalid: function TableCalcOrderingModel$get_IsRestartEveryFieldInvalid() {
			return this.get_ordering().restartEveryFieldIsInvalid;
		},
		get_restartEveryValues: function TableCalcOrderingModel$get_RestartEveryValues() {
			return this.get_ordering().restartEveryValues;
		},
		get_restartEverySpecialCaption: function TableCalcOrderingModel$get_RestartEverySpecialCaption() {
			return this.get_ordering().restartEverySpecialCaption;
		},
		get_restartEverySpecialValue: function TableCalcOrderingModel$get_RestartEverySpecialValue() {
			return '';
		},
		get_restartEveryValue: function TableCalcOrderingModel$get_RestartEveryValue() {
			return ((this.get_restartEveryIndex() === -1) ? this.get_restartEverySpecialValue() : this.get_restartEveryValues()[this.get_restartEveryIndex()]);
		},
		get_sortState: function TableCalcOrderingModel$get_SortState() {
			return this.get_ordering().sortState;
		},
		get_sortAggState: function TableCalcOrderingModel$get_SortAggState() {
			return this.get_ordering().sortAggState;
		},
		get_sortModeIsAuto: function TableCalcOrderingModel$get_SortModeIsAuto() {
			return this.get_ordering().sortModeIsAuto;
		},
		get_sortModeCaption: function TableCalcOrderingModel$get_SortModeCaption() {
			return this.get_ordering().sortModeCaption;
		},
		get_sortField: function TableCalcOrderingModel$get_SortField() {
			if (this.get_ordering().sortModeIsAuto) {
				return null;
			}
			ss.Debug.assert(this.get_ordering().sortFieldIndex >= 0 && this.get_ordering().sortFieldIndex < this.get_ordering().sortFieldValues.length, 'SortFieldIndex not a valid index into SortFieldValues');
			return this.get_ordering().sortFieldValues[this.get_ordering().sortFieldIndex];
		},
		get_isSortFieldInvalid: function TableCalcOrderingModel$get_IsSortFieldInvalid() {
			return this.get_ordering().sortFieldIsInvalid;
		},
		get_sortFieldCaptions: function TableCalcOrderingModel$get_SortFieldCaptions() {
			return this.get_ordering().sortFieldCaptions;
		},
		get_sortFieldIndex: function TableCalcOrderingModel$get_SortFieldIndex() {
			return this.get_ordering().sortFieldIndex;
		},
		get_sortFieldValues: function TableCalcOrderingModel$get_SortFieldValues() {
			return this.get_ordering().sortFieldValues;
		},
		get_sortAgg: function TableCalcOrderingModel$get_SortAgg() {
			if (this.get_ordering().sortModeIsAuto) {
				return null;
			}
			ss.Debug.assert(this.get_ordering().sortFieldIndex >= 0 && this.get_ordering().sortFieldIndex < this.get_ordering().sortFieldValues.length, 'SortAggIndex not a valid index into SortAggValues');
			return this.get_ordering().sortAggValues[this.get_ordering().sortAggIndvValues];
		},
		get_sortAggCaptions: function TableCalcOrderingModel$get_SortAggCaptions() {
			return this.get_ordering().sortAggCaptions;
		},
		get_sortAggIndex: function TableCalcOrderingModel$get_SortAggIndex() {
			return this.get_ordering().sortAggIndvValues;
		},
		get_sortAggValues: function TableCalcOrderingModel$get_SortAggValues() {
			return this.get_ordering().sortAggValues;
		},
		get_sortDirectionValues: function TableCalcOrderingModel$get_SortDirectionValues() {
			return this.get_ordering().sortDirectionValues;
		},
		get_sortDirectionIndex: function TableCalcOrderingModel$get_SortDirectionIndex() {
			return this.get_ordering().sortDirectionIndex;
		},
		get_sortDirectionCaptions: function TableCalcOrderingModel$get_SortDirectionCaptions() {
			return this.get_ordering().sortDirectionCaptions;
		},
		get_ordering: function TableCalcOrderingModel$get_Ordering() {
			return (ss.isValue(this.pm) ? this.pm : null);
		},
		get_hasOrdering: function TableCalcOrderingModel$get_HasOrdering() {
			return ss.isValue(this.get_ordering());
		},
		get_tableCalcIdentifier: function TableCalcOrderingModel$get_TableCalcIdentifier() {
			return (ss.isNullOrUndefined(this.parent) ? new $tab_TableCalcIdentifierModel(null) : this.parent.get_tableCalcIdentifier());
		},
		update: function TableCalcOrderingModel$Update(newPresModel, context) {
			this.simpleSwapToUpdate(newPresModel, this.$2$ModelUpdatedField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_TableCalcReferenceModel, $asm, {
		add_modelUpdated: function TableCalcReferenceModel$add_ModelUpdated(value) {
			this.$2$ModelUpdatedField = ss.delegateCombine(this.$2$ModelUpdatedField, value);
		},
		remove_modelUpdated: function TableCalcReferenceModel$remove_ModelUpdated(value) {
			this.$2$ModelUpdatedField = ss.delegateRemove(this.$2$ModelUpdatedField, value);
		},
		get_relativeValues: function TableCalcReferenceModel$get_RelativeValues() {
			return this.pm.relativeValues;
		},
		get_relativeCaptions: function TableCalcReferenceModel$get_RelativeCaptions() {
			return this.pm.relativeCaptions;
		},
		get_fixedValues: function TableCalcReferenceModel$get_FixedValues() {
			return this.pm.fixedValues;
		},
		get_fixedCaptions: function TableCalcReferenceModel$get_FixedCaptions() {
			return this.pm.fixedCaptions;
		},
		get_paramValues: function TableCalcReferenceModel$get_ParamValues() {
			return this.pm.paramValues;
		},
		get_paramCaptions: function TableCalcReferenceModel$get_ParamCaptions() {
			return this.pm.paramCaptions;
		},
		get_referenceOptionsSets: function TableCalcReferenceModel$get_ReferenceOptionsSets() {
			return this.pm.referenceOptionsSets;
		},
		get_selectionIndex: function TableCalcReferenceModel$get_SelectionIndex() {
			return this.pm.referenceIndex;
		},
		get_referenceWidgetState: function TableCalcReferenceModel$get_ReferenceWidgetState() {
			return this.pm.referenceOptionsState;
		},
		get_tableCalcIdentifier: function TableCalcReferenceModel$get_TableCalcIdentifier() {
			var typeSpecificParentModel = this.parent;
			return (ss.isNullOrUndefined(typeSpecificParentModel) ? new $tab_TableCalcIdentifierModel(null) : typeSpecificParentModel.get_tableCalcIdentifier());
		},
		update: function TableCalcReferenceModel$Update(newPresModel, context) {
			this.simpleSwapToUpdate(newPresModel, this.$2$ModelUpdatedField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_TabResources, $asm, {});
	ss.initClass($tab_TextRegionModel, $asm, {
		add_newText: function TextRegionModel$add_NewText(value) {
			this.$2$NewTextField = ss.delegateCombine(this.$2$NewTextField, value);
		},
		remove_newText: function TextRegionModel$remove_NewText(value) {
			this.$2$NewTextField = ss.delegateRemove(this.$2$NewTextField, value);
		},
		get_hAlign: function TextRegionModel$get_HAlign() {
			return this.pm.halign;
		},
		get_html: function TextRegionModel$get_Html() {
			return this.pm.html;
		},
		get_orientation: function TextRegionModel$get_Orientation() {
			return this.pm.orientation;
		},
		get_styledBox: function TextRegionModel$get_StyledBox() {
			return this.pm.styledBox;
		},
		get_vAlign: function TextRegionModel$get_VAlign() {
			return this.pm.valign;
		},
		update: function TextRegionModel$Update(textRegionPresModel, context) {
			$tab_FontNotificationUtil.notifyFontsFromTextRegionPresModel(textRegionPresModel);
			this.simpleSwapToUpdate(textRegionPresModel, this.$2$NewTextField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_ToggleINDJoinSemanticsCmd, $asm, {
		invoke: function ToggleINDJoinSemanticsCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand('toggle-ind-join-semantics', this.cmdParams));
		},
		validateInvokeParams: function ToggleINDJoinSemanticsCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ToggleINDJoinSemanticsCmd$Response]));
	ss.initClass($tab_ToggleINDJoinSemanticsCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_ToggleINDJoinSemanticsWrapperCmd, $asm, {
		validateInvokeParams: function ToggleINDJoinSemanticsWrapperCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_WebBaseCmd$2, [Object, $tab_ToggleINDJoinSemanticsWrapperCmd$Response]));
	ss.initClass($tab_ToggleINDJoinSemanticsWrapperCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_ToolbarModel, $asm, {
		add_newToolbar: function ToolbarModel$add_NewToolbar(value) {
			this.$2$NewToolbarField = ss.delegateCombine(this.$2$NewToolbarField, value);
		},
		remove_newToolbar: function ToolbarModel$remove_NewToolbar(value) {
			this.$2$NewToolbarField = ss.delegateRemove(this.$2$NewToolbarField, value);
		},
		get_vizCommandItems: function ToolbarModel$get_VizCommandItems() {
			var commands = null;
			if (ss.isValue(this.pm)) {
				var commandsWrapper = $tab_CommandsPresModelWrapper.create(this.pm.vizCommands);
				commands = commandsWrapper.get_commandItems();
			}
			return commands;
		},
		get_nonVizCommandItems: function ToolbarModel$get_NonVizCommandItems() {
			if (ss.isNullOrUndefined(this.pm)) {
				return null;
			}
			var commandsWrapper = $tab_CommandsPresModelWrapper.create(this.pm.nonVizCommands);
			return commandsWrapper.get_commandItems();
		},
		get_legacyMenuItems: function ToolbarModel$get_LegacyMenuItems() {
			return this.pm.legacyMenus;
		},
		update: function ToolbarModel$Update(toolbarPresModel, context) {
			if (ss.isValue(toolbarPresModel)) {
				this.simpleSwapToUpdate(toolbarPresModel, this.$2$NewToolbarField, context);
			}
		},
		isLegacyMenuItemEnabled: function ToolbarModel$IsLegacyMenuItemEnabled(name) {
			if (ss.isNullOrUndefined(this.get_legacyMenuItems())) {
				return false;
			}
			var legacyMenuItem = _.find(this.get_legacyMenuItems(), function(item) {
				return item.legacyMenuName === name;
			});
			return ss.isValue(legacyMenuItem) && _.every(legacyMenuItem.legacyMenuStates, function(state) {
				return state !== 'grayed';
			});
		}
	}, $tab_Model);
	ss.initClass($tab_ToolbarServerCommands, $asm, {});
	ss.initClass($tab_Transaction, $asm, {
		get_$transactedItems: function Transaction$get_TransactedItems() {
			return this.$origItems;
		},
		get_transactedChange: function Transaction$get_TransactedChange() {
			return $tab_Transaction.$buildTransactedChange(this.$transactedItems);
		},
		makeMutablePresModel: function Transaction$MakeMutablePresModel(model, noRollback) {
			ss.Debug.assert(!noRollback || ss.isInstanceOfType(model, $tab_FlipboardModel), 'only FlipboardModel should skip rollback');
			var modelPath = model.getPresModelPath();
			for (var $t1 = 0; $t1 < this.$transactedItems.length; $t1++) {
				var item = this.$transactedItems[$t1];
				if (_.isEqual(item.get_$path(), modelPath)) {
					return item.get_$model();
				}
			}
			var newPM = model.getMutableCopyOfPresModel();
			this.$transactedItems.push(new $tab_$TransactionItem(modelPath, newPM));
			if (!noRollback) {
				this.$origItems.push(new $tab_$TransactionItem(modelPath, model.pm));
			}
			return newPM;
		}
	});
	ss.initClass($tab_Transactor, $asm, {
		beginTransaction: function Transactor$BeginTransaction(context) {
			if (ss.isValue(this.$transaction)) {
				throw new ss.Exception('Internal error: nested transaction');
			}
			this.$transaction = new $tab_Transaction(context);
			return this.$transaction;
		},
		rollbackTransaction: function Transactor$RollbackTransaction() {
			this.$transaction = null;
		},
		endTransaction: function Transactor$EndTransaction() {
			ss.Debug.assert(ss.isValue(this.$transaction), 'Calling EndTransction() without transaction in progress');
			var $t1 = ss.getEnumerator(this.$transaction.get_$transactedItems());
			try {
				while ($t1.moveNext()) {
					var item = $t1.current();
					if (!ss.keyExists(this.$transactedItems, item.get_$path().get_pathAsString())) {
						this.$transactedItems[item.get_$path().get_pathAsString()] = item;
					}
				}
			}
			finally {
				$t1.dispose();
			}
			var change = this.$transaction.get_transactedChange();
			this.$transaction = null;
			return change;
		},
		resetTransactedState: function Transactor$ResetTransactedState() {
			ss.clearKeys(this.$transactedItems);
		},
		rollbackTransactions: function Transactor$RollbackTransactions(context) {
			if (ss.getKeyCount(this.$transactedItems) > 0) {
				$tab_ApplicationModel.get_instance().update($tab_Transaction.$buildTransactedChange(_.values(this.$transactedItems)), context);
			}
		}
	});
	ss.initClass($tab_UbertipButtonMenuModel, $asm, {
		get_itemCount: function UbertipButtonMenuModel$get_ItemCount() {
			ss.Debug.assert(ss.isValue(this.get_$wrappedCommands().get_commandItems()), '.');
			return this.get_$wrappedCommands().get_commandItems().length;
		},
		get_hasItems: function UbertipButtonMenuModel$get_HasItems() {
			return this.get_itemCount() > 0;
		},
		get_defaultItem: function UbertipButtonMenuModel$get_DefaultItem() {
			return this.get_$wrappedCommands().get_defaultItem();
		},
		get_$wrappedCommands: function UbertipButtonMenuModel$get_WrappedCommands() {
			return $tab_CommandsPresModelWrapper.create(this.get_wrappedCommandItemPresModel().get_commands());
		}
	}, $tab_CommandItemBasedUbertipButtonModel, [$tab_ICommandModel]);
	ss.initClass($tab_UberTipClientCommands, $asm, {});
	ss.initClass($tab_UbertipSerializer, $asm, {});
	ss.initClass($tab_UpdateDataAlertCmd, $asm, {
		invoke: function UpdateDataAlertCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand('update-data-alert', this.cmdParams));
		},
		validateInvokeParams: function UpdateDataAlertCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'dataAlertConditionOp')) {
				throw new ss.Exception('missing param DocParams.DataAlertConditionOperationType');
			}
			if (!ss.keyExists(this.cmdParams, 'dataAlertThresholdText')) {
				throw new ss.Exception('missing param DocParams.DataAlertThresholdText');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_UpdateDataAlertCmd$Response]));
	ss.initClass($tab_UpdateDataAlertCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'isDataAlertConditionMet')) {
				throw new ss.Exception('missing param DocParams.IsDataAlertConditionMet');
			}
		}
	});
	ss.initClass($tab_UriPathStripper, $asm, {});
	ss.initEnum($tab_UrlStringReplacementOutcome, $asm, { success: 'success', urlConstructionFail: 'urlConstructionFail', notEnoughInfoYet: 'notEnoughInfoYet' }, true);
	ss.initClass($tab_UserFactory, $asm, {});
	ss.initClass($tab_ViewGeometryModel, $asm, {
		update: function ViewGeometryModel$Update(newPresModel) {
			this.pm = newPresModel;
		}
	}, $tab_Model);
	ss.initClass($tab_ViewSession, $asm, {
		get_viewId: function ViewSession$get_ViewId() {
			return this.viewid;
		},
		set_viewId: function ViewSession$set_ViewId(value) {
			if (ss.referenceEquals(this.viewid, value)) {
				return;
			}
			this.viewid = value;
			tab.Log.get(this).debug('Update viewId=%s', [this.viewid]);
		},
		$formatRegionImageURL: function ViewSession$FormatRegionImageURL(sregion) {
			return this.formatViewMethod(this.viewid, 'region') + '?r=' + sregion;
		},
		formatRegionTileURL: function ViewSession$FormatRegionTileURL(cacheInfo, r, requestId) {
			if (cacheInfo.useUrl) {
				return this.formatTileURL(cacheInfo, r, 0, 0, '', requestId);
			}
			return this.$formatRegionImageURL(r) + '&' + requestId;
		},
		$formatLegendRegionImageURL: function ViewSession$FormatLegendRegionImageURL(sregion, fn) {
			var queryStr = '';
			if (!tab.MiscUtil.isNullOrEmpty$1(fn)) {
				queryStr = '&fn=' + encodeURIComponent(fn);
			}
			return this.formatViewMethod(this.viewid, 'region') + '?r=' + sregion + queryStr;
		},
		formatLegendRegionTileURL: function ViewSession$FormatLegendRegionTileURL(cacheInfo, r, fn, fnid, requestId) {
			fnid = (ss.isNullOrUndefined(fnid) ? '' : fnid);
			if (cacheInfo.useUrl) {
				return this.formatTileURL(cacheInfo, r + fnid, 0, 0, fn, requestId);
			}
			return this.$formatLegendRegionImageURL(r, fn) + '&' + requestId;
		},
		formatTileURL: function ViewSession$FormatTileURL(cacheInfo, r, tileX, tileY, fn, requestId) {
			if (cacheInfo.useUrl) {
				var url = cacheInfo.url;
				var queryStr;
				if (!tab.MiscUtil.isNullOrEmpty$1(fn)) {
					queryStr = '?fn=' + encodeURIComponent(fn) + '&' + requestId;
				}
				else {
					queryStr = '?=' + requestId;
				}
				return ss.replaceAllString(ss.replaceAllString(ss.replaceAllString(ss.replaceAllString(url, '%SESSIONID%', tsConfig.sessionid), '[r]', r), '[x]', tileX.toString()), '[y]', tileY.toString()) + queryStr;
			}
			var viewMethod = this.formatViewMethod(this.viewid, 'tile');
			return viewMethod + '?r=' + r + '&x=' + tileX + '&y=' + tileY + '&' + requestId;
		},
		formatUnderlyingDataURL: function ViewSession$FormatUnderlyingDataURL(selectAtPoint) {
			var sb = new ss.StringBuilder(this.formatViewMethod(this.viewid, 'viewData'));
			sb.append('?maxrows=200');
			if (ss.isValue(selectAtPoint)) {
				sb.append('&select_x=').append(selectAtPoint.x);
				sb.append('&select_y=').append(selectAtPoint.y);
			}
			return sb.toString();
		},
		formatExportCrossTabURL: function ViewSession$FormatExportCrossTabURL(charset) {
			if (ss.isNullOrUndefined(charset)) {
				charset = 'utf8';
			}
			return this.formatViewMethod(this.viewid, 'exportcrosstab') + '?charset=' + charset;
		},
		executeAction: function ViewSession$ExecuteAction(action, successCallback, onFailure) {
			if (action.get_commandType() === 9) {
				this.executeCommand(action);
			}
			else {
				var c = $tab_CommandUtils.newCommand('run-action', action.command.commandParams);
				$tab_ServerCommands.executeServerCommand(c, 'immediately', successCallback, onFailure);
			}
		},
		executeCommand: function ViewSession$ExecuteCommand(command) {
			tab.Log.get(this).debug('Execute command: %o', [command]);
			if (ss.isNullOrUndefined(command)) {
				return;
			}
			switch (command.get_commandType()) {
				case 9: {
					var urlAction = {};
					urlAction.url = command.command.commandParams.url;
					urlAction.target = command.command.commandParams.target;
					$tab_ActionUtils.launchActionUrls([urlAction], this.get_commonDialogProvider());
					break;
				}
				case 7: {
					var p = null;
					if (ss.isValue(command.command) && ss.isValue(command.command.commandParams) && ss.keyExists(command.command.commandParams, 'selectAtPoint')) {
						var ppm = JSON.parse(command.command.commandParams['selectAtPoint']);
						p = tab.PointUtil.fromPresModel(ppm);
					}
					window.open(this.formatUnderlyingDataURL(p), this.getWindow('vud'), 'scrollbars,resizable');
					break;
				}
				case 1:
				case 2:
				case 4:
				case 6:
				case 11:
				case 12:
				case 10:
				case 13: {
					tab.Log.get(this).debug('Command should probably be called directly or handled by UberTipClientCommands.ExecuteUbertipCommand : %o', [command]);
					break;
				}
				default: {
					tab.Log.get(this).debug('Unknown command type: %o', [command]);
					break;
				}
			}
		}
	}, $tab_SheetSession);
	ss.initClass($tab_VisualColumnHelpers, $asm, {});
	ss.initClass($tab_VisualListModel, $asm, {
		add_newVisualList: function VisualListModel$add_NewVisualList(value) {
			this.$2$NewVisualListField = ss.delegateCombine(this.$2$NewVisualListField, value);
		},
		remove_newVisualList: function VisualListModel$remove_NewVisualList(value) {
			this.$2$NewVisualListField = ss.delegateRemove(this.$2$NewVisualListField, value);
		},
		get_visualListPresModel: function VisualListModel$get_VisualListPresModel() {
			return this.pm;
		},
		get_groupItemNodes: function VisualListModel$get_GroupItemNodes() {
			if (ss.isNullOrUndefined(this.$drawGroups)) {
				this.$drawGroups = [];
				var $t1 = this.get_visualListPresModel().drawItems;
				for (var $t2 = 0; $t2 < $t1.length; $t2++) {
					var drawItem = $t1[$t2];
					if (drawItem.type === 'draw-group') {
						this.$drawGroups.push(drawItem);
					}
				}
			}
			return this.$drawGroups;
		},
		update: function VisualListModel$Update(visualListPresModel, context) {
			$tab_FontNotificationUtil.notifyFontsFromVisualListPresModel(visualListPresModel);
			if (this.isNewPresModelSameAsOld(visualListPresModel)) {
				return;
			}
			this.$drawGroups = null;
			this.swapAndCopyPresModel(visualListPresModel);
			this.raiseEvent(this.$2$NewVisualListField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_VisualModel, $asm, {
		add_newVisual: function VisualModel$add_NewVisual(value) {
			this.$2$NewVisualField = ss.delegateCombine(this.$2$NewVisualField, value);
		},
		remove_newVisual: function VisualModel$remove_NewVisual(value) {
			this.$2$NewVisualField = ss.delegateRemove(this.$2$NewVisualField, value);
		},
		add_newHiddenTuples: function VisualModel$add_NewHiddenTuples(value) {
			this.$2$NewHiddenTuplesField = ss.delegateCombine(this.$2$NewHiddenTuplesField, value);
		},
		remove_newHiddenTuples: function VisualModel$remove_NewHiddenTuples(value) {
			this.$2$NewHiddenTuplesField = ss.delegateRemove(this.$2$NewHiddenTuplesField, value);
		},
		add_newFilteredTuples: function VisualModel$add_NewFilteredTuples(value) {
			this.$2$NewFilteredTuplesField = ss.delegateCombine(this.$2$NewFilteredTuplesField, value);
		},
		remove_newFilteredTuples: function VisualModel$remove_NewFilteredTuples(value) {
			this.$2$NewFilteredTuplesField = ss.delegateRemove(this.$2$NewFilteredTuplesField, value);
		},
		add_urlInfoCacheChange: function VisualModel$add_UrlInfoCacheChange(value) {
			this.$2$UrlInfoCacheChangeField = ss.delegateCombine(this.$2$UrlInfoCacheChangeField, value);
		},
		remove_urlInfoCacheChange: function VisualModel$remove_UrlInfoCacheChange(value) {
			this.$2$UrlInfoCacheChangeField = ss.delegateRemove(this.$2$UrlInfoCacheChangeField, value);
		},
		add_visualValidStateChanged: function VisualModel$add_VisualValidStateChanged(value) {
			this.$2$VisualValidStateChangedField = ss.delegateCombine(this.$2$VisualValidStateChangedField, value);
		},
		remove_visualValidStateChanged: function VisualModel$remove_VisualValidStateChanged(value) {
			this.$2$VisualValidStateChangedField = ss.delegateRemove(this.$2$VisualValidStateChangedField, value);
		},
		add_brushingFromActionChanged: function VisualModel$add_BrushingFromActionChanged(value) {
			this.$2$BrushingFromActionChangedField = ss.delegateCombine(this.$2$BrushingFromActionChangedField, value);
		},
		remove_brushingFromActionChanged: function VisualModel$remove_BrushingFromActionChanged(value) {
			this.$2$BrushingFromActionChangedField = ss.delegateRemove(this.$2$BrushingFromActionChangedField, value);
		},
		add_colorDictionaryChanged: function VisualModel$add_ColorDictionaryChanged(value) {
			this.$2$ColorDictionaryChangedField = ss.delegateCombine(this.$2$ColorDictionaryChangedField, value);
		},
		remove_colorDictionaryChanged: function VisualModel$remove_ColorDictionaryChanged(value) {
			this.$2$ColorDictionaryChangedField = ss.delegateRemove(this.$2$ColorDictionaryChangedField, value);
		},
		add_vizNavigationSettingChanged: function VisualModel$add_VizNavigationSettingChanged(value) {
			this.$2$VizNavigationSettingChangedField = ss.delegateCombine(this.$2$VizNavigationSettingChangedField, value);
		},
		remove_vizNavigationSettingChanged: function VisualModel$remove_VizNavigationSettingChanged(value) {
			this.$2$VizNavigationSettingChangedField = ss.delegateRemove(this.$2$VizNavigationSettingChangedField, value);
		},
		add_emptyHighlightFogAllChanged: function VisualModel$add_EmptyHighlightFogAllChanged(value) {
			this.$2$EmptyHighlightFogAllChangedField = ss.delegateCombine(this.$2$EmptyHighlightFogAllChangedField, value);
		},
		remove_emptyHighlightFogAllChanged: function VisualModel$remove_EmptyHighlightFogAllChanged(value) {
			this.$2$EmptyHighlightFogAllChangedField = ss.delegateRemove(this.$2$EmptyHighlightFogAllChangedField, value);
		},
		get_worksheetName: function VisualModel$get_WorksheetName() {
			return this.get_visualId().worksheet;
		},
		get_visualId: function VisualModel$get_VisualId() {
			return this.pm.visualIdPresModel;
		},
		get_containerGeometry: function VisualModel$get_ContainerGeometry() {
			return this.get_zone().get_zoneCommonModel().get_zoneContentRectXY();
		},
		get_tooltipMode: function VisualModel$get_TooltipMode() {
			return this.pm.tooltipMode;
		},
		get_scenePresModel: function VisualModel$get_ScenePresModel() {
			return this.pm.scene;
		},
		get_shelves: function VisualModel$get_Shelves() {
			return this.$shelvesModel;
		},
		get_analyticsModel: function VisualModel$get_AnalyticsModel() {
			return this.$analyticsModel;
		},
		get_marksCardModel: function VisualModel$get_MarksCardModel() {
			return this.$marksCardModel;
		},
		get_selectionsModel: function VisualModel$get_SelectionsModel() {
			return this.$selectionsModel;
		},
		get_impliedSelectionModel: function VisualModel$get_ImpliedSelectionModel() {
			return this.$impliedSelectionModel;
		},
		get_brushingsModel: function VisualModel$get_BrushingsModel() {
			return this.$brushingsModel;
		},
		get_showMeModel: function VisualModel$get_ShowMeModel() {
			return this.$showMeModel;
		},
		get_sceneModel: function VisualModel$get_SceneModel() {
			return this.$sceneModel;
		},
		get_labelsModel: function VisualModel$get_LabelsModel() {
			return this.$labelsModel;
		},
		get_mapServerModel: function VisualModel$get_MapServerModel() {
			return this.$mapServerModel;
		},
		get_filters: function VisualModel$get_Filters() {
			return _.values(this.$filterModels);
		},
		get_filterModels: function VisualModel$get_FilterModels() {
			return this.$filterModels;
		},
		get_geometryModel: function VisualModel$get_GeometryModel() {
			return this.$geometryModel;
		},
		get_sortIndicatorsModel: function VisualModel$get_SortIndicatorsModel() {
			return this.$sortIndicatorsModel;
		},
		get_vizDataModel: function VisualModel$get_VizDataModel() {
			return this.$vizDataModel;
		},
		get_titleModel: function VisualModel$get_TitleModel() {
			return this.$titleModel;
		},
		get_captionModel: function VisualModel$get_CaptionModel() {
			return this.$captionModel;
		},
		get_hiddenTuples: function VisualModel$get_HiddenTuples() {
			return this.$allHiddenTuples;
		},
		get_filteredTuples: function VisualModel$get_FilteredTuples() {
			return this.$allFilteredTuples;
		},
		get_isMap: function VisualModel$get_IsMap() {
			return this.pm.isMap;
		},
		get_hasBackgroundImage: function VisualModel$get_HasBackgroundImage() {
			return this.pm.hasBackgroundImage;
		},
		get_floatingToolbarVisibility: function VisualModel$get_FloatingToolbarVisibility() {
			return this.pm.floatingToolbarVisibility;
		},
		get_geoSearchVisibility: function VisualModel$get_GeoSearchVisibility() {
			return this.pm.geographicSearchVisibility;
		},
		get_vizNavigationSetting: function VisualModel$get_VizNavigationSetting() {
			return this.pm.vizNavigationSetting;
		},
		get_defaultMapTool: function VisualModel$get_DefaultMapTool() {
			return this.pm.defaultMapToolEnum;
		},
		get_cacheUrlInfo: function VisualModel$get_CacheUrlInfo() {
			return this.$cacheUrlInfo;
		},
		get_hasModifiedAxes: function VisualModel$get_HasModifiedAxes() {
			return this.pm.hasModifiedAxes;
		},
		get_backgroundColor: function VisualModel$get_BackgroundColor() {
			return this.pm.bgColor;
		},
		get_paneBGColor: function VisualModel$get_PaneBGColor() {
			return this.pm.paneColor;
		},
		get_headerBGColor: function VisualModel$get_HeaderBGColor() {
			return this.pm.headerColor;
		},
		get_shouldUpdate: function VisualModel$get_ShouldUpdate() {
			return $tab_ApplicationModel.get_instance().get_autoUpdate();
		},
		get_invalidSheets: function VisualModel$get_InvalidSheets() {
			var dashboardModel = $tab_ModelUtils.findContentDashboard();
			return dashboardModel.get_invalidSheets();
		},
		get_isVisualValid: function VisualModel$get_IsVisualValid() {
			return this.$visualIsValid;
		},
		get_isBrushedFromAction: function VisualModel$get_IsBrushedFromAction() {
			return this.$brushedFromAction;
		},
		get_emptyHighlightFogAll: function VisualModel$get_EmptyHighlightFogAll() {
			return this.$emptyHighlightFogAll;
		},
		get_zone: function VisualModel$get_Zone() {
			var wrapper = ss.safeCast(this.parent, $tab_ZoneContentWrapperModel);
			return wrapper.get_zone();
		},
		setIsVisualValid: function VisualModel$SetIsVisualValid(value, context) {
			if (this.pm.valid && value !== this.$visualIsValid) {
				$tab_VisualModel.get_$log().debug('Visual model VisualIsValid set to %o', [value]);
				this.$visualIsValid = value;
				this.raiseEvent(this.$2$VisualValidStateChangedField, context);
			}
		},
		setIsBrushedFromAction: function VisualModel$SetIsBrushedFromAction(value, context) {
			if (this.$brushedFromAction !== value) {
				this.$brushedFromAction = value;
				this.raiseEvent(this.$2$BrushingFromActionChangedField, context);
			}
		},
		setEmptyHighlightFogAll: function VisualModel$SetEmptyHighlightFogAll(value, context) {
			if (this.$emptyHighlightFogAll !== value) {
				this.$emptyHighlightFogAll = value;
				this.raiseEvent(this.$2$EmptyHighlightFogAllChangedField, context);
			}
		},
		vizDataContainsDuplicateCaption: function VisualModel$VizDataContainsDuplicateCaption(caption) {
			if (ss.isNullOrUndefined(this.get_vizDataModel())) {
				return false;
			}
			return _.filter(this.get_vizDataModel().get_fieldCaptions(), function(s) {
				return ss.referenceEquals(s, caption);
			}).length > 1;
		},
		setFilteredTuples: function VisualModel$SetFilteredTuples(fieldName, tuplesToFilter) {
			this.$filteredTuples.set(fieldName, tuplesToFilter);
			var newFilteredTuples = new Map();
			this.$filteredTuples.forEach(function(tuples) {
				for (var $t1 = 0; $t1 < tuples.length; $t1++) {
					var tupleID = tuples[$t1];
					newFilteredTuples.set(tupleID.toString(), tupleID);
				}
			});
			var change = this.$allFilteredTuples.size !== newFilteredTuples.size;
			if (!change) {
				tab.MapUtility.forEachWithInterrupt$1(String, ss.Int32).call(null, this.$allFilteredTuples, function(vals, key) {
					if (!newFilteredTuples.has(key)) {
						change = true;
						throw new tab.LoopBreakException();
					}
				});
			}
			if (change) {
				this.$allFilteredTuples = newFilteredTuples;
				if (ss.isValue(this.$2$NewFilteredTuplesField)) {
					this.$2$NewFilteredTuplesField();
				}
			}
		},
		setHiddenTuples: function VisualModel$SetHiddenTuples(fieldName, tuplesToHide) {
			this.$hiddenTuples.set(fieldName, tuplesToHide);
			var newHiddenTuples = new Map();
			this.$hiddenTuples.forEach(function(tuples) {
				for (var $t1 = 0; $t1 < tuples.length; $t1++) {
					var tupleID = tuples[$t1];
					newHiddenTuples.set(tupleID.toString(), tupleID);
				}
			});
			var change = this.$allHiddenTuples.size !== newHiddenTuples.size;
			if (!change) {
				tab.MapUtility.forEachWithInterrupt$1(String, ss.Int32).call(null, this.$allHiddenTuples, function(tuples1, key) {
					if (!newHiddenTuples.has(key)) {
						change = true;
						throw new tab.LoopBreakException();
					}
				});
			}
			if (change) {
				this.$allHiddenTuples = newHiddenTuples;
				if (ss.isValue(this.$2$NewHiddenTuplesField)) {
					this.$2$NewHiddenTuplesField();
				}
			}
		},
		getMutableCopyOfPresModel: function VisualModel$GetMutableCopyOfPresModel() {
			var scene = this.pm.scene;
			var labels = this.pm.markLabels;
			var vizData = this.pm.vizData;
			delete this.pm['scene'.toString()];
			delete this.pm['vizData'.toString()];
			delete this.pm['markLabels'.toString()];
			var copy = $tab_Model.prototype.getMutableCopyOfPresModel.call(this);
			this.pm.scene = scene;
			this.pm.vizData = vizData;
			this.pm.markLabels = labels;
			return copy;
		},
		reValidate: function VisualModel$ReValidate(context) {
			if (this.get_isVisualValid() !== this.pm.valid) {
				this.$visualIsValid = this.pm.valid;
				this.raiseEvent(this.$2$VisualValidStateChangedField, context);
			}
		},
		update: function VisualModel$Update(visualPresModel, context) {
			if (ss.isNullOrUndefined(this.$shelvesModel)) {
				this.$shelvesModel = new $tab_ShelvesModel(this);
			}
			if (ss.isValue(visualPresModel.shelves)) {
				var paneSpecId = this.$findShelfPaneSpecId(visualPresModel);
				this.$shelvesModel.update(visualPresModel.shelves, $tab_ApplicationModel.get_instance().get_workbook().get_dataSchema(), paneSpecId, context);
			}
			if (ss.isValue(visualPresModel.analyticsPane)) {
				if (ss.isNullOrUndefined(this.$analyticsModel)) {
					this.$analyticsModel = new $tab_AnalyticsPaneModel(this);
				}
				this.$analyticsModel.update(visualPresModel.analyticsPane, context);
			}
			if (ss.isValue(visualPresModel.vizData)) {
				if (ss.isNullOrUndefined(this.$vizDataModel)) {
					this.$vizDataModel = new $tab_VizDataModel(this);
				}
				this.$vizDataModel.update(visualPresModel.vizData, context);
			}
			if (ss.isNullOrUndefined(this.$sceneModel)) {
				this.$sceneModel = new $tab_SceneModel(this);
			}
			if (ss.isValue(visualPresModel.scene)) {
				if (ss.isValue(this.$hiddenTuples)) {
					var hadTuples = this.$allHiddenTuples.size > 0;
					this.$hiddenTuples = new Map();
					this.$allHiddenTuples = new Map();
					if (hadTuples) {
						this.raiseEvent(this.$2$NewHiddenTuplesField, context);
					}
				}
				if (ss.isValue(this.$filteredTuples)) {
					var hadTuples1 = this.$allFilteredTuples.size > 0;
					this.$filteredTuples = new Map();
					this.$allFilteredTuples = new Map();
					if (hadTuples1) {
						this.raiseEvent(this.$2$NewFilteredTuplesField, context);
					}
				}
				this.$sceneModel.update(visualPresModel.scene, context);
			}
			if (ss.isValue(visualPresModel.colorDictionary) && ss.isValue(this.pm)) {
				if (!_.isEqual(this.pm.colorDictionary, visualPresModel.colorDictionary)) {
					this.raiseEvent(this.$2$ColorDictionaryChangedField, context);
				}
			}
			if (ss.isValue(visualPresModel.vizNavigationSetting) && ss.isValue(this.pm)) {
				if (!_.isEqual(this.pm.vizNavigationSetting, visualPresModel.vizNavigationSetting)) {
					this.raiseEvent(this.$2$VizNavigationSettingChangedField, context);
				}
			}
			if (ss.isNullOrUndefined(this.$labelsModel)) {
				this.$labelsModel = new $tab_SceneModel(this);
			}
			if (ss.isValue(visualPresModel.markLabels)) {
				this.$labelsModel.update(visualPresModel.markLabels, context);
			}
			if (ss.isNullOrUndefined(this.$marksCardModel)) {
				this.$marksCardModel = new $tab_MarksCardModel(this);
			}
			if (ss.isValue(visualPresModel.marksCardPresModel)) {
				this.$marksCardModel.update(visualPresModel.marksCardPresModel, context);
			}
			if (ss.isValue(visualPresModel.selectionList) && visualPresModel.selectionList.length > 0) {
				this.$selectionsModel.update(visualPresModel.selectionList, context);
			}
			if (ss.isValue(visualPresModel.brushingSelectionList)) {
				this.$brushingsModel.update(visualPresModel.brushingSelectionList, context);
			}
			this.$handleImpliedSelection(this.$selectionsModel.nodeSelection.get_nodes(), context);
			if (!ss.isValue(this.$showMeModel)) {
				this.$showMeModel = new $tab_CommandsModel(this);
			}
			if (ss.isValue(visualPresModel.showMeCommands)) {
				this.$showMeModel.update(visualPresModel.showMeCommands, context);
			}
			if (ss.isNullOrUndefined(this.$mapServerModel)) {
				this.$mapServerModel = new $tab_MapServerModel(this);
			}
			if (ss.isValue(visualPresModel.mapServer) || !visualPresModel.isMap) {
				var mapPM = (visualPresModel.isMap ? visualPresModel.mapServer : null);
				this.$mapServerModel.update(mapPM, context);
			}
			var newFilterJson = visualPresModel.filtersJson || '';
			var filterPresModels = (ss.isNullOrEmptyString(newFilterJson) ? null : JSON.parse(newFilterJson));
			if (this.$needToUpdateFilters(filterPresModels, newFilterJson)) {
				this.$filtersJSON = newFilterJson;
				if (ss.isValue(filterPresModels)) {
					var updatedFilterModels = {};
					for (var $t1 = 0; $t1 < filterPresModels.length; $t1++) {
						var filterPresModel = filterPresModels[$t1];
						var formattedName = tableau.format.formatQualifiedName(filterPresModel.name);
						var curFilterModel = this.$filterModels[formattedName];
						if (ss.isNullOrUndefined(curFilterModel)) {
							curFilterModel = $tab_ModelUtils.createFilterModel(this, filterPresModel);
						}
						curFilterModel.update(filterPresModel, context);
						updatedFilterModels[formattedName] = curFilterModel;
					}
					this.$filterModels = updatedFilterModels;
				}
			}
			var newCacheUrlInfo = visualPresModel.cacheUrlInfoJson || '';
			var newCacheInfo = (ss.isNullOrEmptyString(newCacheUrlInfo) ? null : JSON.parse(newCacheUrlInfo));
			if (!_.isEqual(newCacheInfo, this.get_cacheUrlInfo())) {
				this.$cacheUrlInfo = newCacheInfo;
				this.$fireCacheUrlInfoChanged(context);
			}
			var newGeometry = visualPresModel.geometryJson || '';
			if (!ss.isValue(this.$geometryModel)) {
				this.$geometryModel = new $tab_ViewGeometryModel(this);
			}
			var geometryPresModel = (ss.isNullOrEmptyString(newGeometry) ? null : JSON.parse(newGeometry));
			this.$geometryModel.update(geometryPresModel);
			if (ss.isNullOrUndefined(this.$titleModel)) {
				this.$titleModel = new $tab_TextRegionModel(this, 'visualTitle'.toString());
			}
			if (ss.isValue(visualPresModel.visualTitle)) {
				this.$titleModel.update(visualPresModel.visualTitle, context);
			}
			if (!ss.isValue(this.$captionModel)) {
				this.$captionModel = new $tab_TextRegionModel(this, 'visualCaption'.toString());
			}
			if (ss.isValue(visualPresModel.visualCaption)) {
				this.$captionModel.update(visualPresModel.visualCaption, context);
			}
			if (!ss.isValue(this.$sortIndicatorsModel)) {
				this.$sortIndicatorsModel = new $tab_SortIndicatorsModel(this);
			}
			if (ss.isValue(visualPresModel.sortIndicators)) {
				this.$sortIndicatorsModel.update(visualPresModel.sortIndicators, context);
			}
			this.setEmptyHighlightFogAll(visualPresModel.emptyHighlightFogAll, context);
			if (!ss.referenceEquals(visualPresModel, this.pm)) {
				this.swapAndCopyPresModel(visualPresModel);
				this.reValidate(context);
				$tab_VisualModel.get_$log().debug('Visual model has been updated for %o', [this]);
				this.$raiseNewVisual(context);
			}
		},
		$raiseNewVisual: function VisualModel$RaiseNewVisual(context) {
			this.raiseEvent(this.$2$NewVisualField, context);
		},
		$fireCacheUrlInfoChanged: function VisualModel$FireCacheUrlInfoChanged(context) {
			if (ss.isValue(this.get_cacheUrlInfo())) {
				this.raiseEvent(this.$2$UrlInfoCacheChangeField, context);
			}
		},
		$needToUpdateFilters: function VisualModel$NeedToUpdateFilters(filterPresModels, newFilterJson) {
			if (ss.isNullOrUndefined(this.$filtersJSON)) {
				return true;
			}
			if (ss.isValue(filterPresModels)) {
				var tiledFilter = _.find(filterPresModels, function(filter) {
					return filter.isTiled;
				});
				if (ss.isValue(tiledFilter)) {
					return true;
				}
			}
			return !ss.referenceEquals(this.$filtersJSON, newFilterJson);
		},
		hasFilterFieldData: function VisualModel$HasFilterFieldData(fieldName) {
			return ss.isValue(this.get_vizDataModel()) && ss.indexOf(this.get_vizDataModel().get_filterFields(), fieldName) !== -1;
		},
		getEffectiveSelectedTuples: function VisualModel$GetEffectiveSelectedTuples(directTupleSelection) {
			var toRet;
			var tupleFromNodeSelection = this.$impliedSelectionModel.get_ids();
			if (tab.MiscUtil.isNullOrEmpty(tupleFromNodeSelection)) {
				toRet = directTupleSelection;
			}
			else if (tab.MiscUtil.isNullOrEmpty(directTupleSelection)) {
				toRet = tupleFromNodeSelection;
			}
			else {
				var combinedTuples = [];
				ss.arrayAddRange(combinedTuples, directTupleSelection);
				ss.arrayAddRange(combinedTuples, tupleFromNodeSelection);
				toRet = Array.prototype.slice.call(combinedTuples);
			}
			return toRet;
		},
		$handleImpliedSelection: function VisualModel$HandleImpliedSelection(selectedNodes, context) {
			var tupleIds = $tab_BrushingComputer.getTuplesAssociatedWithSelectedNodes(this, selectedNodes);
			this.$impliedSelectionModel.setOverriddenTupleIds(tupleIds, context);
		},
		$clearImpliedSelection: function VisualModel$ClearImpliedSelection(context) {
			this.$impliedSelectionModel.setOverriddenTupleIds([], context);
		},
		$findShelfPaneSpecId: function VisualModel$FindShelfPaneSpecId(visualPresModel) {
			if (ss.isValue(visualPresModel) && ss.isValue(visualPresModel.marksCardPresModel) && ss.isValue(visualPresModel.marksCardPresModel.paneSpec)) {
				return visualPresModel.marksCardPresModel.paneSpec;
			}
			return $tab_ModelUtils.findActivePaneSpecId();
		}
	}, $tab_Model);
	ss.initClass($tab_VizClientCommands, $asm, {});
	ss.initClass($tab_VizDataField, $asm, {
		get_hasDataValues: function VizDataField$get_HasDataValues() {
			return this.$hasDataValues;
		},
		get_hasAliases: function VizDataField$get_HasAliases() {
			return this.$hasAliases;
		},
		get_dataType: function VizDataField$get_DataType() {
			return this.$columnPresModel.dataType;
		},
		get_fieldName: function VizDataField$get_FieldName() {
			return this.$columnPresModel.fn;
		},
		get_fieldCaption: function VizDataField$get_FieldCaption() {
			return this.$columnPresModel.fieldCaption;
		},
		get_baseColumnName: function VizDataField$get_BaseColumnName() {
			return this.$columnPresModel.baseColumnName;
		},
		get_role: function VizDataField$get_Role() {
			return this.$columnPresModel.fieldRole;
		},
		get_aggType: function VizDataField$get_AggType() {
			return this.$columnPresModel.aggregation;
		},
		get_specialValuesOverride: function VizDataField$get_SpecialValuesOverride() {
			return this.$columnPresModel.specialValueText;
		},
		get_filterContext: function VizDataField$get_FilterContext() {
			return this.$columnPresModel.filterContext;
		},
		get_vizColumnDoNotUse: function VizDataField$get_VizColumnDoNotUse() {
			return this.$columnPresModel;
		},
		get_$paneIndices: function VizDataField$get_PaneIndices() {
			return this.$columnPresModel.paneIndices;
		},
		get_$perPaneColumnIndices: function VizDataField$get_PerPaneColumnIndices() {
			return this.$columnPresModel.columnIndices;
		},
		get_$log: function VizDataField$get_Log() {
			return tab.Logger.lazyGetLogger($tab_VizDataField);
		},
		isTupleIdValid: function VizDataField$IsTupleIdValid(tupleId) {
			for (var ii = 0; ii < this.$columnPresModel.paneIndices.length; ++ii) {
				var paneIndex = this.$columnPresModel.paneIndices[ii];
				var tupleIndex = this.$getTupleIndexForPane(tupleId, paneIndex);
				if (ss.isValue(tupleIndex)) {
					return true;
				}
			}
			return false;
		},
		tupleIdsThatPass: function VizDataField$TupleIdsThatPass(f) {
			var toReturn = [];
			for (var $t1 = 0; $t1 < this.$columnPresModel.paneIndices.length; $t1++) {
				var paneIndex = this.$columnPresModel.paneIndices[$t1];
				var tupleIdColumnWithinPane = this.$paneColumnsPresModel[paneIndex].vizPaneColumns[0];
				for (var $t2 = 0; $t2 < tupleIdColumnWithinPane.tupleIds.length; $t2++) {
					var tupleId = tupleIdColumnWithinPane.tupleIds[$t2];
					if (f(tupleId)) {
						toReturn.push(tupleId);
					}
				}
			}
			return toReturn;
		},
		$computeTupleIdDictionaryForPane: function VizDataField$ComputeTupleIdDictionaryForPane(paneIndex) {
			var tupleIdColumnWithinPane = this.$getColumnWithinPane(paneIndex, 0);
			var tupleIdDictionary = {};
			var index = 0;
			for (var $t1 = 0; $t1 < tupleIdColumnWithinPane.tupleIds.length; $t1++) {
				var tid = tupleIdColumnWithinPane.tupleIds[$t1];
				tupleIdDictionary[tid] = index++;
			}
			this.$tupleIdLookupForPane[paneIndex] = tupleIdDictionary;
		},
		$getTupleIndexForPane: function VizDataField$GetTupleIndexForPane(tupleId, paneIndex) {
			if (!ss.keyExists(this.$tupleIdLookupForPane, paneIndex)) {
				this.$computeTupleIdDictionaryForPane(paneIndex);
			}
			return this.$tupleIdLookupForPane[paneIndex][tupleId];
		},
		getAliasIndex: function VizDataField$GetAliasIndex(tupleId) {
			var aliasIndex = null;
			if (!this.get_hasAliases()) {
				return aliasIndex;
			}
			for (var ii = 0; ii < this.$columnPresModel.paneIndices.length; ++ii) {
				var paneIndex = this.$columnPresModel.paneIndices[ii];
				var tupleIndex = this.$getTupleIndexForPane(tupleId, paneIndex);
				if (ss.isValue(tupleIndex)) {
					var columnWithinPaneIndex = this.$columnPresModel.columnIndices[ii];
					var columnWithinPane = this.$getColumnWithinPane(paneIndex, columnWithinPaneIndex);
					aliasIndex = columnWithinPane.aliasIndices[tupleIndex];
					break;
				}
			}
			return aliasIndex;
		},
		getDataValueIndex: function VizDataField$GetDataValueIndex(tupleId) {
			var dataValueIndex = null;
			if (this.get_hasDataValues()) {
				for (var ii = 0; ii < this.$columnPresModel.paneIndices.length; ++ii) {
					var paneIndex = this.$columnPresModel.paneIndices[ii];
					var tupleIndex = this.$getTupleIndexForPane(tupleId, paneIndex);
					if (ss.isValue(tupleIndex)) {
						var columnWithinPaneIndex = this.$columnPresModel.columnIndices[ii];
						var columnWithinPane = this.$getColumnWithinPane(paneIndex, columnWithinPaneIndex);
						dataValueIndex = columnWithinPane.valueIndices[tupleIndex];
						break;
					}
				}
			}
			return dataValueIndex;
		},
		getPaneDescriptorKey: function VizDataField$GetPaneDescriptorKey(tupleId) {
			var key = null;
			for (var ii = 0; ii < this.$columnPresModel.paneIndices.length; ++ii) {
				var paneIndex = this.get_$paneIndices()[ii];
				var tupleIndex = this.$getTupleIndexForPane(tupleId, paneIndex);
				if (ss.isValue(tupleIndex)) {
					var paneColumn = this.$getPaneColumn(paneIndex);
					key = paneColumn.paneDescriptor.paneDescrKey;
					break;
				}
			}
			return key;
		},
		$getPaneColumn: function VizDataField$GetPaneColumn(paneColIndex) {
			var result = null;
			if (this.$paneColumnsPresModel.length > paneColIndex) {
				result = this.$paneColumnsPresModel[paneColIndex];
			}
			else {
				this.get_$log().warn('GetPaneColumn: paneIndex is out of bound.', []);
			}
			return result;
		},
		$getColumnWithinPane: function VizDataField$GetColumnWithinPane(paneColIndex, columnWithinPaneIndex) {
			var result = null;
			var paneColumn = this.$getPaneColumn(paneColIndex);
			if (ss.isValue(paneColumn)) {
				if (paneColumn.vizPaneColumns.length > columnWithinPaneIndex) {
					result = paneColumn.vizPaneColumns[columnWithinPaneIndex];
				}
				else {
					this.get_$log().warn('GetColumnWithinPane: columnWithinPaneIndex is out of bound.', []);
				}
			}
			return result;
		},
		$computeHasDataValues: function VizDataField$ComputeHasDataValues() {
			var hasDataValues = false;
			for (var i = 0; i < this.get_$paneIndices().length; i++) {
				var paneIndex = this.get_$paneIndices()[i];
				var columnWithinPaneIndex = this.get_$perPaneColumnIndices()[i];
				var columnWithinPane = this.$getColumnWithinPane(paneIndex, columnWithinPaneIndex);
				if (ss.isValue(columnWithinPane)) {
					hasDataValues = hasDataValues || ss.isValue(columnWithinPane.valueIndices) && columnWithinPane.valueIndices.length > 0;
				}
			}
			return hasDataValues;
		},
		$computeHasAliases: function VizDataField$ComputeHasAliases() {
			var hasAliases = false;
			for (var i = 0; i < this.get_$paneIndices().length; i++) {
				var paneIndex = this.get_$paneIndices()[i];
				var columnWithinPaneIndex = this.get_$perPaneColumnIndices()[i];
				var columnWithinPane = this.$getColumnWithinPane(paneIndex, columnWithinPaneIndex);
				if (ss.isValue(columnWithinPane)) {
					hasAliases = hasAliases || ss.isValue(columnWithinPane.aliasIndices) && columnWithinPane.aliasIndices.length > 0;
				}
			}
			return hasAliases;
		},
		$validatePresModels: function VizDataField$ValidatePresModels() {
			ss.Debug.assert(this.get_$paneIndices().length === this.get_$perPaneColumnIndices().length, '[VizDataField Validation Error] Different number of pane indices and column (within pane) indices.');
		}
	});
	ss.initClass($tab_VizDataLookup, $asm, {});
	ss.initClass($tab_VizDataModel, $asm, {
		add_newVizData: function VizDataModel$add_NewVizData(value) {
			this.$2$NewVizDataField = ss.delegateCombine(this.$2$NewVizDataField, value);
		},
		remove_newVizData: function VizDataModel$remove_NewVizData(value) {
			this.$2$NewVizDataField = ss.delegateRemove(this.$2$NewVizDataField, value);
		},
		get_hasTupleIdColumn: function VizDataModel$get_HasTupleIdColumn() {
			return ss.isValue(this.$tupleIdColumn);
		},
		get_highlightCaptions: function VizDataModel$get_HighlightCaptions() {
			return this.get_$vizDataPresModel().highlightCaptions;
		},
		get_filterFields: function VizDataModel$get_FilterFields() {
			return this.get_$vizDataPresModel().filterFields;
		},
		get_fieldCaptions: function VizDataModel$get_FieldCaptions() {
			return this.$fieldCaptions;
		},
		get_ubertipData: function VizDataModel$get_UbertipData() {
			return this.get_$vizDataPresModel().ubertipData;
		},
		get_$vizDataPresModel: function VizDataModel$get_VizDataPresModel() {
			return this.pm;
		},
		get_$paneColumnsDataPresModel: function VizDataModel$get_PaneColumnsDataPresModel() {
			return this.get_$vizDataPresModel().paneColumnsData;
		},
		get_$paneColumnsPresModel: function VizDataModel$get_PaneColumnsPresModel() {
			return this.get_$paneColumnsDataPresModel().paneColumnsList;
		},
		getVizDataFieldByIndex: function VizDataModel$GetVizDataFieldByIndex(index) {
			if (index >= 0 && index < this.$columns.length) {
				return this.$columns[index];
			}
			return null;
		},
		getColumnIndex: function VizDataModel$GetColumnIndex(captionOrFieldName) {
			if (ss.isNullOrUndefined(this.get_$paneColumnsDataPresModel())) {
				return -1;
			}
			var cols = this.get_$paneColumnsDataPresModel().vizDataColumns;
			for (var index = 0; index < cols.length; ++index) {
				if ($tab_VizDataUtils.isFieldCaptionOfColumn(cols[index], captionOrFieldName)) {
					return index;
				}
			}
			for (var index1 = 0; index1 < cols.length; ++index1) {
				if ($tab_VizDataUtils.isFieldNameOfColumn(cols[index1], captionOrFieldName)) {
					return index1;
				}
			}
			return -1;
		},
		getVizDataField: function VizDataModel$GetVizDataField(captionOrFieldName) {
			return this.getVizDataFieldByIndex(this.getColumnIndex(captionOrFieldName));
		},
		hasDimensionColumnNotMeasureNames: function VizDataModel$HasDimensionColumnNotMeasureNames() {
			if (ss.isValue(this.get_$paneColumnsDataPresModel())) {
				var $t1 = this.get_$paneColumnsDataPresModel().vizDataColumns;
				for (var $t2 = 0; $t2 < $t1.length; $t2++) {
					var column = $t1[$t2];
					if (column.fieldRole === 'dimension' && !ss.referenceEquals(column.localBaseColumnName, $tab_VizDataModel.measureNamesColumnName)) {
						return true;
					}
				}
			}
			return false;
		},
		hasTupleId: function VizDataModel$HasTupleId(tupleId) {
			var hasTupleId = false;
			if (this.get_hasTupleIdColumn()) {
				this.forEachVizDataField(function(dataField, index) {
					if (dataField.isTupleIdValid(tupleId)) {
						hasTupleId = true;
						return false;
					}
					return true;
				});
			}
			return hasTupleId;
		},
		forEachTupleId: function VizDataModel$ForEachTupleId(tupleIdFunction) {
			for (var ii = 0; ii < this.get_$paneColumnsPresModel().length; ++ii) {
				var tupleIdColumnWithinPane = this.get_$paneColumnsPresModel()[ii].vizPaneColumns[0];
				for (var $t1 = 0; $t1 < tupleIdColumnWithinPane.tupleIds.length; $t1++) {
					var tupleId = tupleIdColumnWithinPane.tupleIds[$t1];
					var breakNow = !tupleIdFunction(tupleId);
					if (breakNow) {
						break;
					}
				}
			}
		},
		forEachVizDataField: function VizDataModel$ForEachVizDataField(vizDataFieldFunction) {
			var columnCount = this.$columns.length;
			for (var ii = 0; ii < columnCount; ++ii) {
				var column = this.$columns[ii];
				if (ss.isNullOrUndefined(column)) {
					continue;
				}
				var breakNow = !vizDataFieldFunction(column, ii);
				if (breakNow) {
					break;
				}
			}
		},
		update: function VizDataModel$Update(vizDataPresModel, context) {
			var presModelChanged = this.simpleSwapToUpdate(vizDataPresModel, this.$2$NewVizDataField, context);
			if (!presModelChanged) {
				return;
			}
			if (ss.isValue(vizDataPresModel.ubertipData)) {
				$tab_FontNotificationUtil.notifyFontsFromUberTipDataPresModel(vizDataPresModel.ubertipData);
			}
			if (ss.isValue(this.get_$paneColumnsDataPresModel())) {
				this.$tupleIdColumn = null;
				ss.clear(this.$columns);
				this.$fieldCaptions = [];
				var $t1 = this.get_$paneColumnsDataPresModel().vizDataColumns;
				for (var $t2 = 0; $t2 < $t1.length; $t2++) {
					var column = $t1[$t2];
					if (ss.referenceEquals(column.fn, $tab_VizDataModel.tupleIdColumnName)) {
						this.$tupleIdColumn = column;
						this.$columns.push(null);
						continue;
					}
					this.$fieldCaptions.push(column.fieldCaption);
					var vizDataField = new $tab_VizDataField(column, this.get_$paneColumnsDataPresModel().paneColumnsList);
					this.$columns.push(vizDataField);
				}
			}
		}
	}, $tab_Model);
	ss.initClass($tab_VizDataUtils, $asm, {});
	ss.initClass($tab_VizPortalServer, $asm, {});
	ss.initClass($tab_VizqlSessionRequest, $asm, {});
	ss.initClass($tab_VizRegionRectWrapper, $asm, {
		get_r: function VizRegionRectWrapper$get_R() {
			return this.$vizRegionRect['r'.toString()];
		},
		set_r: function VizRegionRectWrapper$set_R(value) {
			this.$vizRegionRect['r'.toString()] = value;
		},
		get_fns: function VizRegionRectWrapper$get_Fns() {
			return this.$vizRegionRect['fieldVector'.toString()];
		},
		set_fns: function VizRegionRectWrapper$set_Fns(value) {
			this.$vizRegionRect['fieldVector'.toString()] = value;
		},
		get_x: function VizRegionRectWrapper$get_X() {
			return this.$vizRegionRect['x'.toString()];
		},
		set_x: function VizRegionRectWrapper$set_X(value) {
			this.$vizRegionRect['x'.toString()] = value;
		},
		get_y: function VizRegionRectWrapper$get_Y() {
			return this.$vizRegionRect['y'.toString()];
		},
		set_y: function VizRegionRectWrapper$set_Y(value) {
			this.$vizRegionRect['y'.toString()] = value;
		},
		get_w: function VizRegionRectWrapper$get_W() {
			return this.$vizRegionRect['w'.toString()];
		},
		set_w: function VizRegionRectWrapper$set_W(value) {
			this.$vizRegionRect['w'.toString()] = value;
		},
		get_h: function VizRegionRectWrapper$get_H() {
			return this.$vizRegionRect['h'.toString()];
		},
		set_h: function VizRegionRectWrapper$set_H(value) {
			this.$vizRegionRect['h'.toString()] = value;
		}
	});
	ss.initClass($tab_VizUriModel, $asm, {
		get_isViewingUri: function VizUriModel$get_IsViewingUri() {
			return this.$vizUriType === 1;
		},
		get_isAuthoringUri: function VizUriModel$get_IsAuthoringUri() {
			return this.$vizUriType === 2;
		},
		get_isAuthorNewWorkbookUri: function VizUriModel$get_IsAuthorNewWorkbookUri() {
			return this.$vizUriType === 3;
		},
		get_isInvalid: function VizUriModel$get_IsInvalid() {
			return this.$vizUriType === 0;
		},
		get_isAdminUri: function VizUriModel$get_IsAdminUri() {
			return this.$vizUriType === 4;
		},
		get_isSharedViewUri: function VizUriModel$get_IsSharedViewUri() {
			return this.$vizUriType === 5;
		},
		get_isRevisionHistoryUri: function VizUriModel$get_IsRevisionHistoryUri() {
			return this.$vizUriType === 6;
		},
		get_absoluteUri: function VizUriModel$get_AbsoluteUri() {
			return this.$getAbsoluteUri();
		},
		get_uri: function VizUriModel$get_Uri() {
			return this.$getRelativeUri();
		},
		get_path: function VizUriModel$get_Path() {
			return this.$getPath();
		},
		get_queryParams: function VizUriModel$get_QueryParams() {
			return this.$queryParams;
		},
		get_retry: function VizUriModel$get_Retry() {
			return this.$getBooleanQueryParam($tab_VizUriModel.$retryParam);
		},
		set_retry: function VizUriModel$set_Retry(value) {
			this.$setBooleanQueryParam($tab_VizUriModel.$retryParam, value);
		},
		get_originalView: function VizUriModel$get_OriginalView() {
			return this.$getBooleanQueryParam($tab_VizUriModel.$originalViewParam);
		},
		set_originalView: function VizUriModel$set_OriginalView(value) {
			this.$setBooleanQueryParam($tab_VizUriModel.$originalViewParam, value);
			if (value) {
				this.$customizedView = '';
			}
		},
		get_showSaveAs: function VizUriModel$get_ShowSaveAs() {
			return this.$getBooleanQueryParam($tab_VizUriModel.$showSaveAsParam);
		},
		set_showSaveAs: function VizUriModel$set_ShowSaveAs(value) {
			this.$setBooleanQueryParam($tab_VizUriModel.$showSaveAsParam, value);
		},
		$getBooleanQueryParam: function VizUriModel$GetBooleanQueryParam(key) {
			return ss.keyExists(this.$queryParams, key) && tab.MiscUtil.toBoolean(this.$queryParams[key][0], false);
		},
		$setBooleanQueryParam: function VizUriModel$SetBooleanQueryParam(key, val) {
			if (val) {
				this.$queryParams[key] = [];
				this.$queryParams[key].push('yes');
			}
			else {
				delete this.$queryParams[key];
			}
		},
		removeQueryParam: function VizUriModel$RemoveQueryParam(queryParam) {
			delete this.$queryParams[queryParam];
			return this;
		},
		removeAllQueryParams: function VizUriModel$RemoveAllQueryParams() {
			ss.clearKeys(this.$queryParams);
			return this;
		},
		clone: function VizUriModel$Clone() {
			var clone = new $tab_VizUriModel();
			clone.$vizUriType = this.$vizUriType;
			clone.$workbookId = this.$workbookId;
			clone.$sheetId = this.$sheetId;
			clone.$authoringSheetName = this.$authoringSheetName;
			clone.$queryParams = this.$queryParams;
			clone.$customizedView = this.$customizedView;
			clone.$hash = this.$hash;
			clone.$origin = this.$origin;
			clone.explicitNotGuest = this.explicitNotGuest;
			return clone;
		},
		trimQueryParamsForAuthoringModeWhenLaunchedFromToolbar: function VizUriModel$TrimQueryParamsForAuthoringModeWhenLaunchedFromToolbar() {
			var filteredParams = {};
			var $t1 = ss.getEnumerator(Object.keys(this.$queryParams));
			try {
				while ($t1.moveNext()) {
					var param = $t1.current();
					var urlDecodedParam = decodeURIComponent(param);
					if (ss.startsWithString(urlDecodedParam, ':ff_') || ss.contains($tab_VizUriModel.$authoringPersistentParams, urlDecodedParam)) {
						filteredParams[param] = this.$queryParams[param];
					}
				}
			}
			finally {
				$t1.dispose();
			}
			this.$queryParams = filteredParams;
			return this;
		},
		fullPageLoad: function VizUriModel$FullPageLoad(window1) {
			window1 = window1 || tabBootstrap.Utility.get_locationWindow();
			this.setWindowLocation(null);
			window.setTimeout(function() {
				tab.WindowHelper.reload(window1, false);
			}, 300);
		},
		replaceState: function VizUriModel$ReplaceState(window) {
			if (tab.MiscUtil.isNullOrEmpty(window)) {
				window = tabBootstrap.Utility.get_locationWindow();
			}
			tab.HistoryUtil.replaceState(window, new Object(), '', this.get_uri());
		},
		setWindowLocation: function VizUriModel$SetWindowLocation(window) {
			if (tab.MiscUtil.isNullOrEmpty(window)) {
				window = tabBootstrap.Utility.get_locationWindow();
			}
			tab.WindowHelper.setLocationHref(window, this.get_uri());
		},
		setTopWindowLocation: function VizUriModel$SetTopWindowLocation() {
			this.setWindowLocation(window.top);
		},
		matchesCurrentWindowLocationUri: function VizUriModel$MatchesCurrentWindowLocationUri(window) {
			return ss.referenceEquals(this.get_uri(), $tab_VizUriModel.createForCurrentWindowLocation(window).get_uri());
		},
		matchesCurrentWindowLocationAbsoluteUri: function VizUriModel$MatchesCurrentWindowLocationAbsoluteUri() {
			return ss.referenceEquals(this.get_absoluteUri(), $tab_VizUriModel.createForCurrentWindowLocation().get_absoluteUri());
		},
		matchesCurrentWindowLocationPath: function VizUriModel$MatchesCurrentWindowLocationPath(window) {
			return ss.referenceEquals(this.get_path(), $tab_VizUriModel.createForCurrentWindowLocation(window).get_path());
		},
		removeHash: function VizUriModel$RemoveHash() {
			this.$hash = '';
		},
		$getAbsoluteUri: function VizUriModel$GetAbsoluteUri() {
			var relativeUri = this.$getRelativeUri();
			var absoluteUri = this.$origin;
			if (!ss.startsWithString(relativeUri, '/')) {
				absoluteUri += '/';
			}
			absoluteUri += relativeUri;
			return absoluteUri;
		},
		$getRelativeUri: function VizUriModel$GetRelativeUri() {
			var uri = new ss.StringBuilder();
			uri.append(this.$getPath());
			var queryParamsString = tab.MiscUtil.replaceUriQueryParameters('', this.$queryParams);
			if (!tab.MiscUtil.isNullOrEmpty$1(queryParamsString)) {
				uri.append(queryParamsString);
			}
			uri.append(this.$getHash());
			return uri.toString();
		},
		$getPath: function VizUriModel$GetPath() {
			var pathElements = [];
			if (!tab.MiscUtil.isNullOrEmpty$1(tsConfig.site_root) && !this.get_isAdminUri()) {
				pathElements.push(tsConfig.site_root);
			}
			else {
				pathElements.push('');
			}
			pathElements.push(this.$getUriModuleStringFromUroModuleName(this.$vizUriType));
			if (this.$vizUriType === 2) {
				pathElements.push(this.$workbookId);
				pathElements.push(this.$sheetId);
				if (!tab.MiscUtil.isNullOrEmpty$1(this.$authoringSheetName)) {
					pathElements.push(encodeURIComponent(this.$authoringSheetName));
				}
			}
			else if (this.$vizUriType === 1) {
				pathElements.push(this.$workbookId);
				pathElements.push(this.$sheetId);
				if (!tab.MiscUtil.isNullOrEmpty$1(this.$customizedView)) {
					pathElements.push(this.$customizedView);
				}
			}
			else if (this.$vizUriType === 4) {
				pathElements.push(this.$workbookId);
				pathElements.push(this.$sheetId);
			}
			else if (this.$vizUriType === 3) {
				pathElements.push(this.$workbookId);
			}
			else if (this.$vizUriType === 5) {
				pathElements.push(tsConfig.guid);
			}
			else if (this.$vizUriType === 6) {
				pathElements.push(this.$workbookId);
				if (!tab.MiscUtil.isNullOrEmpty$1(this.$sheetId)) {
					pathElements.push(this.$sheetId);
				}
				pathElements.push('history');
				pathElements.push(this.$revisionNumber);
			}
			return pathElements.join('/');
		},
		$getHash: function VizUriModel$GetHash() {
			if (this.explicitNotGuest) {
				return '#guest=n';
			}
			return this.$hash;
		},
		$fillVizUriModel: function VizUriModel$FillVizUriModel(location) {
			var uriTypeStrings = _.keys($tab_VizUriModel.$uriTypeStringToUriType);
			var module = $tab_UriPathStripper.getModuleFromPath(location.pathname, uriTypeStrings);
			this.$vizUriType = this.$getUriModuleNameFromUrlModuleString(module);
			var meat = $tab_UriPathStripper.getMeatFromPath(location.pathname, uriTypeStrings);
			if (this.$vizUriType === 1) {
				this.$fillViewingVizUriModel(meat);
			}
			else if (this.$vizUriType === 2) {
				this.$fillAuthoringVizUriModel(meat);
			}
			else if (this.$vizUriType === 3) {
				this.$fillAuthorNewWorkbookModel(meat);
			}
			else if (this.$vizUriType === 4) {
				this.$fillAdminVizUriModel(meat);
			}
			else if (this.$vizUriType === 6) {
				this.$fillRevisionHistoryUriModel(meat);
			}
			this.$queryParams = $tab_VizUriModel.$getRelevantQueryParameters(location);
			this.$hash = location.hash;
			this.$origin = tab.BrowserSupport.getOrigin(location);
		},
		$fillViewingVizUriModel: function VizUriModel$FillViewingVizUriModel(meat) {
			var pieces = meat.split('/');
			this.$workbookId = pieces[0];
			this.$sheetId = pieces[1];
			if (pieces.length > 2) {
				if (pieces.length === 3) {
					this.$customizedView = pieces[2];
				}
				this.$customizedView = pieces[2] + '/' + pieces[3];
			}
		},
		$fillAuthoringVizUriModel: function VizUriModel$FillAuthoringVizUriModel(meat) {
			var pieces = meat.split('/');
			this.$workbookId = pieces[0];
			this.$sheetId = pieces[1];
			if (pieces.length > 2) {
				this.$authoringSheetName = decodeURIComponent(pieces[2]);
			}
		},
		$fillAdminVizUriModel: function VizUriModel$FillAdminVizUriModel(meat) {
			var pieces = meat.split('/');
			this.$workbookId = pieces[0];
			this.$sheetId = pieces[1];
		},
		$fillAuthorNewWorkbookModel: function VizUriModel$FillAuthorNewWorkbookModel(meat) {
			this.$workbookId = meat;
		},
		$fillRevisionHistoryUriModel: function VizUriModel$FillRevisionHistoryUriModel(meat) {
			var pieces = meat.split('/');
			this.$workbookId = pieces[0];
			if (pieces.length > 3) {
				this.$sheetId = decodeURIComponent(pieces[1]);
				this.$revisionNumber = decodeURIComponent(pieces[3]);
			}
			else {
				this.$revisionNumber = decodeURIComponent(pieces[2]);
			}
		},
		$getUriModuleStringFromUroModuleName: function VizUriModel$GetUriModuleStringFromUroModuleName(uriModule) {
			return $tab_VizUriModel.$uriTypeToUriTypeString[uriModule];
		},
		$getUriModuleNameFromUrlModuleString: function VizUriModel$GetUriModuleNameFromUrlModuleString(uriModuleString) {
			return $tab_VizUriModel.$uriTypeStringToUriType[uriModuleString];
		},
		updateForViewingSheet: function VizUriModel$UpdateForViewingSheet(repoUrl) {
			if (!this.get_isViewingUri() && !this.get_isAuthoringUri() && !this.get_isAdminUri() && !this.get_isSharedViewUri() && !this.get_isRevisionHistoryUri()) {
				throw new ss.Exception('Cannot call UpdateForViewingNewTab() from a VizUriModel that does not have VizUriType Viewing');
			}
			var repoPathObject = new $tab_RepoPathObject(repoUrl);
			this.$workbookId = repoPathObject.get_workbookId();
			this.$sheetId = repoPathObject.get_sheetId();
			this.$authoringSheetName = '';
			return this;
		},
		updateForCustomizedView: function VizUriModel$UpdateForCustomizedView(cv) {
			if (!this.get_isViewingUri()) {
				throw new ss.Exception('Cannot call UpdateForCustomizedView() from a VizUriModel that does not have VizUriType Viewing');
			}
			var $t1 = cv.startViewId;
			if (ss.isNullOrUndefined($t1)) {
				$t1 = this.$sheetId;
			}
			this.$sheetId = $t1;
			this.$customizedView = ss.formatString('{0}/{1}', $tab_VizUriModel.encodeUserName(cv.owner.username), cv.urlId);
			this.$authoringSheetName = '';
			this.set_originalView(false);
			return this;
		}
	});
	ss.initEnum($tab_VizUriType, $asm, { invalid: 0, viewing: 1, authoring: 2, authorNewWorkbook: 3, admin: 4, sharedView: 5, revisionHistory: 6 });
	ss.initEnum($tab_WaitFeedbackType, $asm, { immediateGlassAndSpinner: 0, immediateGlassDelayedSpinner: 1, delayedGlassAndSpinner: 2 });
	ss.initClass($tab_WaitHandler, $asm, {
		$createCancelButton: function WaitHandler$CreateCancelButton() {
			var button = document.createElement('button');
			button.name = 'Cancel';
			button.textContent = 'Cancel';
			this.$cancelButton = $(button);
			this.$spinnerNode.after(this.$cancelButton);
			var cssDict = { position: 'fixed', top: '50%', left: '50%', 'z-index': '1005' };
			this.$cancelButton.css(cssDict);
			this.$cancelButton.click(function(e) {
				$tab_CommandController.get().cancel();
			});
			this.$cancelButton.hide().css('opacity', '0');
		},
		isBusy: function WaitHandler$IsBusy() {
			return this.$refcnt > 0;
		},
		addref: function WaitHandler$Addref(immediatelyBlock) {
			this.$refcnt += 1;
			tab.Log.get(this).debug('Increment WaitHandler refcnt to ' + this.$refcnt.toString(), []);
			if (this.$refcnt === 1 && !this.$isVisible && !this.$isLocked) {
				var feedbackType = (immediatelyBlock ? 1 : 2);
				this.$show(feedbackType, false);
			}
		},
		addrefAndShowFullWaitHandlerNow: function WaitHandler$AddrefAndShowFullWaitHandlerNow(subtle) {
			this.$refcnt += 1;
			tab.Log.get(this).debug('(SlamOn) Increment WaitHandler refcnt to ' + this.$refcnt.toString(), []);
			this.$show(0, subtle);
		},
		showAndLock: function WaitHandler$ShowAndLock(subtle) {
			if (!this.$isVisible) {
				this.$show(0, subtle);
			}
			this.$lock();
		},
		$lock: function WaitHandler$Lock() {
			this.$isLocked = true;
		},
		unlock: function WaitHandler$Unlock() {
			this.$isLocked = false;
		},
		release: function WaitHandler$Release() {
			this.$refcnt -= 1;
			tab.Log.get(this).debug('Decrement WaitHandler refcnt to ' + this.$refcnt.toString(), []);
			if (this.$refcnt < 0) {
				this.$refcnt = 0;
				tab.Log.get(this).debug('  => refcnt set to 0', []);
			}
			this.nudge();
		},
		nudge: function WaitHandler$Nudge() {
			if (this.$refcnt > 0 || this.$isLocked) {
				tab.Log.get(this).debug('Nudge - no change as > 0', []);
				return;
			}
			tab.Log.get(this).debug('Hiding WaitHandler via Nudge', []);
			this.$hide();
		},
		reset: function WaitHandler$Reset() {
			this.$clearTimers();
			var FadeOutDuration = 300;
			this.$spinnerNode.hide().css('opacity', '0');
			if (tab.FeatureFlags.isEnabled('CommandCancellation')) {
				this.$cancelButton.hide().css('opacity', '0');
			}
			if (this.$glassPaneNode.length === 0) {
				return;
			}
			var onEnd = ss.mkdel(this, function(node) {
				node.css('cursor', 'default').hide();
				tab.Log.get(this).debug((new Date()).getTime().toString() + ' - Fade out finished', []);
				var fake = $('.facadedom');
				if (fake.length > 0) {
					tab.Logger.getLoggerWithName($tab_DashboardModel.facadeDomId).debug((new Date()).getTime().toString() + ' Destroying facade', []);
					fake.remove();
					tab.Logger.getLoggerWithName($tab_DashboardModel.facadeDomId).debug((new Date()).getTime().toString() + ' Facade destroyed', []);
				}
			});
			this.loadingElementFadeOut(this.$glassPaneNode, FadeOutDuration, onEnd);
		},
		onNextHide: function WaitHandler$OnNextHide(f) {
			this.$specialHideFunc = f;
		},
		$clearTimers: function WaitHandler$ClearTimers() {
			tab.Log.get(this).debug('Clear Timers', []);
			this.$glassShowTimer = tab.MiscUtil.clearTimeout(this.$glassShowTimer);
			this.$spinnerShowTimer = tab.MiscUtil.clearTimeout(this.$spinnerShowTimer);
		},
		$hide: function WaitHandler$Hide() {
			if (ss.isValue(this.$specialHideFunc)) {
				tab.Log.get(this).debug('Calling special WaitHandler hide function', []);
				this.$specialHideFunc();
				this.$specialHideFunc = null;
				this.$clearTimers();
			}
			else {
				this.reset();
			}
			this.$isVisible = false;
		},
		$show: function WaitHandler$Show(waitFeedbackType, subtle) {
			var glassShowDelay = 400;
			var GlassShowDuration = 500;
			var spinnerShowDelay = 1900;
			var SpinnerShowDuration = 250;
			var GlassDefaultOpacity = 0.419999986886978;
			var glassOpacity = (subtle ? 0 : GlassDefaultOpacity);
			tab.Log.get(this).debug((new Date()).getTime().toString() + ' - Show WaitHandler', []);
			this.$clearTimers();
			this.$playOrDelayGlassAnimation(waitFeedbackType, GlassShowDuration, glassOpacity, glassShowDelay);
			if (!subtle) {
				this.$playOrDelaySpinnerAnimation(waitFeedbackType, SpinnerShowDuration, spinnerShowDelay);
			}
			this.$isVisible = true;
		},
		$playOrDelaySpinnerAnimation: function WaitHandler$PlayOrDelaySpinnerAnimation(feedback, spinnerShowDuration, spinnerShowDelay) {
			switch (feedback) {
				case 0: {
					this.$playSpinnerShowAnimation(spinnerShowDuration);
					break;
				}
				case 1:
				case 2: {
					this.$spinnerShowTimer = window.setTimeout(ss.mkdel(this, function() {
						this.$playSpinnerShowAnimation(spinnerShowDuration);
					}), spinnerShowDelay);
					break;
				}
			}
		},
		$playOrDelayGlassAnimation: function WaitHandler$PlayOrDelayGlassAnimation(feedback, glassShowDuration, glassOpacity, glassShowDelay) {
			switch (feedback) {
				case 0:
				case 1: {
					this.$playGlassShowAnimation(glassShowDuration, glassOpacity);
					break;
				}
				case 2: {
					this.$glassShowTimer = window.setTimeout(ss.mkdel(this, function() {
						this.$playGlassShowAnimation(glassShowDuration, glassOpacity);
					}), glassShowDelay);
					break;
				}
			}
		},
		$playGlassShowAnimation: function WaitHandler$PlayGlassShowAnimation(duration, opacity) {
			if (this.$glassPaneNode.css('display') !== 'none') {
				return;
			}
			this.$glassPaneNode.css('cursor', 'wait');
			this.$loadingElementFadeIn(this.$glassPaneNode, duration, opacity);
			if (tab.FeatureFlags.isEnabled('CommandCancellation')) {
				this.$loadingElementFadeIn(this.$cancelButton, duration, 1);
			}
		},
		$playSpinnerShowAnimation: function WaitHandler$PlaySpinnerShowAnimation(duration) {
			this.$loadingElementFadeIn(this.$spinnerNode, duration, 1);
		},
		$loadingElementFadeIn: function WaitHandler$LoadingElementFadeIn(node, fadeDuration, opacity) {
			node.css('opacity', '0');
			node.css('transition', fadeDuration + 'ms opacity');
			node.show();
			node.css('display');
			node.css('opacity', opacity.toString());
		},
		loadingElementFadeOut: function WaitHandler$LoadingElementFadeOut(node, fadeDuration, onEnd) {
			node.css('transition', fadeDuration + 'ms opacity');
			window.setTimeout(function() {
				node.css('opacity', '0');
			}, 0);
			window.setTimeout(function() {
				onEnd(node);
			}, fadeDuration);
		}
	});
	ss.initClass($tab_WebCommandItemWrapper, $asm, {
		get_isChecked: function WebCommandItemWrapper$get_IsChecked() {
			return (ss.isValue(this.$webCommand) ? this.$webCommand.get_isChecked() : $tab_CommandItemWrapper.prototype.get_isChecked.call(this));
		},
		get_isDefault: function WebCommandItemWrapper$get_IsDefault() {
			return (ss.isValue(this.$webCommand) ? this.$webCommand.get_isDefault() : $tab_CommandItemWrapper.prototype.get_isDefault.call(this));
		},
		get_enabled: function WebCommandItemWrapper$get_Enabled() {
			return (ss.isValue(this.$webCommand) ? this.$webCommand.get_isEnabled() : $tab_CommandItemWrapper.prototype.get_enabled.call(this));
		},
		get_isRadioOn: function WebCommandItemWrapper$get_IsRadioOn() {
			return (ss.isValue(this.$webCommand) ? this.$webCommand.get_isRadioOn() : $tab_CommandItemWrapper.prototype.get_isRadioOn.call(this));
		},
		get_isVisible: function WebCommandItemWrapper$get_IsVisible() {
			return (ss.isValue(this.$webCommand) ? this.$webCommand.get_isVisible() : $tab_CommandItemWrapper.prototype.get_isVisible.call(this));
		}
	}, $tab_CommandItemWrapper);
	$tab_WebCommandItemWrapper.$ctor1.prototype = $tab_WebCommandItemWrapper.prototype;
	ss.initClass($tab_WebCommandRegistry, $asm, {});
	ss.initClass($tab_WebZoneModel, $asm, {
		add_newWebZone: function WebZoneModel$add_NewWebZone(value) {
			this.$2$NewWebZoneField = ss.delegateCombine(this.$2$NewWebZoneField, value);
		},
		remove_newWebZone: function WebZoneModel$remove_NewWebZone(value) {
			this.$2$NewWebZoneField = ss.delegateRemove(this.$2$NewWebZoneField, value);
		},
		get_zoneModel: function WebZoneModel$get_ZoneModel() {
			return this.$zoneModel;
		},
		get_url: function WebZoneModel$get_Url() {
			return this.$zoneModel.pm.url;
		},
		update: function WebZoneModel$Update(webZonePresModel, context) {
			this.simpleSwapToUpdate(webZonePresModel, this.$2$NewWebZoneField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_WindowTableCalcModel, $asm, {
		add_modelUpdated: function WindowTableCalcModel$add_ModelUpdated(value) {
			this.$3$ModelUpdatedField = ss.delegateCombine(this.$3$ModelUpdatedField, value);
		},
		remove_modelUpdated: function WindowTableCalcModel$remove_ModelUpdated(value) {
			this.$3$ModelUpdatedField = ss.delegateRemove(this.$3$ModelUpdatedField, value);
		},
		get_$windowPresModel: function WindowTableCalcModel$get_WindowPresModel() {
			return this.pm;
		},
		get_$aggregationIndex: function WindowTableCalcModel$get_AggregationIndex() {
			return this.get_$windowPresModel().aggregationIndex;
		},
		get_aggregationValues: function WindowTableCalcModel$get_AggregationValues() {
			return this.get_$windowPresModel().aggregationValues;
		},
		get_aggregationCaptions: function WindowTableCalcModel$get_AggregationCaptions() {
			return this.get_$windowPresModel().aggregationCaptions;
		},
		get_aggregation: function WindowTableCalcModel$get_Aggregation() {
			ss.Debug.assert(this.get_$aggregationIndex() >= 0 && this.get_$aggregationIndex() < this.get_aggregationValues().length, 'invalid index');
			return this.get_aggregationValues()[this.get_$aggregationIndex()];
		},
		get_hasAggregation: function WindowTableCalcModel$get_HasAggregation() {
			return ss.isValue(this.get_aggregationValues()) && this.get_aggregationValues().length > 0;
		},
		get_numberOfPrevValues: function WindowTableCalcModel$get_NumberOfPrevValues() {
			return this.get_$windowPresModel().numberOfPrevValues;
		},
		get_numberOfNextValues: function WindowTableCalcModel$get_NumberOfNextValues() {
			return this.get_$windowPresModel().numberOfNextValues;
		},
		get_minPrevOrNextValues: function WindowTableCalcModel$get_MinPrevOrNextValues() {
			return this.get_$windowPresModel().minPrevOrNextValues;
		},
		get_maxPrevOrNextValues: function WindowTableCalcModel$get_MaxPrevOrNextValues() {
			return this.get_$windowPresModel().maxPrevOrNextValues;
		},
		get_summaryCaption: function WindowTableCalcModel$get_SummaryCaption() {
			return this.get_$windowPresModel().summaryCaption;
		},
		get_includeCurrentValue: function WindowTableCalcModel$get_IncludeCurrentValue() {
			return this.get_$windowPresModel().includeCurrent;
		},
		get_nullIfIncomplete: function WindowTableCalcModel$get_NullIfIncomplete() {
			return this.get_$windowPresModel().nullIfIncomplete;
		},
		update: function WindowTableCalcModel$Update(newPresModel, context) {
			this.simpleSwapToUpdate(newPresModel, this.$3$ModelUpdatedField, context);
		}
	}, $tab_TypeSpecificTableCalcModel);
	ss.initClass($tab_WorkbookModel, $asm, {
		add_newDashboard: function WorkbookModel$add_NewDashboard(value) {
			this.$2$NewDashboardField = ss.delegateCombine(this.$2$NewDashboardField, value);
		},
		remove_newDashboard: function WorkbookModel$remove_NewDashboard(value) {
			this.$2$NewDashboardField = ss.delegateRemove(this.$2$NewDashboardField, value);
		},
		add_dashboardDeleted: function WorkbookModel$add_DashboardDeleted(value) {
			this.$2$DashboardDeletedField = ss.delegateCombine(this.$2$DashboardDeletedField, value);
		},
		remove_dashboardDeleted: function WorkbookModel$remove_DashboardDeleted(value) {
			this.$2$DashboardDeletedField = ss.delegateRemove(this.$2$DashboardDeletedField, value);
		},
		add_sheetsChanged: function WorkbookModel$add_SheetsChanged(value) {
			this.$2$SheetsChangedField = ss.delegateCombine(this.$2$SheetsChangedField, value);
		},
		remove_sheetsChanged: function WorkbookModel$remove_SheetsChanged(value) {
			this.$2$SheetsChangedField = ss.delegateRemove(this.$2$SheetsChangedField, value);
		},
		add_uiModeChanged: function WorkbookModel$add_UIModeChanged(value) {
			this.$2$UIModeChangedField = ss.delegateCombine(this.$2$UIModeChangedField, value);
		},
		remove_uiModeChanged: function WorkbookModel$remove_UIModeChanged(value) {
			this.$2$UIModeChangedField = ss.delegateRemove(this.$2$UIModeChangedField, value);
		},
		add_newDataConnectionPrompt: function WorkbookModel$add_NewDataConnectionPrompt(value) {
			this.$2$NewDataConnectionPromptField = ss.delegateCombine(this.$2$NewDataConnectionPromptField, value);
		},
		remove_newDataConnectionPrompt: function WorkbookModel$remove_NewDataConnectionPrompt(value) {
			this.$2$NewDataConnectionPromptField = ss.delegateRemove(this.$2$NewDataConnectionPromptField, value);
		},
		add_dataConnectionPromptDismissed: function WorkbookModel$add_DataConnectionPromptDismissed(value) {
			this.$2$DataConnectionPromptDismissedField = ss.delegateCombine(this.$2$DataConnectionPromptDismissedField, value);
		},
		remove_dataConnectionPromptDismissed: function WorkbookModel$remove_DataConnectionPromptDismissed(value) {
			this.$2$DataConnectionPromptDismissedField = ss.delegateRemove(this.$2$DataConnectionPromptDismissedField, value);
		},
		add_sheetTypeChanged: function WorkbookModel$add_SheetTypeChanged(value) {
			this.$2$SheetTypeChangedField = ss.delegateCombine(this.$2$SheetTypeChangedField, value);
		},
		remove_sheetTypeChanged: function WorkbookModel$remove_SheetTypeChanged(value) {
			this.$2$SheetTypeChangedField = ss.delegateRemove(this.$2$SheetTypeChangedField, value);
		},
		get_sheetType: function WorkbookModel$get_SheetType() {
			return ss.coalesce($tab_WorkbookModel.$sheetTypeFromPresModel(this.pm), 'worksheet');
		},
		get_dataSchema: function WorkbookModel$get_DataSchema() {
			return this.$dataSchemaModel;
		},
		get_dataConnectionModel: function WorkbookModel$get_DataConnectionModel() {
			return this.$dataConnectionModel;
		},
		get_commands: function WorkbookModel$get_Commands() {
			return this.$commands;
		},
		get_uiMode: function WorkbookModel$get_UIMode() {
			return (ss.isNullOrUndefined(this.pm) ? 'document' : this.pm.uiMode);
		},
		get_$dashboard: function WorkbookModel$get_Dashboard() {
			return this.$dashboardModel;
		},
		get_isCurrentSheetStoryboard: function WorkbookModel$get_IsCurrentSheetStoryboard() {
			return ss.isValue(this.$dashboardModel) && ss.isValue(this.$dashboardModel.pm) && this.$dashboardModel.pm.isStory;
		},
		get_isCurrentSheetDashboard: function WorkbookModel$get_IsCurrentSheetDashboard() {
			return ss.isValue(this.$dashboardModel) && this.$dashboardModel.get_isDashboard();
		},
		get_currentSheetStoryPointId: function WorkbookModel$get_CurrentSheetStoryPointId() {
			if (this.get_isCurrentSheetStoryboard()) {
				var flipboard = this.get_storyboard().get_flipboard();
				if (ss.isValue(flipboard)) {
					return flipboard.get_currentStoryPointId();
				}
			}
			return 0;
		},
		get_storyboard: function WorkbookModel$get_Storyboard() {
			var contentDashboard = this.findContentDashboard();
			if (ss.isValue(contentDashboard) && ss.referenceEquals(contentDashboard.get_sheetName(), this.$dashboardModel.get_sheetName())) {
				return null;
			}
			return this.$dashboardModel;
		},
		get_hasPublishedSheets: function WorkbookModel$get_HasPublishedSheets() {
			return this.get_sheetsInfo().some(function(s) {
				return s.isPublished;
			});
		},
		get_sheetsInfo: function WorkbookModel$get_SheetsInfo() {
			return this.$sheetsInfo;
		},
		get_isWorkbookIncomplete: function WorkbookModel$get_IsWorkbookIncomplete() {
			return this.get_removedDataSourceCount() > 0 || this.get_removedSheetCount() > 0;
		},
		get_isWorkbookModifiedAuthoring: function WorkbookModel$get_IsWorkbookModifiedAuthoring() {
			return ss.isValue(this.pm) && this.pm.workbookModified;
		},
		get_isCurrentDashboardModified: function WorkbookModel$get_IsCurrentDashboardModified() {
			return ss.isValue(this.get_$dashboard()) && ss.isValue(this.get_$dashboard().pm) && ss.isValue(this.get_$dashboard().pm.modifiedSheets) && this.get_$dashboard().pm.modifiedSheets.length > 0;
		},
		get_removedDataSourceCount: function WorkbookModel$get_RemovedDataSourceCount() {
			return this.pm.removedDatasourceCount || 0;
		},
		get_removedSheetCount: function WorkbookModel$get_RemovedSheetCount() {
			return this.pm.removedSheetCount || 0;
		},
		get_outerDashboardRepositoryUrl: function WorkbookModel$get_OuterDashboardRepositoryUrl() {
			return ((ss.isValue(this.$dashboardModel) && ss.isValue(this.$dashboardModel.pm) && ss.isValue(this.$dashboardModel.pm.sheetLayoutInfo)) ? this.$dashboardModel.pm.sheetLayoutInfo.repositoryUrl : null);
		},
		get_outerDashboardSize: function WorkbookModel$get_OuterDashboardSize() {
			if (ss.isNullOrUndefined(this.$dashboardModel)) {
				return null;
			}
			var portSize = this.$dashboardModel.get_dashboardSize();
			return { w: portSize.w, h: portSize.h };
		},
		get_connectionPromptModel: function WorkbookModel$get_ConnectionPromptModel() {
			return this.$connectionPromptModel;
		},
		get_formatPaneModel: function WorkbookModel$get_FormatPaneModel() {
			return this.$2$FormatPaneModelField;
		},
		set_formatPaneModel: function WorkbookModel$set_FormatPaneModel(value) {
			this.$2$FormatPaneModelField = value;
		},
		handleWorldReset: function WorkbookModel$HandleWorldReset() {
			this.$dashboardModel = null;
			this.$dataSchemaModel = null;
		},
		withOuterDashboard: function WorkbookModel$WithOuterDashboard(callback) {
			if (ss.isValue(this.get_$dashboard())) {
				callback(this.get_$dashboard());
				return;
			}
			var handleNewDashboard = null;
			handleNewDashboard = ss.mkdel(this, function(model) {
				callback(model);
				this.remove_newDashboard(handleNewDashboard);
			});
			this.add_newDashboard(handleNewDashboard);
		},
		withDashboard: function WorkbookModel$WithDashboard(callback) {
			var dash = this.findContentDashboard();
			if (ss.isValue(dash)) {
				callback(dash);
				return;
			}
			var handleNewDashboard = null;
			handleNewDashboard = ss.mkdel(this, function(model) {
				callback(model);
				this.remove_newDashboard(handleNewDashboard);
			});
			this.add_newDashboard(handleNewDashboard);
		},
		$isSheetTypeChanged: function WorkbookModel$IsSheetTypeChanged(workbookPresModel) {
			return $tab_WorkbookModel.$hasSheetLayoutInfo(workbookPresModel) && ss.isValue($tab_WorkbookModel.$sheetTypeFromPresModel(this.pm)) && this.get_sheetType() !== workbookPresModel.dashboardPresModel.sheetLayoutInfo.sheetType;
		},
		addNewDashboardHandler: function WorkbookModel$AddNewDashboardHandler(handler) {
			this.add_newDashboard(handler);
			if (ss.isValue(this.$dashboardModel)) {
				handler(this.$dashboardModel);
			}
		},
		removeDashboardHandler: function WorkbookModel$RemoveDashboardHandler(handler) {
			this.remove_newDashboard(handler);
		},
		findContentDashboard: function WorkbookModel$FindContentDashboard() {
			if (ss.isNullOrUndefined(this.$dashboardModel)) {
				return null;
			}
			return this.$dashboardModel.get_contentDashboard();
		},
		$isSheetNameChanged: function WorkbookModel$IsSheetNameChanged(workbookPresModel) {
			return ss.isValue(workbookPresModel.dashboardPresModel) && ss.isValue(workbookPresModel.dashboardPresModel.sheetLayoutInfo) && !ss.referenceEquals(workbookPresModel.dashboardPresModel.sheetLayoutInfo.sheetName, tsConfig.current_sheet_name);
		},
		get_hasPrompt: function WorkbookModel$get_HasPrompt() {
			return ss.isValue(this.$connectionPromptModel) && !ss.isNullOrEmptyString(this.$connectionPromptModel.get_connectionName());
		},
		update: function WorkbookModel$Update(workbookPresModel, context) {
			if (ss.isValue(workbookPresModel.variablePromptDialog)) {
				this.$connectionPromptModel = new $tab_DataConnectionPromptModel(this);
				this.get_connectionPromptModel().update(workbookPresModel.variablePromptDialog);
				if (!ss.isNullOrEmptyString(this.$connectionPromptModel.get_connectionName())) {
					this.raiseEvent$1($tab_DataConnectionPromptModel).call(this, this.$2$NewDataConnectionPromptField, this.get_connectionPromptModel(), context);
				}
				else {
					this.raiseEvent(this.$2$DataConnectionPromptDismissedField, context);
				}
			}
			tab.Log.get(this).debug('Update: modified=%s', [workbookPresModel.workbookModified]);
			if (ss.isValue(workbookPresModel.workbookModified) && (ss.isNullOrUndefined(this.pm) || this.get_isWorkbookModifiedAuthoring() !== workbookPresModel.workbookModified)) {
				this.raiseEvent(function() {
					$tab_WorkbookModel.fireWorkbookModifiedChanged(workbookPresModel.workbookModified);
				}, context);
			}
			if (this.$isSheetTypeChanged(workbookPresModel)) {
				this.raiseEvent$1(Object).call(this, this.$2$SheetTypeChangedField, workbookPresModel.dashboardPresModel.sheetLayoutInfo.sheetType, context);
			}
			var sheetsChanged = false;
			if (this.$isSheetNameChanged(workbookPresModel)) {
				tab.Log.get(this).debug('Dashboard (tab) changed', []);
				this.handleWorldReset();
				sheetsChanged = true;
			}
			if (!ss.isValue(this.$dataSchemaModel)) {
				this.$dataSchemaModel = new $tab_DataSchemaModel(this);
			}
			if (ss.isValue(workbookPresModel.dataSchema)) {
				this.$dataSchemaModel.update(workbookPresModel.dataSchema, context);
			}
			if (typeof(workbookPresModel.dashboardPresModel) === 'undefined') {
				tab.Log.get(this).debug('Dashboard unchanged', []);
			}
			else if (workbookPresModel.dashboardPresModel === null) {
				tab.Log.get(this).debug('Dashboard deleted', []);
				var m = this.$dashboardModel;
				this.$dashboardModel = null;
				this.raiseEvent$1($tab_DashboardModel).call(this, this.$2$DashboardDeletedField, m, context);
			}
			else {
				if (!ss.isValue(this.$dashboardModel)) {
					tab.Log.get(this).debug('New dashboard', []);
					this.$dashboardModel = new $tab_DashboardModel(this);
					this.raiseEvent$1($tab_DashboardModel).call(this, this.$2$NewDashboardField, this.$dashboardModel, context);
				}
				this.$dashboardModel.update(workbookPresModel.dashboardPresModel, context);
			}
			if (ss.isValue(workbookPresModel.commands)) {
				this.$commands.update(workbookPresModel.commands, context);
			}
			if (ss.isValue(workbookPresModel.sheetsInfo) && !_.isEqual(workbookPresModel.sheetsInfo, this.$sheetsInfo)) {
				this.$sheetsInfo = ss.cast(workbookPresModel.sheetsInfo, Array);
				sheetsChanged = true;
			}
			if (sheetsChanged) {
				this.raiseEvent$1($tab_WorkbookModel).call(this, this.$2$SheetsChangedField, this, context);
			}
			workbookPresModel.uiMode = workbookPresModel.uiMode || 'document';
			if (ss.isNullOrUndefined(this.pm) || this.pm.uiMode !== workbookPresModel.uiMode) {
				this.raiseEvent(this.$2$UIModeChangedField, context);
			}
			if (ss.isValue(workbookPresModel.formatPane)) {
				this.get_formatPaneModel().update(workbookPresModel.formatPane, context);
			}
			this.swapAndCopyPresModel(workbookPresModel);
		}
	}, $tab_Model);
	ss.initClass($tab_WorkgroupDataAlert, $asm, {
		get_id: function WorkgroupDataAlert$get_Id() {
			return this.$presModel.id;
		},
		get_title: function WorkgroupDataAlert$get_Title() {
			return this.$presModel.title;
		},
		get_owner: function WorkgroupDataAlert$get_Owner() {
			return this.$owner;
		},
		get_recipientsCount: function WorkgroupDataAlert$get_RecipientsCount() {
			return this.$presModel.recipientsCount;
		},
		get_notificationIntervalInMinutes: function WorkgroupDataAlert$get_NotificationIntervalInMinutes() {
			return this.$presModel.notificationIntervalInMinutes;
		},
		get_isCurrentUserSubscribed: function WorkgroupDataAlert$get_IsCurrentUserSubscribed() {
			return this.$presModel.isCurrentUserSubscribed;
		}
	});
	ss.initClass($tab_WorkgroupDataSource, $asm, {
		get_isCertified: function WorkgroupDataSource$get_IsCertified() {
			return this.$presModel.isCertified;
		},
		get_name: function WorkgroupDataSource$get_Name() {
			return this.$presModel.name;
		},
		get_description: function WorkgroupDataSource$get_Description() {
			return this.$presModel.description;
		},
		get_id: function WorkgroupDataSource$get_Id() {
			return this.$presModel.id;
		},
		get_connectionTypeDisplayName: function WorkgroupDataSource$get_ConnectionTypeDisplayName() {
			return this.$presModel.connectionTypeDisplayName;
		},
		get_repositoryUrl: function WorkgroupDataSource$get_RepositoryUrl() {
			return this.$presModel.repositoryUrl;
		},
		get_connectedWorkbooksCount: function WorkgroupDataSource$get_ConnectedWorkbooksCount() {
			return this.$presModel.connectedWorkbooksCount;
		},
		get_dataConnectionsCount: function WorkgroupDataSource$get_DataConnectionsCount() {
			return this.$presModel.dataConnectionsCount;
		},
		get_ownerId: function WorkgroupDataSource$get_OwnerId() {
			return this.$presModel.ownerId;
		},
		get_owner: function WorkgroupDataSource$get_Owner() {
			return this.$owner;
		},
		get_projectId: function WorkgroupDataSource$get_ProjectId() {
			return this.$presModel.projectId;
		},
		get_project: function WorkgroupDataSource$get_Project() {
			return this.$project;
		},
		get_usageInfo: function WorkgroupDataSource$get_UsageInfo() {
			return this.$presModel.usageInfo;
		},
		get_connectionDetails: function WorkgroupDataSource$get_ConnectionDetails() {
			return this.$presModel.connectionDetails;
		},
		get_lastRefreshedDescription: function WorkgroupDataSource$get_LastRefreshedDescription() {
			if (tab.MiscUtil.isNullOrEmpty$1(this.$presModel.lastRefreshedAt)) {
				return tab.Strings.ServerDataSourceLive;
			}
			var date = tableau.format.formatToJSCompliantFormat(this.$presModel.lastRefreshedAt, tableau.format.get_isO8601DateTimeFormat(), 2, tableau.format.get_baseTimestamp());
			var format = {};
			format.format = $tab_ApplicationModel.get_instance().get_localeDateFormat();
			format.locale = tsConfig.locale;
			format.timeFormat = $tab_ApplicationModel.get_instance().get_localeTimeFormat();
			format.locale_formatting_strings = tableau.format.get_defaultLocaleStrings();
			return tableau.format.formatJsDateTime(new Date(date), format, 2, 't');
		},
		get_connectsToDescription: function WorkgroupDataSource$get_ConnectsToDescription() {
			if (ss.isNullOrUndefined(this.get_connectionDetails())) {
				return '';
			}
			var firstConnectionName;
			if (this.get_connectionDetails().type === 'database' || this.get_connectionDetails().type === 'webdata-direct') {
				firstConnectionName = this.get_connectionDetails().serverName;
			}
			else if (this.get_connectionDetails().type === 'file') {
				firstConnectionName = $tab_WorkgroupDataSource.$filePathToBasename(this.get_connectionDetails().fileName);
			}
			else {
				firstConnectionName = this.get_connectionDetails().name;
			}
			if (this.get_dataConnectionsCount() > 1) {
				return tab.Strings.ServerDataSourceConnectsToSeveral(firstConnectionName, this.get_dataConnectionsCount() - 1);
			}
			else {
				return firstConnectionName;
			}
		}
	});
	ss.initClass($tab_WorkgroupServerCommands, $asm, {});
	ss.initEnum($tab_WorkgroupServerErrorCode, $asm, { none: 0, userInvalidEmailAddress: 10011, ddaDatasourceError: 210006 });
	ss.initClass($tab_WorkgroupServerRequest, $asm, {});
	ss.initClass($tab_WorksheetServerCommands, $asm, {});
	ss.initClass($tab_WorldCheckpointHolder, $asm, {
		checkpointAppPresModel: function WorldCheckpointHolder$CheckpointAppPresModel() {
			this.$worldCheckpoint = $tab_ApplicationModel.get_instance().pm;
			this.currentWorldDiffersFromCheckpoint = false;
		},
		revertLocalChanges: function WorldCheckpointHolder$RevertLocalChanges() {
			if (this.currentWorldDiffersFromCheckpoint) {
				$tab_Model.nonWorldUpdate(ss.mkdel(this, function(ctx) {
					ctx.dialogProvider = this.$commonDialogProvider;
					$tab_ApplicationModel.get_instance().update(this.$worldCheckpoint, ctx);
				}));
				this.currentWorldDiffersFromCheckpoint = false;
			}
		},
		markCurrentWorldAsDirty: function WorldCheckpointHolder$MarkCurrentWorldAsDirty() {
			this.currentWorldDiffersFromCheckpoint = true;
		},
		worldCheckpoint: function WorldCheckpointHolder$WorldCheckpoint() {
			var clone = tab.MiscUtil.cloneObject(this.$worldCheckpoint);
			return clone;
		}
	});
	ss.initClass($tab_WorldUpdateInterceptor, $asm, {
		add_onBootstrapResponse: function WorldUpdateInterceptor$add_OnBootstrapResponse(value) {
			this.$1$OnBootstrapResponseField = ss.delegateCombine(this.$1$OnBootstrapResponseField, value);
		},
		remove_onBootstrapResponse: function WorldUpdateInterceptor$remove_OnBootstrapResponse(value) {
			this.$1$OnBootstrapResponseField = ss.delegateRemove(this.$1$OnBootstrapResponseField, value);
		},
		add_onCommandResponse: function WorldUpdateInterceptor$add_OnCommandResponse(value) {
			this.$1$OnCommandResponseField = ss.delegateCombine(this.$1$OnCommandResponseField, value);
		},
		remove_onCommandResponse: function WorldUpdateInterceptor$remove_OnCommandResponse(value) {
			this.$1$OnCommandResponseField = ss.delegateRemove(this.$1$OnCommandResponseField, value);
		},
		add_onProgressiveLoadComplete: function WorldUpdateInterceptor$add_OnProgressiveLoadComplete(value) {
			this.$1$OnProgressiveLoadCompleteField = ss.delegateCombine(this.$1$OnProgressiveLoadCompleteField, value);
		},
		remove_onProgressiveLoadComplete: function WorldUpdateInterceptor$remove_OnProgressiveLoadComplete(value) {
			this.$1$OnProgressiveLoadCompleteField = ss.delegateRemove(this.$1$OnProgressiveLoadCompleteField, value);
		},
		raiseOnProgressiveLoadComplete: function WorldUpdateInterceptor$RaiseOnProgressiveLoadComplete() {
			if (!ss.staticEquals(this.$1$OnProgressiveLoadCompleteField, null)) {
				this.$1$OnProgressiveLoadCompleteField();
			}
		},
		raiseOnBootstrapResponse: function WorldUpdateInterceptor$RaiseOnBootstrapResponse(appPresModel) {
			var handler = this.$1$OnBootstrapResponseField;
			if (!ss.staticEquals(handler, null)) {
				handler(appPresModel);
			}
		},
		raiseOnCommandResponse: function WorldUpdateInterceptor$RaiseOnCommandResponse(args) {
			var handler = this.$1$OnCommandResponseField;
			if (!ss.staticEquals(handler, null)) {
				handler(args);
			}
		}
	});
	ss.initClass($tab_WorldUpdateServerCommands, $asm, {});
	ss.initClass($tab_XhrUtil, $asm, {
		request: function XhrUtil$Request(args) {
			var SupportsAcceptedHeaderName = 'X-Tsi-Supports-Accepted';
			args.headers = args.headers || {};
			if (ss.keyExists(args.headers, SupportsAcceptedHeaderName) && ss.unbox(ss.cast(args.headers[SupportsAcceptedHeaderName], Boolean)) === false) {
				delete args.headers[SupportsAcceptedHeaderName];
			}
			else {
				args.headers[SupportsAcceptedHeaderName] = true;
			}
			if (ss.isValue($tab_XhrUtil.$currentTabName) && $tab_XhrUtil.$currentTabName.length > 0) {
				args.headers['X-Tsi-Active-Tab'] = encodeURIComponent($tab_XhrUtil.$currentTabName);
			}
			if (ss.isValue(args.complete)) {
				var oldCompleted = args.complete;
				args.complete = function(xhr, textStatus) {
					xhr['args'] = args;
					oldCompleted(xhr, textStatus);
				};
			}
			if (ss.isValue(args.success)) {
				var oldSuccess = args.success;
				args.success = function(data, textStatus1, xhr1) {
					xhr1['args'] = args;
					oldSuccess(data, textStatus1, xhr1);
				};
			}
			if (ss.isValue(args.error)) {
				var oldError = args.error;
				args.error = function(xhr2, textStatus2, error) {
					xhr2['args'] = args;
					oldError(xhr2, textStatus2, error);
				};
			}
			if (ss.isValue(args.beforeSend)) {
				var oldBeforeSend = args.beforeSend;
				args.beforeSend = function(xhr3) {
					xhr3['args'] = args;
					oldBeforeSend(xhr3);
				};
			}
			var opt = args;
			return $.ajax(opt);
		}
	});
	ss.initClass($tab_ZoneCommonModel, $asm, {
		add_resizeZone: function ZoneCommonModel$add_ResizeZone(value) {
			this.$2$ResizeZoneField = ss.delegateCombine(this.$2$ResizeZoneField, value);
		},
		remove_resizeZone: function ZoneCommonModel$remove_ResizeZone(value) {
			this.$2$ResizeZoneField = ss.delegateRemove(this.$2$ResizeZoneField, value);
		},
		add_changeZoneTitleVisibility: function ZoneCommonModel$add_ChangeZoneTitleVisibility(value) {
			this.$2$ChangeZoneTitleVisibilityField = ss.delegateCombine(this.$2$ChangeZoneTitleVisibilityField, value);
		},
		remove_changeZoneTitleVisibility: function ZoneCommonModel$remove_ChangeZoneTitleVisibility(value) {
			this.$2$ChangeZoneTitleVisibilityField = ss.delegateRemove(this.$2$ChangeZoneTitleVisibilityField, value);
		},
		add_changeZoneFloatingState: function ZoneCommonModel$add_ChangeZoneFloatingState(value) {
			this.$2$ChangeZoneFloatingStateField = ss.delegateCombine(this.$2$ChangeZoneFloatingStateField, value);
		},
		remove_changeZoneFloatingState: function ZoneCommonModel$remove_ChangeZoneFloatingState(value) {
			this.$2$ChangeZoneFloatingStateField = ss.delegateRemove(this.$2$ChangeZoneFloatingStateField, value);
		},
		get_zoneDescription: function ZoneCommonModel$get_ZoneDescription() {
			return this.get_zoneCommonPresModel().name;
		},
		get_zoneCommonPresModel: function ZoneCommonModel$get_ZoneCommonPresModel() {
			return ss.coalesce(this.pm, new Object());
		},
		get_zoneId: function ZoneCommonModel$get_ZoneId() {
			return this.get_zoneCommonPresModel().zoneId;
		},
		get_parentZoneId: function ZoneCommonModel$get_ParentZoneId() {
			return this.get_zoneCommonPresModel().parentZoneId;
		},
		get_zoneType: function ZoneCommonModel$get_ZoneType() {
			return ss.coalesce(this.get_zoneCommonPresModel().zoneType, 'invalid');
		},
		get_zoneLayoutType: function ZoneCommonModel$get_ZoneLayoutType() {
			return ss.coalesce(this.get_zoneCommonPresModel().zoneLayoutType, 'trivial');
		},
		get_contentX: function ZoneCommonModel$get_ContentX() {
			return this.get_zoneCommonPresModel().contentX;
		},
		get_contentY: function ZoneCommonModel$get_ContentY() {
			return this.get_zoneCommonPresModel().contentY;
		},
		get_contentHeight: function ZoneCommonModel$get_ContentHeight() {
			return this.get_zoneCommonPresModel().contentH - 2 * this.get_contentBorderWidth();
		},
		get_contentWidth: function ZoneCommonModel$get_ContentWidth() {
			return this.get_zoneCommonPresModel().contentW - 2 * this.get_contentBorderWidth();
		},
		get_height: function ZoneCommonModel$get_Height() {
			return this.get_zoneCommonPresModel().h;
		},
		get_width: function ZoneCommonModel$get_Width() {
			return this.get_zoneCommonPresModel().w;
		},
		get_x: function ZoneCommonModel$get_X() {
			return this.get_zoneCommonPresModel().x;
		},
		get_y: function ZoneCommonModel$get_Y() {
			return this.get_zoneCommonPresModel().y;
		},
		get_heightWithMargin: function ZoneCommonModel$get_HeightWithMargin() {
			if (!tab.FeatureFlags.isEnabled('NewDashboardSpacing')) {
				return (this.get_isFloating() ? this.get_height() : (this.get_height() + 8));
			}
			return this.get_height();
		},
		get_widthWithMargin: function ZoneCommonModel$get_WidthWithMargin() {
			if (!tab.FeatureFlags.isEnabled('NewDashboardSpacing')) {
				return (this.get_isFloating() ? this.get_width() : (this.get_width() + 8));
			}
			return this.get_width();
		},
		get_xWithMargin: function ZoneCommonModel$get_XWithMargin() {
			if (!tab.FeatureFlags.isEnabled('NewDashboardSpacing')) {
				return (this.get_isFloating() ? this.get_x() : (this.get_x() - $tab_ZoneCommonModel.zoneMargin));
			}
			return this.get_x();
		},
		get_yWithMargin: function ZoneCommonModel$get_YWithMargin() {
			if (!tab.FeatureFlags.isEnabled('NewDashboardSpacing')) {
				return (this.get_isFloating() ? this.get_y() : (this.get_y() - $tab_ZoneCommonModel.zoneMargin));
			}
			return this.get_y();
		},
		get_zoneContentRectXY: function ZoneCommonModel$get_ZoneContentRectXY() {
			return { x: this.get_contentX(), y: this.get_contentY(), w: this.get_contentWidth(), h: this.get_contentHeight() };
		},
		get_isFloating: function ZoneCommonModel$get_IsFloating() {
			return this.get_zoneCommonPresModel().isFloating;
		},
		get_hasTitle: function ZoneCommonModel$get_HasTitle() {
			return this.get_zoneCommonPresModel().hasTitle;
		},
		get_canHaveTitle: function ZoneCommonModel$get_CanHaveTitle() {
			return this.get_zoneCommonPresModel().canHaveTitle;
		},
		get_canFloat: function ZoneCommonModel$get_CanFloat() {
			return this.get_zoneCommonPresModel().canFloat;
		},
		get_isHorizontal: function ZoneCommonModel$get_IsHorizontal() {
			return this.get_zoneCommonPresModel().isHorizontal;
		},
		get_hasBorder: function ZoneCommonModel$get_HasBorder() {
			return $tab_ModelUtils.hasBorder(this.get_zoneStyle());
		},
		get_contentBorderWidth: function ZoneCommonModel$get_ContentBorderWidth() {
			if (tab.FeatureFlags.isEnabled('NewDashboardSpacing')) {
				if ($tab_ModelUtils.hasBorder(this.get_contentStyle())) {
					return this.get_contentStyle().get_borderWidth();
				}
			}
			else if (this.get_hasBorder()) {
				return this.get_zoneStyle().get_borderWidth();
			}
			return 0;
		},
		get_zoneStyle: function ZoneCommonModel$get_ZoneStyle() {
			return this.$zoneStyleModel;
		},
		get_contentStyle: function ZoneCommonModel$get_ContentStyle() {
			return this.$contentStyleModel;
		},
		update: function ZoneCommonModel$Update(zoneCommonPresModel, context) {
			if (ss.isValue(zoneCommonPresModel)) {
				zoneCommonPresModel.parentZoneId = zoneCommonPresModel.parentZoneId || 0;
				zoneCommonPresModel.isFloating = zoneCommonPresModel.isFloating || false;
				zoneCommonPresModel.isHorizontal = zoneCommonPresModel.isHorizontal || false;
				zoneCommonPresModel.canHaveTitle = ss.coalesce(zoneCommonPresModel.canHaveTitle, true);
				zoneCommonPresModel.canFloat = ss.coalesce(zoneCommonPresModel.canFloat, true);
				zoneCommonPresModel.contentW = zoneCommonPresModel.contentW || zoneCommonPresModel.w;
				zoneCommonPresModel.contentH = zoneCommonPresModel.contentH || zoneCommonPresModel.h;
				zoneCommonPresModel.contentX = zoneCommonPresModel.contentX || zoneCommonPresModel.x;
				zoneCommonPresModel.contentY = zoneCommonPresModel.contentY || zoneCommonPresModel.y;
				if (!this.isNewZoneSizeSameAsOld(zoneCommonPresModel)) {
					this.raiseEvent(this.$2$ResizeZoneField, context);
				}
				if (ss.isValue(zoneCommonPresModel.styledBox)) {
					this.$zoneStyleModel.update(zoneCommonPresModel.styledBox, context);
				}
				if (ss.isValue(zoneCommonPresModel.globalStyledBox)) {
					this.$contentStyleModel.update(zoneCommonPresModel.globalStyledBox, context);
				}
			}
			if (ss.isValue(this.get_zoneCommonPresModel()) && this.get_zoneCommonPresModel().hasTitle !== zoneCommonPresModel.hasTitle) {
				this.raiseEvent(this.$2$ChangeZoneTitleVisibilityField, context);
			}
			if (ss.isValue(this.get_zoneCommonPresModel()) && (this.get_zoneCommonPresModel().isFloating !== zoneCommonPresModel.isFloating || this.get_zoneCommonPresModel().canFloat !== zoneCommonPresModel.canFloat)) {
				this.raiseEvent(this.$2$ChangeZoneFloatingStateField, context);
			}
			this.swapAndCopyPresModel(zoneCommonPresModel);
		},
		isNewZoneSizeSameAsOld: function ZoneCommonModel$IsNewZoneSizeSameAsOld(newPM) {
			if (!ss.isValue(newPM)) {
				return true;
			}
			if (ss.isValue(this.pm)) {
				return ss.coalesce(newPM.contentH, newPM.h) === this.get_contentHeight() && ss.coalesce(newPM.contentW, newPM.w) === this.get_contentWidth() && ss.coalesce(newPM.contentX, newPM.x) === this.get_contentX() && ss.coalesce(newPM.contentY, newPM.y) === this.get_contentY() && newPM.h === this.get_height() && newPM.w === this.get_width() && newPM.x === this.get_x() && newPM.y === this.get_y();
			}
			return false;
		}
	}, $tab_Model);
	ss.initClass($tab_ZoneContentWrapperModel, $asm, {
		get_zone: function ZoneContentWrapperModel$get_Zone() {
			return ss.safeCast(this.parent, $tab_ZoneModel);
		}
	}, $tab_Model);
	ss.initClass($tab_ZoneModel, $asm, {
		add_newZoneContent: function ZoneModel$add_NewZoneContent(value) {
			this.$2$NewZoneContentField = ss.delegateCombine(this.$2$NewZoneContentField, value);
		},
		remove_newZoneContent: function ZoneModel$remove_NewZoneContent(value) {
			this.$2$NewZoneContentField = ss.delegateRemove(this.$2$NewZoneContentField, value);
		},
		add_removeZoneContent: function ZoneModel$add_RemoveZoneContent(value) {
			this.$2$RemoveZoneContentField = ss.delegateCombine(this.$2$RemoveZoneContentField, value);
		},
		remove_removeZoneContent: function ZoneModel$remove_RemoveZoneContent(value) {
			this.$2$RemoveZoneContentField = ss.delegateRemove(this.$2$RemoveZoneContentField, value);
		},
		add_updateZone: function ZoneModel$add_UpdateZone(value) {
			this.$2$UpdateZoneField = ss.delegateCombine(this.$2$UpdateZoneField, value);
		},
		remove_updateZone: function ZoneModel$remove_UpdateZone(value) {
			this.$2$UpdateZoneField = ss.delegateRemove(this.$2$UpdateZoneField, value);
		},
		add_childrenAdded: function ZoneModel$add_ChildrenAdded(value) {
			this.$2$ChildrenAddedField = ss.delegateCombine(this.$2$ChildrenAddedField, value);
		},
		remove_childrenAdded: function ZoneModel$remove_ChildrenAdded(value) {
			this.$2$ChildrenAddedField = ss.delegateRemove(this.$2$ChildrenAddedField, value);
		},
		get_model: function ZoneModel$get_Model() {
			return this.$zoneContentModel;
		},
		get_dashboardModel: function ZoneModel$get_DashboardModel() {
			return this.$dashboardModel;
		},
		get_zoneCommonModel: function ZoneModel$get_ZoneCommonModel() {
			return this.$zoneCommonModel;
		},
		get_visualModel: function ZoneModel$get_VisualModel() {
			if (this.$zoneCommonModel.get_zoneType() === 'viz') {
				return ss.cast(this.$zoneContentModel, $tab_VisualModel);
			}
			return null;
		},
		get_worksheetName: function ZoneModel$get_WorksheetName() {
			return this.pm.worksheet;
		},
		get_zoneDescription: function ZoneModel$get_ZoneDescription() {
			return this.get_zoneCommonModel().get_zoneDescription();
		},
		get_zoneId: function ZoneModel$get_ZoneId() {
			return this.pm.zoneId;
		},
		get_parentZoneId: function ZoneModel$get_ParentZoneId() {
			return this.get_zoneCommonModel().get_parentZoneId();
		},
		get_zoneType: function ZoneModel$get_ZoneType() {
			return this.get_zoneCommonModel().get_zoneType();
		},
		get_isStorySpecific: function ZoneModel$get_IsStorySpecific() {
			return !ss.isNullOrUndefined(this.pm.storyPointId) && !ss.isNullOrUndefined(this.pm.flipboardZoneId) && this.pm.storyPointId !== $tab_ZoneModel.$uninitializedStoryPointID && this.pm.flipboardZoneId !== $tab_ZoneModel.$uninitializedFlipboardZoneID;
		},
		get_contentHeight: function ZoneModel$get_ContentHeight() {
			return this.get_zoneCommonModel().get_contentHeight();
		},
		get_contentWidth: function ZoneModel$get_ContentWidth() {
			return this.get_zoneCommonModel().get_contentWidth();
		},
		get_contentX: function ZoneModel$get_ContentX() {
			return this.get_zoneCommonModel().get_contentX();
		},
		get_contentY: function ZoneModel$get_ContentY() {
			return this.get_zoneCommonModel().get_contentY();
		},
		get_zoneContentBounds: function ZoneModel$get_ZoneContentBounds() {
			return { l: 0, t: 0, w: this.get_contentWidth(), h: this.get_contentHeight() };
		},
		get_height: function ZoneModel$get_Height() {
			return this.get_zoneCommonModel().get_height();
		},
		get_width: function ZoneModel$get_Width() {
			return this.get_zoneCommonModel().get_width();
		},
		get_x: function ZoneModel$get_X() {
			return this.get_zoneCommonModel().get_x();
		},
		get_y: function ZoneModel$get_Y() {
			return this.get_zoneCommonModel().get_y();
		},
		get_heightWithMargin: function ZoneModel$get_HeightWithMargin() {
			return this.get_zoneCommonModel().get_heightWithMargin();
		},
		get_widthWithMargin: function ZoneModel$get_WidthWithMargin() {
			return this.get_zoneCommonModel().get_widthWithMargin();
		},
		get_xWithMargin: function ZoneModel$get_XWithMargin() {
			return this.get_zoneCommonModel().get_xWithMargin();
		},
		get_yWithMargin: function ZoneModel$get_YWithMargin() {
			return this.get_zoneCommonModel().get_yWithMargin();
		},
		get_isFloating: function ZoneModel$get_IsFloating() {
			return this.get_zoneCommonModel().get_isFloating();
		},
		get_hasTitle: function ZoneModel$get_HasTitle() {
			return this.get_zoneCommonModel().get_hasTitle();
		},
		get_canHaveTitle: function ZoneModel$get_CanHaveTitle() {
			return this.get_zoneCommonModel().get_canHaveTitle();
		},
		get_canFloat: function ZoneModel$get_CanFloat() {
			return this.get_zoneCommonModel().get_canFloat();
		},
		get_isHorizontal: function ZoneModel$get_IsHorizontal() {
			return this.get_zoneCommonModel().get_isHorizontal();
		},
		get_hasBorder: function ZoneModel$get_HasBorder() {
			return this.get_zoneCommonModel().get_hasBorder();
		},
		get_styledBoxModel: function ZoneModel$get_StyledBoxModel() {
			return this.get_zoneCommonModel().get_zoneStyle();
		},
		get_contentType: function ZoneModel$get_ContentType() {
			return $tab_ZoneModel.$typeOfContent(this.pm);
		},
		get_titleHeight: function ZoneModel$get_TitleHeight() {
			return this.pm.titleHeight;
		},
		get_titleWidth: function ZoneModel$get_TitleWidth() {
			return this.pm.titleWidth;
		},
		get_hasSpace: function ZoneModel$get_HasSpace() {
			return this.pm.hasSpace;
		},
		get_isSelectionDisabled: function ZoneModel$get_IsSelectionDisabled() {
			return this.pm.isSelectionDisabled;
		},
		get_contextMenuCommands: function ZoneModel$get_ContextMenuCommands() {
			if (this.$zoneCommonModel.get_zoneType() === 'filter') {
				if (tab.FeatureFlags.isEnabled('VizCatQF') && !this.$containsLegacyQuickFilter) {
					var filterModel = ss.cast(this.get_model(), $tab_QuickFilterDisplayModel);
					return filterModel.get_quickFilterCommands();
				}
				else {
					var filterModel1 = ss.cast(this.get_model(), $tab_LegacyQuickFilterDisplayModel);
					return filterModel1.get_quickFilterCommands();
				}
			}
			return {};
		},
		get_chromeCommands: function ZoneModel$get_ChromeCommands() {
			return this.$chromeCommands;
		},
		get_backgroundColor: function ZoneModel$get_BackgroundColor() {
			if (ss.isValue(this.pm.bgColor)) {
				this.$convertedBGColor = this.$convertedBGColor || $tab_ColorModel.convertColorForCanvas(this.pm.bgColor);
				return this.$convertedBGColor;
			}
			return null;
		},
		get_relativeZoneZIndex: function ZoneModel$get_RelativeZoneZIndex() {
			return this.pm.zoneZOrder + 1;
		},
		get_associatedSheet: function ZoneModel$get_AssociatedSheet() {
			return this.pm.sheet;
		},
		get_isDependentOnViz: function ZoneModel$get_IsDependentOnViz() {
			switch (this.$zoneCommonModel.get_zoneType()) {
				case 'viz':
				case 'color':
				case 'shape':
				case 'size':
				case 'map': {
					return true;
				}
			}
			return false;
		},
		get_hasContent: function ZoneModel$get_HasContent() {
			if (ss.isNullOrUndefined(this.pm)) {
				return false;
			}
			return ss.isNullOrUndefined(this.pm.presModelHolder) || Object.keys(this.pm.presModelHolder).length > 0;
		},
		raiseRemoveZoneContent: function ZoneModel$RaiseRemoveZoneContent(context) {
			this.raiseEvent(this.$2$RemoveZoneContentField, context);
		},
		raiseChildrenAdded: function ZoneModel$RaiseChildrenAdded(context) {
			this.raiseEvent(this.$2$ChildrenAddedField, context);
		},
		update: function ZoneModel$Update(zonePresModel, context) {
			if (ss.isValue(zonePresModel)) {
				{
					zonePresModel.sheet = zonePresModel.sheet || '';
					zonePresModel.titleWidth = zonePresModel.titleWidth || 0;
					zonePresModel.titleHeight = zonePresModel.titleHeight || 0;
					zonePresModel.isSelectionDisabled = zonePresModel.isSelectionDisabled || false;
					zonePresModel.hasSpace = zonePresModel.hasSpace || false;
				}
				var didZoneSizeChange = !this.get_zoneCommonModel().isNewZoneSizeSameAsOld(zonePresModel.zoneCommon);
				if (ss.isValue(zonePresModel.zoneCommon)) {
					this.$zoneCommonModel.update(zonePresModel.zoneCommon, context);
				}
				if (ss.isNullOrUndefined(this.pm) || !ss.referenceEquals(this.pm.bgColor, zonePresModel.bgColor)) {
					this.$convertedBGColor = null;
				}
				if (ss.isValue(zonePresModel.zoneChromeCommands)) {
					this.$chromeCommands.update(zonePresModel.zoneChromeCommands, context);
				}
				if (ss.isValue(zonePresModel.presModelHolder)) {
					if (!ss.isValue(this.$contentWrapperModel)) {
						this.$contentWrapperModel = new $tab_ZoneContentWrapperModel(this);
					}
					var contentType = $tab_ZoneModel.$typeOfContent(zonePresModel);
					if (ss.isValue(this.pm) && !ss.referenceEquals(this.get_contentType(), contentType)) {
						this.$zoneContentModel = null;
					}
					var hadCachedContent = false;
					if (ss.isNullOrUndefined(this.$zoneContentModel) && this.get_zoneCommonModel().get_zoneType() !== 'filter') {
						var contentModel = $tab_ModelUtils.getPendingZoneContentModel(this.$zoneCommonModel.get_zoneId());
						if (ss.isValue(contentModel)) {
							hadCachedContent = true;
							this.$zoneContentModel = contentModel;
							this.$zoneContentModel.reparent(this.$contentWrapperModel);
							this.$raiseNewZoneContent(this.$zoneContentModel, context);
						}
					}
					if (!hadCachedContent) {
						this.$createOrUpdateContentModel(contentType, zonePresModel, didZoneSizeChange, context);
					}
				}
				else if (ss.isValue(this.pm) && ss.isValue(this.$zoneContentModel) && !ss.referenceEquals(zonePresModel.frameJson, this.pm.frameJson)) {
					var frame = $tab_ZoneModel.$parseJson(zonePresModel.frameJson);
					if (this.$containsLegacyQuickFilter && zonePresModel.zoneCommon.zoneType === 'filter') {
						var quickfilterDisplayModel = ss.cast(this.$zoneContentModel, $tab_LegacyQuickFilterDisplayModel);
						quickfilterDisplayModel.update(quickfilterDisplayModel.get_quickFilterDisplayPresModel(), frame, context);
					}
					if (ss.referenceEquals($tab_ZoneModel.$typeOfContent(this.pm), $tab_ZoneModel.$paramCtrlField)) {
						var paramCtrl = $tab_ZoneModel.getContent(zonePresModel, $tab_ZoneModel.$paramCtrlField);
						if (tab.FeatureFlags.isEnabled('VizParam') && $tab_ParameterFilterDisplayModel.supportsParameterType(paramCtrl)) {
						}
						else {
							var paramCtrlModel = ss.cast(this.$zoneContentModel, $tab_ParameterCtrlModel);
							paramCtrlModel.updateFrame(frame, context);
						}
					}
				}
				if (ss.isValue(zonePresModel.zoneTitle)) {
					$tab_FontNotificationUtil.notifyFontsFromTextRegionPresModel(zonePresModel.zoneTitle);
				}
			}
			this.swapAndCopyPresModel(zonePresModel);
			this.raiseEvent(this.$2$UpdateZoneField, context);
		},
		$createOrUpdateContentModel: function ZoneModel$CreateOrUpdateContentModel(contentType, zonePresModel, didZoneSizeChange, context) {
			if (ss.referenceEquals(contentType, $tab_ZoneModel.$visualField)) {
				var visual = $tab_ZoneModel.getContent(zonePresModel, $tab_ZoneModel.$visualField);
				if (ss.isNullOrUndefined(this.$zoneContentModel)) {
					this.$zoneContentModel = new $tab_VisualModel(this.$contentWrapperModel);
					this.$raiseNewZoneContent(this.$zoneContentModel, context);
				}
				var visualModel = ss.cast(this.$zoneContentModel, $tab_VisualModel);
				visualModel.update(visual, context);
			}
			else if (ss.referenceEquals(contentType, $tab_ZoneModel.$titleField)) {
				var title = $tab_ZoneModel.getContent(zonePresModel, $tab_ZoneModel.$titleField);
				if (ss.isNullOrUndefined(this.$zoneContentModel)) {
					this.$zoneContentModel = new $tab_TextRegionModel(this.$contentWrapperModel, $tab_ZoneModel.$titleField);
					this.$raiseNewZoneContent(this.$zoneContentModel, context);
				}
				var textRegionModel = ss.cast(this.$zoneContentModel, $tab_TextRegionModel);
				textRegionModel.update(title, context);
			}
			else if (ss.referenceEquals(contentType, $tab_ZoneModel.$textField)) {
				var text = $tab_ZoneModel.getContent(zonePresModel, $tab_ZoneModel.$textField);
				if (ss.isNullOrUndefined(this.$zoneContentModel)) {
					this.$zoneContentModel = new $tab_TextRegionModel(this.$contentWrapperModel, $tab_ZoneModel.$textField);
					this.$raiseNewZoneContent(this.$zoneContentModel, context);
				}
				var textRegionModel1 = ss.cast(this.$zoneContentModel, $tab_TextRegionModel);
				textRegionModel1.update(text, context);
			}
			else if (ss.referenceEquals(contentType, $tab_ZoneModel.$quickFilterField)) {
				var quickFilterDisplay = $tab_ZoneModel.getContent(zonePresModel, $tab_ZoneModel.$quickFilterField);
				var containedLegacyQuickFilter = this.$containsLegacyQuickFilter;
				if (tab.FeatureFlags.isEnabled('VizCatQF') && $tab_QuickFilterDisplayModel.supportsQuickFilterType(quickFilterDisplay)) {
					this.$containsLegacyQuickFilter = false;
					if (ss.isNullOrUndefined(this.$zoneContentModel) || containedLegacyQuickFilter) {
						this.$zoneContentModel = new $tab_QuickFilterDisplayModel(this.$contentWrapperModel);
						this.$raiseNewZoneContent(this.$zoneContentModel, context);
					}
					var quickFilterDisplayModel = ss.cast(this.$zoneContentModel, $tab_QuickFilterDisplayModel);
					quickFilterDisplayModel.update(quickFilterDisplay, context);
				}
				else {
					this.$containsLegacyQuickFilter = true;
					if (ss.isNullOrUndefined(this.$zoneContentModel) || !containedLegacyQuickFilter) {
						this.$zoneContentModel = new $tab_LegacyQuickFilterDisplayModel(this.$contentWrapperModel);
						this.$raiseNewZoneContent(this.$zoneContentModel, context);
					}
					var frame = $tab_ZoneModel.$parseJson(zonePresModel.frameJson);
					var quickFilterDisplayModel1 = ss.cast(this.$zoneContentModel, $tab_LegacyQuickFilterDisplayModel);
					quickFilterDisplayModel1.update(quickFilterDisplay, frame, context);
				}
			}
			else if (ss.referenceEquals(contentType, $tab_ZoneModel.$qColorLegendField)) {
				if ($tab_ApplicationModel.get_instance().get_isLocalRenderMode()) {
					var quantColorLegendPM = $tab_ZoneModel.getContent(zonePresModel, contentType);
					if (ss.isNullOrUndefined(this.$zoneContentModel)) {
						this.$zoneContentModel = new $tab_QuantitativeColorLegendModel(this.$contentWrapperModel, contentType);
						this.$raiseNewZoneContent(this.$zoneContentModel, context);
					}
					var quantLegendModel = ss.cast(this.$zoneContentModel, $tab_QuantitativeColorLegendModel);
					quantLegendModel.update(quantColorLegendPM, context);
				}
			}
			else if (ss.referenceEquals(contentType, $tab_ZoneModel.$colorLegendField) || ss.referenceEquals(contentType, $tab_ZoneModel.$sizeLegendField) || ss.referenceEquals(contentType, $tab_ZoneModel.$shapeLegendField) || ss.referenceEquals(contentType, $tab_ZoneModel.$mapLegendField)) {
				if ($tab_ApplicationModel.get_instance().get_isLocalRenderMode()) {
					var catLegendPM = $tab_ZoneModel.getContent(zonePresModel, contentType);
					if (ss.isNullOrUndefined(this.$zoneContentModel)) {
						var zt = this.$zoneCommonModel.get_zoneType();
						this.$zoneContentModel = new $tab_CategoricalLegendModel(this.$contentWrapperModel, contentType, $tab_ZoneModel.$getLegendTypeFromZoneType(zt));
						this.$raiseNewZoneContent(this.$zoneContentModel, context);
					}
					var catLegendModel = ss.cast(this.$zoneContentModel, $tab_CategoricalLegendModel);
					catLegendModel.update(catLegendPM, context);
				}
			}
			else if (ss.referenceEquals(contentType, $tab_ZoneModel.$paramCtrlField)) {
				var paramCtrl = $tab_ZoneModel.getContent(zonePresModel, $tab_ZoneModel.$paramCtrlField);
				var paramCtrlJson = $tab_ZoneModel.$parseJson(paramCtrl.parameterCtrlJson);
				paramCtrl.legacyPresModel = paramCtrlJson;
				var containedLegacyParameter = this.$containsLegacyParameter;
				if (tab.FeatureFlags.isEnabled('VizParam') && $tab_ParameterFilterDisplayModel.supportsParameterType(paramCtrl)) {
					this.$containsLegacyParameter = false;
					if (ss.isNullOrUndefined(this.$zoneContentModel) || containedLegacyParameter) {
						this.$zoneContentModel = new $tab_ParameterFilterDisplayModel(this.$contentWrapperModel);
						this.$raiseNewZoneContent(this.$zoneContentModel, context);
					}
					var parameterDisplayModel = ss.cast(this.$zoneContentModel, $tab_ParameterFilterDisplayModel);
					parameterDisplayModel.update(paramCtrl, context);
				}
				else {
					this.$containsLegacyParameter = true;
					if (ss.isNullOrUndefined(this.$zoneContentModel) || !containedLegacyParameter) {
						this.$zoneContentModel = new $tab_ParameterCtrlModel(this.$contentWrapperModel);
						this.$raiseNewZoneContent(this.$zoneContentModel, context);
					}
					var frame1 = $tab_ZoneModel.$parseJson(zonePresModel.frameJson);
					var paramCtrlModel = ss.cast(this.$zoneContentModel, $tab_ParameterCtrlModel);
					paramCtrlModel.update(paramCtrl, frame1, context);
				}
			}
			else if (ss.referenceEquals(contentType, $tab_ZoneModel.$pageField)) {
				var page = $tab_ZoneModel.getContent(zonePresModel, $tab_ZoneModel.$pageField);
				if (ss.isNullOrUndefined(this.$zoneContentModel)) {
					this.$zoneContentModel = new $tab_PageModel(this.$contentWrapperModel);
					this.$raiseNewZoneContent(this.$zoneContentModel, context);
				}
				var fireEvent = !didZoneSizeChange || ss.isNullOrUndefined(this.pm);
				var frame2 = $tab_ZoneModel.$parseJson(zonePresModel.frameJson);
				var pageModel = ss.cast(this.$zoneContentModel, $tab_PageModel);
				pageModel.update(page, frame2, fireEvent, context);
			}
			else if (ss.referenceEquals(contentType, $tab_ZoneModel.$flipboardNavField)) {
				var nav = $tab_ZoneModel.getContent(zonePresModel, $tab_ZoneModel.$flipboardNavField);
				if (ss.isNullOrUndefined(this.$zoneContentModel)) {
					this.$zoneContentModel = new $tab_FlipboardNavigatorModel(this.$contentWrapperModel);
					this.$raiseNewZoneContent(this.$zoneContentModel, context);
				}
				var navModel = ss.cast(this.$zoneContentModel, $tab_FlipboardNavigatorModel);
				navModel.update(nav, context);
			}
			else if (ss.referenceEquals(contentType, $tab_ZoneModel.$flipboardField)) {
				var flip = $tab_ZoneModel.getContent(zonePresModel, $tab_ZoneModel.$flipboardField);
				if (ss.isNullOrUndefined(this.$zoneContentModel)) {
					this.$zoneContentModel = new $tab_FlipboardModel(this.$contentWrapperModel);
					this.$raiseNewZoneContent(this.$zoneContentModel, context);
				}
				var navModel1 = ss.cast(this.$zoneContentModel, $tab_FlipboardModel);
				navModel1.update(flip, context);
			}
			else if (ss.referenceEquals(contentType, $tab_ZoneModel.$serverRenderedLegendField)) {
				var legacyLegendPM = $tab_ZoneModel.getContent(zonePresModel, $tab_ZoneModel.$serverRenderedLegendField);
				if (ss.isNullOrUndefined(this.$zoneContentModel)) {
					this.$zoneContentModel = new $tab_LegacyLegendModel(this.$contentWrapperModel);
					this.$raiseNewZoneContent(this.$zoneContentModel, context);
				}
				var legacyLegendModel = ss.cast(this.$zoneContentModel, $tab_LegacyLegendModel);
				legacyLegendModel.update(legacyLegendPM, context);
			}
			else if (ss.referenceEquals(contentType, $tab_ZoneModel.$webZoneField)) {
				var webZone = $tab_ZoneModel.getContent(zonePresModel, $tab_ZoneModel.$webZoneField);
				if (ss.isNullOrUndefined(this.$zoneContentModel)) {
					this.$zoneContentModel = new $tab_WebZoneModel(this.$contentWrapperModel);
					this.$raiseNewZoneContent(this.$zoneContentModel, context);
				}
				var webZoneModel = ss.cast(this.$zoneContentModel, $tab_WebZoneModel);
				webZoneModel.update(webZone, context);
			}
			else if (ss.referenceEquals(contentType, $tab_ZoneModel.$imageZoneField)) {
				var imageZone = $tab_ZoneModel.getContent(zonePresModel, $tab_ZoneModel.$imageZoneField);
				if (ss.isNullOrUndefined(this.$zoneContentModel)) {
					this.$zoneContentModel = new $tab_ImageZoneModel(this.$contentWrapperModel);
					this.$raiseNewZoneContent(this.$zoneContentModel, context);
				}
				var imageZoneModel = ss.cast(this.$zoneContentModel, $tab_ImageZoneModel);
				imageZoneModel.update(imageZone, context);
			}
			else if (ss.referenceEquals(contentType, $tab_ZoneModel.$dataHighlighterField)) {
				var dataHighlighterPresModel = $tab_ZoneModel.getContent(zonePresModel, $tab_ZoneModel.$dataHighlighterField);
				if (ss.isNullOrUndefined(this.$zoneContentModel)) {
					this.$zoneContentModel = new $tab_DataHighlighterModel(this.$contentWrapperModel);
					this.$raiseNewZoneContent(this.$zoneContentModel, context);
				}
				var dataHighlighterModel = ss.cast(this.$zoneContentModel, $tab_DataHighlighterModel);
				dataHighlighterModel.update(dataHighlighterPresModel, context);
			}
		},
		contentBorderWidth: function ZoneModel$ContentBorderWidth() {
			return this.$zoneCommonModel.get_contentBorderWidth();
		},
		$raiseNewZoneContent: function ZoneModel$RaiseNewZoneContent(newZoneModel, context) {
			this.raiseEvent$1($tab_Model).call(this, this.$2$NewZoneContentField, newZoneModel, context);
		}
	}, $tab_Model);
	ss.initClass($tab_ZonesModel, $asm, {
		add_newZone: function ZonesModel$add_NewZone(value) {
			this.$2$NewZoneField = ss.delegateCombine(this.$2$NewZoneField, value);
		},
		remove_newZone: function ZonesModel$remove_NewZone(value) {
			this.$2$NewZoneField = ss.delegateRemove(this.$2$NewZoneField, value);
		},
		add_removedZone: function ZonesModel$add_RemovedZone(value) {
			this.$2$RemovedZoneField = ss.delegateCombine(this.$2$RemovedZoneField, value);
		},
		remove_removedZone: function ZonesModel$remove_RemovedZone(value) {
			this.$2$RemovedZoneField = ss.delegateRemove(this.$2$RemovedZoneField, value);
		},
		get_zoneModels: function ZonesModel$get_ZoneModels() {
			if (ss.isNullOrUndefined(this.$cachedZoneModelArray)) {
				this.$cachedZoneModelArray = _.values(this.$zoneModels);
			}
			return this.$cachedZoneModelArray;
		},
		get_zonePresModels: function ZonesModel$get_ZonePresModels() {
			return this.pm;
		},
		set_zonePresModels: function ZonesModel$set_ZonePresModels(value) {
			this.pm = value;
		},
		getZone: function ZonesModel$GetZone(zoneId) {
			return this.$zoneModels[$tab_ZonesModel.$zoneKey(zoneId)];
		},
		hasZone: function ZonesModel$HasZone(zoneId) {
			return ss.keyExists(this.$zoneModels, $tab_ZonesModel.$zoneKey(zoneId));
		},
		getChildren: function ZonesModel$GetChildren(zoneId) {
			var key = $tab_ZonesModel.$zoneKey(zoneId);
			if (!ss.keyExists(this.$zoneChildren, key)) {
				this.$zoneChildren[key] = _.filter(this.get_zoneModels(), function(z) {
					return z.get_parentZoneId() === zoneId;
				});
			}
			return this.$zoneChildren[$tab_ZonesModel.$zoneKey(zoneId)].slice(0);
		},
		update: function ZonesModel$Update(presModels, context) {
			this.$logZones('Zones before update: ');
			this.$removeInvalidZones(presModels, context);
			this.$zoneChildren = {};
			var parentUpdated = {};
			var $t1 = _.keys(presModels);
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var key = $t1[$t2];
				var zoneUpdate = presModels[key];
				if (ss.isValue(zoneUpdate)) {
					var zoneId = zoneUpdate.zoneId;
					try {
						var zoneKey = $tab_ZonesModel.$zoneKey(zoneId);
						if (!ss.isValue(this.$zoneModels[zoneKey])) {
							tab.Log.get(this).debug('Creating zone: %s, %o', [zoneId, zoneUpdate]);
							var newZoneModel = new $tab_ZoneModel(this, ss.cast(this.parent, $tab_DashboardModel), zoneId);
							this.$zoneModels[zoneKey] = newZoneModel;
							this.raiseEvent$1($tab_ZoneModel).call(this, this.$2$NewZoneField, this.$zoneModels[zoneKey], context);
							this.$cachedZoneModelArray = null;
							parentUpdated[zoneUpdate.zoneCommon.parentZoneId] = true;
						}
						else {
							if (ss.isValue(zoneUpdate.zoneCommon) && this.$zoneModels[zoneKey].get_parentZoneId() !== zoneUpdate.zoneCommon.parentZoneId) {
								parentUpdated[zoneUpdate.zoneCommon.parentZoneId] = true;
							}
							if (ss.isValue(zoneUpdate.presModelHolder) && (this.$contentTypeChanged(zoneKey, zoneUpdate) || this.$worksheetNameChanged(zoneKey, zoneUpdate))) {
								this.$zoneModels[zoneKey].raiseRemoveZoneContent(context);
								this.raiseEvent$1($tab_ZoneModel).call(this, this.$2$NewZoneField, this.$zoneModels[zoneKey], context);
							}
						}
						tab.Log.get(this).debug('Update zone: %s', [zoneId]);
						this.$zoneModels[zoneKey].update(zoneUpdate, context);
					}
					catch ($t3) {
						var e = ss.Exception.wrap($t3);
						tab.ErrorTrace.report(e, false);
						tab.Log.get(this).error('Error creating zone: %s, %o, %s', [zoneId, zoneUpdate, e.toString()]);
					}
				}
			}
			this.swapAndCopyPresModel(presModels);
			if (tsConfig.is_authoring) {
				var $t4 = _.keys(parentUpdated);
				for (var $t5 = 0; $t5 < $t4.length; $t5++) {
					var zoneId1 = $t4[$t5];
					var zone = this.getZone(zoneId1);
					if (ss.isValue(zone)) {
						zone.raiseChildrenAdded(context);
					}
				}
			}
			this.$logZones('Zones after update: ');
		},
		$contentTypeChanged: function ZonesModel$ContentTypeChanged(zoneKey, zoneUpdate) {
			if (tab.FeatureFlags.isEnabled('VizCatQF')) {
				var zonePresModel = this.$zoneModels[zoneKey].pm;
				if (ss.isValue(zonePresModel.presModelHolder)) {
					var quickFilterType = 'quickFilterDisplay'.toString();
					if (ss.referenceEquals($tab_ZoneModel.$typeOfContent(zoneUpdate), quickFilterType)) {
						var originalQuickFilterDisplay = $tab_ZoneModel.getContent(zonePresModel, quickFilterType);
						var newQuickFilterDisplay = $tab_ZoneModel.getContent(zoneUpdate, quickFilterType);
						if ($tab_QuickFilterDisplayModel.supportsQuickFilterType(originalQuickFilterDisplay) !== $tab_QuickFilterDisplayModel.supportsQuickFilterType(newQuickFilterDisplay)) {
							return true;
						}
					}
				}
			}
			return ss.isValue(this.$zoneModels[zoneKey].get_contentType()) && !ss.referenceEquals(this.$zoneModels[zoneKey].get_contentType(), $tab_ZoneModel.$typeOfContent(zoneUpdate));
		},
		$worksheetNameChanged: function ZonesModel$WorksheetNameChanged(zoneKey, zoneUpdate) {
			return ss.isValue(this.$zoneModels[zoneKey].get_worksheetName()) && !ss.referenceEquals(this.$zoneModels[zoneKey].get_worksheetName(), zoneUpdate.sheet);
		},
		$removeInvalidZones: function ZonesModel$RemoveInvalidZones(newZones, context) {
			var $t1 = _.keys(this.$zoneModels);
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var zoneKey = $t1[$t2];
				var oldModel = this.$zoneModels[zoneKey];
				var newZonePresModel = newZones[oldModel.get_zoneId().toString()];
				if (newZonePresModel === null) {
					var key = oldModel.get_zoneId().toString();
					delete newZones[key];
					delete this.get_zonePresModels()[key];
					this.removeZone(oldModel, context);
					continue;
				}
				if (ss.isValue(newZonePresModel) && ss.isValue(newZonePresModel.zoneCommon) && oldModel.get_zoneCommonModel().get_zoneType() !== newZonePresModel.zoneCommon.zoneType) {
					this.removeZone(oldModel, context);
				}
			}
		},
		removeZone: function ZonesModel$RemoveZone(zoneToBeRemoved, context) {
			tab.Log.get(this).debug('Removing zone: %o', [zoneToBeRemoved]);
			zoneToBeRemoved.raiseRemoveZoneContent(context);
			this.raiseEvent$1($tab_ZoneModel).call(this, this.$2$RemovedZoneField, zoneToBeRemoved, context);
			delete this.$zoneModels[$tab_ZonesModel.$zoneKey(zoneToBeRemoved.get_zoneId())];
			this.$cachedZoneModelArray = null;
		},
		$logZones: function ZonesModel$LogZones(frontLabel) {
			var zoneListBuilder = new ss.StringBuilder();
			zoneListBuilder.appendLine(frontLabel);
			var $t1 = new ss.ObjectEnumerator(this.get_zonePresModels());
			try {
				while ($t1.moveNext()) {
					var zoneEntry = $t1.current();
					if (ss.isValue(zoneEntry.value) && ss.isValue(zoneEntry.value.zoneCommon)) {
						zoneListBuilder.append('[ ');
						zoneListBuilder.append(zoneEntry.value.zoneId);
						zoneListBuilder.append(' ');
						zoneListBuilder.append(zoneEntry.value.zoneCommon.zoneType);
						zoneListBuilder.append(' ] ');
						zoneListBuilder.appendLine();
					}
				}
			}
			finally {
				$t1.dispose();
			}
			tab.Log.get(this).debug(zoneListBuilder.toString(), []);
		}
	}, $tab_Model);
	(function() {
		$tab_CommandSerializer.$commandCacheSize = 15;
		$tab_CommandSerializer.$typesByName = {};
		$tab_CommandSerializer.$deserializedCommandCache = {};
		$tab_CommandSerializer.$deserializedCommandCacheKeys = [];
		$tab_CommandSerializer.$typesByName['keep-only-or-exclude'] = 2;
		$tab_CommandSerializer.$typesByName['quick-sort'] = 4;
		$tab_CommandSerializer.$typesByName['clear-sorts'] = 6;
		$tab_CommandSerializer.$typesByName['run-action'] = 8;
		$tab_CommandSerializer.$typesByName['load-url'] = 9;
		$tab_CommandSerializer.$typesByName['merge-or-split'] = 10;
		$tab_CommandSerializer.$typesByName['ranged-by-value-merge'] = 10;
		$tab_CommandSerializer.$typesByName['ranged-by-index-merge'] = 10;
		$tab_CommandSerializer.$typesByName['legend-group-or-ungroup'] = 13;
		$tab_CommandSerializer.$typesByName['label-drill'] = 12;
		$tab_CommandSerializer.$typesByName['level-drill'] = 12;
		$tab_CommandSerializer.$typesByName['level-drill-up-down'] = 12;
		$tab_CommandSerializer.$typesByName['remove-reference-line'] = 15;
		$tab_CommandSerializer.$typesByName['show-reference-line-constant-value-editor'] = 21;
		$tab_CommandSerializer.$typesByName['trend-lines'] = 17;
		$tab_CommandSerializer.$typesByName['show-trend-line-editor'] = 16;
		$tab_CommandSerializer.$typesByName['show-col-totals'] = 18;
		$tab_CommandSerializer.$typesByName['show-row-totals'] = 18;
		$tab_CommandSerializer.$typesByName['remove-subtotals'] = 18;
		$tab_CommandSerializer.$typesByName['set-totals-type'] = 19;
		$tab_CommandSerializer.$typesByName['set-reference-line-formula'] = 20;
		$tab_CommandSerializer.$typesByName['show-reference-line-editor'] = 22;
		$tab_CommandSerializer.$typesByName['select-by-tuple-value'] = 23;
	})();
	(function() {
		$tab_$CommandThrottler.$defaultPendingCommandDelay = 35;
		$tab_$CommandThrottler.$defaultPendingCommandThreshold = 1;
	})();
	(function() {
		$tab_VizDataUtils.vizInTooltipSpanTag = 'span[data-tableau="VizInTooltip"]';
		$tab_VizDataUtils.unknownFieldMarker = '~~~???~~~';
		$tab_VizDataUtils.noLocalSummary = '...';
		$tab_VizDataUtils.invalidTupleId = 0;
		$tab_VizDataUtils.urlStringNull = '~~null~';
		$tab_VizDataUtils.urlStringSkipped = '~~skipped~';
		$tab_VizDataUtils.urlStringRagged = '~~ragged~';
		$tab_VizDataUtils.lastWidthAndHeightForVizInTooltips = [];
		$tab_VizDataUtils.$newLineRegEx = new RegExp('(\\r|\\n)', 'g');
	})();
	(function() {
		$tab_FontProperties.defaultWeight = 'normal';
		$tab_FontProperties.defaultStyle = 'normal';
		$tab_FontProperties.hashSeparator = '-<%>-';
		$tab_FontProperties.matchQuotes = new RegExp('[\'"]', 'g');
	})();
	(function() {
		$tab_DrawItemFontExtractor.boldWeight = 'bold';
		$tab_DrawItemFontExtractor.normalWeight = 'normal';
	})();
	(function() {
		$tab_GroupFontExtractor.$internalExtractors = [new $tab_GroupFontExtractor(), new $tab_DrawItemFontExtractor()];
	})();
	(function() {
		$tab_FontNotificationUtil.fontPropertyName = 'font';
		$tab_FontNotificationUtil.$1$FontPropertiesIdentifiedField = null;
		$tab_FontNotificationUtil.$1$AllFontsFoundField = null;
	})();
	(function() {
		$tab_ColorModel.defaultAlpha = 1;
		$tab_ColorModel.white = new $tab_ColorModel(255, 255, 255, $tab_ColorModel.defaultAlpha);
		$tab_ColorModel.black = new $tab_ColorModel(0, 0, 0, $tab_ColorModel.defaultAlpha);
		$tab_ColorModel.alphaMultiplier = 1.5;
		$tab_ColorModel.luminanceThresholdForFakingLineColor = 0.800000011920929;
		$tab_ColorModel.luminanceThresholdForLightColor = 0.314999997615814;
		$tab_ColorModel.$closeToOne = 0.999989986419678;
		$tab_ColorModel.$pow2point2 = [0, 5.07705190066E-06, 2.33280046661E-05, 5.69217657122E-05, 0.000107187362341, 0.000175123977503, 0.000261543754548, 0.000367136269816, 0.000492503787191, 0.000638182842167, 0.000804658499513, 0.000992374304074, 0.00120173952244, 0.00143313458967, 0.00168691531679, 0.0019634162134, 0.00226295316071, 0.00258582559623, 0.00293231832394, 0.003302703032, 0.0036972395789, 0.00411617709328, 0.00455975492253, 0.00502820345686, 0.00552174485024, 0.00604059365485, 0.00658495738258, 0.00715503700457, 0.00775102739766, 0.00837311774515, 0.00902149189801, 0.00969632870166, 0.0103978022926, 0.0111260823684, 0.0118813344348, 0.0126637200316, 0.0134733969401, 0.0143105193749, 0.0151752381596, 0.0160677008909, 0.0169880520893, 0.01793643334, 0.0189129834237, 0.0199178384388, 0.0209511319148, 0.0220129949193, 0.0231035561579, 0.0242229420675, 0.0253712769047, 0.0265486828285, 0.0277552799781, 0.0289911865471, 0.0302565188524, 0.0315513914002, 0.0328759169484, 0.0342302065651, 0.0356143696849, 0.037028514162, 0.0384727463202, 0.0399471710015, 0.0414518916115, 0.0429870101627, 0.0445526273164, 0.0461488424224, 0.0477757535562, 0.0494334575559, 0.0511220500565, 0.0528416255229, 0.0545922772818, 0.056374097552, 0.0581871774737, 0.0600316071363, 0.0619074756055, 0.0638148709487, 0.0657538802603, 0.0677245896854, 0.0697270844426, 0.0717614488462, 0.0738277663278, 0.0759261194563, 0.0780565899581, 0.0802192587362, 0.0824142058885, 0.0846415107254, 0.0869012517877, 0.0891935068622, 0.0915183529989, 0.0938758665256, 0.0962661230633, 0.0986891975411, 0.10114516421, 0.103634096655, 0.106156067813, 0.108711149979, 0.111299414825, 0.113920933406, 0.116575776179, 0.119264013005, 0.12198571317, 0.124740945387, 0.127529777813, 0.130352278056, 0.133208513184, 0.136098549737, 0.139022453735, 0.141980290686, 0.144972125597, 0.147998022983, 0.151058046871, 0.154152260812, 0.15728072789, 0.160443510725, 0.163640671485, 0.166872271891, 0.170138373223, 0.173439036332, 0.176774321641, 0.180144289154, 0.183548998465, 0.186988508759, 0.190462878822, 0.193972167048, 0.19751643144, 0.201095729621, 0.204710118837, 0.208359655961, 0.212044397502, 0.215764399609, 0.219519718075, 0.223310408341, 0.227136525505, 0.230998124323, 0.234895259216, 0.238827984272, 0.242796353254, 0.246800419602, 0.250840236436, 0.254915856566, 0.25902733249, 0.263174716398, 0.267358060184, 0.271577415438, 0.275832833461, 0.280124365261, 0.28445206156, 0.288815972797, 0.293216149132, 0.297652640449, 0.302125496359, 0.306634766203, 0.311180499058, 0.315762743736, 0.320381548792, 0.325036962521, 0.329729032968, 0.334457807924, 0.339223334935, 0.344025661302, 0.348864834083, 0.353740900097, 0.358653905926, 0.363603897921, 0.368590922197, 0.373615024646, 0.37867625093, 0.383774646488, 0.388910256539, 0.394083126083, 0.399293299903, 0.404540822568, 0.409825738436, 0.415148091656, 0.420507926168, 0.425905285707, 0.431340213807, 0.4368127538, 0.442322948819, 0.4478708418, 0.453456475486, 0.459079892424, 0.464741134974, 0.470440245304, 0.476177265397, 0.481952237051, 0.487765201878, 0.493616201311, 0.499505276603, 0.505432468828, 0.511397818885, 0.517401367497, 0.523443155214, 0.529523222417, 0.535641609315, 0.54179835595, 0.547993502197, 0.554227087766, 0.560499152204, 0.566809734897, 0.573158875068, 0.579546611783, 0.58597298395, 0.592438030321, 0.598941789493, 0.605484299911, 0.612065599866, 0.618685727499, 0.625344720802, 0.632042617621, 0.638779455651, 0.645555272445, 0.652370105411, 0.659223991813, 0.666116968776, 0.673049073281, 0.680020342172, 0.687030812155, 0.694080519797, 0.701169501531, 0.708297793656, 0.715465432335, 0.7226724536, 0.729918893352, 0.737204787361, 0.744530171267, 0.751895080583, 0.759299550695, 0.766743616862, 0.774227314218, 0.781750677774, 0.789313742416, 0.796916542908, 0.804559113895, 0.812241489898, 0.819963705324, 0.827725794455, 0.835527791461, 0.843369730392, 0.851251645185, 0.859173569659, 0.867135537521, 0.875137582365, 0.883179737673, 0.891262036813, 0.899384513047, 0.907547199522, 0.915750129279, 0.923993335252, 0.932276850265, 0.940600707036, 0.948964938178, 0.9573695762, 0.965814653503, 0.974300202389, 0.982826255054, 0.991392843593, 1];
		$tab_ColorModel.$hexFormat = new RegExp('#([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})', 'i');
		$tab_ColorModel.$rgbFormat = new RegExp('rgb\\((\\d+), ?(\\d+), ?(\\d+)\\)', 'i');
		$tab_ColorModel.$rgbaFormat = new RegExp('rgba\\((\\d+), ?(\\d+), ?(\\d+), ?(\\d+|0\\.\\d+|1\\.0)\\)', 'i');
		$tab_ColorModel.$conversionCache = null;
		$tab_ColorModel.$parsedColorStrCache = new $tab_FifoCache(100);
	})();
	(function() {
		$tab_VizUriModel.$retryParam = ':retry';
		$tab_VizUriModel.$originalViewParam = ':original_view';
		$tab_VizUriModel.$showSaveAsParam = ':showSaveAs';
		$tab_VizUriModel.$jsDebugParam = ':jsdebug';
		$tab_VizUriModel.$renderParam = ':render';
		$tab_VizUriModel.$appParam = ':app';
		$tab_VizUriModel.$authoringPersistentParams = [$tab_VizUriModel.$appParam, $tab_VizUriModel.$jsDebugParam, $tab_VizUriModel.$renderParam];
		$tab_VizUriModel.$uriTypeStringToUriType = ss.mkdict(['authoring', 2, 'authoringNewWorkbook', 3, 'views', 1, 'vizql/showadminview', 4, 'shared', 5, 'workbooks', 6]);
		$tab_VizUriModel.$ignoredParams = [':bootstrapWhenNotified'];
		$tab_VizUriModel.$uriTypeToUriTypeString = {};
		$tab_VizUriModel.$usernameValidChars = {};
		var addCodes = function(from, to) {
			for (var i = from; i <= to; i++) {
				var s = String.fromCharCode(i);
				$tab_VizUriModel.$usernameValidChars[s] = s;
			}
		};
		addCodes(97, 122);
		addCodes(65, 90);
		addCodes(48, 57);
		addCodes(95, 95);
		addCodes(45, 46);
	})();
	(function() {
		$tab_CommandRedirectRegistry.$registry = null;
	})();
	(function() {
		$tab_CommandExecutionResult.successResult = new $tab_CommandExecutionResult(true, null);
	})();
	(function() {
		$tab_XhrUtil.guid = '';
		$tab_XhrUtil.parentID = '';
		$tab_XhrUtil.$currentTabName = '';
	})();
	(function() {
		$tab_Schedule.$scheduleLastDayOfMonth = 'Last';
		$tab_Schedule.$scheduleSecondToLastDayOfMonth = 'SecondToLast';
		$tab_Schedule.$minutesPerDay = 1440;
		$tab_Schedule.$dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
	})();
	(function() {
		$tab_WorldUpdateInterceptor.$instance = new ss.Lazy(function() {
			return new $tab_WorldUpdateInterceptor();
		});
	})();
	(function() {
		$tab_StartupUtils.$isClientFullyLoaded = false;
		$tab_StartupUtils.$modelsInitialized = false;
		$tab_StartupUtils.$1$ModelsInitializedField = null;
		$tab_StartupUtils.$1$ClientFullyLoadedField = null;
	})();
	(function() {
		$tab_ImageTileTracker.$instance = null;
	})();
	(function() {
		$tab_AckbarEventsHelper.instance = null;
	})();
	(function() {
		$tab_HistoryManager.$statePrefix = '_vql_state_';
		$tab_HistoryManager.$historyStates = new Map();
		$tab_HistoryManager.$stateIdCounter = 0;
		$tab_HistoryManager.$lastProcessedStateId = 0;
		tab.WindowHelper.addListener(window.self, 'popstate', $tab_HistoryManager.$handlePopStateEvent);
	})();
	(function() {
		$tab_DefaultSessionErrorHandler.$limitExceeded = false;
	})();
	(function() {
		$tab_NoopModelEventsHandler.$context = new ss.Lazy(function() {
			return { eventHandler: new $tab_NoopModelEventsHandler() };
		});
	})();
	(function() {
		$tab_BorderDefinition.$borderLookup = $tab_BorderDefinition.$createBorderStyleLookup();
	})();
	(function() {
		$tab_ShapeManager.$imageFormatString = 'data:image/png;base64,';
		$tab_ShapeManager.selectionBorderSize = 1;
	})();
	(function() {
		$tab_ZoneModel.zoneMargin = 4;
		$tab_ZoneModel.rootZoneID = 0;
		$tab_ZoneModel.$uninitializedStoryPointID = 0;
		$tab_ZoneModel.$uninitializedFlipboardZoneID = 0;
		$tab_ZoneModel.$visualField = 'visual'.toString();
		$tab_ZoneModel.$titleField = 'dashboardTitle'.toString();
		$tab_ZoneModel.$textField = 'dashboardText'.toString();
		$tab_ZoneModel.$qColorLegendField = 'quantitativeColorLegend'.toString();
		$tab_ZoneModel.$colorLegendField = 'colorLegend'.toString();
		$tab_ZoneModel.$sizeLegendField = 'categoricalSizeLegend'.toString();
		$tab_ZoneModel.$shapeLegendField = 'categoricalShapeLegend'.toString();
		$tab_ZoneModel.$mapLegendField = 'categoricalMapLegend'.toString();
		$tab_ZoneModel.$paramCtrlField = 'parameterControl'.toString();
		$tab_ZoneModel.$pageField = 'pageModel'.toString();
		$tab_ZoneModel.$serverRenderedLegendField = 'serverRenderedLegend'.toString();
		$tab_ZoneModel.$imageZoneField = 'imageZone'.toString();
		$tab_ZoneModel.$webZoneField = 'webZone'.toString();
		$tab_ZoneModel.$quickFilterField = 'quickFilterDisplay'.toString();
		$tab_ZoneModel.$dataHighlighterField = 'dataHighlighter'.toString();
		$tab_ZoneModel.$flipboardNavField = 'flipboardNav'.toString();
		$tab_ZoneModel.$flipboardField = 'flipboard'.toString();
	})();
	(function() {
		$tab_ProgressiveLoader.$offscreenPriority = 6;
		$tab_ProgressiveLoader.zonesThatDeferContentCreation = ['viz', 'size', 'shape', 'color', 'map', 'filter', 'paramctrl', 'current-page', 'bitmap', 'web', 'highlighter'];
		$tab_ProgressiveLoader.$zoneCreationOrder = [1, 2, 3, 4, 5, 6];
		$tab_ProgressiveLoader.$zonePriorityMap = null;
		$tab_ProgressiveLoader.$priorityBatchSize = null;
	})();
	(function() {
		$tab_CommandController.$defaultMinimumThrottleTime = 135;
		$tab_CommandController.$handledBootstrapException = false;
		$tab_CommandController.$parentCompletedSent = false;
		$tab_CommandController._instance = null;
		$tab_CommandController.$1$SheetNameChangedField = null;
		$tab_CommandController.fireDeferredUrlActions = false;
	})();
	(function() {
		$tab_ApplicationModel._instance = null;
	})();
	(function() {
		$tab_ModelUtils.visualPartToRegionMap = null;
		$tab_ModelUtils.regionToVisualPartMap = null;
		$tab_ModelUtils.visualPartToRegionMap = {};
		$tab_ModelUtils.visualPartToRegionMap['left-axis'] = 'leftaxis';
		$tab_ModelUtils.visualPartToRegionMap['right-axis'] = 'rightaxis';
		$tab_ModelUtils.visualPartToRegionMap['top-axis'] = 'topaxis';
		$tab_ModelUtils.visualPartToRegionMap['bottom-axis'] = 'bottomaxis';
		$tab_ModelUtils.visualPartToRegionMap['y-labels'] = 'yheader';
		$tab_ModelUtils.visualPartToRegionMap['x-labels'] = 'xheader';
		$tab_ModelUtils.regionToVisualPartMap = {};
		$tab_ModelUtils.regionToVisualPartMap['leftaxis'] = 'left-axis';
		$tab_ModelUtils.regionToVisualPartMap['rightaxis'] = 'right-axis';
		$tab_ModelUtils.regionToVisualPartMap['topaxis'] = 'top-axis';
		$tab_ModelUtils.regionToVisualPartMap['bottomaxis'] = 'bottom-axis';
		$tab_ModelUtils.regionToVisualPartMap['yheader'] = 'y-labels';
		$tab_ModelUtils.regionToVisualPartMap['xheader'] = 'x-labels';
	})();
	(function() {
		$tab_CompoundTableCalcModel.primaryTableCalcIndex = 0;
		$tab_CompoundTableCalcModel.secondaryTableCalcIndex = 1;
	})();
	(function() {
		$tab_FormatContainerModel.$fontFormatWidgetUniqueId = 'font';
	})();
	(function() {
		$tab_ServerCommands.$commandInterceptors = {};
	})();
	(function() {
		$tab_BaseSession.linkTarget = null;
		$tab_BaseSession.autoUpdate = true;
		$tab_BaseSession.$currentState = null;
		$tab_BaseSession.$railsSpecialChars = null;
		$tab_BaseSession.$historyPosition = 0;
		$tab_BaseSession.$waitHandler = null;
		$tab_BaseSession.$1$StateChangedField = null;
		$tab_BaseSession.$railsSpecialChars = ss.mkdict(['%25', new RegExp('%', 'g'), '%3B', new RegExp(';', 'g'), '%2C', new RegExp(',', 'g'), '%2E', new RegExp('\\.', 'g'), '%2F', new RegExp('\\/', 'g'), '%3F', new RegExp('\\?', 'g'), '%2B', new RegExp('\\+', 'g'), '%20', new RegExp(' ', 'g'), '%5C', new RegExp('\\\\', 'g')]);
	})();
	(function() {
		$tab_ActionUtils.$schemeWhitelist = ['http:', 'https:', 'mailto:', 'news:', 'gopher:', 'tsc:', 'tsl:'];
		$tab_ActionUtils.$isCustomWhitelistParsed = false;
		$tab_ActionUtils.$hasShownBlockedAction = false;
	})();
	(function() {
		$tab_SelectionClientCommands.$selectActionToOptionsMapping = null;
		$tab_SelectionClientCommands.$selectActionToOptionsMapping = {};
		$tab_SelectionClientCommands.$selectActionToOptionsMapping['simple'] = 'select-options-simple';
		$tab_SelectionClientCommands.$selectActionToOptionsMapping['toggle'] = 'select-options-toggle';
		$tab_SelectionClientCommands.$selectActionToOptionsMapping['range'] = 'select-options-range';
		$tab_SelectionClientCommands.$selectActionToOptionsMapping['menu'] = 'select-options-menu';
	})();
	(function() {
		$tab_BrushingComputer.$dateTimeHighlightCommandParamValue = 'date-time';
		$tab_BrushingComputer.$allFieldsHighlightCommandParamValue = 'all';
	})();
	(function() {
		$tab_SheetSession.$2$SheetDataChangedField = null;
	})();
	(function() {
		$tab_StoryPointsPresModelCache.$maxCacheEntries = (tsConfig.is_mobile ? 4 : 8);
		$tab_StoryPointsPresModelCache.$commandsToCache = null;
		$tab_StoryPointsPresModelCache.$bootstrapRecord = null;
		if (!tsConfig.is_authoring || tab.FeatureFlags.isEnabled('StoryPointCache')) {
			$tab_WorldUpdateInterceptor.get().add_onBootstrapResponse($tab_StoryPointsPresModelCache.$cacheBootstrapResponseIfApplicable);
		}
	})();
	(function() {
		$tab_ZoneCommonModel.zoneMargin = 4;
		$tab_ZoneCommonModel.rootZoneID = 0;
	})();
	(function() {
		$tab_DeferredConnectionsCommandHandler.sheetChangedEventName = 'SheetChangedEvt';
		$tab_DeferredConnectionsCommandHandler.$badPasswordError = 'badpassword';
		$tab_DeferredConnectionsCommandHandler.$badOauthPasswordError = 'badoauthcredentials';
		$tab_DeferredConnectionsCommandHandler.$noAssociatedCustomOAuthKeyError = 'NoAssociatedCustomOAuthKey';
	})();
	(function() {
		$tab_ModuleManager.$jsPrefix = 'vql';
		$tab_ModuleManager.$jsLoadTimeoutSeconds = 60;
		$tab_ModuleManager.$modules = {};
		$tab_ModuleManager.$moduleInfos = {};
		$tab_ModuleManager.$moduleMapping = {};
		$tab_ModuleManager.$loadedCssFiles = new Set();
		$tab_ModuleManager.$configured = false;
		$tab_ModuleManager.$moduleTrackerInstance = new $tab_ModuleTracker();
	})();
	(function() {
		$tab_OnlineAnalyticsClient.analyticsClientLibrary = 'analytics-client';
		$tab_OnlineAnalyticsClient.analyticsClientMinifiedLibrary = 'analytics-client.min';
		$tab_OnlineAnalyticsClient.serviceName = 'VizClient';
		$tab_OnlineAnalyticsClient.$propertyNameExpression = new RegExp('^[A-Z][a-z]*[0-9]*(?:[A-Z][a-z]*[0-9]*)*$');
		$tab_OnlineAnalyticsClient.$invalidPropertyNames = ['guid', 'host_name', 'host_timestamp', 'pod', 'properties', 'service_name', 'type', 'SiteId', 'SiteLuid', 'SiteUrlName', 'UserId', 'Language', 'Locale', 'SessionId', 'HostName', 'HostTimestamp', 'ServiceName', 'Time'];
		$tab_OnlineAnalyticsClient.$instance = null;
		$tab_OnlineAnalyticsClient.$1$OnLogEventField = null;
	})();
	(function() {
		$tab_CommandControllerTelemetry.$bootstrapEvents = [];
	})();
	(function() {
		$tab_WorkgroupDataSource.$basenameRegexp = new RegExp('[/\\\\]([^/\\\\]*)$');
	})();
	(function() {
		$tab_SessionHeartbeat.$vizportalPingFrequency = 300000;
		$tab_SessionHeartbeat.$lastVizportalPing = tab.DateUtil.get_nowAsTime();
		$tab_SessionHeartbeat.$vizqlPingFrequency = 300000;
		$tab_SessionHeartbeat.$lastVizqlPing = tab.DateUtil.get_nowAsTime();
	})();
	(function() {
		$tab_MapServerModel.$highDpiTileIndicator = '@2x';
		$tab_MapServerModel.$defaultBackgroundFillColor = 'rgb(255,255,255)';
	})();
	(function() {
		$tab_SceneModel.$defaultBackgroundFillColor = new $tab_ColorModel(0, 0, 0, 1);
	})();
	(function() {
		$tab_VizDataModel.tupleIdColumnName = '[system:visual].[tuple_id]';
		$tab_VizDataModel.measureNamesColumnName = '[:Measure Names]';
	})();
	(function() {
		$tab_FlipboardModel.presModelCache = null;
	})();
	(function() {
		$tab_DashboardModel.facadeDomId = 'facadedom';
		$tab_DashboardModel.$2$ModifiedSheetsChangedField = null;
	})();
	(function() {
		$tab_FieldModel.nameOfMeasuresColumn = ':Measure Names';
		$tab_FieldModel.nameOfMeasureValuesColumn = 'Multiple Values';
	})();
	(function() {
		$tab_WorkbookModel.$2$WorkbookModifiedChangedField = null;
	})();
	(function() {
		$tab_Model.removeUndefinedBoolsOnSwapCopy = true;
	})();
	(function() {
		$tab_TabResources.$resourceMap = {};
		$tab_TabResources.$resourceMap['TQRC_DRILL_DOWN'] = 'tableau-1.3/res/vizTooltips/Tooltip_Action_Down.png';
		$tab_TabResources.$resourceMap['TQRC_DRILL_DOWN_2X'] = 'tableau-1.3/res/vizTooltips/Tooltip_Action_Down@2x.png';
		$tab_TabResources.$resourceMap['TQRC_DRILL_DOWN_ACTIVE'] = 'tableau-1.3/res/vizTooltips/Tooltip_Action_Down_Active.png';
		$tab_TabResources.$resourceMap['TQRC_DRILL_DOWN_ACTIVE_2X'] = 'tableau-1.3/res/vizTooltips/Tooltip_Action_Down_Active@2x.png';
		$tab_TabResources.$resourceMap['TQRC_DRILL_UP'] = 'tableau-1.3/res/vizTooltips/Tooltip_Action_Up.png';
		$tab_TabResources.$resourceMap['TQRC_DRILL_UP_2x'] = 'tableau-1.3/res/vizTooltips/Tooltip_Action_Up@2x.png';
		$tab_TabResources.$resourceMap['TQRC_DRILL_UP_ACTIVE'] = 'tableau-1.3/res/vizTooltips/Tooltip_Action_Up_Active.png';
		$tab_TabResources.$resourceMap['TQRC_DRILL_UP_ACTIVE_2x'] = 'tableau-1.3/res/vizTooltips/Tooltip_Action_Up_Action@2x.png';
		$tab_TabResources.$resourceMap['TQRC_EXCLUDE'] = 'tableau-1.3/res/vizTooltips/Tooltip_Exclude.png';
		$tab_TabResources.$resourceMap['TQRC_EXCLUDE_2X'] = 'tableau-1.3/res/vizTooltips/Tooltip_Exclude@2x.png';
		$tab_TabResources.$resourceMap['TQRC_EXCLUDE_ACTIVE'] = 'tableau-1.3/res/vizTooltips/Tooltip_Exclude_Active.png';
		$tab_TabResources.$resourceMap['TQRC_EXCLUDE_ACTIVE_2X'] = 'tableau-1.3/res/vizTooltips/Tooltip_Exclude_Active@2x.png';
		$tab_TabResources.$resourceMap['TQRC_KEEP_ONLY'] = 'tableau-1.3/res/vizTooltips/Tooltip_KeepOnly.png';
		$tab_TabResources.$resourceMap['TQRC_KEEP_ONLY_2X'] = 'tableau-1.3/res/vizTooltips/Tooltip_KeepOnly@2x.png';
		$tab_TabResources.$resourceMap['TQRC_KEEP_ONLY_ACTIVE'] = 'tableau-1.3/res/vizTooltips/Tooltip_KeepOnly_Active.png';
		$tab_TabResources.$resourceMap['TQRC_KEEP_ONLY_ACTIVE_2X'] = 'tableau-1.3/res/vizTooltips/Tooltip_KeepOnly_Active@2x.png';
		$tab_TabResources.$resourceMap['TQRC_MERGE'] = 'tableau-1.3/res/vizTooltips/Tooltip_Group.png';
		$tab_TabResources.$resourceMap['TQRC_MERGE_2X'] = 'tableau-1.3/res/vizTooltips/Tooltip_Group@2x.png';
		$tab_TabResources.$resourceMap['TQRC_MERGE_ACTIVE'] = 'tableau-1.3/res/vizTooltips/Tooltip_Group_Active.png';
		$tab_TabResources.$resourceMap['TQRC_MERGE_ACTIVE_2X'] = 'tableau-1.3/res/vizTooltips/Tooltip_Group_Active@2x.png';
		$tab_TabResources.$resourceMap['TQRC_VIEWDATA'] = 'tableau-1.3/res/vizTooltips/Tooltip_ViewData.png';
		$tab_TabResources.$resourceMap['TQRC_VIEWDATA_ACTIVE'] = 'tableau-1.3/res/vizTooltips/Tooltip_ViewData_Active.png';
		$tab_TabResources.$resourceMap['TQRC_SORT_ASCENDING'] = 'tableau-1.3/res/vizTooltips/Tooltip_SortAscending.png';
		$tab_TabResources.$resourceMap['TQRC_SORT_ASCENDING_2X'] = 'tableau-1.3/res/vizTooltips/Tooltip_Sort_Ascending@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SORT_ASCENDING_ACTIVE'] = 'tableau-1.3/res/vizTooltips/Tooltip_SortAscending_Active.png';
		$tab_TabResources.$resourceMap['TQRC_SORT_ASCENDING_ACTIVE_2X'] = 'tableau-1.3/res/vizTooltips/Tooltip_Sort_Ascending_Active@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SORT_DESCENDING'] = 'tableau-1.3/res/vizTooltips/Tooltip_SortDescending.png';
		$tab_TabResources.$resourceMap['TQRC_SORT_DESCENDING_2X'] = 'tableau-1.3/res/vizTooltips/Tooltip_Sort_Descending@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SORT_DESCENDING_ACTIVE'] = 'tableau-1.3/res/vizTooltips/Tooltip_SortDescending_Active.png';
		$tab_TabResources.$resourceMap['TQRC_SORT_DESCENDING_ACTIVE_2X'] = 'tableau-1.3/res/vizTooltips/Tooltip_Sort_Descending_Active@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SPLIT'] = 'tableau-1.3/res/vizTooltips/Tooltip_Split.png';
		$tab_TabResources.$resourceMap['TQRC_SPLIT_2X'] = 'tableau-1.3/res/vizTooltips/Tooltip_Split@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SPLIT_ACTIVE'] = 'tableau-1.3/res/vizTooltips/Tooltip_Split_Active.png';
		$tab_TabResources.$resourceMap['TQRC_SPLIT_ACTIVE_2X'] = 'tableau-1.3/res/vizTooltips/Tooltip_Split_Active@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_BIN'] = 'tableau-1.3/res/showme/ShowMe_NumericBin.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_BIN_2X'] = 'tableau-1.3/res/showme/ShowMe_NumericBin@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_SUGGESTED'] = 'tableau-1.3/res/showme/ShowMe_Check.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_SUGGESTED_2X'] = 'tableau-1.3/res/showme/ShowMe_Check@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_CLOSE'] = 'tableau-1.3/res/showme/ShowMe_Close.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_CLOSE_2X'] = 'tableau-1.3/res/showme/ShowMe_Close@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_CLOSE_PRESS'] = 'tableau-1.3/res/showme/ShowMe_Close_Active.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_CLOSE_PRESS_2X'] = 'tableau-1.3/res/showme/ShowMe_Close_Active@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_DATE'] = 'tableau-1.3/res/showme/ShowMe_Date.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_DATE_2X'] = 'tableau-1.3/res/showme/ShowMe_Date@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_GEO'] = 'tableau-1.3/res/showme/ShowMe_Geo.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_GEO_2X'] = 'tableau-1.3/res/showme/ShowMe_Geo@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_GLOW'] = 'tableau-1.3/res/showme/glow.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_GLOW_2X'] = 'tableau-1.3/res/showme/glow@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_GRIPPER'] = 'tableau-1.3/res/showme/gripper.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_GRIPPER_2X'] = 'tableau-1.3/res/showme/gripper@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_SHOWME'] = 'tableau-1.3/res/showme/showme.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_SHOWME_2X'] = 'tableau-1.3/res/showme/showme@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_TITLE_BACKGROUND_HOVER'] = 'tableau-1.3/res/showme/Title-background-hover.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_TITLE_BACKGROUND_HOVER_2X'] = 'tableau-1.3/res/showme/Title-background-hover@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_TITLE_BACKGROUND_REST'] = 'tableau-1.3/res/showme/Title-background-rest.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_TITLE_BACKGROUND_REST_2X'] = 'tableau-1.3/res/showme/Title-background-rest@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_AREAMEAS'] = 'tableau-1.3/res/showme/ShowMe_AreaContinuous.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_AREADIM'] = 'tableau-1.3/res/showme/ShowMe_AreaDiscrete.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_FILLEDMAPS'] = 'tableau-1.3/res/showme/ShowMe_AreaMap.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_BOXPLOT'] = 'tableau-1.3/res/showme/ShowMe_BoxAndWhisker.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_BUBBLE'] = 'tableau-1.3/res/showme/ShowMe_Bubble.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_BULLET'] = 'tableau-1.3/res/showme/ShowMe_Bullet.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_CIRCLE'] = 'tableau-1.3/res/showme/ShowMe_Circles.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_BARLINE'] = 'tableau-1.3/res/showme/ShowMe_DualCombination.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_DUALLINE'] = 'tableau-1.3/res/showme/ShowMe_DualLine.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_GANTT'] = 'tableau-1.3/res/showme/ShowMe_Gantt.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_HEATMAP'] = 'tableau-1.3/res/showme/ShowMe_HeatMap.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_SPOTTABLE'] = 'tableau-1.3/res/showme/ShowMe_HighlightTable.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_HISTOGRAM'] = 'tableau-1.3/res/showme/ShowMe_Histogram.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_BARHORIZONTAL'] = 'tableau-1.3/res/showme/ShowMe_HorizontalBars.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_LINEMEAS'] = 'tableau-1.3/res/showme/ShowMe_LinesContinuous.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_LINEDIM'] = 'tableau-1.3/res/showme/ShowMe_LinesDiscrete.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_PIES'] = 'tableau-1.3/res/showme/ShowMe_Pie.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_SCATSING'] = 'tableau-1.3/res/showme/ShowMe_Scatter.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_BARSIDEBY'] = 'tableau-1.3/res/showme/ShowMe_SideBySideBars.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_CIRCLESIDEBYSIDE'] = 'tableau-1.3/res/showme/ShowMe_SideBySideCircles.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_BARSTACKED'] = 'tableau-1.3/res/showme/ShowMe_StackedBars.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_MAPS'] = 'tableau-1.3/res/showme/ShowMe_SymbolMap.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_TEXTTABLE'] = 'tableau-1.3/res/showme/ShowMe_TextTable.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_TREEMAP'] = 'tableau-1.3/res/showme/ShowMe_TreeMap.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_AREAMEAS_2X'] = 'tableau-1.3/res/showme/ShowMe_AreaContinuous@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_AREADIM_2X'] = 'tableau-1.3/res/showme/ShowMe_AreaDiscrete@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_FILLEDMAPS_2X'] = 'tableau-1.3/res/showme/ShowMe_AreaMap@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_BOXPLOT_2X'] = 'tableau-1.3/res/showme/ShowMe_BoxAndWhisker@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_BUBBLE_2X'] = 'tableau-1.3/res/showme/ShowMe_Bubble@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_BULLET_2X'] = 'tableau-1.3/res/showme/ShowMe_Bullet@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_CIRCLE_2X'] = 'tableau-1.3/res/showme/ShowMe_Circles@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_BARLINE_2X'] = 'tableau-1.3/res/showme/ShowMe_DualCombination@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_DUALLINE_2X'] = 'tableau-1.3/res/showme/ShowMe_DualLine@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_GANTT_2X'] = 'tableau-1.3/res/showme/ShowMe_Gantt@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_HEATMAP_2X'] = 'tableau-1.3/res/showme/ShowMe_HeatMap@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_SPOTTABLE_2X'] = 'tableau-1.3/res/showme/ShowMe_HighlightTable@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_HISTOGRAM_2X'] = 'tableau-1.3/res/showme/ShowMe_Histogram@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_BARHORIZONTAL_2X'] = 'tableau-1.3/res/showme/ShowMe_HorizontalBars@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_LINEDIM_2X'] = 'tableau-1.3/res/showme/ShowMe_LinesDiscrete@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_LINEMEAS_2X'] = 'tableau-1.3/res/showme/ShowMe_LinesContinuous@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_PIES_2X'] = 'tableau-1.3/res/showme/ShowMe_Pie@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_SCATSING_2X'] = 'tableau-1.3/res/showme/ShowMe_Scatter@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_BARSIDEBY_2X'] = 'tableau-1.3/res/showme/ShowMe_SideBySideBars@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_CIRCLESIDEBYSIDE_2X'] = 'tableau-1.3/res/showme/ShowMe_SideBySideCircles@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_BARSTACKED_2X'] = 'tableau-1.3/res/showme/ShowMe_StackedBars@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_MAPS_2X'] = 'tableau-1.3/res/showme/ShowMe_SymbolMap@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_TEXTTABLE_2X'] = 'tableau-1.3/res/showme/ShowMe_TextTable@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_TREEMAP_2X'] = 'tableau-1.3/res/showme/ShowMe_TreeMap@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_BARSTACKED'] = 'tableau-1.3/res/showme/enabled/BarStacked.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_BARSIDEBY'] = 'tableau-1.3/res/showme/enabled/BarSideBySide.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_BARHORIZONTAL'] = 'tableau-1.3/res/showme/enabled/BarHorizontal.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_BARLINE'] = 'tableau-1.3/res/showme/enabled/BarLine.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_CIRCLE'] = 'tableau-1.3/res/showme/enabled/Circle.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_CIRCLESIDEBYSIDE'] = 'tableau-1.3/res/showme/enabled/CircleSideBySide.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_GANTT'] = 'tableau-1.3/res/showme/enabled/Gantt.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_HEATMAP'] = 'tableau-1.3/res/showme/enabled/HeatMap.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_HISTOGRAM'] = 'tableau-1.3/res/showme/enabled/Histogram.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_LINEDIM'] = 'tableau-1.3/res/showme/enabled/LineDimension.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_LINEMEAS'] = 'tableau-1.3/res/showme/enabled/LineMeasure.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_AREAMEAS'] = 'tableau-1.3/res/showme/enabled/FilledLineContinuous.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_AREADIM'] = 'tableau-1.3/res/showme/enabled/FilledLineDiscrete.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_SCATSING'] = 'tableau-1.3/res/showme/enabled/ScatterSingle.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_TEXTTABLE'] = 'tableau-1.3/res/showme/enabled/TextTable.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_SPOTTABLE'] = 'tableau-1.3/res/showme/enabled/SpotTable.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_MAPS'] = 'tableau-1.3/res/showme/enabled/Maps.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_FILLEDMAPS'] = 'tableau-1.3/res/showme/enabled/FilledMaps.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_PIES'] = 'tableau-1.3/res/showme/enabled/Pies.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_DUALLINE'] = 'tableau-1.3/res/showme/enabled/DualAxis.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_BULLET'] = 'tableau-1.3/res/showme/enabled/Bullet.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_TREEMAP'] = 'tableau-1.3/res/showme/enabled/Treemap.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_BUBBLE'] = 'tableau-1.3/res/showme/enabled/Bubble.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_BOXPLOT'] = 'tableau-1.3/res/showme/enabled/Boxplot.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_BARSTACKED_2X'] = 'tableau-1.3/res/showme/enabled/BarStacked@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_BARSIDEBY_2X'] = 'tableau-1.3/res/showme/enabled/BarSideBySide@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_BARHORIZONTAL_2X'] = 'tableau-1.3/res/showme/enabled/BarHorizontal@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_BARLINE_2X'] = 'tableau-1.3/res/showme/enabled/BarLine@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_CIRCLE_2X'] = 'tableau-1.3/res/showme/enabled/Circle@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_CIRCLESIDEBYSIDE_2X'] = 'tableau-1.3/res/showme/enabled/CircleSideBySide@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_GANTT_2X'] = 'tableau-1.3/res/showme/enabled/Gantt@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_HEATMAP_2X'] = 'tableau-1.3/res/showme/enabled/HeatMap@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_HISTOGRAM_2X'] = 'tableau-1.3/res/showme/enabled/Histogram@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_LINEDIM_2X'] = 'tableau-1.3/res/showme/enabled/LineDimension@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_LINEMEAS_2X'] = 'tableau-1.3/res/showme/enabled/LineMeasure@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_AREAMEAS_2X'] = 'tableau-1.3/res/showme/enabled/FilledLineContinuous@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_AREADIM_2X'] = 'tableau-1.3/res/showme/enabled/FilledLineDiscrete@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_SCATSING_2X'] = 'tableau-1.3/res/showme/enabled/ScatterSingle@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_TEXTTABLE_2X'] = 'tableau-1.3/res/showme/enabled/TextTable@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_SPOTTABLE_2X'] = 'tableau-1.3/res/showme/enabled/SpotTable@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_MAPS_2X'] = 'tableau-1.3/res/showme/enabled/Maps@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_FILLEDMAPS_2X'] = 'tableau-1.3/res/showme/enabled/FilledMaps@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_PIES_2X'] = 'tableau-1.3/res/showme/enabled/Pies@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_DUALLINE_2X'] = 'tableau-1.3/res/showme/enabled/DualAxis@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_BULLET_2X'] = 'tableau-1.3/res/showme/enabled/Bullet@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_TREEMAP_2X'] = 'tableau-1.3/res/showme/enabled/Treemap@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_BUBBLE_2X'] = 'tableau-1.3/res/showme/enabled/Bubble@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_BOXPLOT_2X'] = 'tableau-1.3/res/showme/enabled/Boxplot@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_BARSTACKED'] = 'tableau-1.3/res/showme/disabled/BarStacked.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_BARSIDEBY'] = 'tableau-1.3/res/showme/disabled/BarSideBySide.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_BARHORIZONTAL'] = 'tableau-1.3/res/showme/disabled/BarHorizontal.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_BARLINE'] = 'tableau-1.3/res/showme/disabled/BarLine.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_CIRCLE'] = 'tableau-1.3/res/showme/disabled/Circle.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_CIRCLESIDEBYSIDE'] = 'tableau-1.3/res/showme/disabled/CircleSideBySide.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_GANTT'] = 'tableau-1.3/res/showme/disabled/Gantt.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_HEATMAP'] = 'tableau-1.3/res/showme/disabled/HeatMap.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_HISTOGRAM'] = 'tableau-1.3/res/showme/disabled/Histogram.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_LINEDIM'] = 'tableau-1.3/res/showme/disabled/LineDimension.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_LINEMEAS'] = 'tableau-1.3/res/showme/disabled/LineMeasure.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_AREAMEAS'] = 'tableau-1.3/res/showme/disabled/FilledLineContinuous.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_AREADIM'] = 'tableau-1.3/res/showme/disabled/FilledLineDiscrete.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_SCATSING'] = 'tableau-1.3/res/showme/disabled/ScatterSingle.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_TEXTTABLE'] = 'tableau-1.3/res/showme/disabled/TextTable.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_SPOTTABLE'] = 'tableau-1.3/res/showme/disabled/SpotTable.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_MAPS'] = 'tableau-1.3/res/showme/disabled/Maps.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_FILLEDMAPS'] = 'tableau-1.3/res/showme/disabled/FilledMaps.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_PIES'] = 'tableau-1.3/res/showme/disabled/Pies.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_DUALLINE'] = 'tableau-1.3/res/showme/disabled/DualAxis.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_BULLET'] = 'tableau-1.3/res/showme/disabled/Bullet.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_TREEMAP'] = 'tableau-1.3/res/showme/disabled/Treemap.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_BUBBLE'] = 'tableau-1.3/res/showme/disabled/Bubble.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_BOXPLOT'] = 'tableau-1.3/res/showme/disabled/Boxplot.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_BARSTACKED_2X'] = 'tableau-1.3/res/showme/disabled/BarStacked@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_BARSIDEBY_2X'] = 'tableau-1.3/res/showme/disabled/BarSideBySide@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_BARHORIZONTAL_2X'] = 'tableau-1.3/res/showme/disabled/BarHorizontal@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_BARLINE_2X'] = 'tableau-1.3/res/showme/disabled/BarLine@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_CIRCLE_2X'] = 'tableau-1.3/res/showme/disabled/Circle@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_CIRCLESIDEBYSIDE_2X'] = 'tableau-1.3/res/showme/disabled/CircleSideBySide@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_GANTT_2X'] = 'tableau-1.3/res/showme/disabled/Gantt@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_HEATMAP_2X'] = 'tableau-1.3/res/showme/disabled/HeatMap@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_HISTOGRAM_2X'] = 'tableau-1.3/res/showme/disabled/Histogram@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_LINEDIM_2X'] = 'tableau-1.3/res/showme/disabled/LineDimension@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_LINEMEAS_2X'] = 'tableau-1.3/res/showme/disabled/LineMeasure@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_AREAMEAS_2X'] = 'tableau-1.3/res/showme/disabled/FilledLineContinuous@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_AREADIM_2X'] = 'tableau-1.3/res/showme/disabled/FilledLineDiscrete@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_SCATSING_2X'] = 'tableau-1.3/res/showme/disabled/ScatterSingle@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_TEXTTABLE_2X'] = 'tableau-1.3/res/showme/disabled/TextTable@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_SPOTTABLE_2X'] = 'tableau-1.3/res/showme/disabled/SpotTable@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_MAPS_2X'] = 'tableau-1.3/res/showme/disabled/Maps@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_FILLEDMAPS_2X'] = 'tableau-1.3/res/showme/disabled/FilledMaps@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_PIES_2X'] = 'tableau-1.3/res/showme/disabled/Pies@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_DUALLINE_2X'] = 'tableau-1.3/res/showme/disabled/DualAxis@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_BULLET_2X'] = 'tableau-1.3/res/showme/disabled/Bullet@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_TREEMAP_2X'] = 'tableau-1.3/res/showme/disabled/Treemap@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_BUBBLE_2X'] = 'tableau-1.3/res/showme/disabled/Bubble@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_BOXPLOT_2X'] = 'tableau-1.3/res/showme/disabled/Boxplot@2x.png';
		$tab_TabResources.$resourceMap['TQRC_TREE_MINUS'] = 'tableau-1.3/res/others/TreeMinus.png';
		$tab_TabResources.$resourceMap['TQRC_TREE_MINUS_2X'] = 'tableau-1.3/res/others/TreeMinus@2x.png';
		$tab_TabResources.$resourceMap['TQRC_TREE_PLUS'] = 'tableau-1.3/res/others/TreePlus.png';
		$tab_TabResources.$resourceMap['TQRC_TREE_PLUS_2X'] = 'tableau-1.3/res/others/TreePlus@2x.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_DROP_TABLE'] = 'tableau-1.3/res/analyticspane/drop/table.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_DROP_PANE'] = 'tableau-1.3/res/analyticspane/drop/pane.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_DROP_CELL'] = 'tableau-1.3/res/analyticspane/drop/cell.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_DROP_LINEAR'] = 'tableau-1.3/res/analyticspane/drop/trend-linear.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_DROP_POLY'] = 'tableau-1.3/res/analyticspane/drop/trend-polynomial.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_DROP_LOG'] = 'tableau-1.3/res/analyticspane/drop/trend-logarithmic.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_DROP_EXP'] = 'tableau-1.3/res/analyticspane/drop/trend-exponential.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_DROP_SUBTOTAL'] = 'tableau-1.3/res/analyticspane/drop/sub-total.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_DROP_COLUMN'] = 'tableau-1.3/res/analyticspane/drop/column-total.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_DROP_ROW'] = 'tableau-1.3/res/analyticspane/drop/row-total.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_DROP_FORECAST'] = 'tableau-1.3/res/analyticspane/drop/forecast.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_DROP_CLUSTER'] = 'tableau-1.3/res/analyticspane/drop/cluster.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_DROP_OUTLIER'] = 'tableau-1.3/res/analyticspane/drop/outliers.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_REFLINE'] = 'tableau-1.3/res/analyticspane/refline.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_REFBAND'] = 'tableau-1.3/res/analyticspane/refband.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_DISTBAND'] = 'tableau-1.3/res/analyticspane/distband.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_BOXPLOT'] = 'tableau-1.3/res/analyticspane/boxplot.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_TOTAL'] = 'tableau-1.3/res/analyticspane/total.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_TRENDLINE'] = 'tableau-1.3/res/analyticspane/trendline.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_95ANDMEDIAN'] = 'tableau-1.3/res/analyticspane/95andmedian.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_FORECAST'] = 'tableau-1.3/res/analyticspane/forecast.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_CLUSTER'] = 'tableau-1.3/res/analyticspane/cluster.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_OUTLIER'] = 'tableau-1.3/res/analyticspane/outliers.png';
	})();
	(function() {
		$tab_WebCommandRegistry.$webCmdSingletonDictionary = {};
	})();
	(function() {
		$tab_CommandPermission.$permissionGranted = 'granted';
	})();
	(function() {
		$tab_SessionServerCommands.$forwardToDestTimeoutId = 0;
	})();
	(function() {
		$tab_CustomizedViewSession.$methodGetCustomizedView = 'get_customized_views';
		$tab_CustomizedViewSession.$methodSetDefaultCustomizedView = 'set_default_customized_view';
		$tab_CustomizedViewSession.$methodDestroyCustomizedView = 'destroy_customized_view';
		$tab_CustomizedViewSession.$methodSaveCustomizedView = 'save_customized_view';
		$tab_CustomizedViewSession.$methodUpdateCustomizedView = 'update_customized_view';
		$tab_CustomizedViewSession.$log = tab.Logger.getLogger($tab_CustomizedViewSession);
	})();
	(function() {
		$tab_DataAlertNotificationInterval.everyTime = 0;
		$tab_DataAlertNotificationInterval.hourly = 60;
		$tab_DataAlertNotificationInterval.daily = 1440;
		$tab_DataAlertNotificationInterval.weekly = 10080;
		$tab_DataAlertNotificationInterval.onlyOnce = 2147483647;
	})();
	(function() {
		$tab_DeferLayoutImpl.$instance = null;
	})();
	(function() {
		$tab_DialogPlugins.$dialogContractModule = null;
		if (tab.FeatureFlags.isEnabled('TAA_HybridDialogs')) {
			$tab_DialogPlugins.$dialogContractModule = $tab_ModuleManager.registerRawJsModule('@tableau/dialog-api-contract', 'dialog-api-contract-web.min', 'dialog-api-contract-web').andLoadOnDemandIf(true).moduleBeingConfigured;
			if (tab.FeatureFlags.isEnabled('BinHybridDialog')) {
				$tab_DialogPlugins.$addHybridDialog('numeric-bin-dialog', 'update-numeric-bin-edit-dialog-event');
			}
			if (tab.FeatureFlags.isEnabled('EditAxisDialog')) {
				$tab_DialogPlugins.$addHybridDialog('edit-axis-dialog', 'update-edit-axis-dialog-event');
			}
		}
	})();
	(function() {
		$tab_FailureHandler.$reportIntervalInMS = 5000;
		$tab_FailureHandler.$sourceLineLengthLimit = 120;
		$tab_FailureHandler.$intervalID = 0;
		if (typeof(tsConfig) === 'undefined') {
			return;
		}
		var enabled = tsConfig.clientErrorReportingLevel;
		if (!ss.isNullOrEmptyString(enabled)) {
			tab.ErrorTrace.install();
			$tab_FailureHandler.$intervalID = window.setInterval($tab_FailureHandler.reportFailures, $tab_FailureHandler.$reportIntervalInMS);
		}
	})();
	(function() {
		$tab_MapOptionsInfoModel.mapOptionsDialogWidth = 180;
	})();
	(function() {
		$tab_SceneDataUtil.shapeMapping = null;
		$tab_SceneDataUtil.reverseShapeMapping = null;
		$tab_SceneDataUtil.$paneFlagMapping = null;
		$tab_SceneDataUtil.$markFlagMapping = null;
		$tab_SceneDataUtil.lineInterpolationMapping = null;
		$tab_SceneDataUtil.lineMarkerPositionMapping = null;
		$tab_SceneDataUtil.$paneFlagMapping = {};
		$tab_SceneDataUtil.$paneFlagMapping['enable-pan-x'] = 1;
		$tab_SceneDataUtil.$paneFlagMapping['enable-pan-y'] = 2;
		$tab_SceneDataUtil.$paneFlagMapping['enable-zoom-x'] = 4;
		$tab_SceneDataUtil.$paneFlagMapping['enable-zoom-y'] = 8;
		$tab_SceneDataUtil.$paneFlagMapping['enable-scale-x'] = 16;
		$tab_SceneDataUtil.$paneFlagMapping['enable-scale-y'] = 32;
		$tab_SceneDataUtil.$paneFlagMapping['clip-to-cell-x'] = 64;
		$tab_SceneDataUtil.$paneFlagMapping['clip-to-cell-y'] = 128;
		$tab_SceneDataUtil.$paneFlagMapping['clip-to-cell-for-selection'] = 256;
		$tab_SceneDataUtil.$paneFlagMapping['x-axis-on-top'] = 512;
		$tab_SceneDataUtil.$paneFlagMapping['y-axis-on-right'] = 1024;
		$tab_SceneDataUtil.$paneFlagMapping['has-cells-x'] = 2048;
		$tab_SceneDataUtil.$paneFlagMapping['has-cells-y'] = 4096;
		$tab_SceneDataUtil.$markFlagMapping = {};
		$tab_SceneDataUtil.$markFlagMapping['end'] = 1;
		$tab_SceneDataUtil.$markFlagMapping['endprimitive'] = 2;
		$tab_SceneDataUtil.$markFlagMapping['closedprimitive'] = 4;
		$tab_SceneDataUtil.$markFlagMapping['marked'] = 8;
		$tab_SceneDataUtil.$markFlagMapping['markediflabel'] = 16;
		$tab_SceneDataUtil.$markFlagMapping['debug'] = 128;
		$tab_SceneDataUtil.$markFlagMapping['user'] = 65536;
		$tab_SceneDataUtil.shapeMapping = ss.mkdict(['0', 'shapeIDCircle', '1', 'shapeIDSquare', '2', 'shapeIDPlus', '3', 'shapeIDTimes', '4', 'shapeIDAsterisk', '5', 'shapeIDDiamond', '6', 'shapeIDTriangle', '7', 'shapeIDDownTriangle', '8', 'shapeIDLeftTriangle', '9', 'shapeIDRightTriangle', '4194304', 'shapeIDFilledCircle', '4194305', 'shapeIDFilledSquare', '4194306', 'shapeIDFilledPlus', '4194307', 'shapeIDFilledTimes', '4194308', 'shapeIDFilledStar', '4194309', 'shapeIDFilledDiamond', '4194310', 'shapeIDFilledTriangle', '4194311', 'shapeIDFilledDownTriangle', '4194312', 'shapeIDFilledLeftTriangle', '4194313', 'shapeIDFilledRightTriangle', '-4194304', 'shapeIDUnscaledFilledCircle']);
		$tab_SceneDataUtil.reverseShapeMapping = {};
		var $t1 = _.keys($tab_SceneDataUtil.shapeMapping);
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var key = $t1[$t2];
			$tab_SceneDataUtil.reverseShapeMapping[$tab_SceneDataUtil.shapeMapping[key]] = key;
		}
		$tab_SceneDataUtil.lineInterpolationMapping = ss.mkdict(['0', 'lim-linear', '1', 'lim-step', '2', 'lim-jump']);
		$tab_SceneDataUtil.lineMarkerPositionMapping = ss.mkdict(['0', 'lmp-left', '1', 'lmp-center', '2', 'lmp-right']);
	})();
	(function() {
		$tab_PaneIdModel.currentPage = 4294967295;
	})();
	(function() {
		$tab_PluginPresentationLayer.$instance = null;
	})();
	(function() {
		$tab_SceneUtils.blackColor = null;
		var blackColorStr = (new $tab_ColorModel(0, 0, 0, 1)).toRgba();
		$tab_SceneUtils.blackColor = {};
		$tab_SceneUtils.blackColor['colorOverrideNone'] = blackColorStr;
		$tab_SceneUtils.blackColor['colorOverrideFog'] = blackColorStr;
		$tab_SceneUtils.blackColor['colorOverrideOpaque'] = blackColorStr;
	})();
	(function() {
		$tab_ToolbarServerCommands.$uriPattern = new RegExp('^https?://[^/]+(.*)$');
	})();
	(function() {
		$tab_UbertipSerializer.$selectionTemplate = ['<span style="white-space:pre"><div class="uberSelection"style="text-align:center;"><span>&nbsp;&nbsp;</span>', '<span style="font-weight:bold;">', '', '</span><span> ', '', '  </span><span>', '¬∑', '  </span><span>', '', ' </span><span>', '', '</span><span>', ': ', '</span><span style="font-weight:bold;">', '', '</span><span>&nbsp;&nbsp;', '</span></div></span>'];
		$tab_UbertipSerializer.$selectionTemplateNoSummary = ['<div class="uberSelection"style="text-align:center;"><span></span>', '<span style="font-weight:bold;"> ', '', ' </span><span>', '', '</span><div> '];
	})();
})();

// END Domain

  tab._Deferred = tab._DeferredImpl;

(function() {
	'dont use strict';
	var $asm = {};
	global.tab = global.tab || {};
	ss.initAssembly($asm, 'vqladdinbootstrap');
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.AddInBootstrap.DesktopAddInBootstrap
	var $tab__DesktopAddInBootstrap = function() {
	};
	$tab__DesktopAddInBootstrap.__typeName = 'tab._DesktopAddInBootstrap';
	$tab__DesktopAddInBootstrap.initialize = function DesktopAddInBootstrap$Initialize() {
		tab._ApiObjectRegistry.registerApiMessageRouter(function() {
			return new $tab_DesktopAddInMessageRouter();
		});
	};
	global.tab._DesktopAddInBootstrap = $tab__DesktopAddInBootstrap;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.AddInBootstrap.DesktopAddInMessageRouter
	var $tab_DesktopAddInMessageRouter = function() {
		this.$bridgePromise = null;
		this.$instancePresModel = null;
		this.$commandConversionRegistry = null;
		this.$docEventMappingRegistry = null;
		this.$messageHandlers = null;
		this.$commandConversionRegistry = new tab.CommandMappingRegistry();
		this.$commandConversionRegistry.initialize();
		this.$docEventMappingRegistry = new tab.DocEventMappingRegistry();
		this.$docEventMappingRegistry.initialize();
		this.$messageHandlers = [];
	};
	$tab_DesktopAddInMessageRouter.__typeName = 'tab.DesktopAddInMessageRouter';
	global.tab.DesktopAddInMessageRouter = $tab_DesktopAddInMessageRouter;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.AddInBootstrap.IQtWebChannelTransport
	var $tab_IQtWebChannelTransport = function() {
	};
	$tab_IQtWebChannelTransport.__typeName = 'tab.IQtWebChannelTransport';
	global.tab.IQtWebChannelTransport = $tab_IQtWebChannelTransport;
	ss.initClass($tab__DesktopAddInBootstrap, $asm, {});
	ss.initClass($tab_DesktopAddInMessageRouter, $asm, {
		get_$bridgePromise: function DesktopAddInMessageRouter$get_BridgePromise() {
			if (ss.isNullOrUndefined(this.$bridgePromise)) {
				var deferred = new tab._Deferred();
				new QWebChannel(qt.webChannelTransport, ss.mkdel(this, function(channel) {
					if (ss.isValue(channel.objects) && ss.keyExists(channel.objects, 'addInPresLayer')) {
						var bridge = channel.objects['addInPresLayer'];
						this.$instancePresModel = bridge.addInInstanceInfo;
						bridge.OnNotification.connect(ss.mkdel(this, function(notification) {
							if (this.$docEventMappingRegistry.has(notification.eventId)) {
								var mapping = this.$docEventMappingRegistry.get(notification.eventId);
								var serializedParam = mapping.convertToMessageHandlerNotification(notification.presModel);
								for (var $t1 = 0; $t1 < this.$messageHandlers.length; $t1++) {
									var messageHandler = this.$messageHandlers[$t1];
									messageHandler.handleEventNotification(mapping.apiCommandId, serializedParam);
								}
							}
						}));
						var $t2 = ss.getEnumerator(this.$docEventMappingRegistry.getKeys());
						try {
							while ($t2.moveNext()) {
								var eventId = $t2.current();
								bridge.RegisterNotificationHandler(eventId);
							}
						}
						finally {
							$t2.dispose();
						}
						deferred.resolve(bridge);
					}
					else {
						deferred.reject(tab._TableauException.createInternalError('Web channel not initialized correctly, please ensure you are running inside QTWebEngine.'));
					}
				}));
				this.$bridgePromise = deferred.get_promise();
			}
			return this.$bridgePromise;
		},
		registerHandler: function DesktopAddInMessageRouter$RegisterHandler(handler) {
			this.$messageHandlers.push(handler);
		},
		unregisterHandler: function DesktopAddInMessageRouter$UnregisterHandler(handler) {
			var index = -1;
			for (; index < this.$messageHandlers.length; index++) {
				if (ss.referenceEquals(this.$messageHandlers[index], handler)) {
					break;
				}
			}
			if (index !== -1) {
				this.$messageHandlers = this.$messageHandlers.splice(index, 1);
			}
		},
		sendCommand: function(T) {
			return function DesktopAddInMessageRouter$SendCommand(source, commandParameters, returnHandler) {
				this.get_$bridgePromise().then(ss.mkdel(this, function(bridge) {
					if (!this.$commandConversionRegistry.has(returnHandler.get_commandName())) {
						throw tab._TableauException.createInternalError('Unknown command name: ' + returnHandler.get_commandName());
					}
					var cmdMapping = this.$commandConversionRegistry.get(returnHandler.get_commandName());
					var handler = function(commandResponse) {
						if (commandResponse.Success) {
							returnHandler.get_successCallback()(cmdMapping.processResult(T).call(cmdMapping, commandResponse.Result));
						}
						else {
							returnHandler.get_errorCallback()(false, 'Failed to retrieve information from Tableau Desktop.');
						}
					};
					commandParameters = commandParameters || {};
					commandParameters['api.AddInLocator'] = tab.ApiCrossDomainPresModelsFactory.newAddInLocatorPM(this.$instancePresModel.addInLocatorPresModel);
					var internalCommandParameters = cmdMapping.createInternalCommandParams(commandParameters);
					bridge.ExecuteCommand('tabdoc', cmdMapping.docCommandId, internalCommandParameters, handler);
					return null;
				}), function(e) {
					returnHandler.get_errorCallback()(false, e.toString());
					return null;
				});
			};
		}
	});
	ss.initInterface($tab_IQtWebChannelTransport, $asm, {});
})();

  tab._DesktopAddInBootstrap.initialize();
// })();

// END AddInBootstrap


/*! BEGIN AddInApi */

(function() {


  // Steal this trick from the Api.script to get ss declared globally for us.
/*! BEGIN MscorlibSlim */



////////////////////////////////////////////////////////////////////////////////
// Globals and assembly registration
////////////////////////////////////////////////////////////////////////////////

var global = {};

(function(global) {
"use strict";

var ss = { __assemblies: {} };

ss.initAssembly = function assembly(obj, name, res) {
  res = res || {};
  obj.name = name;
  obj.toString = function() { return this.name; };
  obj.__types = {};
  obj.getResourceNames = function() { return Object.keys(res); };
  obj.getResourceDataBase64 = function(name) { return res[name] || null; };
  obj.getResourceData = function(name) { var r = res[name]; return r ? ss.dec64(r) : null; };
  ss.__assemblies[name] = obj;
};
ss.initAssembly(ss, 'mscorlib');



////////////////////////////////////////////////////////////////////////////////
// Utility methods (generated via Script.IsNull, etc.)
////////////////////////////////////////////////////////////////////////////////


ss.getAssemblies = function ss$getAssemblies() {
  return Object.keys(ss.__assemblies).map(function(n) { return ss.__assemblies[n]; });
};

ss.isNullOrUndefined = function ss$isNullOrUndefined(o) {
  return (o === null) || (o === undefined);
};

ss.isValue = function ss$isValue(o) {
  return (o !== null) && (o !== undefined);
};

ss.referenceEquals = function ss$referenceEquals(a, b) {
  return ss.isValue(a) ? a === b : !ss.isValue(b);
};

ss.mkdict = function ss$mkdict() {
  var a = (arguments.length != 1 ? arguments : arguments[0]);
  var r = {};
  for (var i = 0; i < a.length; i += 2) {
    r[a[i]] = a[i + 1];
  }
  return r;
};

ss.clone = function ss$clone(t, o) {
  return o ? t.$clone(o) : o;
}

ss.coalesce = function ss$coalesce(a, b) {
  return ss.isValue(a) ? a : b;
};

ss.isDate = function ss$isDate(obj) {
  return Object.prototype.toString.call(obj) === '[object Date]';
};

ss.isArray = function ss$isArray(obj) {
  return Object.prototype.toString.call(obj) === '[object Array]';
};

ss.isTypedArrayType = function ss$isTypedArrayType(type) {
  return ['Float32Array', 'Float64Array', 'Int8Array', 'Int16Array', 'Int32Array', 'Uint8Array', 'Uint16Array', 'Uint32Array', 'Uint8ClampedArray'].indexOf(ss.getTypeFullName(type)) >= 0;
};

ss.isArrayOrTypedArray = function ss$isArray(obj) {
  return ss.isArray(obj) || ss.isTypedArrayType(ss.getInstanceType(obj));
};

ss.getHashCode = function ss$getHashCode(obj) {
  if (!ss.isValue(obj))
    throw new ss_NullReferenceException('Cannot get hash code of null');
  else if (typeof(obj.getHashCode) === 'function')
    return obj.getHashCode();
  else if (typeof(obj) === 'boolean') {
    return obj ? 1 : 0;
  }
  else if (typeof(obj) === 'number') {
    var s = obj.toExponential();
    s = s.substr(0, s.indexOf('e'));
    return parseInt(s.replace('.', ''), 10) & 0xffffffff;
  }
  else if (typeof(obj) === 'string') {
    var res = 0;
    for (var i = 0; i < obj.length; i++)
      res = (res * 31 + obj.charCodeAt(i)) & 0xffffffff;
    return res;
  }
  else if (ss.isDate(obj)) {
    return obj.valueOf() & 0xffffffff;
  }
  else {
    return ss.defaultHashCode(obj);
  }
};

ss.defaultHashCode = function ss$defaultHashCode(obj) {
  return obj.$__hashCode__ || (obj.$__hashCode__ = (Math.random() * 0x100000000) | 0);
};


ss.equals = function ss$equals(a, b) {
    if (!ss.isValue(a))
        throw new ss_NullReferenceException('Object is null');
    else if (a !== ss && typeof(a.equals) === 'function')
        return a.equals(b);
    if (ss.isDate(a) && ss.isDate(b))
        return a.valueOf() === b.valueOf();
    else if (typeof(a) === 'function' && typeof(b) === 'function')
        return ss.delegateEquals(a, b);
    else if (ss.isNullOrUndefined(a) && ss.isNullOrUndefined(b))
        return true;
    else
        return a === b;
};

ss.compare = function ss$compare(a, b) {
  if (!ss.isValue(a))
    throw new ss_NullReferenceException('Object is null');
  else if (typeof(a) === 'number' || typeof(a) === 'string' || typeof(a) === 'boolean')
    return a < b ? -1 : (a > b ? 1 : 0);
  else if (ss.isDate(a))
    return ss.compare(a.valueOf(), b.valueOf());
  else
    return a.compareTo(b);
};

ss.equalsT = function ss$equalsT(a, b) {
  if (!ss.isValue(a))
    throw new ss_NullReferenceException('Object is null');
  else if (typeof(a) === 'number' || typeof(a) === 'string' || typeof(a) === 'boolean')
    return a === b;
  else if (ss.isDate(a))
    return a.valueOf() === b.valueOf();
  else
    return a.equalsT(b);
};

ss.staticEquals = function ss$staticEquals(a, b) {
  if (!ss.isValue(a))
    return !ss.isValue(b);
  else
    return ss.isValue(b) ? ss.equals(a, b) : false;
};

ss.shallowCopy = function ss$shallowCopy(source, target) {
  var keys = Object.keys(source);
  for (var i = 0, l = keys.length; i < l; i++) {
    var k = keys[i];
    target[k] = source[k];
  }
};

ss.isLower = function ss$isLower(c) {
  var s = String.fromCharCode(c);
  return s === s.toLowerCase() && s !== s.toUpperCase();
};

ss.isUpper = function ss$isUpper(c) {
  var s = String.fromCharCode(c);
  return s !== s.toLowerCase() && s === s.toUpperCase();
};

if (typeof(window) == 'object') {
  // Browser-specific stuff that could go into the Web assembly, but that assembly does not have an associated JS file.
  if (!window.Element) {
    // IE does not have an Element constructor. This implementation should make casting to elements work.
    window.Element = function() {};
    window.Element.isInstanceOfType = function(instance) { return instance && typeof instance.constructor === 'undefined' && typeof instance.tagName === 'string'; };
  }
  window.Element.__typeName = 'Element';
}

///////////////////////////////////////////////////////////////////////////////
// Object Extensions

ss.clearKeys = function ss$clearKeys(d) {
  for (var n in d) {
    if (d.hasOwnProperty(n))
      delete d[n];
  }
};

ss.keyExists = function ss$keyExists(d, key) {
  return d[key] !== undefined;
};

if (!Object.keys) {
  Object.keys = (function() {
    'use strict';
    var hasOwnProperty = Object.prototype.hasOwnProperty,
      hasDontEnumBug = !({toString: null}).propertyIsEnumerable('toString'),
      dontEnums = ['toString','toLocaleString','valueOf','hasOwnProperty','isPrototypeOf','propertyIsEnumerable','constructor'],
      dontEnumsLength = dontEnums.length;

    return function (obj) {
      if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {
        throw new TypeError('Object.keys called on non-object');
      }

      var result = [], prop, i;

      for (prop in obj) {
        if (hasOwnProperty.call(obj, prop)) {
          result.push(prop);
        }
      }

      if (hasDontEnumBug) {
        for (i = 0; i < dontEnumsLength; i++) {
          if (hasOwnProperty.call(obj, dontEnums[i])) {
            result.push(dontEnums[i]);
          }
        }
      }
      return result;
    };
  }());
}

ss.getKeyCount = function ss$getKeyCount(d) {
  return Object.keys(d).length;
};

////////////////////////////////////////////////////////////////////////////////
// Type System Implementation
////////////////////////////////////////////////////////////////////////////////

// When FULL_TYPE_SYSTEM is not defined, then the code is not the full-blown
// type system. It's Just enough to allow us to call base class methods.

ss.__genericCache = {};

ss._makeGenericTypeName = function ss$_makeGenericTypeName(genericType, typeArguments) {
  var result = genericType.__typeName;
  for (var i = 0; i < typeArguments.length; i++)
    result += (i === 0 ? '[' : ',') + '[' + ss.getTypeQName(typeArguments[i]) + ']';
  result += ']';
  return result;
};

ss.makeGenericType = function ss$makeGenericType(genericType, typeArguments) {
  var name = ss._makeGenericTypeName(genericType, typeArguments);
  return ss.__genericCache[name] || genericType.apply(null, typeArguments);
};

ss.registerGenericClassInstance = function ss$registerGenericClassInstance(instance, genericType, typeArguments, members, baseType, interfaceTypes) {
  var name = ss._makeGenericTypeName(genericType, typeArguments);
  ss.__genericCache[name] = instance;
  instance.__typeName = name;
  instance.__genericTypeDefinition = genericType;
  instance.__typeArguments = typeArguments;
  ss.initClass(instance, genericType.__assembly, members, baseType(), interfaceTypes());
};

ss.registerGenericInterfaceInstance = function ss$registerGenericInterfaceInstance(instance, genericType, typeArguments, members, baseInterfaces) {
  var name = ss._makeGenericTypeName(genericType, typeArguments);
  ss.__genericCache[name] = instance;
  instance.__typeName = name;
  instance.__genericTypeDefinition = genericType;
  instance.__typeArguments = typeArguments;
  ss.initInterface(instance, genericType.__assembly, members, baseInterfaces());
};

ss.isGenericTypeDefinition = function ss$isGenericTypeDefinition(type) {
  return type.__isGenericTypeDefinition || false;
};

ss.getGenericTypeDefinition = function ss$getGenericTypeDefinition(type) {
  return type.__genericTypeDefinition || null;
};

ss.getGenericParameterCount = function ss$getGenericParameterCount(type) {
  return type.__typeArgumentCount || 0;
};

ss.getGenericArguments = function ss$getGenericArguments(type) {
  return type.__typeArguments || null;
};


ss.setMetadata = function ss$_setMetadata(type, metadata) {
  if (metadata.members) {
    for (var i = 0; i < metadata.members.length; i++) {
      var m = metadata.members[i];
      m.typeDef = type;
      if (m.adder) m.adder.typeDef = type;
      if (m.remover) m.remover.typeDef = type;
      if (m.getter) m.getter.typeDef = type;
      if (m.setter) m.setter.typeDef = type;
    }
  }
  type.__metadata = metadata;
  if (metadata.variance) {
    type.isAssignableFrom = function(source) {
      var check = function(target, type) {
        if (type.__genericTypeDefinition === target.__genericTypeDefinition && type.__typeArguments.length == target.__typeArguments.length) {
          for (var i = 0; i < target.__typeArguments.length; i++) {
            var v = target.__metadata.variance[i], t = target.__typeArguments[i], s = type.__typeArguments[i];
            switch (v) {
              case 1: if (!ss.isAssignableFrom(t, s)) return false; break;
              case 2: if (!ss.isAssignableFrom(s, t)) return false; break;
              default: if (s !== t) return false;
            }
          }
          return true;
        }
        return false;
      };

      if (source.__interface && check(this, source))
        return true;
      var ifs = ss.getInterfaces(source);
      for (var i = 0; i < ifs.length; i++) {
        if (ifs[i] === this || check(this, ifs[i]))
          return true;
      }
      return false;
    };
  }
}
ss.setMetadata = function ss$_setMetadata(type, metadata) {
};

ss.initClass = function ss$initClass(ctor, asm, members, baseType, interfaces) {
  ctor.__class = true;
  ctor.__assembly = asm;
  if (!ctor.__typeArguments)
    asm.__types[ctor.__typeName] = ctor;
  if (baseType && baseType !== Object) {
    var f = function(){};
    f.prototype = baseType.prototype;
    ctor.prototype = new f();
    ctor.prototype.constructor = ctor;
  }
  ss.shallowCopy(members, ctor.prototype);
  if (interfaces)
    ctor.__interfaces = interfaces;
};

ss.initGenericClass = function ss$initGenericClass(ctor, asm, typeArgumentCount) {
  ctor.__class = true;
  ctor.__assembly = asm;
  asm.__types[ctor.__typeName] = ctor;
  ctor.__typeArgumentCount = typeArgumentCount;
  ctor.__isGenericTypeDefinition = true;
};

ss.initInterface = function ss$initInterface(ctor, asm, members, baseInterfaces) {
  ctor.__interface = true;
  ctor.__assembly = asm;
  if (!ctor.__typeArguments)
    asm.__types[ctor.__typeName] = ctor;
  if (baseInterfaces)
    ctor.__interfaces = baseInterfaces;
  ss.shallowCopy(members, ctor.prototype);
  ctor.isAssignableFrom = function(type) { return ss.contains(ss.getInterfaces(type), this); };
};

ss.initGenericInterface = function ss$initGenericClass(ctor, asm, typeArgumentCount) {
  ctor.__interface = true;
  ctor.__assembly = asm;
  asm.__types[ctor.__typeName] = ctor;
  ctor.__typeArgumentCount = typeArgumentCount;
  ctor.__isGenericTypeDefinition = true;
};

ss.initEnum = function ss$initEnum(ctor, asm, members, namedValues) {
  ctor.__enum = true;
  ctor.__assembly = asm;
  asm.__types[ctor.__typeName] = ctor;
  ss.shallowCopy(members, ctor.prototype);
  ctor.getDefaultValue = ctor.createInstance = function() { return namedValues ? null : 0; };
  ctor.isInstanceOfType = function(instance) { return typeof(instance) == (namedValues ? 'string' : 'number'); };
};

ss.getBaseType = function ss$getBaseType(type) {
  if (type === Object || type.__interface) {
    return null;
  }
  else if (Object.getPrototypeOf) {
    return Object.getPrototypeOf(type.prototype).constructor;
  }
  else {
    var p = type.prototype;
    if (Object.prototype.hasOwnProperty.call(p, 'constructor')) {
      try {
        var ownValue = p.constructor;
        delete p.constructor;
        return p.constructor;
      }
      finally {
        p.constructor = ownValue;
      }
    }
    return p.constructor;
  }
};

ss.getTypeFullName = function ss$getTypeFullName(type) {
  return type.__typeName || type.name || (type.toString().match(/^\s*function\s*([^\s(]+)/) || [])[1] || 'Object';
};

ss.getTypeQName = function ss$getTypeFullName(type) {
  return ss.getTypeFullName(type) + (type.__assembly ? ', ' + type.__assembly.name : '');
};

ss.getTypeName = function ss$getTypeName(type) {
  var fullName = ss.getTypeFullName(type);
  var bIndex = fullName.indexOf('[');
  var nsIndex = fullName.lastIndexOf('.', bIndex >= 0 ? bIndex : fullName.length);
  return nsIndex > 0 ? fullName.substr(nsIndex + 1) : fullName;
};

ss.getTypeNamespace = function ss$getTypeNamespace(type) {
  var fullName = ss.getTypeFullName(type);
  var bIndex = fullName.indexOf('[');
  var nsIndex = fullName.lastIndexOf('.', bIndex >= 0 ? bIndex : fullName.length);
  return nsIndex > 0 ? fullName.substr(0, nsIndex) : '';
};

ss.getTypeAssembly = function ss$getTypeAssembly(type) {
  if (ss.contains([Date, Number, Boolean, String, Function, Array], type))
    return ss;
  else
    return type.__assembly || null;
};

ss._getAssemblyType = function ss$_getAssemblyType(asm, name) {
  var result = [];
  if (asm.__types) {
    return asm.__types[name] || null;
  }
  else {
    var a = name.split('.');
    for (var i = 0; i < a.length; i++) {
      asm = asm[a[i]];
      if (!ss.isValue(asm))
        return null;
    }
    if (typeof asm !== 'function')
      return null;
    return asm;
  }
};

ss.getAssemblyTypes = function ss$getAssemblyTypes(asm) {
  var result = [];
  if (asm.__types) {
    for (var t in asm.__types) {
      if (asm.__types.hasOwnProperty(t))
        result.push(asm.__types[t]);
    }
  }
  else {
    var traverse = function(s, n) {
      for (var c in s) {
        if (s.hasOwnProperty(c))
          traverse(s[c], c);
      }
      if (typeof(s) === 'function' && ss.isUpper(n.charCodeAt(0)))
        result.push(s);
    };
    traverse(asm, '');
  }
  return result;
};

ss.createAssemblyInstance = function ss$createAssemblyInstance(asm, typeName) {
  var t = ss.getType(typeName, asm);
  return t ? ss.createInstance(t) : null;
};

ss.getInterfaces = function ss$getInterfaces(type) {
  if (type.__interfaces)
    return type.__interfaces;
  else if (type === Date || type === Number)
    return [ ss_IEquatable, ss_IComparable, ss_IFormattable ];
  else if (type === Boolean || type === String)
    return [ ss_IEquatable, ss_IComparable ];
  else if (type === Array || ss.isTypedArrayType(type))
    return [ ss_IEnumerable, ss_ICollection, ss_IList ];
  else
    return [];
};

ss.isInstanceOfType = function ss$isInstanceOfType(instance, type) {
  if (ss.isNullOrUndefined(instance))
    return false;

  if (typeof(type.isInstanceOfType) === 'function')
    return type.isInstanceOfType(instance);

  return ss.isAssignableFrom(type, ss.getInstanceType(instance));
};

ss.isAssignableFrom = function ss$isAssignableFrom(target, type) {
  return target === type || (typeof(target.isAssignableFrom) === 'function' && target.isAssignableFrom(type)) || type.prototype instanceof target;
};

ss.isClass = function Type$isClass(type) {
  return (type.__class == true || type === Array || type === Function || type === RegExp || type === String || type === Error || type === Object);
};

ss.isEnum = function Type$isEnum(type) {
  return !!type.__enum;
};

ss.isFlags = function Type$isFlags(type) {
  return type.__metadata && type.__metadata.enumFlags || false;
};

ss.isInterface = function Type$isInterface(type) {
  return !!type.__interface;
};

ss.safeCast = function ss$safeCast(instance, type) {
  if (type === true)
    return instance;
  else if (type === false)
    return null;
  else
    return ss.isInstanceOfType(instance, type) ? instance : null;
};

ss.cast = function ss$cast(instance, type) {
  if (instance === null || typeof(instance) === 'undefined')
    return instance;
  else if (type === true || (type !== false && ss.isInstanceOfType(instance, type)))
    return instance;
  throw new ss_InvalidCastException('Cannot cast object to type ' + ss.getTypeFullName(type));
};

ss.getInstanceType = function ss$getInstanceType(instance) {
  if (!ss.isValue(instance))
    throw new ss_NullReferenceException('Cannot get type of null');

  // NOTE: We have to catch exceptions because the constructor
  //       cannot be looked up on native COM objects
  try {
    return instance.constructor;
  }
  catch (ex) {
    return Object;
  }
};

ss._getType = function (typeName, asm, re) {
  var outer = !re;
  re = re || /[[,\]]/g;
  var last = re.lastIndex, m = re.exec(typeName), tname, targs = [];
  if (m) {
    tname = typeName.substring(last, m.index);
    switch (m[0]) {
      case '[':
        if (typeName[m.index + 1] != '[')
          return null;
        for (;;) {
          re.exec(typeName);
          var t = ss._getType(typeName, global, re);
          if (!t)
            return null;
          targs.push(t);
          m = re.exec(typeName);
          if (m[0] === ']')
            break;
          else if (m[0] !== ',')
            return null;
        }
        m = re.exec(typeName);
        if (m && m[0] === ',') {
          re.exec(typeName);
          if (!(asm = ss.__assemblies[(re.lastIndex > 0 ? typeName.substring(m.index + 1, re.lastIndex - 1) : typeName.substring(m.index + 1)).trim()]))
            return null;
        }
        break;

      case ']':
        break;

      case ',':
        re.exec(typeName);
        if (!(asm = ss.__assemblies[(re.lastIndex > 0 ? typeName.substring(m.index + 1, re.lastIndex - 1) : typeName.substring(m.index + 1)).trim()]))
          return null;
        break;
    }
  }
  else {
    tname = typeName.substring(last);
  }

  if (outer && re.lastIndex)
    return null;

  var t = ss._getAssemblyType(asm, tname.trim());
  return targs.length ? ss.makeGenericType(t, targs) : t;
}

ss.getType = function ss$getType(typeName, asm) {
  return typeName ? ss._getType(typeName, asm || global) : null;
};

ss.getDefaultValue = function ss$getDefaultValue(type) {
  if (typeof(type.getDefaultValue) === 'function')
    return type.getDefaultValue();
  else if (type === Boolean)
    return false;
  else if (type === Date)
    return new Date(0);
  else if (type === Number)
    return 0;
  return null;
};

ss.createInstance = function ss$createInstance(type) {
  if (typeof(type.createInstance) === 'function')
    return type.createInstance();
  else if (type === Boolean)
    return false;
  else if (type === Date)
    return new Date(0);
  else if (type === Number)
    return 0;
  else if (type === String)
    return '';
  else
    return new type();
};


///////////////////////////////////////////////////////////////////////////////
// IFormattable

var ss_IFormattable = function IFormattable$() { };

ss_IFormattable.__typeName = 'ss.IFormattable';
ss.IFormattable = ss_IFormattable;
ss.initInterface(ss_IFormattable, ss, { format: null });


///////////////////////////////////////////////////////////////////////////////
// IComparable

var ss_IComparable = function IComparable$() { };

ss_IComparable.__typeName = 'ss.IComparable';
ss.IComparable = ss_IComparable;
ss.initInterface(ss_IComparable, ss, { compareTo: null });

///////////////////////////////////////////////////////////////////////////////
// IEquatable

var ss_IEquatable = function IEquatable$() { };

ss_IEquatable.__typeName = 'ss.IEquatable';
ss.IEquatable = ss_IEquatable;
ss.initInterface(ss_IEquatable, ss, { equalsT: null });

///////////////////////////////////////////////////////////////////////////////
// Number Extensions


///////////////////////////////////////////////////////////////////////////////
// String Extensions


ss.isNullOrEmptyString = function ss$isNullOrEmptyString(s) {
  return !s || !s.length;
};


if (!String.prototype.trim) {
  String.prototype.trim = function String$trim() {
    return ss.trimStartString(ss.trimEndString(this));
  };
}

ss.trimEndString = function ss$trimEndString(s, chars) {
  return s.replace(chars ? new RegExp('[' + String.fromCharCode.apply(null, chars) + ']+$') : /\s*$/, '');
};

ss.trimStartString = function ss$trimStartString(s, chars) {
  return s.replace(chars ? new RegExp('^[' + String.fromCharCode.apply(null, chars) + ']+') : /^\s*/, '');
};

ss.trimString = function ss$trimString(s, chars) {
  return ss.trimStartString(ss.trimEndString(s, chars), chars);
};


///////////////////////////////////////////////////////////////////////////////
// Math Extensions


///////////////////////////////////////////////////////////////////////////////
// IFormatProvider

///////////////////////////////////////////////////////////////////////////////
// NumberFormatInfo

///////////////////////////////////////////////////////////////////////////////
// DateTimeFormatInfo

///////////////////////////////////////////////////////////////////////////////
// Array Extensions


ss.arrayClone = function ss$arrayClone(arr) {
    if (arr.length === 1) {
        return [arr[0]];
    }
    else {
        return Array.apply(null, arr);
    }
};


if (!Array.prototype.map) {
  Array.prototype.map = function Array$map(callback, instance) {
    var length = this.length;
    var mapped = new Array(length);
    for (var i = 0; i < length; i++) {
      if (i in this) {
        mapped[i] = callback.call(instance, this[i], i, this);
      }
    }
    return mapped;
  };
}


if (!Array.prototype.some) {
  Array.prototype.some = function Array$some(callback, instance) {
    var length = this.length;
    for (var i = 0; i < length; i++) {
      if (i in this && callback.call(instance, this[i], i, this)) {
        return true;
      }
    }
    return false;
  };
}

// Production steps of ECMA-262, Edition 5, 15.4.4.18
// Reference: http://es5.github.io/#x15.4.4.18
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach
if (!Array.prototype.forEach) {

  Array.prototype.forEach = function(callback, thisArg) {

      var T, k;

      if (this == null) {
          throw new TypeError(' this is null or not defined');
      }

      // 1. Let O be the result of calling ToObject passing the |this| value as the argument.
      var O = Object(this);

      // 2. Let lenValue be the result of calling the Get internal method of O with the argument "length".
      // 3. Let len be ToUint32(lenValue).
      var len = O.length >>> 0;

      // 4. If IsCallable(callback) is false, throw a TypeError exception.
      // See: http://es5.github.com/#x9.11
      if (typeof callback !== "function") {
          throw new TypeError(callback + ' is not a function');
      }

      // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.
      if (arguments.length > 1) {
          T = thisArg;
      }

      // 6. Let k be 0
      k = 0;

      // 7. Repeat, while k < len
      while (k < len) {

          var kValue;

          // a. Let Pk be ToString(k).
          //   This is implicit for LHS operands of the in operator
          // b. Let kPresent be the result of calling the HasProperty internal method of O with argument Pk.
          //   This step can be combined with c
          // c. If kPresent is true, then
          if (k in O) {

              // i. Let kValue be the result of calling the Get internal method of O with argument Pk.
              kValue = O[k];

              // ii. Call the Call internal method of callback with T as the this value and
              // argument list containing kValue, k, and O.
              callback.call(T, kValue, k, O);
          }
          // d. Increase k by 1.
          k++;
      }
      // 8. return undefined
  };
}

// Production steps of ECMA-262, Edition 5
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter
if (!Array.prototype.filter) {
    Array.prototype.filter = function(fun/*, thisArg*/) {

        if (this === void 0 || this === null) {
            throw new TypeError();
        }

        var t = Object(this);
        var len = t.length >>> 0;
        if (typeof fun !== 'function') {
            throw new TypeError();
        }

        var res = [];
        var thisArg = arguments.length >= 2 ? arguments[1] : void 0;
        for (var i = 0; i < len; i++) {
            if (i in t) {
                var val = t[i];

                // NOTE: Technically this should Object.defineProperty at
                //       the next index, as push can be affected by
                //       properties on Object.prototype and Array.prototype.
                //       But that method's new, and collisions should be
                //       rare, so use the more-compatible alternative.
                if (fun.call(thisArg, val, i, t)) {
                    res.push(val);
                }
            }
        }

        return res;
    };
}


///////////////////////////////////////////////////////////////////////////////
// Date Extensions


///////////////////////////////////////////////////////////////////////////////
// Function Extensions

ss._delegateContains = function ss$_delegateContains(targets, object, method) {
  for (var i = 0; i < targets.length; i += 2) {
    if (targets[i] === object && targets[i + 1] === method) {
      return true;
    }
  }
  return false;
};

ss._mkdel = function ss$_mkdel(targets) {
  var delegate = function() {
    if (targets.length == 2) {
      return targets[1].apply(targets[0], arguments);
    }
    else {
      var clone = ss.arrayClone(targets);
      for (var i = 0; i < clone.length; i += 2) {
        if (ss._delegateContains(targets, clone[i], clone[i + 1])) {
          clone[i + 1].apply(clone[i], arguments);
        }
      }
      return null;
    }
  };
  delegate._targets = targets;

  return delegate;
};

ss.mkdel = function ss$mkdel(object, method) {
  if (!object) {
    return method;
  }
  return ss._mkdel([object, method]);
};

ss.delegateCombine = function ss$delegateCombine(delegate1, delegate2) {
  if (!delegate1) {
    if (!delegate2._targets) {
      return ss.mkdel(null, delegate2);
    }
    return delegate2;
  }
  if (!delegate2) {
    if (!delegate1._targets) {
      return ss.mkdel(null, delegate1);
    }
    return delegate1;
  }

  var targets1 = delegate1._targets ? delegate1._targets : [null, delegate1];
  var targets2 = delegate2._targets ? delegate2._targets : [null, delegate2];

  return ss._mkdel(targets1.concat(targets2));
};

ss.delegateRemove = function ss$delegateRemove(delegate1, delegate2) {
  if (!delegate1 || (delegate1 === delegate2)) {
    return null;
  }
  if (!delegate2) {
    return delegate1;
  }

  var targets = delegate1._targets;
  var object = null;
  var method;
  if (delegate2._targets) {
    object = delegate2._targets[0];
    method = delegate2._targets[1];
  }
  else {
    method = delegate2;
  }

  for (var i = 0; i < targets.length; i += 2) {
    if ((targets[i] === object) && (targets[i + 1] === method)) {
      if (targets.length == 2) {
        return null;
      }
      var t = ss.arrayClone(targets);
      t.splice(i, 2);
      return ss._mkdel(t);
    }
  }

  return delegate1;
};

ss.delegateEquals = function ss$delegateEquals(a, b) {
    if (a === b)
        return true;
    if (!a._targets && !b._targets)
        return false;
    var ta = a._targets || [null, a], tb = b._targets || [null, b];
    if (ta.length != tb.length)
        return false;
    for (var i = 0; i < ta.length; i++) {
        if (ta[i] !== tb[i])
            return false;
    }
    return true;
};


///////////////////////////////////////////////////////////////////////////////
// RegExp Extensions


///////////////////////////////////////////////////////////////////////////////
// Debug Extensions


///////////////////////////////////////////////////////////////////////////////
// Enum

var ss_Enum = function Enum$() {
};
ss_Enum.__typeName = 'ss.Enum';
ss.Enum = ss_Enum;
ss.initClass(ss_Enum, ss, {});


ss_Enum.getValues = function Enum$getValues(enumType) {
  var parts = [];
  var values = enumType.prototype;
  for (var i in values) {
    if (values.hasOwnProperty(i))
      parts.push(values[i]);
  }
  return parts;
};

///////////////////////////////////////////////////////////////////////////////
// CultureInfo


///////////////////////////////////////////////////////////////////////////////
// IEnumerator

var ss_IEnumerator = function IEnumerator$() { };

ss_IEnumerator.__typeName = 'ss.IEnumerator';
ss.IEnumerator = ss_IEnumerator;
ss.initInterface(ss_IEnumerator, ss, { current: null, moveNext: null, reset: null }, [ss_IDisposable]);

///////////////////////////////////////////////////////////////////////////////
// IEnumerable

var ss_IEnumerable = function IEnumerable$() { };

ss_IEnumerable.__typeName = 'ss.IEnumerable';
ss.IEnumerable = ss_IEnumerable;
ss.initInterface(ss_IEnumerable, ss, { getEnumerator: null });

ss.getEnumerator = function ss$getEnumerator(obj) {
  return obj.getEnumerator ? obj.getEnumerator() : new ss_ArrayEnumerator(obj);
};

///////////////////////////////////////////////////////////////////////////////
// ICollection

var ss_ICollection = function ICollection$() { };

ss_ICollection.__typeName = 'ss.ICollection';
ss.ICollection = ss_ICollection;
ss.initInterface(ss_ICollection, ss, { get_count: null, add: null, clear: null, contains: null, remove: null });

ss.count = function ss$count(obj) {
  return obj.get_count ? obj.get_count() : obj.length;
};

ss.add = function ss$add(obj, item) {
  if (obj.add)
    obj.add(item);
  else if (ss.isArray(obj))
    obj.push(item);
  else
    throw new ss_NotSupportedException();
};

ss.clear = function ss$clear(obj) {
  if (obj.clear)
    obj.clear();
  else if (ss.isArray(obj))
    obj.length = 0;
  else
    throw new ss_NotSupportedException();
};

ss.remove = function ss$remove(obj, item) {
  if (obj.remove)
    return obj.remove(item);
  else if (ss.isArray(obj)) {
    var index = ss.indexOf(obj, item);
    if (index >= 0) {
      obj.splice(index, 1);
      return true;
    }
    return false;
  }
  else
    throw new ss_NotSupportedException();
};

ss.contains = function ss$contains(obj, item) {
  if (obj.contains)
    return obj.contains(item);
  else
    return ss.indexOf(obj, item) >= 0;
};

///////////////////////////////////////////////////////////////////////////////
// TimeSpan


///////////////////////////////////////////////////////////////////////////////
// IEqualityComparer

var ss_IEqualityComparer = function IEqualityComparer$() { };

ss_IEqualityComparer.__typeName = 'ss.IEqualityComparer';
ss.IEqualityComparer = ss_IEqualityComparer;
ss.initInterface(ss_IEqualityComparer, ss, { areEqual: null, getObjectHashCode: null });

///////////////////////////////////////////////////////////////////////////////
// IComparer

var ss_IComparer = function IComparer$() { };

ss_IComparer.__typeName = 'ss.IComparer';
ss.IComparer = ss_IComparer;
ss.initInterface(ss_IComparer, ss, { compare: null });

///////////////////////////////////////////////////////////////////////////////
// Nullable

ss.unbox = function ss$unbox(instance) {
  if (!ss.isValue(instance))
    throw new ss_InvalidOperationException('Nullable object must have a value.');
  return instance;
};

var ss_Nullable$1 = function Nullable$1$(T) {
  var $type = function() {
  };
  $type.isInstanceOfType = function(instance) {
    return ss.isInstanceOfType(instance, T);
  };
  ss.registerGenericClassInstance($type, ss_Nullable$1, [T], {}, function() { return null; }, function() { return []; });
  return $type;
};

ss_Nullable$1.__typeName = 'ss.Nullable$1';
ss.Nullable$1 = ss_Nullable$1;
ss.initGenericClass(ss_Nullable$1, ss, 1);

ss_Nullable$1.eq = function Nullable$eq(a, b) {
  return !ss.isValue(a) ? !ss.isValue(b) : (a === b);
};

ss_Nullable$1.ne = function Nullable$eq(a, b) {
  return !ss.isValue(a) ? ss.isValue(b) : (a !== b);
};

ss_Nullable$1.le = function Nullable$le(a, b) {
  return ss.isValue(a) && ss.isValue(b) && a <= b;
};

ss_Nullable$1.ge = function Nullable$ge(a, b) {
  return ss.isValue(a) && ss.isValue(b) && a >= b;
};

ss_Nullable$1.lt = function Nullable$lt(a, b) {
  return ss.isValue(a) && ss.isValue(b) && a < b;
};

ss_Nullable$1.gt = function Nullable$gt(a, b) {
  return ss.isValue(a) && ss.isValue(b) && a > b;
};

ss_Nullable$1.sub = function Nullable$sub(a, b) {
  return ss.isValue(a) && ss.isValue(b) ? a - b : null;
};

ss_Nullable$1.add = function Nullable$add(a, b) {
  return ss.isValue(a) && ss.isValue(b) ? a + b : null;
};

ss_Nullable$1.mod = function Nullable$mod(a, b) {
  return ss.isValue(a) && ss.isValue(b) ? a % b : null;
};

ss_Nullable$1.div = function Nullable$divf(a, b) {
  return ss.isValue(a) && ss.isValue(b) ? a / b : null;
};

ss_Nullable$1.mul = function Nullable$mul(a, b) {
  return ss.isValue(a) && ss.isValue(b) ? a * b : null;
};

ss_Nullable$1.band = function Nullable$band(a, b) {
  return ss.isValue(a) && ss.isValue(b) ? a & b : null;
};

ss_Nullable$1.bor = function Nullable$bor(a, b) {
  return ss.isValue(a) && ss.isValue(b) ? a | b : null;
};

ss_Nullable$1.xor = function Nullable$xor(a, b) {
  return ss.isValue(a) && ss.isValue(b) ? a ^ b : null;
};

ss_Nullable$1.shl = function Nullable$shl(a, b) {
  return ss.isValue(a) && ss.isValue(b) ? a << b : null;
};

ss_Nullable$1.srs = function Nullable$srs(a, b) {
  return ss.isValue(a) && ss.isValue(b) ? a >> b : null;
};

ss_Nullable$1.sru = function Nullable$sru(a, b) {
  return ss.isValue(a) && ss.isValue(b) ? a >>> b : null;
};

ss_Nullable$1.and = function Nullable$and(a, b) {
  if (a === true && b === true)
    return true;
  else if (a === false || b === false)
    return false;
  else
    return null;
};

ss_Nullable$1.or = function Nullable$or(a, b) {
  if (a === true || b === true)
    return true;
  else if (a === false && b === false)
    return false;
  else
    return null;
};

ss_Nullable$1.not = function Nullable$not(a) {
  return ss.isValue(a) ? !a : null;
};

ss_Nullable$1.neg = function Nullable$neg(a) {
  return ss.isValue(a) ? -a : null;
};

ss_Nullable$1.pos = function Nullable$pos(a) {
  return ss.isValue(a) ? +a : null;
};

ss_Nullable$1.cpl = function Nullable$cpl(a) {
  return ss.isValue(a) ? ~a : null;
};

ss_Nullable$1.lift = function Nullable$lift() {
  for (var i = 0; i < arguments.length; i++) {
    if (!ss.isValue(arguments[i]))
      return null;
  }
  return arguments[0].apply(null, Array.prototype.slice.call(arguments, 1));
};

///////////////////////////////////////////////////////////////////////////////
// IList

var ss_IList = function IList$() { };

ss_IList.__typeName = 'ss.IList';
ss.IList = ss_IList;
ss.initInterface(ss_IList, ss, { get_item: null, set_item: null, indexOf: null, insert: null, removeAt: null }, [ss_ICollection, ss_IEnumerable]);

ss.getItem = function ss$getItem(obj, index) {
  return obj.get_item ? obj.get_item(index) : obj[index];
}

ss.setItem = function ss$setItem(obj, index, value) {
  obj.set_item ? obj.set_item(index, value) : (obj[index] = value);
}

ss.indexOf = function ss$indexOf(obj, item) {
  var itemType = typeof(item);
  if ((!item || typeof(item.equals) !== 'function') && typeof(obj.indexOf) === 'function') {
    // use indexOf if item is null or if item does not implement an equals function
    return obj.indexOf(item);
  } else if (ss.isArrayOrTypedArray(obj)) {
    for (var i = 0; i < obj.length; i++) {
      if (ss.staticEquals(obj[i], item)) {
        return i;
      }
    }
    return -1;
  }
  else
    return obj.indexOf(item);
};

ss.insert = function ss$insert(obj, index, item) {
  if (obj.insert)
    obj.insert(index, item);
  else if (ss.isArray(obj))
    obj.splice(index, 0, item);
  else
    throw new ss_NotSupportedException();
};

ss.removeAt = function ss$removeAt(obj, index) {
  if (obj.removeAt)
    obj.removeAt(index);
  else if (ss.isArray(obj))
    obj.splice(index, 1);
  else
    throw new ss_NotSupportedException();
};

///////////////////////////////////////////////////////////////////////////////
// IDictionary

var ss_IDictionary = function IDictionary$() { };

ss_IDictionary.__typeName = 'ss.IDictionary';
ss.IDictionary = ss_IDictionary;
ss.initInterface(ss_IDictionary, ss, { get_item: null, set_item: null, get_keys: null, get_values: null, containsKey: null, add: null, remove: null, tryGetValue: null }, [ss_IEnumerable]);

///////////////////////////////////////////////////////////////////////////////
// Int32

var ss_Int32 = function Int32$() { };

ss_Int32.__typeName = 'ss.Int32';
ss.Int32 = ss_Int32;
ss.initClass(ss_Int32, ss, {}, Object, [ ss_IEquatable, ss_IComparable, ss_IFormattable ]);
ss_Int32.__class = false;

ss_Int32.isInstanceOfType = function Int32$isInstanceOfType(instance) {
  return typeof(instance) === 'number' && isFinite(instance) && Math.round(instance, 0) == instance;
};

ss_Int32.getDefaultValue = ss_Int32.createInstance = function Int32$getDefaultValue() {
  return 0;
};

ss_Int32.div = function Int32$div(a, b) {
  if (!ss.isValue(a) || !ss.isValue(b)) return null;
  if (b === 0) throw new ss_DivideByZeroException();
  return ss_Int32.trunc(a / b);
};

ss_Int32.trunc = function Int32$trunc(n) {
  return ss.isValue(n) ? (n > 0 ? Math.floor(n) : Math.ceil(n)) : null;
};

ss_Int32.tryParse = function Int32$tryParse(s, result, min, max) {
  result.$ = 0;
  if (!/^[+-]?[0-9]+$/.test(s))
    return 0;
  var n = parseInt(s, 10);
  if (n < min || n > max)
    return false;
  result.$ = n;
  return true;
};

///////////////////////////////////////////////////////////////////////////////
// MutableDateTime

var ss_JsDate = function JsDate$() { };

ss_JsDate.__typeName = 'ss.JsDate';
ss.JsDate = ss_JsDate;
ss.initClass(ss_JsDate, ss, {}, Object, [ ss_IEquatable, ss_IComparable ]);

ss_JsDate.createInstance = function JsDate$createInstance() {
    return new Date();
};

ss_JsDate.isInstanceOfType = function JsDate$isInstanceOfType(instance) {
   return instance instanceof Date;
};

///////////////////////////////////////////////////////////////////////////////
// ArrayEnumerator

var ss_ArrayEnumerator = function ArrayEnumerator$(array) {
  this._array = array;
  this._index = -1;
};
ss_ArrayEnumerator.__typeName = 'ss.ArrayEnumerator';
ss.ArrayEnumerator = ss_ArrayEnumerator;
ss.initClass(ss_ArrayEnumerator, ss, {
  moveNext: function ArrayEnumerator$moveNext() {
    this._index++;
    return (this._index < this._array.length);
  },
  reset: function ArrayEnumerator$reset() {
    this._index = -1;
  },
  current: function ArrayEnumerator$current() {
    if (this._index < 0 || this._index >= this._array.length)
      throw 'Invalid operation';
    return this._array[this._index];
  },
  dispose: function ArrayEnumerator$dispose() {
  }
}, null, [ss_IEnumerator, ss_IDisposable]);

///////////////////////////////////////////////////////////////////////////////
// ObjectEnumerator

var ss_ObjectEnumerator = function ObjectEnumerator$(o) {
  this._keys = Object.keys(o);
  this._index = -1;
  this._object = o;
};

ss_ObjectEnumerator.__typeName = 'ss.ObjectEnumerator';
ss.ObjectEnumerator = ss_ObjectEnumerator;
ss.initClass(ss_ObjectEnumerator, ss, {
  moveNext: function ObjectEnumerator$moveNext() {
    this._index++;
    return (this._index < this._keys.length);
  },
  reset: function ObjectEnumerator$reset() {
    this._index = -1;
  },
  current: function ObjectEnumerator$current() {
    if (this._index < 0 || this._index >= this._keys.length)
      throw new ss_InvalidOperationException('Invalid operation');
    var k = this._keys[this._index];
    return { key: k, value: this._object[k] };
  },
  dispose: function ObjectEnumerator$dispose() {
  }
}, null, [ss_IEnumerator, ss_IDisposable]);

///////////////////////////////////////////////////////////////////////////////
// EqualityComparer

var ss_EqualityComparer = function EqualityComparer$() {
};
ss_EqualityComparer.__typeName = 'ss.EqualityComparer';
ss.EqualityComparer = ss_EqualityComparer;
ss.initClass(ss_EqualityComparer, ss, {
  areEqual: function EqualityComparer$areEqual(x, y) {
    return ss.staticEquals(x, y);
  },
  getObjectHashCode: function EqualityComparer$getObjectHashCode(obj) {
    return ss.isValue(obj) ? ss.getHashCode(obj) : 0;
  }
}, null, [ss_IEqualityComparer]);
ss_EqualityComparer.def = new ss_EqualityComparer();


///////////////////////////////////////////////////////////////////////////////
// Comparer

var ss_Comparer = function Comparer$(f) {
  this.f = f;
};

ss_Comparer.__typeName = 'ss.Comparer';
ss.Comparer = ss_Comparer;
ss.initClass(ss_Comparer, ss, {
  compare: function Comparer$compare(x, y) {
    return this.f(x, y);
  }
}, null, [ss_IComparer]);
ss_Comparer.def = new ss_Comparer(function Comparer$defaultCompare(a, b) {
  if (!ss.isValue(a))
    return !ss.isValue(b)? 0 : -1;
  else if (!ss.isValue(b))
    return 1;
  else
    return ss.compare(a, b);
});


//#include "Dictionary.js"

///////////////////////////////////////////////////////////////////////////////
// IDisposable

var ss_IDisposable = function IDisposable$() { };
ss_IDisposable.__typeName = 'ss.IDisposable';
ss.IDisposable = ss_IDisposable;
ss.initInterface(ss_IDisposable, ss, { dispose: null });

///////////////////////////////////////////////////////////////////////////////
// StringBuilder

var ss_StringBuilder = function StringBuilder$(s) {
  this._parts = (ss.isValue(s) && s != '') ? [s] : [];
  this.length = ss.isValue(s) ? s.length : 0;
}

ss_StringBuilder.__typeName = 'ss.StringBuilder';
ss.StringBuilder = ss_StringBuilder;
ss.initClass(ss_StringBuilder, ss, {
  append: function StringBuilder$append(o) {
    if (ss.isValue(o)) {
      var s = o.toString();
      ss.add(this._parts, s);
      this.length += s.length;
    }
    return this;
  },

  appendChar: function StringBuilder$appendChar(c) {
    return this.append(String.fromCharCode(c));
  },

  appendLine: function StringBuilder$appendLine(s) {
    this.append(s);
    this.append('\r\n');
    return this;
  },

  appendLineChar: function StringBuilder$appendLineChar(c) {
    return this.appendLine(String.fromCharCode(c));
  },

  clear: function StringBuilder$clear() {
    this._parts = [];
    this.length = 0;
  },

  toString: function StringBuilder$toString() {
    return this._parts.join('');
  }
});

///////////////////////////////////////////////////////////////////////////////
// Random


///////////////////////////////////////////////////////////////////////////////
// EventArgs

var ss_EventArgs = function EventArgs$() {
}
ss_EventArgs.__typeName = 'ss.EventArgs';
ss.EventArgs = ss_EventArgs;
ss.initClass(ss_EventArgs, ss, {});

ss_EventArgs.Empty = new ss_EventArgs();

///////////////////////////////////////////////////////////////////////////////
// Exception

var ss_Exception = function Exception$(message, innerException) {
  this._message = message || 'An error occurred.';
  this._innerException = innerException || null;
  this._error = new Error();
}

ss_Exception.__typeName = 'ss.Exception';
ss.Exception = ss_Exception;
ss.initClass(ss_Exception, ss, {
  get_message: function Exception$get_message() {
    return this._message;
  },
  get_innerException: function Exception$get_innerException() {
    return this._innerException;
  },
  get_stack: function Exception$get_stack() {
    return this._error.stack;
  },
  toString: function Exception$toString() {
    var message = this._message;
    var exception = this;
    if (ss.isNullOrEmptyString(message)) {
      if (ss.isValue(ss.getInstanceType(exception)) && ss.isValue(ss.getTypeFullName(ss.getInstanceType(exception)))) {
        message = ss.getTypeFullName(ss.getInstanceType(exception));
      }
      else {
        message = '[object Exception]';
      }
    }
    return message;
  }
});

ss_Exception.wrap = function Exception$wrap(o) {
  if (ss.isInstanceOfType(o, ss_Exception)) {
    return o;
  }
  else if (o instanceof TypeError) {
    // TypeError can either be 'cannot read property blah of null/undefined' (proper NullReferenceException), or it can be eg. accessing a non-existent method of an object.
    // As long as all code is compiled, they should with a very high probability indicate the use of a null reference.
    return new ss_NullReferenceException(o.message, new ss_JsErrorException(o));
  }
  else if (o instanceof RangeError) {
    return new ss_ArgumentOutOfRangeException(null, o.message, new ss_JsErrorException(o));
  }
  else if (o instanceof Error) {
    return new ss_JsErrorException(o);
  }
  else {
    return new ss_Exception(o.toString());
  }
};

////////////////////////////////////////////////////////////////////////////////
// NotImplementedException

var ss_NotImplementedException = function NotImplementedException$(message, innerException) {
  ss_Exception.call(this, message || 'The method or operation is not implemented.', innerException);
};
ss_NotImplementedException.__typeName = 'ss.NotImplementedException';
ss.NotImplementedException = ss_NotImplementedException;
ss.initClass(ss_NotImplementedException, ss, {}, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// NotSupportedException

var ss_NotSupportedException = function NotSupportedException$(message, innerException) {
  ss_Exception.call(this, message || 'Specified method is not supported.', innerException);
};
ss_NotSupportedException.__typeName = 'ss.NotSupportedException';
ss.NotSupportedException = ss_NotSupportedException;
ss.initClass(ss_NotSupportedException, ss, {}, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// AggregateException

var ss_AggregateException = function AggregateException$(message, innerExceptions) {
  this.innerExceptions = ss.isValue(innerExceptions) ? ss.arrayFromEnumerable(innerExceptions) : [];
  ss_Exception.call(this, message || 'One or more errors occurred.', this.innerExceptions.length ? this.innerExceptions[0] : null);
};

ss_AggregateException.__typeName = 'ss.AggregateException';
ss.AggregateException = ss_AggregateException;
ss.initClass(ss_AggregateException, ss, {
  flatten: function  AggregateException$flatten() {
    var inner = [];
    for (var i = 0; i < this.innerExceptions.length; i++) {
      var e = this.innerExceptions[i];
      if (ss.isInstanceOfType(e, ss_AggregateException)) {
        inner.push.apply(inner, e.flatten().innerExceptions);
      }
      else {
        inner.push(e);
      }
    }
    return new ss_AggregateException(this._message, inner);
  }
}, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// PromiseException

var ss_PromiseException = function PromiseException(args, message, innerException) {
  ss_Exception.call(this, message || (args.length && args[0] ? args[0].toString() : 'An error occurred'), innerException);
  this.arguments = ss.arrayClone(args);
};

ss_PromiseException.__typeName = 'ss.PromiseException';
ss.PromiseException = ss_PromiseException;
ss.initClass(ss_PromiseException, ss, {
  get_arguments: function PromiseException$get_arguments() {
    return this._arguments;
  }
}, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// JsErrorException

var ss_JsErrorException = function JsErrorException$(error, message, innerException) {
  ss_Exception.call(this, message || error.message, innerException);
  this.error = error;
};
ss_JsErrorException.__typeName = 'ss.JsErrorException';
ss.JsErrorException = ss_JsErrorException;
ss.initClass(ss_JsErrorException, ss, {
  get_stack: function Exception$get_stack() {
    return this.error.stack;
  }
}, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// ArgumentException

var ss_ArgumentException = function ArgumentException$(message, paramName, innerException) {
  ss_Exception.call(this, message || 'Value does not fall within the expected range.', innerException);
  this.paramName = paramName || null;
};

ss_ArgumentException.__typeName = 'ss.ArgumentException';
ss.ArgumentException = ss_ArgumentException;
ss.initClass(ss_ArgumentException, ss, {}, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// ArgumentNullException

var ss_ArgumentNullException = function ArgumentNullException$(paramName, message, innerException) {
  if (!message) {
    message = 'Value cannot be null.';
    if (paramName)
      message += '\nParameter name: ' + paramName;
  }

  ss_ArgumentException.call(this, message, paramName, innerException);
};

ss_ArgumentNullException.__typeName = 'ss.ArgumentNullException';
ss.ArgumentNullException = ss_ArgumentNullException;
ss.initClass(ss_ArgumentNullException, ss, {}, ss_ArgumentException);

////////////////////////////////////////////////////////////////////////////////
// ArgumentNullException

var ss_ArgumentOutOfRangeException = function ArgumentOutOfRangeException$(paramName, message, innerException, actualValue) {
  if (!message) {
    message = 'Value is out of range.';
    if (paramName)
      message += '\nParameter name: ' + paramName;
  }

  ss_ArgumentException.call(this, message, paramName, innerException);
  this.actualValue = actualValue || null;
};

ss_ArgumentOutOfRangeException.__typeName = 'ss.ArgumentOutOfRangeException';
ss.ArgumentOutOfRangeException = ss_ArgumentOutOfRangeException;
ss.initClass(ss_ArgumentOutOfRangeException, ss, {}, ss_ArgumentException);

////////////////////////////////////////////////////////////////////////////////
// FormatException

var ss_FormatException = function FormatException$(message, innerException) {
  ss_Exception.call(this, message || 'Invalid format.', innerException);
};
ss_FormatException.__typeName = 'ss.FormatException';
ss.FormatException = ss_FormatException;
ss.initClass(ss_FormatException, ss, {}, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// DivideByZeroException

var ss_DivideByZeroException = function DivideByZeroException$(message, innerException) {
  ss_Exception.call(this, message || 'Division by 0.', innerException);
};
ss_DivideByZeroException.__typeName = 'ss.DivideByZeroException';
ss.DivideByZeroException = ss_DivideByZeroException;
ss.initClass(ss_DivideByZeroException, ss, {}, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// InvalidCastException

var ss_InvalidCastException = function InvalidCastException$(message, innerException) {
  ss_Exception.call(this, message || 'The cast is not valid.', innerException);
};
ss_InvalidCastException.__typeName = 'ss.InvalidCastException';
ss.InvalidCastException = ss_InvalidCastException;
ss.initClass(ss_InvalidCastException, ss, {}, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// InvalidOperationException

var ss_InvalidOperationException = function InvalidOperationException$(message, innerException) {
  ss_Exception.call(this, message || 'Operation is not valid due to the current state of the object.', innerException);
};
ss_InvalidOperationException.__typeName = 'ss.InvalidOperationException';
ss.InvalidOperationException = ss_InvalidOperationException;
ss.initClass(ss_InvalidOperationException, ss, {}, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// NullReferenceException

var ss_NullReferenceException = function NullReferenceException$(message, innerException) {
  ss_Exception.call(this, message || 'Object is null.', innerException);
};
ss_NullReferenceException.__typeName = 'ss.NullReferenceException';
ss.NullReferenceException = ss_NullReferenceException;
ss.initClass(ss_NullReferenceException, ss, {}, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// KeyNotFoundException

var ss_KeyNotFoundException = function KeyNotFoundException$(message, innerException) {
  ss_Exception.call(this, message || 'Key not found.', innerException);
};
ss_KeyNotFoundException.__typeName = 'ss.KeyNotFoundException';
ss.KeyNotFoundException = ss_KeyNotFoundException;
ss.initClass(ss_KeyNotFoundException, ss, {}, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// InvalidOperationException

var ss_AmbiguousMatchException = function AmbiguousMatchException$(message, innerException) {
  ss_Exception.call(this, message || 'Ambiguous match.', innerException);
};
ss_AmbiguousMatchException.__typeName = 'ss.AmbiguousMatchException';
ss.AmbiguousMatchException = ss_AmbiguousMatchException;
ss.initClass(ss_AmbiguousMatchException, ss, {}, ss_Exception);

///////////////////////////////////////////////////////////////////////////////
// IteratorBlockEnumerable

var ss_IteratorBlockEnumerable = function IteratorBlockEnumerable$(getEnumerator, $this) {
  this._getEnumerator = getEnumerator;
  this._this = $this;
};

ss_IteratorBlockEnumerable.__typeName = 'ss.IteratorBlockEnumerable';
ss.IteratorBlockEnumerable = ss_IteratorBlockEnumerable;
ss.initClass(ss_IteratorBlockEnumerable, ss, {
  getEnumerator: function IteratorBlockEnumerable$getEnumerator() {
    return this._getEnumerator.call(this._this);
  }
}, null, [ss_IEnumerable]);

///////////////////////////////////////////////////////////////////////////////
// IteratorBlockEnumerator

var ss_IteratorBlockEnumerator = function IteratorBlockEnumerator$(moveNext, getCurrent, dispose, $this) {
  this._moveNext = moveNext;
  this._getCurrent = getCurrent;
  this._dispose = dispose;
  this._this = $this;
};

ss_IteratorBlockEnumerator.__typeName = 'ss.IteratorBlockEnumerator';
ss.IteratorBlockEnumerator = ss_IteratorBlockEnumerator;
ss.initClass(ss_IteratorBlockEnumerator, ss, {
  moveNext: function IteratorBlockEnumerator$moveNext() {
    try {
      return this._moveNext.call(this._this);
    }
    catch (ex) {
      if (this._dispose)
        this._dispose.call(this._this);
      throw ex;
    }
  },
  current: function IteratorBlockEnumerator$current() {
    return this._getCurrent.call(this._this);
  },
  reset: function IteratorBlockEnumerator$reset() {
    throw new ss_NotSupportedException('Reset is not supported.');
  },
  dispose: function IteratorBlockEnumerator$dispose() {
    if (this._dispose)
      this._dispose.call(this._this);
  }
}, null, [ss_IEnumerator, ss_IDisposable]);


///////////////////////////////////////////////////////////////////////////////
// Lazy

var ss_Lazy = function Lazy$(valueFactory) {
  this._valueFactory = valueFactory;
  this.isValueCreated = false;
};
ss_Lazy.__typeName = 'ss.Lazy';
ss.Lazy = ss_Lazy;
ss.initClass(ss_Lazy, ss, {
  value: function Lazy$value() {
    if (!this.isValueCreated) {
      this._value = this._valueFactory();
      delete this._valueFactory;
      this.isValueCreated = true;
    }
    return this._value;
  }
});


///////////////////////////////////////////////////////////////////////////////
// Task


////////////////////////////////////////////////////////////////////////////////
// TaskStatus


///////////////////////////////////////////////////////////////////////////////
// TaskCompletionSource


///////////////////////////////////////////////////////////////////////////////
// CancelEventArgs


///////////////////////////////////////////////////////////////////////////////
// Guid


////////////////////////////////////////////////////////////////////////////////
// IE8 shims
////////////////////////////////////////////////////////////////////////////////

if (typeof(global.HTMLElement) === 'undefined') {
  global.HTMLElement = Element;
}

if (typeof(global.MessageEvent) === 'undefined') {
  global.MessageEvent = Event;
}

// polyfill for IE8 not having Date.now.
Date.now = Date.now || function() { return +new Date; };

////////////////////////////////////////////////////////////////////////////////
// Global Registration
////////////////////////////////////////////////////////////////////////////////

global.ss = ss;
})(global);
  var ss = global.ss;
  global.tableauSoftware = global.tableauSoftware || {};

/*! BEGIN CoreSlim */


(function() {
	'dont use strict';
	var $asm = {};
	global.tab = global.tab || {};
	ss.initAssembly($asm, 'tabcoreslim');
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.CoreSlim.CookieHelper
	var $tab_CookieHelper = function() {
	};
	$tab_CookieHelper.__typeName = 'tab.CookieHelper';
	$tab_CookieHelper.getCookie = function CookieHelper$GetCookie() {
		return document.cookie;
	};
	$tab_CookieHelper.setCookie = function CookieHelper$SetCookie(value) {
		document.cookie = value;
	};
	global.tab.CookieHelper = $tab_CookieHelper;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.CoreSlim.EscapingUtil
	var $tab_EscapingUtil = function() {
	};
	$tab_EscapingUtil.__typeName = 'tab.EscapingUtil';
	$tab_EscapingUtil.escapeHtml = function EscapingUtil$EscapeHtml(html) {
		var escaped = ss.coalesce(html, '');
		escaped = escaped.replace(new RegExp('&', 'g'), '&amp;');
		escaped = escaped.replace(new RegExp('<', 'g'), '&lt;');
		escaped = escaped.replace(new RegExp('>', 'g'), '&gt;');
		escaped = escaped.replace(new RegExp('"', 'g'), '&quot;');
		escaped = escaped.replace(new RegExp("'", 'g'), '&#39;');
		escaped = escaped.replace(new RegExp('/', 'g'), '&#47;');
		return escaped;
	};
	global.tab.EscapingUtil = $tab_EscapingUtil;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.ScriptEx
	var $tab_ScriptEx = function() {
	};
	$tab_ScriptEx.__typeName = 'tab.ScriptEx';
	global.tab.ScriptEx = $tab_ScriptEx;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.CoreSlim.WindowHelper
	var $tab_WindowHelper = function(window) {
		this.$window = null;
		this.$window = window;
	};
	$tab_WindowHelper.__typeName = 'tab.WindowHelper';
	$tab_WindowHelper.get_windowSelf = function WindowHelper$get_WindowSelf() {
		return window.self;
	};
	$tab_WindowHelper.get_selection = function WindowHelper$get_Selection() {
		if (typeof(window['getSelection']) === 'function') {
			return window.getSelection();
		}
		else if (typeof(document['getSelection']) === 'function') {
			return document.getSelection();
		}
		return null;
	};
	$tab_WindowHelper.close = function WindowHelper$Close(window) {
		window.close();
	};
	$tab_WindowHelper.getOpener = function WindowHelper$GetOpener(window) {
		return window.opener;
	};
	$tab_WindowHelper.getLocation = function WindowHelper$GetLocation(window) {
		return window.location;
	};
	$tab_WindowHelper.getPathAndSearch = function WindowHelper$GetPathAndSearch(window) {
		return window.location.pathname + window.location.search;
	};
	$tab_WindowHelper.setLocationHref = function WindowHelper$SetLocationHref(window, href) {
		window.location.href = href;
	};
	$tab_WindowHelper.locationReplace = function WindowHelper$LocationReplace(window, url) {
		window.location.replace(url);
	};
	$tab_WindowHelper.open = function WindowHelper$Open(href, target, options) {
		return window.open(href, target, options);
	};
	$tab_WindowHelper.reload = function WindowHelper$Reload(w, forceGet) {
		w.location.reload(forceGet);
	};
	$tab_WindowHelper.requestAnimationFrame = function WindowHelper$RequestAnimationFrame(action) {
		return $tab_WindowHelper.$requestAnimationFrameFunc(action);
	};
	$tab_WindowHelper.cancelAnimationFrame = function WindowHelper$CancelAnimationFrame(animationId) {
		if (ss.isValue(animationId)) {
			$tab_WindowHelper.$cancelAnimationFrameFunc(animationId);
		}
	};
	$tab_WindowHelper.setTimeout = function WindowHelper$SetTimeout(callback, milliseconds) {
		return window.setTimeout(callback, milliseconds);
	};
	$tab_WindowHelper.setInterval = function WindowHelper$SetInterval(callback, milliseconds) {
		return window.setInterval(callback, milliseconds);
	};
	$tab_WindowHelper.addListener = function WindowHelper$AddListener(windowParam, eventName, messageListener) {
		if ('addEventListener' in windowParam) {
			windowParam.addEventListener(eventName, messageListener, false);
		}
		else {
			windowParam.attachEvent('on' + eventName, messageListener);
		}
	};
	$tab_WindowHelper.removeListener = function WindowHelper$RemoveListener(window, eventName, messageListener) {
		if ('removeEventListener' in window) {
			window.removeEventListener(eventName, messageListener, false);
		}
		else {
			window.detachEvent('on' + eventName, messageListener);
		}
	};
	$tab_WindowHelper.$setDefaultRequestAnimationFrameImpl = function WindowHelper$SetDefaultRequestAnimationFrameImpl() {
		var lastTime = 0;
		$tab_WindowHelper.$requestAnimationFrameFunc = function(callback) {
			var curTime = (new Date()).getTime();
			var timeToCall = Math.max(0, 16 - (curTime - lastTime));
			lastTime = curTime + timeToCall;
			var id = window.setTimeout(callback, timeToCall);
			return id;
		};
	};
	$tab_WindowHelper.clearSelection = function WindowHelper$ClearSelection() {
		var selection = $tab_WindowHelper.get_selection();
		if (ss.isValue(selection)) {
			if (typeof(selection['removeAllRanges']) === 'function') {
				selection.removeAllRanges();
			}
			else if (typeof(selection['empty']) === 'function') {
				selection['empty']();
			}
		}
	};
	global.tab.WindowHelper = $tab_WindowHelper;
	ss.initClass($tab_CookieHelper, $asm, {});
	ss.initClass($tab_EscapingUtil, $asm, {});
	ss.initClass($tab_ScriptEx, $asm, {});
	ss.initClass($tab_WindowHelper, $asm, {
		get_pageXOffset: function WindowHelper$get_PageXOffset() {
			return $tab_WindowHelper.$pageXOffsetFunc(this.$window);
		},
		get_pageYOffset: function WindowHelper$get_PageYOffset() {
			return $tab_WindowHelper.$pageYOffsetFunc(this.$window);
		},
		get_clientWidth: function WindowHelper$get_ClientWidth() {
			return $tab_WindowHelper.$clientWidthFunc(this.$window);
		},
		get_clientHeight: function WindowHelper$get_ClientHeight() {
			return $tab_WindowHelper.$clientHeightFunc(this.$window);
		},
		get_innerWidth: function WindowHelper$get_InnerWidth() {
			return $tab_WindowHelper.$innerWidthFunc(this.$window);
		},
		get_outerWidth: function WindowHelper$get_OuterWidth() {
			return $tab_WindowHelper.$outerWidthFunc(this.$window);
		},
		get_innerHeight: function WindowHelper$get_InnerHeight() {
			return $tab_WindowHelper.$innerHeightFunc(this.$window);
		},
		get_outerHeight: function WindowHelper$get_OuterHeight() {
			return $tab_WindowHelper.$outerHeightFunc(this.$window);
		},
		get_screenLeft: function WindowHelper$get_ScreenLeft() {
			return $tab_WindowHelper.$screenLeftFunc(this.$window);
		},
		get_screenTop: function WindowHelper$get_ScreenTop() {
			return $tab_WindowHelper.$screenTopFunc(this.$window);
		},
		isQuirksMode: function WindowHelper$IsQuirksMode() {
			return document.compatMode === 'BackCompat';
		}
	});
	(function() {
		$tab_WindowHelper.$innerWidthFunc = null;
		$tab_WindowHelper.$innerHeightFunc = null;
		$tab_WindowHelper.$clientWidthFunc = null;
		$tab_WindowHelper.$clientHeightFunc = null;
		$tab_WindowHelper.$pageXOffsetFunc = null;
		$tab_WindowHelper.$pageYOffsetFunc = null;
		$tab_WindowHelper.$screenLeftFunc = null;
		$tab_WindowHelper.$screenTopFunc = null;
		$tab_WindowHelper.$outerWidthFunc = null;
		$tab_WindowHelper.$outerHeightFunc = null;
		$tab_WindowHelper.$requestAnimationFrameFunc = null;
		$tab_WindowHelper.$cancelAnimationFrameFunc = null;
		if ('innerWidth' in window) {
			$tab_WindowHelper.$innerWidthFunc = function(w) {
				return w.innerWidth;
			};
		}
		else {
			$tab_WindowHelper.$innerWidthFunc = function(w1) {
				return w1.document.documentElement.offsetWidth;
			};
		}
		if ('outerWidth' in window) {
			$tab_WindowHelper.$outerWidthFunc = function(w2) {
				return w2.outerWidth;
			};
		}
		else {
			$tab_WindowHelper.$outerWidthFunc = $tab_WindowHelper.$innerWidthFunc;
		}
		if ('innerHeight' in window) {
			$tab_WindowHelper.$innerHeightFunc = function(w3) {
				return w3.innerHeight;
			};
		}
		else {
			$tab_WindowHelper.$innerHeightFunc = function(w4) {
				return w4.document.documentElement.offsetHeight;
			};
		}
		if ('outerHeight' in window) {
			$tab_WindowHelper.$outerHeightFunc = function(w5) {
				return w5.outerHeight;
			};
		}
		else {
			$tab_WindowHelper.$outerHeightFunc = $tab_WindowHelper.$innerHeightFunc;
		}
		if ('clientWidth' in window) {
			$tab_WindowHelper.$clientWidthFunc = function(w6) {
				return w6['clientWidth'];
			};
		}
		else {
			$tab_WindowHelper.$clientWidthFunc = function(w7) {
				return w7.document.documentElement.clientWidth;
			};
		}
		if ('clientHeight' in window) {
			$tab_WindowHelper.$clientHeightFunc = function(w8) {
				return w8['clientHeight'];
			};
		}
		else {
			$tab_WindowHelper.$clientHeightFunc = function(w9) {
				return w9.document.documentElement.clientHeight;
			};
		}
		if (ss.isValue(window.self.pageXOffset)) {
			$tab_WindowHelper.$pageXOffsetFunc = function(w10) {
				return w10.pageXOffset;
			};
		}
		else {
			$tab_WindowHelper.$pageXOffsetFunc = function(w11) {
				return w11.document.documentElement.scrollLeft;
			};
		}
		if (ss.isValue(window.self.pageYOffset)) {
			$tab_WindowHelper.$pageYOffsetFunc = function(w12) {
				return w12.pageYOffset;
			};
		}
		else {
			$tab_WindowHelper.$pageYOffsetFunc = function(w13) {
				return w13.document.documentElement.scrollTop;
			};
		}
		if ('screenLeft' in window) {
			$tab_WindowHelper.$screenLeftFunc = function(w14) {
				return ss.unbox(ss.cast(w14.screenLeft, ss.Int32));
			};
		}
		else {
			$tab_WindowHelper.$screenLeftFunc = function(w15) {
				return w15.screenX;
			};
		}
		if ('screenTop' in window) {
			$tab_WindowHelper.$screenTopFunc = function(w16) {
				return ss.unbox(ss.cast(w16.screenTop, ss.Int32));
			};
		}
		else {
			$tab_WindowHelper.$screenTopFunc = function(w17) {
				return w17.screenY;
			};
		}
		{
			var DefaultRequestName = 'requestAnimationFrame';
			var DefaultCancelName = 'cancelAnimationFrame';
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			var requestFuncName = null;
			var cancelFuncName = null;
			if (DefaultRequestName in window) {
				requestFuncName = DefaultRequestName;
			}
			if (DefaultCancelName in window) {
				cancelFuncName = DefaultCancelName;
			}
			for (var ii = 0; ii < vendors.length && (ss.isNullOrUndefined(requestFuncName) || ss.isNullOrUndefined(cancelFuncName)); ++ii) {
				var vendor = vendors[ii];
				var funcName = vendor + 'RequestAnimationFrame';
				if (ss.isNullOrUndefined(requestFuncName) && funcName in window) {
					requestFuncName = funcName;
				}
				if (ss.isNullOrUndefined(cancelFuncName)) {
					funcName = vendor + 'CancelAnimationFrame';
					if (funcName in window) {
						cancelFuncName = funcName;
					}
					funcName = vendor + 'CancelRequestAnimationFrame';
					if (funcName in window) {
						cancelFuncName = funcName;
					}
				}
			}
			if (ss.isValue(requestFuncName)) {
				$tab_WindowHelper.$requestAnimationFrameFunc = function(callback) {
					return window[requestFuncName](callback);
				};
			}
			else {
				$tab_WindowHelper.$setDefaultRequestAnimationFrameImpl();
			}
			if (ss.isValue(cancelFuncName)) {
				$tab_WindowHelper.$cancelAnimationFrameFunc = function(animationId) {
					window[cancelFuncName](animationId);
				};
			}
			else {
				$tab_WindowHelper.$cancelAnimationFrameFunc = function(id) {
					window.clearTimeout(id);
				};
			}
		}
	})();
})();

// END CoreSlim
/*! BEGIN ApiShared */

(function() {
	'dont use strict';
	var $asm = {};
	global.tab = global.tab || {};
	global.tableauSoftware = global.tableauSoftware || {};
	ss.initAssembly($asm, 'vqlapishared');
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.DeferredUtil
	var $tab_$DeferredUtil = function() {
	};
	$tab_$DeferredUtil.__typeName = 'tab.$DeferredUtil';
	$tab_$DeferredUtil.$coerceToTrustedPromise = function DeferredUtil$CoerceToTrustedPromise(promiseOrValue) {
		var promise;
		if (promiseOrValue instanceof tableauSoftware.Promise) {
			promise = ss.cast(promiseOrValue, $tab__PromiseImpl);
		}
		else {
			if (ss.isValue(promiseOrValue) && typeof(promiseOrValue['valueOf']) === 'function') {
				promiseOrValue = promiseOrValue['valueOf']();
			}
			if ($tab_$DeferredUtil.$isPromise(promiseOrValue)) {
				var deferred = new $tab__DeferredImpl();
				ss.cast(promiseOrValue, $tab__PromiseImpl).then(ss.mkdel(deferred, deferred.resolve), ss.mkdel(deferred, deferred.reject));
				promise = deferred.get_promise();
			}
			else {
				promise = $tab_$DeferredUtil.$resolved(promiseOrValue);
			}
		}
		return promise;
	};
	$tab_$DeferredUtil.$reject = function DeferredUtil$Reject(promiseOrValue) {
		return $tab_$DeferredUtil.$coerceToTrustedPromise(promiseOrValue).then(function(value) {
			return $tab_$DeferredUtil.$rejected(ss.cast(value, ss.Exception));
		}, null);
	};
	$tab_$DeferredUtil.$resolved = function DeferredUtil$Resolved(value) {
		var p = new $tab__PromiseImpl(function(callback, errback) {
			try {
				return $tab_$DeferredUtil.$coerceToTrustedPromise((ss.isValue(callback) ? callback(value) : value));
			}
			catch ($t1) {
				var e = ss.Exception.wrap($t1);
				return $tab_$DeferredUtil.$rejected(e);
			}
		});
		return p;
	};
	$tab_$DeferredUtil.$rejected = function DeferredUtil$Rejected(reason) {
		var p = new $tab__PromiseImpl(function(callback, errback) {
			try {
				return (ss.isValue(errback) ? $tab_$DeferredUtil.$coerceToTrustedPromise(errback(reason)) : $tab_$DeferredUtil.$rejected(reason));
			}
			catch ($t1) {
				var e = ss.Exception.wrap($t1);
				return $tab_$DeferredUtil.$rejected(e);
			}
		});
		return p;
	};
	$tab_$DeferredUtil.$isPromise = function DeferredUtil$IsPromise(promiseOrValue) {
		return ss.isValue(promiseOrValue) && typeof(promiseOrValue['then']) === 'function';
	};
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.DoNothingCrossDomainHandler
	var $tab_$DoNothingCrossDomainHandler = function() {
		this.$hostId = null;
		this.$1$StateReadyForQueryField = null;
	};
	$tab_$DoNothingCrossDomainHandler.__typeName = 'tab.$DoNothingCrossDomainHandler';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.ApiCommand
	var $tab__ApiCommand = function(name, commandId, hostId, parameters) {
		this.$1$NameField = null;
		this.$1$HostIdField = null;
		this.$1$CommandIdField = null;
		this.$1$ParametersField = null;
		this.set_name(name);
		this.set_commandId(commandId);
		this.set_hostId(hostId);
		this.set_parameters(parameters);
	};
	$tab__ApiCommand.__typeName = 'tab._ApiCommand';
	$tab__ApiCommand.generateNextCommandId = function ApiCommand$GenerateNextCommandId() {
		var commandId = 'cmd' + $tab__ApiCommand.$nextCommandId;
		$tab__ApiCommand.$nextCommandId++;
		return commandId;
	};
	$tab__ApiCommand.parse = function ApiCommand$Parse(serialized) {
		var name;
		var index = serialized.indexOf(String.fromCharCode(44));
		if (index < 0) {
			name = ss.cast(serialized, String);
			return new $tab__ApiCommand(name, null, null, null);
		}
		name = ss.cast(serialized.substr(0, index), String);
		var sourceId;
		var secondPart = serialized.substr(index + 1);
		index = secondPart.indexOf(String.fromCharCode(44));
		if (index < 0) {
			sourceId = secondPart;
			return new $tab__ApiCommand(name, sourceId, null, null);
		}
		sourceId = secondPart.substr(0, index);
		var hostId;
		var thirdPart = secondPart.substr(index + 1);
		index = thirdPart.indexOf(String.fromCharCode(44));
		if (index < 0) {
			hostId = thirdPart;
			return new $tab__ApiCommand(name, sourceId, hostId, null);
		}
		hostId = thirdPart.substr(0, index);
		var parameters = thirdPart.substr(index + 1);
		$tab__ApiCommand.lastResponseMessage = serialized;
		if (name === 'api.GetClientInfoCommand') {
			$tab__ApiCommand.lastClientInfoResponseMessage = serialized;
		}
		return new $tab__ApiCommand(name, sourceId, hostId, parameters);
	};
	global.tab._ApiCommand = $tab__ApiCommand;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.ApiObjectRegistry
	var $tab__ApiObjectRegistry = function() {
	};
	$tab__ApiObjectRegistry.__typeName = 'tab._ApiObjectRegistry';
	$tab__ApiObjectRegistry.registerApiMessageRouter = function ApiObjectRegistry$RegisterApiMessageRouter(objectCreationFunc) {
		return $tab__ApiObjectRegistry.$registerType(Object).call(null, objectCreationFunc);
	};
	$tab__ApiObjectRegistry.getApiMessageRouter = function ApiObjectRegistry$GetApiMessageRouter() {
		return $tab__ApiObjectRegistry.$getSingleton(Object).call(null);
	};
	$tab__ApiObjectRegistry.disposeApiMessageRouter = function ApiObjectRegistry$DisposeApiMessageRouter() {
		$tab__ApiObjectRegistry.$clearSingletonInstance(Object).call(null);
	};
	$tab__ApiObjectRegistry.$registerType = function(T) {
		return function ApiObjectRegistry$RegisterType(objectCreationFunc) {
			var creationRegistry = window._ApiObjectRegistryGlobalState.creationRegistry;
			var interfaceTypeName = ss.getTypeFullName(T);
			var previousType = creationRegistry[interfaceTypeName];
			creationRegistry[interfaceTypeName] = objectCreationFunc;
			return previousType;
		};
	};
	$tab__ApiObjectRegistry.$createType = function(T) {
		return function ApiObjectRegistry$CreateType() {
			var interfaceTypeName = ss.getTypeFullName(T);
			var creationRegistry = window._ApiObjectRegistryGlobalState.creationRegistry;
			var creationFunc = creationRegistry[interfaceTypeName];
			if (ss.isNullOrUndefined(creationFunc)) {
				throw $tab__TableauException.createInternalError("No creation function has been registered for interface type '" + interfaceTypeName + "'.");
			}
			var instance = creationFunc();
			return instance;
		};
	};
	$tab__ApiObjectRegistry.$getSingleton = function(T) {
		return function ApiObjectRegistry$GetSingleton() {
			var singletonInstanceRegistry = window._ApiObjectRegistryGlobalState.singletonInstanceRegistry;
			var interfaceTypeName = ss.getTypeFullName(T);
			var instance = ss.cast(singletonInstanceRegistry[interfaceTypeName], T);
			if (ss.isNullOrUndefined(instance)) {
				instance = $tab__ApiObjectRegistry.$createType(T).call(null);
				singletonInstanceRegistry[interfaceTypeName] = instance;
			}
			return instance;
		};
	};
	$tab__ApiObjectRegistry.$clearSingletonInstance = function(T) {
		return function ApiObjectRegistry$ClearSingletonInstance() {
			var singletonInstanceRegistry = window._ApiObjectRegistryGlobalState.singletonInstanceRegistry;
			var interfaceTypeName = ss.getTypeFullName(T);
			var instance = ss.cast(singletonInstanceRegistry[interfaceTypeName], T);
			delete singletonInstanceRegistry[interfaceTypeName];
			return instance;
		};
	};
	global.tab._ApiObjectRegistry = $tab__ApiObjectRegistry;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.ApiServerNotification
	var $tab__ApiServerNotification = function(workbookName, worksheetName, data) {
		this.$workbookName = null;
		this.$worksheetName = null;
		this.$data = null;
		this.$workbookName = workbookName;
		this.$worksheetName = worksheetName;
		this.$data = data;
	};
	$tab__ApiServerNotification.__typeName = 'tab._ApiServerNotification';
	$tab__ApiServerNotification.deserialize = function ApiServerNotification$Deserialize(json) {
		var param = JSON.parse(json);
		var workbookName = ss.cast(param['api.workbookName'], String);
		var worksheetName = ss.cast(param['api.worksheetName'], String);
		var data = param['api.commandData'];
		return new $tab__ApiServerNotification(workbookName, worksheetName, data);
	};
	global.tab._ApiServerNotification = $tab__ApiServerNotification;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.ApiServerResultParser
	var $tab__ApiServerResultParser = function(serverResult) {
		this.$commandResult = null;
		this.$commandData = null;
		var param = JSON.parse(serverResult);
		this.$commandResult = ss.cast(param['api.commandResult'], String);
		this.$commandData = param['api.commandData'];
	};
	$tab__ApiServerResultParser.__typeName = 'tab._ApiServerResultParser';
	global.tab._ApiServerResultParser = $tab__ApiServerResultParser;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.DoNotUseCollection
	var $tab__CollectionImpl = function() {
		this.$items = [];
		this.$itemMap = {};
	};
	$tab__CollectionImpl.__typeName = 'tab._CollectionImpl';
	global.tab._CollectionImpl = $tab__CollectionImpl;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.ColumnImpl
	var $tab__ColumnImpl = function(fieldName, dataType, isReferenced, index) {
		this.$fieldName = null;
		this.$dataType = null;
		this.$isReferenced = false;
		this.$index = 0;
		$tab__Param.verifyString(fieldName, 'Column Field Name');
		this.$fieldName = fieldName;
		this.$dataType = dataType;
		this.$isReferenced = ss.coalesce(isReferenced, false);
		this.$index = index;
	};
	$tab__ColumnImpl.__typeName = 'tab._ColumnImpl';
	global.tab._ColumnImpl = $tab__ColumnImpl;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.DataTableImpl
	var $tab__DataTableImpl = function(rows, isSummaryData, totalRowCount, columns) {
		this.$name = null;
		this.$rows = null;
		this.$totalRowCount = 0;
		this.$columns = null;
		this.$isSummaryData = false;
		this.$rows = rows;
		this.$totalRowCount = totalRowCount;
		this.$columns = columns;
		this.$isSummaryData = isSummaryData;
		this.$name = (isSummaryData ? 'Summary Data Table' : 'Underlying Data Table');
	};
	$tab__DataTableImpl.__typeName = 'tab._DataTableImpl';
	$tab__DataTableImpl.processGetDataPresModel = function DataTableImpl$ProcessGetDataPresModel(model) {
		var clientTable = $tab__DataTableImpl.$processUnderlyingTable(model.dataTable);
		var clientColumns = $tab__DataTableImpl.$processUnderlyingColumns(model.headers);
		var clientDataTableImpl = new $tab__DataTableImpl(clientTable, model.isSummary, clientTable.length, clientColumns);
		return new $tableauSoftware_DataTable(clientDataTableImpl);
	};
	$tab__DataTableImpl.$processUnderlyingTable = function DataTableImpl$ProcessUnderlyingTable(apiTable) {
		var clientTable = [];
		for (var $t1 = 0; $t1 < apiTable.length; $t1++) {
			var row = apiTable[$t1];
			var clientRow = [];
			for (var $t2 = 0; $t2 < row.length; $t2++) {
				var apiValue = row[$t2];
				clientRow.push($tab__Utility.getDataValue(apiValue));
			}
			clientTable.push(clientRow);
		}
		return clientTable;
	};
	$tab__DataTableImpl.$processUnderlyingColumns = function DataTableImpl$ProcessUnderlyingColumns(apiColumns) {
		var clientColumns = [];
		for (var $t1 = 0; $t1 < apiColumns.length; $t1++) {
			var apiColumn = apiColumns[$t1];
			var clientColumn = new $tab__ColumnImpl(apiColumn.fieldName, $tab_ApiEnumConverter.convertDataType(apiColumn.dataType), apiColumn.isReferenced, apiColumn.index);
			clientColumns.push(new $tableauSoftware_Column(clientColumn));
		}
		return clientColumns;
	};
	global.tab._DataTableImpl = $tab__DataTableImpl;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.DoNotUseDeferred
	var $tab__DeferredImpl = function() {
		this.$promise = null;
		this.$thenFunc = null;
		this.$listeners = [];
		this.$resolveFunc = null;
		this.$promise = new $tab__PromiseImpl(ss.mkdel(this, this.then));
		this.$thenFunc = ss.mkdel(this, this.$preResolutionThen);
		this.$resolveFunc = ss.mkdel(this, this.$transitionToFulfilled);
	};
	$tab__DeferredImpl.__typeName = 'tab._DeferredImpl';
	global.tab._DeferredImpl = $tab__DeferredImpl;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.Param
	var $tab__Param = function() {
	};
	$tab__Param.__typeName = 'tab._Param';
	$tab__Param.verifyString = function Param$VerifyString(argumentValue, argumentName) {
		if (ss.isNullOrUndefined(argumentValue) || argumentValue.length === 0) {
			throw $tab__TableauException.createInternalStringArgumentException(argumentName);
		}
	};
	$tab__Param.verifyValue = function Param$VerifyValue(argumentValue, argumentName) {
		if (ss.isNullOrUndefined(argumentValue)) {
			throw $tab__TableauException.createInternalNullArgumentException(argumentName);
		}
	};
	global.tab._Param = $tab__Param;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.DoNotUsePromise
	var $tab__PromiseImpl = function(thenFunc) {
		this.then = null;
		this.then = thenFunc;
	};
	$tab__PromiseImpl.__typeName = 'tab._PromiseImpl';
	global.tab._PromiseImpl = $tab__PromiseImpl;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.TabRect
	var $tab__Rect = function(left, top, width, height) {
		this.left = 0;
		this.top = 0;
		this.width = 0;
		this.height = 0;
		this.left = left;
		this.top = top;
		this.width = width;
		this.height = height;
	};
	$tab__Rect.__typeName = 'tab._Rect';
	global.tab._Rect = $tab__Rect;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.SharedDashboardImpl
	var $tab__SharedDashboardImpl = function(sheetInfoImpl, messagingOptions) {
		this.dashboardWorksheets = new tab._Collection();
		this.dashboardObjects = new tab._Collection();
		this.messagingOptions = null;
		$tab__SharedSheetImpl.call(this, sheetInfoImpl);
		this.messagingOptions = messagingOptions;
	};
	$tab__SharedDashboardImpl.__typeName = 'tab._SharedDashboardImpl';
	global.tab._SharedDashboardImpl = $tab__SharedDashboardImpl;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.SharedSheetImpl
	var $tab__SharedSheetImpl = function(sheetInfoImpl) {
		this.$name = null;
		this.$sheetType = null;
		this.$size = null;
		this.$name = sheetInfoImpl.name;
		this.$sheetType = sheetInfoImpl.sheetType;
		this.$size = sheetInfoImpl.size;
	};
	$tab__SharedSheetImpl.__typeName = 'tab._SharedSheetImpl';
	global.tab._SharedSheetImpl = $tab__SharedSheetImpl;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.SharedWorksheetImpl
	var $tab__SharedWorksheetImpl = function(sheetInfoImpl, messagingOptions, parentDashboardImpl) {
		this.$parentDashboardImpl = null;
		this.messagingOptions = null;
		$tab__SharedSheetImpl.call(this, sheetInfoImpl);
		this.$parentDashboardImpl = parentDashboardImpl;
		this.messagingOptions = messagingOptions;
	};
	$tab__SharedWorksheetImpl.__typeName = 'tab._SharedWorksheetImpl';
	global.tab._SharedWorksheetImpl = $tab__SharedWorksheetImpl;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.ApiSharedSheetInfoImpl
	var $tab__SheetInfoImpl = function() {
	};
	$tab__SheetInfoImpl.__typeName = 'tab._SheetInfoImpl';
	$tab__SheetInfoImpl.$ctor = function(name, sheetType, size, zoneId) {
		var $this = new Object();
		$this.name = null;
		$this.sheetType = null;
		$this.zoneId = 0;
		$this.size = null;
		$this.name = name;
		$this.sheetType = sheetType;
		$this.size = size;
		$this.zoneId = zoneId;
		return $this;
	};
	$tab__SheetInfoImpl.isInstanceOfType = function() {
		return true;
	};
	global.tab._SheetInfoImpl = $tab__SheetInfoImpl;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.TableauException
	var $tab__TableauException = function() {
	};
	$tab__TableauException.__typeName = 'tab._TableauException';
	$tab__TableauException.create = function TableauException$Create(id, message) {
		var x = new ss.Exception(message);
		x['tableauSoftwareErrorCode'] = id;
		return x;
	};
	$tab__TableauException.createInternalError = function TableauException$CreateInternalError(details) {
		if (ss.isValue(details)) {
			return $tab__TableauException.create('internalError', 'Internal error. Please contact Tableau support with the following information: ' + details);
		}
		else {
			return $tab__TableauException.create('internalError', 'Internal error. Please contact Tableau support');
		}
	};
	$tab__TableauException.createInternalNullArgumentException = function TableauException$CreateInternalNullArgumentException(argumentName) {
		return $tab__TableauException.createInternalError("Null/undefined argument '" + argumentName + "'.");
	};
	$tab__TableauException.createInternalStringArgumentException = function TableauException$CreateInternalStringArgumentException(argumentName) {
		return $tab__TableauException.createInternalError("Invalid string argument '" + argumentName + "'.");
	};
	$tab__TableauException.createServerError = function TableauException$CreateServerError(message) {
		return $tab__TableauException.create('serverError', message);
	};
	$tab__TableauException.createNotActiveSheet = function TableauException$CreateNotActiveSheet() {
		return $tab__TableauException.create('notActiveSheet', 'Operation not allowed on non-active sheet');
	};
	$tab__TableauException.createInvalidCustomViewName = function TableauException$CreateInvalidCustomViewName(customViewName) {
		return $tab__TableauException.create('invalidCustomViewName', 'Invalid custom view name: ' + customViewName);
	};
	$tab__TableauException.createInvalidParameter = function TableauException$CreateInvalidParameter(paramName) {
		return $tab__TableauException.create('invalidParameter', 'Invalid parameter: ' + paramName);
	};
	$tab__TableauException.createInvalidFilterFieldNameOrValue = function TableauException$CreateInvalidFilterFieldNameOrValue(fieldName) {
		return $tab__TableauException.create('invalidFilterFieldNameOrValue', 'Invalid filter field name or value: ' + fieldName);
	};
	$tab__TableauException.createInvalidDateParameter = function TableauException$CreateInvalidDateParameter(paramName) {
		return $tab__TableauException.create('invalidDateParameter', 'Invalid date parameter: ' + paramName);
	};
	$tab__TableauException.createNullOrEmptyParameter = function TableauException$CreateNullOrEmptyParameter(paramName) {
		return $tab__TableauException.create('nullOrEmptyParameter', 'Parameter cannot be null or empty: ' + paramName);
	};
	$tab__TableauException.createMissingMaxSize = function TableauException$CreateMissingMaxSize() {
		return $tab__TableauException.create('missingMaxSize', 'Missing maxSize for SheetSizeBehavior.ATMOST');
	};
	$tab__TableauException.createMissingMinSize = function TableauException$CreateMissingMinSize() {
		return $tab__TableauException.create('missingMinSize', 'Missing minSize for SheetSizeBehavior.ATLEAST');
	};
	$tab__TableauException.createMissingMinMaxSize = function TableauException$CreateMissingMinMaxSize() {
		return $tab__TableauException.create('missingMinMaxSize', 'Missing minSize or maxSize for SheetSizeBehavior.RANGE');
	};
	$tab__TableauException.createInvalidRangeSize = function TableauException$CreateInvalidRangeSize() {
		return $tab__TableauException.create('invalidSize', 'Missing minSize or maxSize for SheetSizeBehavior.RANGE');
	};
	$tab__TableauException.createInvalidSizeValue = function TableauException$CreateInvalidSizeValue() {
		return $tab__TableauException.create('invalidSize', 'Size value cannot be less than zero');
	};
	$tab__TableauException.createInvalidSheetSizeParam = function TableauException$CreateInvalidSheetSizeParam() {
		return $tab__TableauException.create('invalidSize', 'Invalid sheet size parameter');
	};
	$tab__TableauException.createSizeConflictForExactly = function TableauException$CreateSizeConflictForExactly() {
		return $tab__TableauException.create('invalidSize', 'Conflicting size values for SheetSizeBehavior.EXACTLY');
	};
	$tab__TableauException.createInvalidSizeBehaviorOnWorksheet = function TableauException$CreateInvalidSizeBehaviorOnWorksheet() {
		return $tab__TableauException.create('invalidSizeBehaviorOnWorksheet', 'Only SheetSizeBehavior.AUTOMATIC is allowed on Worksheets');
	};
	$tab__TableauException.createNoUrlForHiddenWorksheet = function TableauException$CreateNoUrlForHiddenWorksheet() {
		return $tab__TableauException.create('noUrlForHiddenWorksheet', 'Hidden worksheets do not have a URL.');
	};
	$tab__TableauException.createInvalidAggregationFieldName = function TableauException$CreateInvalidAggregationFieldName(fieldName) {
		return $tab__TableauException.create('invalidAggregationFieldName', "Invalid aggregation type for field '" + fieldName + "'");
	};
	$tab__TableauException.createInvalidToolbarButtonName = function TableauException$CreateInvalidToolbarButtonName(buttonName) {
		return $tab__TableauException.create('invalidToolbarButtonName', "Invalid toolbar button name: '" + buttonName + "'");
	};
	$tab__TableauException.createIndexOutOfRange = function TableauException$CreateIndexOutOfRange(index) {
		return $tab__TableauException.create('indexOutOfRange', "Index '" + index + "' is out of range.");
	};
	$tab__TableauException.createUnsupportedEventName = function TableauException$CreateUnsupportedEventName(eventName) {
		return $tab__TableauException.create('unsupportedEventName', "Unsupported event '" + eventName + "'.");
	};
	$tab__TableauException.createBrowserNotCapable = function TableauException$CreateBrowserNotCapable() {
		return $tab__TableauException.create('browserNotCapable', 'This browser is incapable of supporting the Tableau JavaScript API.');
	};
	global.tab._TableauException = $tab__TableauException;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.Utility
	var $tab__Utility = function() {
	};
	$tab__Utility.__typeName = 'tab._Utility';
	$tab__Utility.isNullOrEmpty = function Utility$IsNullOrEmpty(value) {
		return ss.isNullOrUndefined(value) || (value['length'] || 0) <= 0;
	};
	$tab__Utility.isString = function Utility$IsString(value) {
		return typeof(value) === 'string';
	};
	$tab__Utility.isNumber = function Utility$IsNumber(value) {
		return typeof(value) === 'number';
	};
	$tab__Utility.isDate = function Utility$IsDate(value) {
		if (typeof(value) === 'object' && ss.isInstanceOfType(value, ss.JsDate)) {
			return true;
		}
		else if (!!(Object.prototype.toString.call(value) !== '[object Date]')) {
			return false;
		}
		return !isNaN(ss.cast(value, ss.JsDate).getTime());
	};
	$tab__Utility.isDateValid = function Utility$IsDateValid(dt) {
		return !isNaN(dt.getTime());
	};
	$tab__Utility.indexOf = function Utility$IndexOf(array, searchElement, fromIndex) {
		if (ss.isValue(Array.prototype['indexOf'])) {
			return ss.unbox(ss.cast(array['indexOf'](searchElement, fromIndex), ss.Int32));
		}
		fromIndex = fromIndex || 0;
		var length = array.length;
		if (length > 0) {
			for (var index = fromIndex; index < length; index++) {
				if (ss.referenceEquals(array[index], searchElement)) {
					return index;
				}
			}
		}
		return -1;
	};
	$tab__Utility.contains = function Utility$Contains(array, searchElement, fromIndex) {
		var index = $tab__Utility.indexOf(array, searchElement, fromIndex);
		return index >= 0;
	};
	$tab__Utility.getTopmostWindow = function Utility$GetTopmostWindow() {
		var win = window.self;
		while (ss.isValue(win.parent) && !ss.referenceEquals(win.parent, win)) {
			win = win.parent;
		}
		return win;
	};
	$tab__Utility.toInt = function Utility$ToInt(value) {
		if ($tab__Utility.isNumber(value)) {
			return ss.Int32.trunc(value);
		}
		var number = parseInt(value.toString(), 10);
		if (isNaN(number)) {
			return 0;
		}
		return number;
	};
	$tab__Utility.hasClass = function Utility$HasClass(element, className) {
		var regexClass = new RegExp('[\\n\\t\\r]', 'g');
		return ss.isValue(element) && (' ' + element.className + ' ').replace(regexClass, ' ').indexOf(' ' + className + ' ') > -1;
	};
	$tab__Utility.findParentWithClassName = function Utility$FindParentWithClassName(element, className, stopAtElement) {
		var parent = (ss.isValue(element) ? ss.cast(element.parentNode, HTMLElement) : null);
		stopAtElement = stopAtElement || document.body;
		while (ss.isValue(parent)) {
			if ($tab__Utility.hasClass(parent, className)) {
				return parent;
			}
			if (ss.referenceEquals(parent, stopAtElement)) {
				parent = null;
			}
			else {
				parent = ss.cast(parent.parentNode, HTMLElement);
			}
		}
		return parent;
	};
	$tab__Utility.hasJsonParse = function Utility$HasJsonParse() {
		return !!(ss.isValue(JSON) && ss.isValue(JSON.parse));
	};
	$tab__Utility.hasWindowPostMessage = function Utility$HasWindowPostMessage() {
		return !!ss.isValue(window.postMessage);
	};
	$tab__Utility.isPostMessageSynchronous = function Utility$IsPostMessageSynchronous() {
		if ($tab__Utility.isIE()) {
			var msieRegEx = new RegExp('(msie) ([\\w.]+)');
			var matches = msieRegEx.exec(window.navigator.userAgent.toLowerCase());
			var versionStr = matches[2] || '0';
			var version = parseInt(versionStr, 10);
			return version <= 8;
		}
		return false;
	};
	$tab__Utility.hasDocumentAttachEvent = function Utility$HasDocumentAttachEvent() {
		return !!ss.isValue(document.attachEvent);
	};
	$tab__Utility.hasWindowAddEventListener = function Utility$HasWindowAddEventListener() {
		return !!ss.isValue(window.addEventListener);
	};
	$tab__Utility.isElementOfTag = function Utility$IsElementOfTag(element, tagName) {
		return ss.isValue(element) && element.nodeType === 1 && ss.referenceEquals(element.tagName.toLowerCase(), tagName.toLowerCase());
	};
	$tab__Utility.elementToString = function Utility$ElementToString(element) {
		var str = new ss.StringBuilder();
		str.append(element.tagName.toLowerCase());
		if (!$tab__Utility.isNullOrEmpty(element.id)) {
			str.append('#').append(element.id);
		}
		if (!$tab__Utility.isNullOrEmpty(element.className)) {
			var classes = element.className.split(' ');
			str.append('.').append(classes.join('.'));
		}
		return str.toString();
	};
	$tab__Utility.tableauGCS = function Utility$TableauGCS(e) {
		if (typeof(window['getComputedStyle']) === 'function') {
			return window.getComputedStyle(e);
		}
		else {
			return e['currentStyle'];
		}
	};
	$tab__Utility.isIE = function Utility$IsIE() {
		return !!(window.navigator.userAgent.indexOf('MSIE') > -1 && ss.isNullOrUndefined(window.opera));
	};
	$tab__Utility.isSafari = function Utility$IsSafari() {
		var ua = window.navigator.userAgent;
		var isChrome = ua.indexOf('Chrome') >= 0;
		return ua.indexOf('Safari') >= 0 && !isChrome;
	};
	$tab__Utility.mobileDetect = function Utility$MobileDetect() {
		var ua = window.navigator.userAgent;
		if (ua.indexOf('iPad') !== -1) {
			return true;
		}
		if (ua.indexOf('Android') !== -1) {
			return true;
		}
		if (ua.indexOf('AppleWebKit') !== -1 && ua.indexOf('Mobile') !== -1) {
			return true;
		}
		return false;
	};
	$tab__Utility.visibleContentRectInDocumentCoordinates = function Utility$VisibleContentRectInDocumentCoordinates(element) {
		var visibleRect = $tab__Utility.contentRectInDocumentCoordinates(element);
		for (var currentElement = element.parentElement; ss.isValue(currentElement) && ss.isValue(currentElement.parentElement); currentElement = currentElement.parentElement) {
			var overflow = $tab__Utility.$getComputedStyle(currentElement).overflow;
			if (overflow === 'auto' || overflow === 'scroll' || overflow === 'hidden') {
				visibleRect = visibleRect.intersect($tab__Utility.contentRectInDocumentCoordinates(currentElement));
			}
		}
		var viewportRect = $tab__Utility.contentRectInDocumentCoordinates(document.documentElement);
		var win = new tab.WindowHelper(window.self);
		if (win.isQuirksMode()) {
			viewportRect.height = document.body.clientHeight - viewportRect.left;
			viewportRect.width = document.body.clientWidth - viewportRect.top;
		}
		viewportRect.left += win.get_pageXOffset();
		viewportRect.top += win.get_pageYOffset();
		return visibleRect.intersect(viewportRect);
	};
	$tab__Utility.contentRectInDocumentCoordinates = function Utility$ContentRectInDocumentCoordinates(element) {
		var boundingClientRect = $tab__Utility.getBoundingClientRect(element);
		var style = $tab__Utility.$getComputedStyle(element);
		var paddingLeft = $tab__Utility.toInt(style.paddingLeft);
		var paddingTop = $tab__Utility.toInt(style.paddingTop);
		var borderLeft = $tab__Utility.toInt(style.borderLeftWidth);
		var borderTop = $tab__Utility.toInt(style.borderTopWidth);
		var contentSize = $tab__Utility.computeContentSize(element);
		var win = new tab.WindowHelper(window.self);
		var left = boundingClientRect.left + paddingLeft + borderLeft + win.get_pageXOffset();
		var top = boundingClientRect.top + paddingTop + borderTop + win.get_pageYOffset();
		return new $tab__Rect(left, top, contentSize.width, contentSize.height);
	};
	$tab__Utility.getBoundingClientRect = function Utility$GetBoundingClientRect(element) {
		var rect = element.getBoundingClientRect();
		var top = ss.Int32.trunc(rect.top);
		var left = ss.Int32.trunc(rect.left);
		var right = ss.Int32.trunc(rect.right);
		var bottom = ss.Int32.trunc(rect.bottom);
		return new $tab__Rect(left, top, right - left, bottom - top);
	};
	$tab__Utility.convertRawValue = function Utility$ConvertRawValue(rawValue, dataType) {
		if (ss.isNullOrUndefined(rawValue)) {
			return null;
		}
		switch (dataType) {
			case 'bool': {
				return rawValue;
			}
			case 'date':
			case 'number': {
				if (ss.isNullOrUndefined(rawValue)) {
					return Number.NaN;
				}
				return rawValue;
			}
			default:
			case 'string': {
				return rawValue;
			}
		}
	};
	$tab__Utility.getDataValue = function Utility$GetDataValue(dv) {
		if (ss.isNullOrUndefined(dv)) {
			return $tab_DataValue.$ctor(null, null, null);
		}
		return $tab_DataValue.$ctor($tab__Utility.convertRawValue(dv.value, dv.type), dv.formattedValue, dv.aliasedValue);
	};
	$tab__Utility.serializeDateForServer = function Utility$SerializeDateForServer(date) {
		var serializedDate = '';
		if (ss.isValue(date) && $tab__Utility.isDate(date)) {
			var year = date.getUTCFullYear();
			var month = date.getUTCMonth() + 1;
			var day = date.getUTCDate();
			var hh = date.getUTCHours();
			var mm = date.getUTCMinutes();
			var sec = date.getUTCSeconds();
			serializedDate = year + '-' + month + '-' + day + ' ' + hh + ':' + mm + ':' + sec;
		}
		return serializedDate;
	};
	$tab__Utility.computeContentSize = function Utility$ComputeContentSize(element) {
		var style = $tab__Utility.$getComputedStyle(element);
		var paddingLeft = parseFloat(style.paddingLeft);
		var paddingTop = parseFloat(style.paddingTop);
		var paddingRight = parseFloat(style.paddingRight);
		var paddingBottom = parseFloat(style.paddingBottom);
		var width = element.clientWidth - Math.round(paddingLeft + paddingRight);
		var height = element.clientHeight - Math.round(paddingTop + paddingBottom);
		return $tab_Size.$ctor(width, height);
	};
	$tab__Utility.$getComputedStyle = function Utility$GetComputedStyle(element) {
		if (typeof(window['getComputedStyle']) === 'function') {
			if (ss.isValue(element.ownerDocument.defaultView.opener)) {
				return element.ownerDocument.defaultView.getComputedStyle(element);
			}
			return window.getComputedStyle(element);
		}
		else if (ss.isValue(element['currentStyle'])) {
			return element['currentStyle'];
		}
		return element.style;
	};
	$tab__Utility.roundVizSizeInPixels = function Utility$RoundVizSizeInPixels(size) {
		if (ss.isNullOrUndefined(size) || !(size.indexOf('px') !== -1)) {
			return size;
		}
		var sizeValue = parseFloat(size.split('px')[0]);
		return Math.round(sizeValue) + 'px';
	};
	$tab__Utility.noResultPromiseHelper = function Utility$NoResultPromiseHelper(commandName, cmdParams, messagingOptions) {
		var deferred = new tab._Deferred();
		var returnHandler = new (ss.makeGenericType($tab_CommandReturnHandler$1, [Object]))(commandName, 1, function(result) {
			deferred.resolve();
		}, function(remoteError, message) {
			deferred.reject($tab__TableauException.createServerError(message));
		});
		messagingOptions.sendCommand(Object).call(messagingOptions, cmdParams, returnHandler);
		return deferred.get_promise();
	};
	$tab__Utility.clone = function(T) {
		return function Utility$Clone(src) {
			return JSON.parse(JSON.stringify(src));
		};
	};
	global.tab._Utility = $tab__Utility;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.ApiDashboardObjectType
	var $tab_ApiDashboardObjectType = function() {
	};
	$tab_ApiDashboardObjectType.__typeName = 'tab.ApiDashboardObjectType';
	global.tab.ApiDashboardObjectType = $tab_ApiDashboardObjectType;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.ApiDateRangeType
	var $tab_ApiDateRangeType = function() {
	};
	$tab_ApiDateRangeType.__typeName = 'tab.ApiDateRangeType';
	global.tab.ApiDateRangeType = $tab_ApiDateRangeType;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.ApiDeviceType
	var $tab_ApiDeviceType = function() {
	};
	$tab_ApiDeviceType.__typeName = 'tab.ApiDeviceType';
	global.tab.ApiDeviceType = $tab_ApiDeviceType;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.ApiEnumConverter
	var $tab_ApiEnumConverter = function() {
	};
	$tab_ApiEnumConverter.__typeName = 'tab.ApiEnumConverter';
	$tab_ApiEnumConverter.convertDashboardObjectType = function ApiEnumConverter$ConvertDashboardObjectType(crossDomainType) {
		switch (crossDomainType) {
			case 'blank': {
				return 'blank';
			}
			case 'image': {
				return 'image';
			}
			case 'legend': {
				return 'legend';
			}
			case 'pageFilter': {
				return 'pageFilter';
			}
			case 'parameterControl': {
				return 'parameterControl';
			}
			case 'quickFilter': {
				return 'quickFilter';
			}
			case 'text': {
				return 'text';
			}
			case 'title': {
				return 'title';
			}
			case 'webPage': {
				return 'webPage';
			}
			case 'worksheet': {
				return 'worksheet';
			}
			default: {
				throw $tab__TableauException.createInternalError('Unknown ApiCrossDomainDashboardObjectType: ' + crossDomainType);
			}
		}
	};
	$tab_ApiEnumConverter.convertDateRange = function ApiEnumConverter$ConvertDateRange(crossDomainType) {
		switch (crossDomainType) {
			case 'curr': {
				return 'curr';
			}
			case 'last': {
				return 'last';
			}
			case 'lastn': {
				return 'lastn';
			}
			case 'next': {
				return 'next';
			}
			case 'nextn': {
				return 'nextn';
			}
			case 'todate': {
				return 'todate';
			}
			default: {
				throw $tab__TableauException.createInternalError('Unknown ApiCrossDomainDateRangeType: ' + crossDomainType);
			}
		}
	};
	$tab_ApiEnumConverter.convertFieldAggregation = function ApiEnumConverter$ConvertFieldAggregation(crossDomainType) {
		switch (crossDomainType) {
			case 'ATTR': {
				return 'ATTR';
			}
			case 'AVG': {
				return 'AVG';
			}
			case 'COUNT': {
				return 'COUNT';
			}
			case 'COUNTD': {
				return 'COUNTD';
			}
			case 'DAY': {
				return 'DAY';
			}
			case 'END': {
				return 'END';
			}
			case 'HOUR': {
				return 'HOUR';
			}
			case 'INOUT': {
				return 'INOUT';
			}
			case 'KURTOSIS': {
				return 'KURTOSIS';
			}
			case 'MAX': {
				return 'MAX';
			}
			case 'MDY': {
				return 'MDY';
			}
			case 'MEDIAN': {
				return 'MEDIAN';
			}
			case 'MIN': {
				return 'MIN';
			}
			case 'MINUTE': {
				return 'MINUTE';
			}
			case 'MONTH': {
				return 'MONTH';
			}
			case 'MONTHYEAR': {
				return 'MONTHYEAR';
			}
			case 'NONE': {
				return 'NONE';
			}
			case 'PERCENTILE': {
				return 'PERCENTILE';
			}
			case 'QUART1': {
				return 'QUART1';
			}
			case 'QUART3': {
				return 'QUART3';
			}
			case 'QTR': {
				return 'QTR';
			}
			case 'SECOND': {
				return 'SECOND';
			}
			case 'SKEWNESS': {
				return 'SKEWNESS';
			}
			case 'STDEV': {
				return 'STDEV';
			}
			case 'STDEVP': {
				return 'STDEVP';
			}
			case 'SUM': {
				return 'SUM';
			}
			case 'SUM_XSQR': {
				return 'SUM_XSQR';
			}
			case 'TRUNC_DAY': {
				return 'TRUNC_DAY';
			}
			case 'TRUNC_HOUR': {
				return 'TRUNC_HOUR';
			}
			case 'TRUNC_MINUTE': {
				return 'TRUNC_MINUTE';
			}
			case 'TRUNC_MONTH': {
				return 'TRUNC_MONTH';
			}
			case 'TRUNC_QTR': {
				return 'TRUNC_QTR';
			}
			case 'TRUNC_SECOND': {
				return 'TRUNC_SECOND';
			}
			case 'TRUNC_WEEK': {
				return 'TRUNC_WEEK';
			}
			case 'TRUNC_YEAR': {
				return 'TRUNC_YEAR';
			}
			case 'USER': {
				return 'USER';
			}
			case 'VAR': {
				return 'VAR';
			}
			case 'VARP': {
				return 'VARP';
			}
			case 'WEEK': {
				return 'WEEK';
			}
			case 'WEEKDAY': {
				return 'WEEKDAY';
			}
			case 'YEAR': {
				return 'YEAR';
			}
			default: {
				throw $tab__TableauException.createInternalError('Unknown ApiCrossDomainFieldAggregationType: ' + crossDomainType);
			}
		}
	};
	$tab_ApiEnumConverter.convertFieldRole = function ApiEnumConverter$ConvertFieldRole(crossDomainType) {
		switch (crossDomainType) {
			case 'dimension': {
				return 'dimension';
			}
			case 'measure': {
				return 'measure';
			}
			case 'unknown': {
				return 'unknown';
			}
			default: {
				throw $tab__TableauException.createInternalError('Unknown ApiCrossDomainFieldRoleType: ' + crossDomainType);
			}
		}
	};
	$tab_ApiEnumConverter.convertFilterType = function ApiEnumConverter$ConvertFilterType(crossDomainType) {
		switch (crossDomainType) {
			case 'categorical': {
				return 'categorical';
			}
			case 'hierarchical': {
				return 'hierarchical';
			}
			case 'quantitative': {
				return 'quantitative';
			}
			case 'relativedate': {
				return 'relativedate';
			}
			default: {
				throw $tab__TableauException.createInternalError('Unknown ApiCrossDomainFilterType: ' + crossDomainType);
			}
		}
	};
	$tab_ApiEnumConverter.convertParameterAllowableValuesType = function ApiEnumConverter$ConvertParameterAllowableValuesType(crossDomainType) {
		switch (crossDomainType) {
			case 'all': {
				return 'all';
			}
			case 'list': {
				return 'list';
			}
			case 'range': {
				return 'range';
			}
			default: {
				throw $tab__TableauException.createInternalError('Unknown ApiCrossDomainParameterAllowableValuesType: ' + crossDomainType);
			}
		}
	};
	$tab_ApiEnumConverter.convertParameterDataType = function ApiEnumConverter$ConvertParameterDataType(crossDomainType) {
		switch (crossDomainType) {
			case 'boolean': {
				return 'boolean';
			}
			case 'date': {
				return 'date';
			}
			case 'datetime': {
				return 'datetime';
			}
			case 'float': {
				return 'float';
			}
			case 'integer': {
				return 'integer';
			}
			case 'string': {
				return 'string';
			}
			default: {
				throw $tab__TableauException.createInternalError('Unknown ApiCrossDomainParameterDataType: ' + crossDomainType);
			}
		}
	};
	$tab_ApiEnumConverter.convertPeriodType = function ApiEnumConverter$ConvertPeriodType(crossDomainType) {
		switch (crossDomainType) {
			case 'year': {
				return 'year';
			}
			case 'quarter': {
				return 'quarter';
			}
			case 'month': {
				return 'month';
			}
			case 'week': {
				return 'week';
			}
			case 'day': {
				return 'day';
			}
			case 'hour': {
				return 'hour';
			}
			case 'minute': {
				return 'minute';
			}
			case 'second': {
				return 'second';
			}
			default: {
				throw $tab__TableauException.createInternalError('Unknown ApiCrossDomainPeriodType: ' + crossDomainType);
			}
		}
	};
	$tab_ApiEnumConverter.convertSheetType = function ApiEnumConverter$ConvertSheetType(crossDomainType) {
		switch (crossDomainType) {
			case 'worksheet': {
				return 'worksheet';
			}
			case 'dashboard': {
				return 'dashboard';
			}
			case 'story': {
				return 'story';
			}
			default: {
				throw $tab__TableauException.createInternalError('Unknown ApiCrossDomainSheetType: ' + crossDomainType);
			}
		}
	};
	$tab_ApiEnumConverter.convertDataType = function ApiEnumConverter$ConvertDataType(crossDomainType) {
		switch (crossDomainType) {
			case 'boolean': {
				return 'boolean';
			}
			case 'date': {
				return 'date';
			}
			case 'datetime': {
				return 'datetime';
			}
			case 'float': {
				return 'float';
			}
			case 'integer': {
				return 'integer';
			}
			case 'string': {
				return 'string';
			}
			default: {
				throw $tab__TableauException.createInternalError('Unknown ApiCrossDomainParameterDataType: ' + crossDomainType);
			}
		}
	};
	global.tab.ApiEnumConverter = $tab_ApiEnumConverter;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.ApiErrorCode
	var $tab_ApiErrorCode = function() {
	};
	$tab_ApiErrorCode.__typeName = 'tab.ApiErrorCode';
	global.tab.ApiErrorCode = $tab_ApiErrorCode;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.ApiFieldAggregationType
	var $tab_ApiFieldAggregationType = function() {
	};
	$tab_ApiFieldAggregationType.__typeName = 'tab.ApiFieldAggregationType';
	global.tab.ApiFieldAggregationType = $tab_ApiFieldAggregationType;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.ApiFieldRoleType
	var $tab_ApiFieldRoleType = function() {
	};
	$tab_ApiFieldRoleType.__typeName = 'tab.ApiFieldRoleType';
	global.tab.ApiFieldRoleType = $tab_ApiFieldRoleType;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.ApiFilterType
	var $tab_ApiFilterType = function() {
	};
	$tab_ApiFilterType.__typeName = 'tab.ApiFilterType';
	global.tab.ApiFilterType = $tab_ApiFilterType;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.ApiFilterUpdateType
	var $tab_ApiFilterUpdateType = function() {
	};
	$tab_ApiFilterUpdateType.__typeName = 'tab.ApiFilterUpdateType';
	global.tab.ApiFilterUpdateType = $tab_ApiFilterUpdateType;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.ApiMessageHandler
	var $tab_ApiMessageHandler = function() {
	};
	$tab_ApiMessageHandler.__typeName = 'tab.ApiMessageHandler';
	global.tab.ApiMessageHandler = $tab_ApiMessageHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.ApiMessagingOptions
	var $tab_ApiMessagingOptions = function(router, handler) {
		this.$router = null;
		this.$handler = null;
		$tab__Param.verifyValue(router, 'router');
		this.$router = router;
		this.$handler = handler;
	};
	$tab_ApiMessagingOptions.__typeName = 'tab.ApiMessagingOptions';
	global.tab.ApiMessagingOptions = $tab_ApiMessagingOptions;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.ApiNullOption
	var $tab_ApiNullOption = function() {
	};
	$tab_ApiNullOption.__typeName = 'tab.ApiNullOption';
	global.tab.ApiNullOption = $tab_ApiNullOption;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.ApiParameterAllowableValuesType
	var $tab_ApiParameterAllowableValuesType = function() {
	};
	$tab_ApiParameterAllowableValuesType.__typeName = 'tab.ApiParameterAllowableValuesType';
	global.tab.ApiParameterAllowableValuesType = $tab_ApiParameterAllowableValuesType;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.ApiParameterDataType
	var $tab_ApiParameterDataType = function() {
	};
	$tab_ApiParameterDataType.__typeName = 'tab.ApiParameterDataType';
	global.tab.ApiParameterDataType = $tab_ApiParameterDataType;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.ApiPeriodType
	var $tab_ApiPeriodType = function() {
	};
	$tab_ApiPeriodType.__typeName = 'tab.ApiPeriodType';
	global.tab.ApiPeriodType = $tab_ApiPeriodType;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.ApiSelectionUpdateType
	var $tab_ApiSelectionUpdateType = function() {
	};
	$tab_ApiSelectionUpdateType.__typeName = 'tab.ApiSelectionUpdateType';
	global.tab.ApiSelectionUpdateType = $tab_ApiSelectionUpdateType;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.ApiSheetSizeBehavior
	var $tab_ApiSheetSizeBehavior = function() {
	};
	$tab_ApiSheetSizeBehavior.__typeName = 'tab.ApiSheetSizeBehavior';
	global.tab.ApiSheetSizeBehavior = $tab_ApiSheetSizeBehavior;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.ApiSheetType
	var $tab_ApiSheetType = function() {
	};
	$tab_ApiSheetType.__typeName = 'tab.ApiSheetType';
	global.tab.ApiSheetType = $tab_ApiSheetType;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.ApiTableauEventName
	var $tab_ApiTableauEventName = function() {
	};
	$tab_ApiTableauEventName.__typeName = 'tab.ApiTableauEventName';
	global.tab.ApiTableauEventName = $tab_ApiTableauEventName;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.ApiToolbarButtonName
	var $tab_ApiToolbarButtonName = function() {
	};
	$tab_ApiToolbarButtonName.__typeName = 'tab.ApiToolbarButtonName';
	global.tab.ApiToolbarButtonName = $tab_ApiToolbarButtonName;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.ApiToolbarPosition
	var $tab_ApiToolbarPosition = function() {
	};
	$tab_ApiToolbarPosition.__typeName = 'tab.ApiToolbarPosition';
	global.tab.ApiToolbarPosition = $tab_ApiToolbarPosition;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.CommandReturnHandler
	var $tab_CommandReturnHandler$1 = function(T) {
		var $type = function(commandName, successCallbackTiming, successCallback, errorCallback) {
			this.$commandName = null;
			this.$successCallbackTiming = 0;
			this.$successCallback = null;
			this.$errorCallback = null;
			this.$commandName = commandName;
			this.$successCallback = successCallback;
			this.$successCallbackTiming = successCallbackTiming;
			this.$errorCallback = errorCallback;
		};
		ss.registerGenericClassInstance($type, $tab_CommandReturnHandler$1, [T], {
			get_commandName: function CommandReturnHandler$get_CommandName() {
				return this.$commandName;
			},
			get_successCallback: function CommandReturnHandler$get_SuccessCallback() {
				return this.$successCallback;
			},
			get_successCallbackTiming: function CommandReturnHandler$get_SuccessCallbackTiming() {
				return this.$successCallbackTiming;
			},
			get_errorCallback: function CommandReturnHandler$get_ErrorCallback() {
				return this.$errorCallback;
			}
		}, function() {
			return null;
		}, function() {
			return [];
		});
		return $type;
	};
	$tab_CommandReturnHandler$1.__typeName = 'tab.CommandReturnHandler$1';
	ss.initGenericClass($tab_CommandReturnHandler$1, $asm, 1);
	global.tab.CommandReturnHandler$1 = $tab_CommandReturnHandler$1;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.CrossDomainMessager
	var $tab_CrossDomainMessager = function(legacyHandler) {
		this.$nextHandlerId = 0;
		this.$handlers = {};
		this.$commandCallbacks = {};
		this.$commandReturnAfterStateReadyQueues = {};
		this.$legacyHandler = null;
		this.$legacyHandler = legacyHandler;
		if ($tab__Utility.hasWindowAddEventListener()) {
			window.addEventListener('message', ss.mkdel(this, this.$handleCrossDomainMessage), false);
		}
		else if ($tab__Utility.hasDocumentAttachEvent()) {
			var handler = ss.mkdel(this, this.$handleCrossDomainMessage);
			document.attachEvent('onmessage', handler);
			window.attachEvent('onmessage', handler);
		}
		else {
			window.onmessage = ss.mkdel(this, this.$handleCrossDomainMessage);
		}
		this.$nextHandlerId = 0;
	};
	$tab_CrossDomainMessager.__typeName = 'tab.CrossDomainMessager';
	global.tab.CrossDomainMessager = $tab_CrossDomainMessager;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.DataType
	var $tab_DataType = function() {
	};
	$tab_DataType.__typeName = 'tab.DataType';
	global.tab.DataType = $tab_DataType;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.DataValue
	var $tab_DataValue = function() {
	};
	$tab_DataValue.__typeName = 'tab.DataValue';
	$tab_DataValue.$ctor = function(value, formattedValue, aliasedValue) {
		var $this = new Object();
		$this.value = null;
		$this.formattedValue = null;
		$this.value = value;
		if ($tab__Utility.isNullOrEmpty(aliasedValue)) {
			$this.formattedValue = formattedValue;
		}
		else {
			$this.formattedValue = aliasedValue;
		}
		return $this;
	};
	$tab_DataValue.isInstanceOfType = function() {
		return true;
	};
	global.tab.DataValue = $tab_DataValue;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.HostedApiMessageHandler
	var $tab_HostedApiMessageHandler = function() {
		this.$2$StateReadyForQueryField = null;
		$tab_ApiMessageHandler.call(this);
	};
	$tab_HostedApiMessageHandler.__typeName = 'tab.HostedApiMessageHandler';
	global.tab.HostedApiMessageHandler = $tab_HostedApiMessageHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.HostedApiMessageRouter
	var $tab_HostedApiMessageRouter = function() {
		this.$crossDomainMessager = null;
		this.$crossDomainMessager = new $tab_CrossDomainMessager(null);
	};
	$tab_HostedApiMessageRouter.__typeName = 'tab.HostedApiMessageRouter';
	global.tab.HostedApiMessageRouter = $tab_HostedApiMessageRouter;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.ITableauEvent
	var $tab_ITableauEvent = function() {
	};
	$tab_ITableauEvent.__typeName = 'tab.ITableauEvent';
	global.tab.ITableauEvent = $tab_ITableauEvent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiShared.MarkImpl
	var $tab_MarkImpl = function(tupleIdOrPairs) {
		this.$clonedPairs = null;
		this.$collection = new tab._Collection();
		this.$tupleId = 0;
		if (typeof(tupleIdOrPairs) === 'array') {
			var pairArr = tupleIdOrPairs;
			for (var i = 0; i < pairArr.length; i++) {
				var pair = pairArr[i];
				if (!ss.isValue(pair.fieldName)) {
					throw $tab__TableauException.createInvalidParameter('pair.fieldName');
				}
				if (!ss.isValue(pair.value)) {
					throw $tab__TableauException.createInvalidParameter('pair.value');
				}
				var p = new $tableauSoftware_Pair(pair.fieldName, pair.value);
				this.$collection._add(p.fieldName, p);
			}
		}
		else {
			this.$tupleId = tupleIdOrPairs;
		}
	};
	$tab_MarkImpl.__typeName = 'tab.MarkImpl';
	$tab_MarkImpl.processActiveMarks = function MarkImpl$ProcessActiveMarks(marksPresModel) {
		var marks = new tab._Collection();
		if (ss.isNullOrUndefined(marksPresModel) || $tab__Utility.isNullOrEmpty(marksPresModel.marks)) {
			return marks;
		}
		for (var $t1 = 0; $t1 < marksPresModel.marks.length; $t1++) {
			var markPresModel = marksPresModel.marks[$t1];
			var tupleId = markPresModel.tupleId;
			var mark = new $tableauSoftware_Mark(tupleId);
			marks._add(tupleId.toString(), mark);
			for (var $t2 = 0; $t2 < markPresModel.pairs.length; $t2++) {
				var pairPresModel = markPresModel.pairs[$t2];
				var value = $tab__Utility.convertRawValue(pairPresModel.value, pairPresModel.valueDataType);
				var pair = new $tableauSoftware_Pair(pairPresModel.fieldName, value);
				pair.formattedValue = pairPresModel.formattedValue;
				if (!mark.impl.get_pairs()._has(pair.fieldName)) {
					mark.impl.$addPair(pair);
				}
			}
		}
		return marks;
	};
	global.tab.MarkImpl = $tab_MarkImpl;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.Point
	var $tab_Point = function() {
	};
	$tab_Point.__typeName = 'tab.Point';
	$tab_Point.$ctor = function(x, y) {
		var $this = new Object();
		$this.x = 0;
		$this.y = 0;
		$this.x = x;
		$this.y = y;
		return $this;
	};
	$tab_Point.isInstanceOfType = function() {
		return true;
	};
	global.tab.Point = $tab_Point;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.PublicEnums
	var $tab_PublicEnums = function() {
	};
	$tab_PublicEnums.__typeName = 'tab.PublicEnums';
	$tab_PublicEnums.tryNormalizeEnum = function(T) {
		return function PublicEnums$TryNormalizeEnum(rawValue, value) {
			if (ss.isValue(rawValue)) {
				var lookup = rawValue.toString().toUpperCase();
				var $t1 = ss.Enum.getValues(T);
				for (var $t2 = 0; $t2 < $t1.length; $t2++) {
					var name = $t1[$t2];
					var compareValue = name.toUpperCase();
					if (ss.referenceEquals(lookup, compareValue)) {
						value.$ = name;
						return true;
					}
				}
			}
			value.$ = ss.getDefaultValue(T);
			return false;
		};
	};
	$tab_PublicEnums.normalizeEnum = function(T) {
		return function PublicEnums$NormalizeEnum(rawValue, paramName) {
			var value = {};
			if (!$tab_PublicEnums.tryNormalizeEnum(T).call(null, rawValue, value)) {
				throw $tab__TableauException.createInvalidParameter(paramName);
			}
			return value.$;
		};
	};
	$tab_PublicEnums.isValidEnum = function(T) {
		return function PublicEnums$IsValidEnum(rawValue) {
			var value = {};
			var valid = $tab_PublicEnums.tryNormalizeEnum(T).call(null, rawValue, value);
			return valid;
		};
	};
	global.tab.PublicEnums = $tab_PublicEnums;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.SheetSize
	var $tab_SheetSize = function() {
	};
	$tab_SheetSize.__typeName = 'tab.SheetSize';
	$tab_SheetSize.$ctor = function(behavior, minSize, maxSize) {
		var $this = new Object();
		$this.behavior = null;
		$this.minSize = null;
		$this.maxSize = null;
		$this.behavior = ss.coalesce(behavior, 'automatic');
		if (ss.isValue(minSize)) {
			$this.minSize = minSize;
		}
		else {
			delete $this['minSize'];
		}
		if (ss.isValue(maxSize)) {
			$this.maxSize = maxSize;
		}
		else {
			delete $this['maxSize'];
		}
		return $this;
	};
	$tab_SheetSize.isInstanceOfType = function() {
		return true;
	};
	global.tab.SheetSize = $tab_SheetSize;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.SheetSizeFactory
	var $tab_SheetSizeFactory = function() {
	};
	$tab_SheetSizeFactory.__typeName = 'tab.SheetSizeFactory';
	$tab_SheetSizeFactory.createAutomatic = function SheetSizeFactory$CreateAutomatic() {
		var size = $tab_SheetSize.$ctor('automatic', null, null);
		return size;
	};
	$tab_SheetSizeFactory.fromSizeConstraints = function SheetSizeFactory$FromSizeConstraints(vizSizePresModel) {
		var minHeight = vizSizePresModel.minHeight;
		var minWidth = vizSizePresModel.minWidth;
		var maxHeight = vizSizePresModel.maxHeight;
		var maxWidth = vizSizePresModel.maxWidth;
		var behavior = 'automatic';
		var minSize = null;
		var maxSize = null;
		if (minHeight === 0 && minWidth === 0) {
			if (maxHeight === 0 && maxWidth === 0) {
			}
			else {
				behavior = 'atmost';
				maxSize = $tab_Size.$ctor(maxWidth, maxHeight);
			}
		}
		else if (maxHeight === 0 && maxWidth === 0) {
			behavior = 'atleast';
			minSize = $tab_Size.$ctor(minWidth, minHeight);
		}
		else if (maxHeight === minHeight && maxWidth === minWidth && minWidth > 0) {
			behavior = 'exactly';
			minSize = $tab_Size.$ctor(minWidth, minHeight);
			maxSize = $tab_Size.$ctor(minWidth, minHeight);
		}
		else {
			behavior = 'range';
			if (minWidth === 0 && maxWidth === 0) {
				maxWidth = 2147483647;
			}
			minSize = $tab_Size.$ctor(minWidth, minHeight);
			maxSize = $tab_Size.$ctor(maxWidth, maxHeight);
		}
		return $tab_SheetSize.$ctor(behavior, minSize, maxSize);
	};
	global.tab.SheetSizeFactory = $tab_SheetSizeFactory;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.Size
	var $tab_Size = function() {
	};
	$tab_Size.__typeName = 'tab.Size';
	$tab_Size.$ctor = function(width, height) {
		var $this = new Object();
		$this.width = 0;
		$this.height = 0;
		$this.width = width;
		$this.height = height;
		return $this;
	};
	$tab_Size.isInstanceOfType = function() {
		return true;
	};
	global.tab.Size = $tab_Size;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.Column
	var $tableauSoftware_Column = function(impl) {
		this.$impl = null;
		this.$impl = impl;
	};
	$tableauSoftware_Column.__typeName = 'tableauSoftware.Column';
	global.tableauSoftware.Column = $tableauSoftware_Column;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.DataTable
	var $tableauSoftware_DataTable = function(impl) {
		this.$impl = null;
		this.$impl = impl;
	};
	$tableauSoftware_DataTable.__typeName = 'tableauSoftware.DataTable';
	global.tableauSoftware.DataTable = $tableauSoftware_DataTable;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.Mark
	var $tableauSoftware_Mark = function(tupleId) {
		this.impl = null;
		this.impl = new $tab_MarkImpl(tupleId);
	};
	$tableauSoftware_Mark.__typeName = 'tableauSoftware.Mark';
	global.tableauSoftware.Mark = $tableauSoftware_Mark;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.Pair
	var $tableauSoftware_Pair = function(fieldName, value) {
		this.fieldName = null;
		this.value = null;
		this.formattedValue = null;
		this.fieldName = fieldName;
		this.value = value;
		this.formattedValue = (ss.isValue(value) ? value.toString() : '');
	};
	$tableauSoftware_Pair.__typeName = 'tableauSoftware.Pair';
	global.tableauSoftware.Pair = $tableauSoftware_Pair;
	ss.initClass($tab_$DeferredUtil, $asm, {});
	ss.initClass($tab_$DoNothingCrossDomainHandler, $asm, {
		add_stateReadyForQuery: function DoNothingCrossDomainHandler$add_StateReadyForQuery(value) {
			this.$1$StateReadyForQueryField = ss.delegateCombine(this.$1$StateReadyForQueryField, value);
		},
		remove_stateReadyForQuery: function DoNothingCrossDomainHandler$remove_StateReadyForQuery(value) {
			this.$1$StateReadyForQueryField = ss.delegateRemove(this.$1$StateReadyForQueryField, value);
		},
		get_iframe: function DoNothingCrossDomainHandler$get_Iframe() {
			return null;
		},
		get_hostId: function DoNothingCrossDomainHandler$get_HostId() {
			return this.$hostId;
		},
		set_hostId: function DoNothingCrossDomainHandler$set_HostId(value) {
			this.$hostId = value;
		},
		get_$serverRoot: function DoNothingCrossDomainHandler$get_ServerRoot() {
			return '*';
		},
		handleEventNotification: function DoNothingCrossDomainHandler$HandleEventNotification(eventName, parameters) {
		},
		$silenceTheCompilerWarning: function DoNothingCrossDomainHandler$SilenceTheCompilerWarning() {
			this.$1$StateReadyForQueryField(null);
		}
	});
	ss.initClass($tab__ApiCommand, $asm, {
		get_name: function ApiCommand$get_Name() {
			return this.$1$NameField;
		},
		set_name: function ApiCommand$set_Name(value) {
			this.$1$NameField = value;
		},
		get_hostId: function ApiCommand$get_HostId() {
			return this.$1$HostIdField;
		},
		set_hostId: function ApiCommand$set_HostId(value) {
			this.$1$HostIdField = value;
		},
		get_commandId: function ApiCommand$get_CommandId() {
			return this.$1$CommandIdField;
		},
		set_commandId: function ApiCommand$set_CommandId(value) {
			this.$1$CommandIdField = value;
		},
		get_parameters: function ApiCommand$get_Parameters() {
			return this.$1$ParametersField;
		},
		set_parameters: function ApiCommand$set_Parameters(value) {
			this.$1$ParametersField = value;
		},
		get_isApiCommandName: function ApiCommand$get_IsApiCommandName() {
			return this.get_rawName().indexOf('api.', 0) === 0;
		},
		get_rawName: function ApiCommand$get_RawName() {
			return this.get_name().toString();
		},
		serialize: function ApiCommand$Serialize() {
			var message = [];
			message.push(this.get_name());
			message.push(this.get_commandId());
			message.push(this.get_hostId());
			if (ss.isValue(this.get_parameters())) {
				message.push(this.get_parameters());
			}
			var serializedMessage = message.join(',');
			$tab__ApiCommand.lastRequestMessage = serializedMessage;
			return serializedMessage;
		}
	});
	ss.initClass($tab__ApiObjectRegistry, $asm, {});
	ss.initClass($tab__ApiServerNotification, $asm, {
		get_workbookName: function ApiServerNotification$get_WorkbookName() {
			return this.$workbookName;
		},
		get_worksheetName: function ApiServerNotification$get_WorksheetName() {
			return this.$worksheetName;
		},
		get_data: function ApiServerNotification$get_Data() {
			return this.$data;
		},
		serialize: function ApiServerNotification$Serialize() {
			var serialized = {};
			serialized['api.workbookName'] = this.$workbookName;
			serialized['api.worksheetName'] = this.$worksheetName;
			serialized['api.commandData'] = this.$data;
			return JSON.stringify(serialized);
		}
	});
	ss.initClass($tab__ApiServerResultParser, $asm, {
		get_result: function ApiServerResultParser$get_Result() {
			return this.$commandResult;
		},
		get_data: function ApiServerResultParser$get_Data() {
			return this.$commandData;
		}
	});
	ss.initClass($tab__CollectionImpl, $asm, {
		get__length: function DoNotUseCollection$get_Length() {
			return this.$items.length;
		},
		get__rawArray: function DoNotUseCollection$get_RawArray() {
			return this.$items;
		},
		get_item: function DoNotUseCollection$get_Item(index) {
			return this.$items[index];
		},
		_get: function DoNotUseCollection$Get(key) {
			var validKey = this.$ensureValidKey(key);
			if (ss.isValue(this.$itemMap[validKey])) {
				return this.$itemMap[validKey];
			}
			return undefined;
		},
		_has: function DoNotUseCollection$Has(key) {
			return ss.isValue(this._get(key));
		},
		_add: function DoNotUseCollection$Add(key, item) {
			this.$verifyKeyAndItemParameters(key, item);
			var validKey = this.$ensureValidKey(key);
			this.$items.push(item);
			this.$itemMap[validKey] = item;
		},
		_addToFirst: function DoNotUseCollection$AddToFirst(key, item) {
			this.$verifyKeyAndItemParameters(key, item);
			var validKey = this.$ensureValidKey(key);
			this.$items.unshift(item);
			this.$itemMap[validKey] = item;
		},
		_remove: function DoNotUseCollection$Remove(key) {
			var validKey = this.$ensureValidKey(key);
			if (ss.isValue(this.$itemMap[validKey])) {
				var item = this.$itemMap[validKey];
				delete this.$itemMap[validKey];
				for (var index = 0; index < this.$items.length; index++) {
					if (ss.referenceEquals(this.$items[index], item)) {
						this.$items.splice(index, 1);
						break;
					}
				}
			}
		},
		_toApiCollection: function DoNotUseCollection$ToApiCollection() {
			var clone = this.$items.concat();
			clone.get = ss.mkdel(this, function(key) {
				return this._get(key);
			});
			clone.has = ss.mkdel(this, function(key1) {
				return this._has(key1);
			});
			return clone;
		},
		$verifyUniqueKeyParameter: function DoNotUseCollection$VerifyUniqueKeyParameter(key) {
			if ($tab__Utility.isNullOrEmpty(key)) {
				throw new ss.Exception('Null key');
			}
			if (this._has(key)) {
				throw new ss.Exception("Duplicate key '" + key + "'");
			}
		},
		$verifyKeyAndItemParameters: function DoNotUseCollection$VerifyKeyAndItemParameters(key, item) {
			this.$verifyUniqueKeyParameter(key);
			if (ss.isNullOrUndefined(item)) {
				throw new ss.Exception('Null item');
			}
		},
		$ensureValidKey: function DoNotUseCollection$EnsureValidKey(key) {
			return '_' + key;
		}
	});
	ss.initClass($tab__ColumnImpl, $asm, {
		get_fieldName: function ColumnImpl$get_FieldName() {
			return this.$fieldName;
		},
		get_dataType: function ColumnImpl$get_DataType() {
			return this.$dataType;
		},
		get_isReferenced: function ColumnImpl$get_IsReferenced() {
			return this.$isReferenced;
		},
		get_index: function ColumnImpl$get_Index() {
			return this.$index;
		}
	});
	ss.initClass($tab__DataTableImpl, $asm, {
		get_name: function DataTableImpl$get_Name() {
			return this.$name;
		},
		get_rows: function DataTableImpl$get_Rows() {
			return this.$rows;
		},
		get_columns: function DataTableImpl$get_Columns() {
			return this.$columns;
		},
		get_totalRowCount: function DataTableImpl$get_TotalRowCount() {
			return this.$totalRowCount;
		},
		get_isSummaryData: function DataTableImpl$get_IsSummaryData() {
			return this.$isSummaryData;
		}
	});
	ss.initClass($tab__DeferredImpl, $asm, {
		get_promise: function DoNotUseDeferred$get_Promise() {
			return this.$promise;
		},
		all: function DoNotUseDeferred$All(promisesOrValues) {
			var allDone = new $tab__DeferredImpl();
			var length = promisesOrValues.length;
			var toResolve = length;
			var results = [];
			if (length === 0) {
				allDone.resolve(results);
				return allDone.get_promise();
			}
			var resolveOne = function(promiseOrValue, index) {
				var promise = $tab_$DeferredUtil.$coerceToTrustedPromise(promiseOrValue);
				promise.then(function(returnValue) {
					results[index] = returnValue;
					toResolve--;
					if (toResolve === 0) {
						allDone.resolve(results);
					}
					return null;
				}, function(e) {
					allDone.reject(e);
					return null;
				});
			};
			for (var i = 0; i < length; i++) {
				resolveOne(promisesOrValues[i], i);
			}
			return allDone.get_promise();
		},
		then: function DoNotUseDeferred$Then(callback, errback) {
			return this.$thenFunc(callback, errback);
		},
		resolve: function DoNotUseDeferred$Resolve(promiseOrValue) {
			return this.$resolveFunc(promiseOrValue);
		},
		reject: function DoNotUseDeferred$Reject(e) {
			return this.$resolveFunc($tab_$DeferredUtil.$rejected(e));
		},
		$preResolutionThen: function DoNotUseDeferred$PreResolutionThen(callback, errback) {
			var deferred = new $tab__DeferredImpl();
			this.$listeners.push(function(promise) {
				promise.then(callback, errback).then(ss.mkdel(deferred, deferred.resolve), ss.mkdel(deferred, deferred.reject));
			});
			return deferred.get_promise();
		},
		$transitionToFulfilled: function DoNotUseDeferred$TransitionToFulfilled(completed) {
			var completedPromise = $tab_$DeferredUtil.$coerceToTrustedPromise(completed);
			this.$thenFunc = completedPromise.then;
			this.$resolveFunc = $tab_$DeferredUtil.$coerceToTrustedPromise;
			for (var i = 0; i < this.$listeners.length; i++) {
				var listener = this.$listeners[i];
				listener(completedPromise);
			}
			this.$listeners = null;
			return completedPromise;
		}
	});
	ss.initClass($tab__Param, $asm, {});
	ss.initClass($tab__PromiseImpl, $asm, {
		always: function DoNotUsePromise$Always(callback) {
			return ss.cast(this.then(callback, ss.cast(callback, Function)), $tab__PromiseImpl);
		},
		otherwise: function DoNotUsePromise$Otherwise(errback) {
			return ss.cast(this.then(null, errback), $tab__PromiseImpl);
		}
	});
	ss.initClass($tab__Rect, $asm, {
		intersect: function TabRect$Intersect(other) {
			var left = Math.max(this.left, other.left);
			var top = Math.max(this.top, other.top);
			var right = Math.min(this.left + this.width, other.left + other.width);
			var bottom = Math.min(this.top + this.height, other.top + other.height);
			if (right <= left || bottom <= top) {
				return new $tab__Rect(0, 0, 0, 0);
			}
			return new $tab__Rect(left, top, right - left, bottom - top);
		}
	});
	ss.initClass($tab__SharedSheetImpl, $asm, {
		get_sheet: null,
		get_name: function SharedSheetImpl$get_Name() {
			return this.$name;
		},
		get_size: function SharedSheetImpl$get_Size() {
			return this.$size;
		},
		get_sheetType: function SharedSheetImpl$get_SheetType() {
			return this.$sheetType;
		}
	});
	ss.initClass($tab__SharedDashboardImpl, $asm, {
		get_sheet: function SharedDashboardImpl$get_Sheet() {
			return this.get_dashboard();
		},
		get_dashboard: null,
		get_worksheets: function SharedDashboardImpl$get_Worksheets() {
			return this.dashboardWorksheets;
		},
		get_objects: function SharedDashboardImpl$get_Objects() {
			return this.dashboardObjects;
		}
	}, $tab__SharedSheetImpl);
	ss.initClass($tab__SharedWorksheetImpl, $asm, {
		get_sheet: function SharedWorksheetImpl$get_Sheet() {
			return this.get_worksheet();
		},
		get_worksheet: null,
		get_parentDashboardImpl: function SharedWorksheetImpl$get_ParentDashboardImpl() {
			return this.$parentDashboardImpl;
		},
		get_parentDashboard: function SharedWorksheetImpl$get_ParentDashboard() {
			if (ss.isValue(this.$parentDashboardImpl)) {
				return this.$parentDashboardImpl.get_dashboard();
			}
			return null;
		},
		getSummaryDataAsync: function SharedWorksheetImpl$GetSummaryDataAsync(options) {
			options = options || new Object();
			var commandParams = this.$getGetDataCommandParams(ss.coalesce(options.ignoreAliases, false), ss.coalesce(options.ignoreSelection, false), ss.coalesce(options.maxRows, 0));
			return this.$getDataHelperAsync('api.GetSummaryTableCommand', commandParams);
		},
		getUnderlyingDataAsync: function SharedWorksheetImpl$GetUnderlyingDataAsync(options) {
			options = options || new Object();
			var commandParams = this.$getGetDataCommandParams(ss.coalesce(options.ignoreAliases, false), ss.coalesce(options.ignoreSelection, false), ss.coalesce(options.maxRows, 0));
			commandParams['api.includeAllColumns'] = ss.coalesce(options.includeAllColumns, false);
			return this.$getDataHelperAsync('api.GetUnderlyingTableCommand', commandParams);
		},
		getSheetLocatorParams: function SharedWorksheetImpl$GetSheetLocatorParams() {
			var commandParameters = {};
			commandParameters['api.worksheetName'] = this.get_name();
			if (ss.isValue(this.get_parentDashboardImpl())) {
				commandParameters['api.dashboardName'] = this.get_parentDashboardImpl().get_name();
			}
			return commandParameters;
		},
		getVisualIdParams: function SharedWorksheetImpl$GetVisualIdParams() {
			var commandParameters = {};
			var visualId = new Object();
			visualId.sheetPath = new Object();
			visualId.sheetPath.sheetName = this.get_name();
			visualId.sheetPath.isDashboard = false;
			if (ss.isValue(this.get_parentDashboardImpl())) {
				visualId.dashboardName = this.get_parentDashboardImpl().get_name();
				visualId.sheetPath.isDashboard = true;
			}
			commandParameters['api.visualId'] = visualId;
			return commandParameters;
		},
		$getGetDataCommandParams: function SharedWorksheetImpl$GetGetDataCommandParams(ignoreAliases, ignoreSelection, maxRows) {
			var commandParameters = this.getSheetLocatorParams();
			commandParameters['api.ignoreAliases'] = ignoreAliases;
			commandParameters['api.ignoreSelection'] = ignoreSelection;
			commandParameters['api.maxRows'] = maxRows;
			return commandParameters;
		},
		$getDataHelperAsync: function SharedWorksheetImpl$GetDataHelperAsync(commandName, commandParameters) {
			var deferred = new tab._Deferred();
			var returnHandler = new (ss.makeGenericType($tab_CommandReturnHandler$1, [Object]))(commandName, 0, function(result) {
				var dt = $tab__DataTableImpl.processGetDataPresModel(result);
				deferred.resolve(dt);
			}, function(remoteError, message) {
				deferred.reject($tab__TableauException.createServerError(message));
			});
			this.messagingOptions.sendCommand(Object).call(this.messagingOptions, commandParameters, returnHandler);
			return deferred.get_promise();
		}
	}, $tab__SharedSheetImpl);
	ss.initClass($tab__SheetInfoImpl, $asm, {}, Object);
	ss.initClass($tab__TableauException, $asm, {});
	ss.initClass($tab__Utility, $asm, {});
	ss.initEnum($tab_ApiDashboardObjectType, $asm, { blank: 'blank', worksheet: 'worksheet', quickFilter: 'quickFilter', parameterControl: 'parameterControl', pageFilter: 'pageFilter', legend: 'legend', title: 'title', text: 'text', image: 'image', webPage: 'webPage', addIn: 'addIn' }, true);
	ss.initEnum($tab_ApiDateRangeType, $asm, { last: 'last', lastn: 'lastn', next: 'next', nextn: 'nextn', curr: 'curr', todate: 'todate' }, true);
	ss.initEnum($tab_ApiDeviceType, $asm, { default: 'default', desktop: 'desktop', tablet: 'tablet', phone: 'phone' }, true);
	ss.initClass($tab_ApiEnumConverter, $asm, {});
	ss.initEnum($tab_ApiErrorCode, $asm, { internalError: 'internalError', serverError: 'serverError', invalidAggregationFieldName: 'invalidAggregationFieldName', invalidToolbarButtonName: 'invalidToolbarButtonName', invalidParameter: 'invalidParameter', invalidUrl: 'invalidUrl', staleDataReference: 'staleDataReference', vizAlreadyInManager: 'vizAlreadyInManager', noUrlOrParentElementNotFound: 'noUrlOrParentElementNotFound', invalidFilterFieldName: 'invalidFilterFieldName', invalidFilterFieldValue: 'invalidFilterFieldValue', invalidFilterFieldNameOrValue: 'invalidFilterFieldNameOrValue', filterCannotBePerformed: 'filterCannotBePerformed', notActiveSheet: 'notActiveSheet', invalidCustomViewName: 'invalidCustomViewName', missingRangeNForRelativeDateFilters: 'missingRangeNForRelativeDateFilters', missingMaxSize: 'missingMaxSize', missingMinSize: 'missingMinSize', missingMinMaxSize: 'missingMinMaxSize', invalidSize: 'invalidSize', invalidSizeBehaviorOnWorksheet: 'invalidSizeBehaviorOnWorksheet', sheetNotInWorkbook: 'sheetNotInWorkbook', indexOutOfRange: 'indexOutOfRange', downloadWorkbookNotAllowed: 'downloadWorkbookNotAllowed', nullOrEmptyParameter: 'nullOrEmptyParameter', browserNotCapable: 'browserNotCapable', unsupportedEventName: 'unsupportedEventName', invalidDateParameter: 'invalidDateParameter', invalidSelectionFieldName: 'invalidSelectionFieldName', invalidSelectionValue: 'invalidSelectionValue', invalidSelectionDate: 'invalidSelectionDate', noUrlForHiddenWorksheet: 'noUrlForHiddenWorksheet', maxVizResizeAttempts: 'maxVizResizeAttempts' }, true);
	ss.initEnum($tab_ApiFieldAggregationType, $asm, { SUM: 'SUM', AVG: 'AVG', MIN: 'MIN', MAX: 'MAX', STDEV: 'STDEV', STDEVP: 'STDEVP', VAR: 'VAR', VARP: 'VARP', COUNT: 'COUNT', COUNTD: 'COUNTD', MEDIAN: 'MEDIAN', ATTR: 'ATTR', NONE: 'NONE', PERCENTILE: 'PERCENTILE', YEAR: 'YEAR', QTR: 'QTR', MONTH: 'MONTH', DAY: 'DAY', HOUR: 'HOUR', MINUTE: 'MINUTE', SECOND: 'SECOND', WEEK: 'WEEK', WEEKDAY: 'WEEKDAY', MONTHYEAR: 'MONTHYEAR', MDY: 'MDY', END: 'END', TRUNC_YEAR: 'TRUNC_YEAR', TRUNC_QTR: 'TRUNC_QTR', TRUNC_MONTH: 'TRUNC_MONTH', TRUNC_WEEK: 'TRUNC_WEEK', TRUNC_DAY: 'TRUNC_DAY', TRUNC_HOUR: 'TRUNC_HOUR', TRUNC_MINUTE: 'TRUNC_MINUTE', TRUNC_SECOND: 'TRUNC_SECOND', QUART1: 'QUART1', QUART3: 'QUART3', SKEWNESS: 'SKEWNESS', KURTOSIS: 'KURTOSIS', INOUT: 'INOUT', SUM_XSQR: 'SUM_XSQR', USER: 'USER' }, true);
	ss.initEnum($tab_ApiFieldRoleType, $asm, { dimension: 'dimension', measure: 'measure', unknown: 'unknown' }, true);
	ss.initEnum($tab_ApiFilterType, $asm, { categorical: 'categorical', quantitative: 'quantitative', hierarchical: 'hierarchical', relativedate: 'relativedate' }, true);
	ss.initEnum($tab_ApiFilterUpdateType, $asm, { all: 'all', replace: 'replace', add: 'add', remove: 'remove' }, true);
	ss.initClass($tab_ApiMessageHandler, $asm, {
		handleEventNotification: function ApiMessageHandler$HandleEventNotification(eventName, eventParameters) {
			throw new ss.NotImplementedException();
		}
	});
	ss.initClass($tab_ApiMessagingOptions, $asm, {
		get_handler: function ApiMessagingOptions$get_Handler() {
			return this.$handler;
		},
		get_router: function ApiMessagingOptions$get_Router() {
			return this.$router;
		},
		sendCommand: function(T) {
			return function ApiMessagingOptions$SendCommand(commandParameters, returnHandler) {
				this.$router.sendCommand(T).call(this.$router, this.$handler, commandParameters, returnHandler);
			};
		},
		dispose: function ApiMessagingOptions$Dispose() {
			this.$router.unregisterHandler(this.$handler);
		}
	});
	ss.initEnum($tab_ApiNullOption, $asm, { nullValues: 'nullValues', nonNullValues: 'nonNullValues', allValues: 'allValues' }, true);
	ss.initEnum($tab_ApiParameterAllowableValuesType, $asm, { all: 'all', list: 'list', range: 'range' }, true);
	ss.initEnum($tab_ApiParameterDataType, $asm, { float: 'float', integer: 'integer', string: 'string', boolean: 'boolean', date: 'date', datetime: 'datetime' }, true);
	ss.initEnum($tab_ApiPeriodType, $asm, { year: 'year', quarter: 'quarter', month: 'month', week: 'week', day: 'day', hour: 'hour', minute: 'minute', second: 'second' }, true);
	ss.initEnum($tab_ApiSelectionUpdateType, $asm, { replace: 'replace', add: 'add', remove: 'remove' }, true);
	ss.initEnum($tab_ApiSheetSizeBehavior, $asm, { automatic: 'automatic', exactly: 'exactly', range: 'range', atleast: 'atleast', atmost: 'atmost' }, true);
	ss.initEnum($tab_ApiSheetType, $asm, { worksheet: 'worksheet', dashboard: 'dashboard', story: 'story' }, true);
	ss.initEnum($tab_ApiTableauEventName, $asm, { customviewload: 'customviewload', customviewremove: 'customviewremove', customviewsave: 'customviewsave', customviewsetdefault: 'customviewsetdefault', filterchange: 'filterchange', firstinteractive: 'firstinteractive', firstvizsizeknown: 'firstvizsizeknown', marksselection: 'marksselection', markshighlight: 'markshighlight', parametervaluechange: 'parametervaluechange', storypointswitch: 'storypointswitch', tabswitch: 'tabswitch', toolbarstatechange: 'toolbarstatechange', vizresize: 'vizresize' }, true);
	ss.initEnum($tab_ApiToolbarButtonName, $asm, { redo: 'redo', undo: 'undo' }, true);
	ss.initEnum($tab_ApiToolbarPosition, $asm, { top: 'top', bottom: 'bottom' }, true);
	ss.initClass($tab_CrossDomainMessager, $asm, {
		registerHandler: function CrossDomainMessager$RegisterHandler(handler) {
			var uniqueId = 'host' + this.$nextHandlerId;
			if (ss.isValue(handler.get_hostId()) || ss.isValue(this.$handlers[handler.get_hostId()])) {
				throw $tab__TableauException.createInternalError("Host '" + handler.get_hostId() + "' is already registered.");
			}
			this.$nextHandlerId++;
			handler.set_hostId(uniqueId);
			this.$handlers[uniqueId] = handler;
			handler.add_stateReadyForQuery(ss.mkdel(this, this.$handleStateReadyForQuery));
		},
		unregisterHandler: function CrossDomainMessager$UnregisterHandler(handler) {
			if (ss.isValue(handler.get_hostId()) || ss.isValue(this.$handlers[handler.get_hostId()])) {
				delete this.$handlers[handler.get_hostId()];
				handler.remove_stateReadyForQuery(ss.mkdel(this, this.$handleStateReadyForQuery));
			}
		},
		sendCommand: function(T) {
			return function CrossDomainMessager$SendCommand(source, commandParameters, returnHandler) {
				var iframe = source.get_iframe();
				var handlerId = source.get_hostId();
				if (!$tab__Utility.hasWindowPostMessage() || ss.isNullOrUndefined(iframe) || ss.isNullOrUndefined(iframe.contentWindow)) {
					return;
				}
				var commandId = $tab__ApiCommand.generateNextCommandId();
				var callbackMap = this.$commandCallbacks[handlerId];
				if (ss.isNullOrUndefined(callbackMap)) {
					callbackMap = {};
					this.$commandCallbacks[handlerId] = callbackMap;
				}
				callbackMap[commandId] = returnHandler;
				var commandName = returnHandler.get_commandName();
				var serializedParams = null;
				if (ss.isValue(commandParameters)) {
					serializedParams = JSON.stringify(commandParameters);
				}
				var command = new $tab__ApiCommand(commandName, commandId, handlerId, serializedParams);
				var message = command.serialize();
				if ($tab__Utility.isPostMessageSynchronous()) {
					window.setTimeout(function() {
						iframe.contentWindow.postMessage(message, '*');
					}, 0);
				}
				else {
					iframe.contentWindow.postMessage(message, '*');
				}
			};
		},
		$handleStateReadyForQuery: function CrossDomainMessager$HandleStateReadyForQuery(source) {
			var queue = this.$commandReturnAfterStateReadyQueues[source.get_hostId()];
			if ($tab__Utility.isNullOrEmpty(queue)) {
				return;
			}
			while (queue.length > 0) {
				var successCallback = queue.pop();
				if (ss.isValue(successCallback)) {
					successCallback();
				}
			}
		},
		$handleCrossDomainMessage: function CrossDomainMessager$HandleCrossDomainMessage(e) {
			var messageEvent = ss.cast(e, MessageEvent);
			if (ss.isNullOrUndefined(messageEvent.data)) {
				return;
			}
			var command = $tab__ApiCommand.parse(messageEvent.data.toString());
			var rawName = command.get_rawName();
			var hostId = command.get_hostId();
			var handler = this.$handlers[hostId];
			if (ss.isNullOrUndefined(handler) || !ss.referenceEquals(handler.get_hostId(), command.get_hostId())) {
				handler = this.$findHostIdByDomComparison(messageEvent);
			}
			if (command.get_isApiCommandName()) {
				if (ss.referenceEquals(command.get_commandId(), $tab__ApiCommand.crossDomainEventNotificationId)) {
					handler.handleEventNotification(command.get_name(), command.get_parameters());
					if (command.get_name() === 'api.FirstVizSizeKnownEvent') {
						messageEvent.source.postMessage('tableau.bootstrap', '*');
					}
				}
				else {
					this.$handleCrossDomainResponse(command);
				}
			}
			else if (!ss.isNullOrUndefined(this.$legacyHandler)) {
				this.$legacyHandler(rawName, handler);
			}
		},
		$handleCrossDomainResponse: function CrossDomainMessager$HandleCrossDomainResponse(command) {
			var commandCallbackMap = this.$commandCallbacks[command.get_hostId()];
			var returnHandler = (ss.isValue(commandCallbackMap) ? commandCallbackMap[command.get_commandId()] : null);
			if (ss.isNullOrUndefined(returnHandler)) {
				return;
			}
			delete commandCallbackMap[command.get_commandId()];
			if (command.get_name() !== returnHandler.get_commandName()) {
				return;
			}
			var crossDomainResult = new $tab__ApiServerResultParser(command.get_parameters());
			var commandResult = crossDomainResult.get_data();
			if (crossDomainResult.get_result() === 'api.success') {
				switch (returnHandler.get_successCallbackTiming()) {
					case 0: {
						if (ss.isValue(returnHandler.get_successCallback())) {
							returnHandler.get_successCallback()(commandResult);
						}
						break;
					}
					case 1: {
						var postponedCallback = function() {
							if (ss.isValue(returnHandler.get_successCallback())) {
								returnHandler.get_successCallback()(commandResult);
							}
						};
						var queue = this.$commandReturnAfterStateReadyQueues[command.get_hostId()];
						if (ss.isNullOrUndefined(queue)) {
							queue = [];
							this.$commandReturnAfterStateReadyQueues[command.get_hostId()] = queue;
						}
						queue.push(postponedCallback);
						break;
					}
					default: {
						throw $tab__TableauException.createInternalError('Unknown timing value: ' + returnHandler.get_successCallbackTiming());
					}
				}
			}
			else if (ss.isValue(returnHandler.get_errorCallback())) {
				var remoteError = crossDomainResult.get_result() === 'api.remotefailed';
				var errorMessage = (ss.isValue(commandResult) ? commandResult.toString() : '');
				returnHandler.get_errorCallback()(remoteError, errorMessage);
			}
		},
		$findHostIdByDomComparison: function CrossDomainMessager$FindHostIdByDomComparison(messageEvent) {
			var $t1 = new ss.ObjectEnumerator(this.$handlers);
			try {
				while ($t1.moveNext()) {
					var pair = $t1.current();
					if (this.$handlers.hasOwnProperty(pair.key) && ss.referenceEquals(pair.value.get_iframe().contentWindow, messageEvent.source)) {
						return pair.value;
					}
				}
			}
			finally {
				$t1.dispose();
			}
			return new $tab_$DoNothingCrossDomainHandler();
		}
	});
	ss.initEnum($tab_DataType, $asm, { float: 'float', integer: 'integer', string: 'string', boolean: 'boolean', date: 'date', datetime: 'datetime' }, true);
	ss.initClass($tab_DataValue, $asm, {}, Object);
	ss.initClass($tab_HostedApiMessageHandler, $asm, {
		add_stateReadyForQuery: function HostedApiMessageHandler$add_StateReadyForQuery(value) {
			this.$2$StateReadyForQueryField = ss.delegateCombine(this.$2$StateReadyForQueryField, value);
		},
		remove_stateReadyForQuery: function HostedApiMessageHandler$remove_StateReadyForQuery(value) {
			this.$2$StateReadyForQueryField = ss.delegateRemove(this.$2$StateReadyForQueryField, value);
		},
		get_hostId: function HostedApiMessageHandler$get_HostId() {
			return null;
		},
		set_hostId: function HostedApiMessageHandler$set_HostId(value) {
		},
		get_iframe: function HostedApiMessageHandler$get_Iframe() {
			return null;
		}
	}, $tab_ApiMessageHandler);
	ss.initClass($tab_HostedApiMessageRouter, $asm, {
		registerHandler: function HostedApiMessageRouter$RegisterHandler(handler) {
			this.$crossDomainMessager.registerHandler(handler);
		},
		unregisterHandler: function HostedApiMessageRouter$UnregisterHandler(handler) {
			this.$crossDomainMessager.unregisterHandler(handler);
		},
		sendCommand: function(T) {
			return function HostedApiMessageRouter$SendCommand(source, commandParameters, returnHandler) {
				this.$crossDomainMessager.sendCommand(T).call(this.$crossDomainMessager, source, commandParameters, returnHandler);
			};
		}
	});
	ss.initInterface($tab_ITableauEvent, $asm, { getEventName: null });
	ss.initClass($tab_MarkImpl, $asm, {
		get_pairs: function MarkImpl$get_Pairs() {
			return this.$collection;
		},
		get_tupleId: function MarkImpl$get_TupleId() {
			return this.$tupleId;
		},
		get_$clonedPairs: function MarkImpl$get_ClonedPairs() {
			if (ss.isNullOrUndefined(this.$clonedPairs)) {
				this.$clonedPairs = this.$collection._toApiCollection();
			}
			return this.$clonedPairs;
		},
		$addPair: function MarkImpl$AddPair(pair) {
			this.$collection._add(pair.fieldName, pair);
		}
	});
	ss.initClass($tab_Point, $asm, {}, Object);
	ss.initClass($tab_PublicEnums, $asm, {});
	ss.initClass($tab_SheetSize, $asm, {}, Object);
	ss.initClass($tab_SheetSizeFactory, $asm, {});
	ss.initClass($tab_Size, $asm, {}, Object);
	ss.initClass($tableauSoftware_Column, $asm, {
		getFieldName: function Column$GetFieldName() {
			return this.$impl.get_fieldName();
		},
		getDataType: function Column$GetDataType() {
			return this.$impl.get_dataType();
		},
		getIsReferenced: function Column$GetIsReferenced() {
			return this.$impl.get_isReferenced();
		},
		getIndex: function Column$GetIndex() {
			return this.$impl.get_index();
		}
	});
	ss.initClass($tableauSoftware_DataTable, $asm, {
		getName: function DataTable$GetName() {
			return this.$impl.get_name();
		},
		getData: function DataTable$GetData() {
			return this.$impl.get_rows();
		},
		getColumns: function DataTable$GetColumns() {
			return this.$impl.get_columns();
		},
		getTotalRowCount: function DataTable$GetTotalRowCount() {
			return this.$impl.get_totalRowCount();
		},
		getIsSummaryData: function DataTable$GetIsSummaryData() {
			return this.$impl.get_isSummaryData();
		}
	});
	ss.initClass($tableauSoftware_Mark, $asm, {
		getPairs: function Mark$GetPairs() {
			return this.impl.get_$clonedPairs();
		}
	});
	ss.initClass($tableauSoftware_Pair, $asm, {});
	(function() {
		$tab__ApiCommand.crossDomainEventNotificationId = 'xdomainSourceId';
		$tab__ApiCommand.lastRequestMessage = null;
		$tab__ApiCommand.lastResponseMessage = null;
		$tab__ApiCommand.lastClientInfoResponseMessage = null;
		$tab__ApiCommand.$nextCommandId = 0;
	})();
	(function() {
		var globalState = window['_ApiObjectRegistryGlobalState'];
		var $t1 = globalState;
		if (ss.isNullOrUndefined($t1)) {
			$t1 = new Object();
		}
		window['_ApiObjectRegistryGlobalState'] = $t1;
		window._ApiObjectRegistryGlobalState.creationRegistry = window._ApiObjectRegistryGlobalState.creationRegistry || {};
		window._ApiObjectRegistryGlobalState.singletonInstanceRegistry = window._ApiObjectRegistryGlobalState.singletonInstanceRegistry || {};
	})();
	(function() {
		var ns = global.tableauSoftware;
		ns.DeviceType = { DEFAULT: 'default', DESKTOP: 'desktop', TABLET: 'tablet', PHONE: 'phone' };
		ns.DashboardObjectType = { BLANK: 'blank', WORKSHEET: 'worksheet', QUICK_FILTER: 'quickFilter', PARAMETER_CONTROL: 'parameterControl', PAGE_FILTER: 'pageFilter', LEGEND: 'legend', TITLE: 'title', TEXT: 'text', IMAGE: 'image', WEB_PAGE: 'webPage', ADDIN: 'addIn' };
		ns.DataType = { FLOAT: 'float', INTEGER: 'integer', STRING: 'string', BOOLEAN: 'boolean', DATE: 'date', DATETIME: 'datetime' };
		ns.DateRangeType = { LAST: 'last', LASTN: 'lastn', NEXT: 'next', NEXTN: 'nextn', CURR: 'curr', TODATE: 'todate' };
		ns.ErrorCode = { INTERNAL_ERROR: 'internalError', SERVER_ERROR: 'serverError', INVALID_AGGREGATION_FIELD_NAME: 'invalidAggregationFieldName', INVALID_TOOLBAR_BUTTON_NAME: 'invalidToolbarButtonName', INVALID_PARAMETER: 'invalidParameter', INVALID_URL: 'invalidUrl', STALE_DATA_REFERENCE: 'staleDataReference', VIZ_ALREADY_IN_MANAGER: 'vizAlreadyInManager', NO_URL_OR_PARENT_ELEMENT_NOT_FOUND: 'noUrlOrParentElementNotFound', INVALID_FILTER_FIELDNAME: 'invalidFilterFieldName', INVALID_FILTER_FIELDVALUE: 'invalidFilterFieldValue', INVALID_FILTER_FIELDNAME_OR_VALUE: 'invalidFilterFieldNameOrValue', FILTER_CANNOT_BE_PERFORMED: 'filterCannotBePerformed', NOT_ACTIVE_SHEET: 'notActiveSheet', INVALID_CUSTOM_VIEW_NAME: 'invalidCustomViewName', MISSING_RANGEN_FOR_RELATIVE_DATE_FILTERS: 'missingRangeNForRelativeDateFilters', MISSING_MAX_SIZE: 'missingMaxSize', MISSING_MIN_SIZE: 'missingMinSize', MISSING_MINMAX_SIZE: 'missingMinMaxSize', INVALID_SIZE: 'invalidSize', INVALID_SIZE_BEHAVIOR_ON_WORKSHEET: 'invalidSizeBehaviorOnWorksheet', SHEET_NOT_IN_WORKBOOK: 'sheetNotInWorkbook', INDEX_OUT_OF_RANGE: 'indexOutOfRange', DOWNLOAD_WORKBOOK_NOT_ALLOWED: 'downloadWorkbookNotAllowed', NULL_OR_EMPTY_PARAMETER: 'nullOrEmptyParameter', BROWSER_NOT_CAPABLE: 'browserNotCapable', UNSUPPORTED_EVENT_NAME: 'unsupportedEventName', INVALID_DATE_PARAMETER: 'invalidDateParameter', INVALID_SELECTION_FIELDNAME: 'invalidSelectionFieldName', INVALID_SELECTION_VALUE: 'invalidSelectionValue', INVALID_SELECTION_DATE: 'invalidSelectionDate', NO_URL_FOR_HIDDEN_WORKSHEET: 'noUrlForHiddenWorksheet', MAX_VIZ_RESIZE_ATTEMPTS: 'maxVizResizeAttempts' };
		ns.FieldAggregationType = { SUM: 'SUM', AVG: 'AVG', MIN: 'MIN', MAX: 'MAX', STDEV: 'STDEV', STDEVP: 'STDEVP', VAR: 'VAR', VARP: 'VARP', COUNT: 'COUNT', COUNTD: 'COUNTD', MEDIAN: 'MEDIAN', ATTR: 'ATTR', NONE: 'NONE', PERCENTILE: 'PERCENTILE', YEAR: 'YEAR', QTR: 'QTR', MONTH: 'MONTH', DAY: 'DAY', HOUR: 'HOUR', MINUTE: 'MINUTE', SECOND: 'SECOND', WEEK: 'WEEK', WEEKDAY: 'WEEKDAY', MONTHYEAR: 'MONTHYEAR', MDY: 'MDY', END: 'END', TRUNC_YEAR: 'TRUNC_YEAR', TRUNC_QTR: 'TRUNC_QTR', TRUNC_MONTH: 'TRUNC_MONTH', TRUNC_WEEK: 'TRUNC_WEEK', TRUNC_DAY: 'TRUNC_DAY', TRUNC_HOUR: 'TRUNC_HOUR', TRUNC_MINUTE: 'TRUNC_MINUTE', TRUNC_SECOND: 'TRUNC_SECOND', QUART1: 'QUART1', QUART3: 'QUART3', SKEWNESS: 'SKEWNESS', KURTOSIS: 'KURTOSIS', INOUT: 'INOUT', SUM_XSQR: 'SUM_XSQR', USER: 'USER' };
		ns.FieldRoleType = { DIMENSION: 'dimension', MEASURE: 'measure', UNKNOWN: 'unknown' };
		ns.FilterUpdateType = { ALL: 'all', REPLACE: 'replace', ADD: 'add', REMOVE: 'remove' };
		ns.FilterType = { CATEGORICAL: 'categorical', QUANTITATIVE: 'quantitative', HIERARCHICAL: 'hierarchical', RELATIVEDATE: 'relativedate' };
		ns.NullOption = { NULL_VALUES: 'nullValues', NON_NULL_VALUES: 'nonNullValues', ALL_VALUES: 'allValues' };
		ns.ParameterAllowableValuesType = { ALL: 'all', LIST: 'list', RANGE: 'range' };
		ns.ParameterDataType = { FLOAT: 'float', INTEGER: 'integer', STRING: 'string', BOOLEAN: 'boolean', DATE: 'date', DATETIME: 'datetime' };
		ns.PeriodType = { YEAR: 'year', QUARTER: 'quarter', MONTH: 'month', WEEK: 'week', DAY: 'day', HOUR: 'hour', MINUTE: 'minute', SECOND: 'second' };
		ns.SelectionUpdateType = { REPLACE: 'replace', ADD: 'add', REMOVE: 'remove' };
		ns.SheetSizeBehavior = { AUTOMATIC: 'automatic', EXACTLY: 'exactly', RANGE: 'range', ATLEAST: 'atleast', ATMOST: 'atmost' };
		ns.SheetType = { WORKSHEET: 'worksheet', DASHBOARD: 'dashboard', STORY: 'story' };
		ns.TableauEventName = { CUSTOM_VIEW_LOAD: 'customviewload', CUSTOM_VIEW_REMOVE: 'customviewremove', CUSTOM_VIEW_SAVE: 'customviewsave', CUSTOM_VIEW_SET_DEFAULT: 'customviewsetdefault', FILTER_CHANGE: 'filterchange', FIRST_INTERACTIVE: 'firstinteractive', FIRST_VIZ_SIZE_KNOWN: 'firstvizsizeknown', MARKS_SELECTION: 'marksselection', MARKS_HIGHLIGHT: 'markshighlight', PARAMETER_VALUE_CHANGE: 'parametervaluechange', STORY_POINT_SWITCH: 'storypointswitch', TAB_SWITCH: 'tabswitch', TOOLBAR_STATE_CHANGE: 'toolbarstatechange', VIZ_RESIZE: 'vizresize' };
		ns.ToolbarPosition = { TOP: 'top', BOTTOM: 'bottom' };
		ns.ToolbarButtonName = { REDO: 'redo', UNDO: 'undo' };
	})();
})();
// END ApiShared
/*! BEGIN ApiDomain */

(function() {
	'dont use strict';
	var $asm = {};
	global.tab = global.tab || {};
	ss.initAssembly($asm, 'vqlapidomain');
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiDomain.CommandInputMapping
	var $tab_$CommandInputMapping = function(toDoc, param, isOptional) {
		this.$1$MappingField = null;
		this.$1$DocParamField = null;
		this.$1$IsOptionalField = false;
		this.set_$mapping(toDoc);
		this.set_$docParam(param);
		this.set_$isOptional(isOptional);
	};
	$tab_$CommandInputMapping.__typeName = 'tab.$CommandInputMapping';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiDomain.ApiCrossDomainEnumConverter
	var $tab_ApiCrossDomainEnumConverter = function() {
	};
	$tab_ApiCrossDomainEnumConverter.__typeName = 'tab.ApiCrossDomainEnumConverter';
	$tab_ApiCrossDomainEnumConverter.convertDataType = function ApiCrossDomainEnumConverter$ConvertDataType(dataType) {
		switch (dataType) {
			case 'boolean': {
				return 'bool';
			}
			case 'date':
			case 'datetime': {
				return 'date';
			}
			case 'integer':
			case 'real':
			case 'tuple': {
				return 'number';
			}
			case 'cstring': {
				return 'string';
			}
			case 'unknown':
			default: {
				return 'string';
			}
		}
	};
	$tab_ApiCrossDomainEnumConverter.convertUnderlyingDataType = function ApiCrossDomainEnumConverter$ConvertUnderlyingDataType(dataType) {
		switch (dataType) {
			case 'boolean': {
				return 'boolean';
			}
			case 'date': {
				return 'date';
			}
			case 'datetime': {
				return 'datetime';
			}
			case 'integer': {
				return 'integer';
			}
			case 'real':
			case 'tuple': {
				return 'float';
			}
			case 'cstring':
			case 'unknown':
			default: {
				return 'string';
			}
		}
	};
	$tab_ApiCrossDomainEnumConverter.convertFieldAggregation = function ApiCrossDomainEnumConverter$ConvertFieldAggregation(aggregation) {
		switch (aggregation) {
			case 'attr': {
				return 'ATTR';
			}
			case 'average': {
				return 'AVG';
			}
			case 'count': {
				return 'COUNT';
			}
			case 'count-d': {
				return 'COUNTD';
			}
			case 'day': {
				return 'DAY';
			}
			case 'end': {
				return 'END';
			}
			case 'hour': {
				return 'HOUR';
			}
			case 'in-out': {
				return 'INOUT';
			}
			case 'kurtosis': {
				return 'KURTOSIS';
			}
			case 'max': {
				return 'MAX';
			}
			case 'mdy': {
				return 'MDY';
			}
			case 'median': {
				return 'MEDIAN';
			}
			case 'min': {
				return 'MIN';
			}
			case 'minute': {
				return 'MINUTE';
			}
			case 'month': {
				return 'MONTH';
			}
			case 'month-year': {
				return 'MONTHYEAR';
			}
			case 'none': {
				return 'NONE';
			}
			case 'percentile': {
				return 'PERCENTILE';
			}
			case 'qtr': {
				return 'QTR';
			}
			case 'quart1': {
				return 'QUART1';
			}
			case 'quart3': {
				return 'QUART3';
			}
			case 'second': {
				return 'SECOND';
			}
			case 'skewness': {
				return 'SKEWNESS';
			}
			case 'std-dev': {
				return 'STDEV';
			}
			case 'std-dev-p': {
				return 'STDEVP';
			}
			case 'sum': {
				return 'SUM';
			}
			case 'sum-xsqr': {
				return 'SUM_XSQR';
			}
			case 'trunc-day': {
				return 'TRUNC_DAY';
			}
			case 'trunc-hour': {
				return 'TRUNC_HOUR';
			}
			case 'trunc-month': {
				return 'TRUNC_MONTH';
			}
			case 'trunc-qtr': {
				return 'TRUNC_QTR';
			}
			case 'trunc-second': {
				return 'TRUNC_SECOND';
			}
			case 'trunc-week': {
				return 'TRUNC_WEEK';
			}
			case 'trunc-year': {
				return 'TRUNC_YEAR';
			}
			case 'user': {
				return 'USER';
			}
			case 'var': {
				return 'VAR';
			}
			case 'var-p': {
				return 'VARP';
			}
			case 'week': {
				return 'WEEK';
			}
			case 'weekday': {
				return 'WEEKDAY';
			}
			case 'year': {
				return 'YEAR';
			}
			default: {
				throw new ss.Exception('Unknown AggType: ' + aggregation);
			}
		}
	};
	$tab_ApiCrossDomainEnumConverter.convertFieldRole = function ApiCrossDomainEnumConverter$ConvertFieldRole(role) {
		switch (role) {
			case 'dimension': {
				return 'dimension';
			}
			case 'measure': {
				return 'measure';
			}
			case 'unknown': {
				return 'unknown';
			}
			default: {
				throw new ss.Exception('Unknown FieldRole type: ' + role);
			}
		}
	};
	$tab_ApiCrossDomainEnumConverter.convertParameterDomainType = function ApiCrossDomainEnumConverter$ConvertParameterDomainType(domainType) {
		switch (domainType) {
			case 'any': {
				return 'all';
			}
			case 'list': {
				return 'list';
			}
			case 'range': {
				return 'range';
			}
			default: {
				throw new ss.Exception('Unknown ParameterTypesDomainType: ' + domainType);
			}
		}
	};
	$tab_ApiCrossDomainEnumConverter.convertPeriodType = function ApiCrossDomainEnumConverter$ConvertPeriodType(periodType) {
		switch (periodType) {
			case 'year': {
				return 'year';
			}
			case 'day': {
				return 'day';
			}
			case 'hour': {
				return 'hour';
			}
			case 'minute': {
				return 'minute';
			}
			case 'month': {
				return 'month';
			}
			case 'quarter': {
				return 'quarter';
			}
			case 'second': {
				return 'second';
			}
			case 'week': {
				return 'week';
			}
			default: {
				throw new ss.Exception('Unknown DatePeriodType: ' + periodType);
			}
		}
	};
	$tab_ApiCrossDomainEnumConverter.convertRangeType = function ApiCrossDomainEnumConverter$ConvertRangeType(relativeDateRange) {
		switch (relativeDateRange) {
			case 'curr': {
				return 'curr';
			}
			case 'last': {
				return 'last';
			}
			case 'lastn': {
				return 'lastn';
			}
			case 'next': {
				return 'next';
			}
			case 'nextn': {
				return 'nextn';
			}
			case 'todate': {
				return 'todate';
			}
			case 'invalid':
			default: {
				throw new ss.Exception('Unknown or invalid Filters.RelativeDateRangeType: ' + relativeDateRange);
			}
		}
	};
	$tab_ApiCrossDomainEnumConverter.convertZoneType = function ApiCrossDomainEnumConverter$ConvertZoneType(zoneType) {
		switch (zoneType) {
			case 'color':
			case 'shape':
			case 'size': {
				return 'legend';
			}
			case 'map': {
				return 'legend';
			}
			case 'filter': {
				return 'quickFilter';
			}
			case 'viz': {
				return 'worksheet';
			}
			case 'paramctrl': {
				return 'parameterControl';
			}
			case 'empty': {
				return 'blank';
			}
			case 'title': {
				return 'title';
			}
			case 'text': {
				return 'text';
			}
			case 'bitmap': {
				return 'image';
			}
			case 'web': {
				return 'webPage';
			}
			case 'layout-basic':
			case 'layout-flow':
			case 'layout-free-form': {
				return null;
			}
			default: {
				return 'blank';
			}
		}
	};
	global.tab.ApiCrossDomainEnumConverter = $tab_ApiCrossDomainEnumConverter;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiDomain.ApiCrossDomainPresModelsFactory
	var $tab_ApiCrossDomainPresModelsFactory = function() {
	};
	$tab_ApiCrossDomainPresModelsFactory.__typeName = 'tab.ApiCrossDomainPresModelsFactory';
	$tab_ApiCrossDomainPresModelsFactory.newClientInfo = function ApiCrossDomainPresModelsFactory$NewClientInfo(isAutoUpdate, isDownloadAllowed, workbookName, currentSheetName, instanceId, publishedSheets, dashboardZones, story) {
		var pm = new Object();
		pm.isAutoUpdate = isAutoUpdate;
		pm.isDownloadAllowed = isDownloadAllowed;
		pm.workbookName = workbookName;
		pm.instanceId = instanceId;
		pm.currentSheetName = currentSheetName;
		pm.publishedSheets = publishedSheets;
		pm.dashboardZones = dashboardZones;
		pm.story = story;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newAutoUpdateState = function ApiCrossDomainPresModelsFactory$NewAutoUpdateState(isAutoUpdate) {
		var pm = new Object();
		pm.isAutoUpdate = isAutoUpdate;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newCommandError = function ApiCrossDomainPresModelsFactory$NewCommandError(errorCode, additionalInformation) {
		var pm = new Object();
		pm.errorCode = errorCode;
		pm.additionalInformation = additionalInformation;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newSheetInfo = function ApiCrossDomainPresModelsFactory$NewSheetInfo(name, sheetType, minWidth, minHeight, maxWidth, maxHeight, repositoryUrl) {
		var sizeConstraints = new Object();
		sizeConstraints.maxHeight = maxHeight;
		sizeConstraints.maxWidth = maxWidth;
		sizeConstraints.minHeight = minHeight;
		sizeConstraints.minWidth = minWidth;
		var pm = new Object();
		pm.name = name;
		pm.sizeConstraints = sizeConstraints;
		pm.repositoryUrl = repositoryUrl;
		pm.sheetType = sheetType;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newContainedSheetInfo = function ApiCrossDomainPresModelsFactory$NewContainedSheetInfo(name, sheetType, zoneId, dashboardZones) {
		var pm = new Object();
		pm.name = name;
		pm.sheetType = sheetType;
		pm.zoneId = zoneId;
		pm.dashboardZones = dashboardZones;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newDashboardZone = function ApiCrossDomainPresModelsFactory$NewDashboardZone(name, zoneId, zoneType, height, width, x, y) {
		var pm = new Object();
		pm.name = name;
		pm.zoneId = zoneId;
		pm.zoneType = zoneType;
		pm.height = height;
		pm.width = width;
		pm.x = x;
		pm.y = y;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newStory = function ApiCrossDomainPresModelsFactory$NewStory(activeStoryPointIndex, storyPoints) {
		var pm = new Object();
		pm.activeStoryPointIndex = activeStoryPointIndex;
		pm.storyPoints = storyPoints;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newStoryPoint = function ApiCrossDomainPresModelsFactory$NewStoryPoint(caption, index, storyPointId, isUpdated, containedSheetInfo) {
		var pm = new Object();
		pm.caption = caption;
		pm.index = index;
		pm.storyPointId = storyPointId;
		pm.isUpdated = isUpdated;
		pm.containedSheetInfo = containedSheetInfo;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.$newFilter = function ApiCrossDomainPresModelsFactory$NewFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation) {
		var pm = new Object();
		pm.fieldName = fieldName;
		pm.filterType = filterType;
		pm.caption = caption;
		pm.dataSourceName = dataSourceName;
		pm.fieldRole = fieldRole;
		pm.fieldAggregation = fieldAggregation;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newCategoricalFilter = function ApiCrossDomainPresModelsFactory$NewCategoricalFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation, isExclude, appliedValues) {
		var pm = $tab_ApiCrossDomainPresModelsFactory.$newFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation);
		pm.isExclude = isExclude;
		pm.appliedValues = appliedValues;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newQuantitativeFilter = function ApiCrossDomainPresModelsFactory$NewQuantitativeFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation, domainMinValue, domainMaxValue, minValue, maxValue, includeNullValues) {
		var pm = $tab_ApiCrossDomainPresModelsFactory.$newFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation);
		pm.domainMinValue = domainMinValue;
		pm.domainMaxValue = domainMaxValue;
		pm.minValue = minValue;
		pm.maxValue = maxValue;
		pm.includeNullValues = includeNullValues;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newHierarchicalFilter = function ApiCrossDomainPresModelsFactory$NewHierarchicalFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation, levels) {
		var pm = $tab_ApiCrossDomainPresModelsFactory.$newFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation);
		pm.levels = levels;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newRelativeDateFilter = function ApiCrossDomainPresModelsFactory$NewRelativeDateFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation, periodType, rangeType, rangeN) {
		var pm = $tab_ApiCrossDomainPresModelsFactory.$newFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation);
		pm.periodType = periodType;
		pm.rangeType = rangeType;
		pm.rangeN = rangeN;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newDataSourcesForWorksheet = function ApiCrossDomainPresModelsFactory$NewDataSourcesForWorksheet(worksheetName, dataSources) {
		var pm = new Object();
		pm.worksheetName = worksheetName;
		pm.dataSources = dataSources;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newDataSource = function ApiCrossDomainPresModelsFactory$NewDataSource(name, fields, isPrimary) {
		var pm = new Object();
		pm.name = name;
		pm.fields = fields;
		pm.isPrimary = isPrimary;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newField = function ApiCrossDomainPresModelsFactory$NewField(name, role, aggregation) {
		var pm = new Object();
		pm.name = name;
		pm.role = role;
		pm.aggregation = aggregation;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newCustomViewsInfo = function ApiCrossDomainPresModelsFactory$NewCustomViewsInfo(customViewLoaded, defaultCustomViewId, currentView, customViews) {
		var pm = new Object();
		pm.customViewLoaded = customViewLoaded;
		pm.defaultCustomViewId = defaultCustomViewId;
		pm.currentView = currentView;
		pm.customViews = customViews;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newCustomView = function ApiCrossDomainPresModelsFactory$NewCustomView(id, name, urlId, url, startViewId, isPublic, owner) {
		var pm = new Object();
		pm.id = id;
		pm.name = name;
		pm.urlId = urlId;
		pm.url = url;
		pm.startViewId = startViewId;
		pm.isPublic = isPublic;
		pm.owner = owner;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newUser = function ApiCrossDomainPresModelsFactory$NewUser(id, friendlyName, username) {
		var pm = new Object();
		pm.id = id;
		pm.friendlyName = friendlyName;
		pm.username = username;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newUnderlyingDataTablePM = function ApiCrossDomainPresModelsFactory$NewUnderlyingDataTablePM(dataTable, headers, isSummary) {
		var pm = new Object();
		pm.dataTable = dataTable;
		pm.headers = headers;
		pm.isSummary = isSummary;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newUnderlyingDataColumnsPM = function ApiCrossDomainPresModelsFactory$NewUnderlyingDataColumnsPM(dataType, fieldName, isReferenced, index) {
		var pm = new Object();
		pm.dataType = dataType;
		pm.fieldName = fieldName;
		pm.isReferenced = isReferenced;
		pm.index = index;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newToolbarStatePM = function ApiCrossDomainPresModelsFactory$NewToolbarStatePM(canUndo, canRedo, canRevert, isPaused, canRefreshData, canShowCustomViews, canShowPerformance, canShowDataAlert, canShowSubscribe, canShowShare, canShowDownload) {
		var pm = new Object();
		pm.canUndo = canUndo;
		pm.canRedo = canRedo;
		pm.canRevert = canRevert;
		pm.isPaused = isPaused;
		pm.canRefreshData = canRefreshData;
		pm.canShowCustomViews = canShowCustomViews;
		pm.canShowPerformance = canShowPerformance;
		pm.canShowDataAlert = canShowDataAlert;
		pm.canShowSubscribe = canShowSubscribe;
		pm.canShowShare = canShowShare;
		pm.canShowDownload = canShowDownload;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newAddInInstancePM = function ApiCrossDomainPresModelsFactory$NewAddInInstancePM(instancePm) {
		var pm = new Object();
		pm.locator = $tab_ApiCrossDomainPresModelsFactory.newAddInLocatorPM(instancePm.addInLocatorPresModel);
		pm.url = instancePm.addInRegistrationPresModel.url;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newAddInLocatorPM = function ApiCrossDomainPresModelsFactory$NewAddInLocatorPM(locator) {
		var pm = new Object();
		pm.dashboardPath = $tab_ApiCrossDomainPresModelsFactory.newSheetPathPM(locator.sheetPath);
		pm.instanceId = locator.addInInstanceId;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newSheetPathPM = function ApiCrossDomainPresModelsFactory$NewSheetPathPM(sheetPathPm) {
		var pm = new Object();
		pm.flipboardZoneID = sheetPathPm.flipboardZoneId;
		pm.storyPointID = sheetPathPm.storyPointId;
		pm.storyboard = sheetPathPm.storyboard;
		pm.sheetName = sheetPathPm.sheetName;
		pm.isDashboard = sheetPathPm.isDashboard;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newAddInBootstrapInfoPM = function ApiCrossDomainPresModelsFactory$NewAddInBootstrapInfoPM(bootstrapPm) {
		var pm = new Object();
		pm.addinDashboardInfo = $tab_ApiCrossDomainPresModelsFactory.newAddInDashboardInfoPM(bootstrapPm.addInDashboardInfoPresModel);
		pm.addInSettingsInfo = $tab_ApiCrossDomainPresModelsFactory.newAddInSettingsInfoPM(bootstrapPm.addInSettingsInfo);
		pm.addInEnvironment = $tab_ApiCrossDomainPresModelsFactory.newAddInEnvironmentInfoPM(bootstrapPm.addInEnvironmentPresModel);
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newAddInDashboardInfoPM = function ApiCrossDomainPresModelsFactory$NewAddInDashboardInfoPM(dashboardInfoPm) {
		var pm = new Object();
		pm.name = dashboardInfoPm.dashboardPresModel.sheetPath.sheetName;
		pm.addInZoneId = dashboardInfoPm.zoneId;
		pm.zones = $tab_ApiPresModelsConverter.getApiDashboardZonePresModels(dashboardInfoPm.dashboardPresModel.zones);
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newAddInSettingsInfoPM = function ApiCrossDomainPresModelsFactory$NewAddInSettingsInfoPM(settingsInfoPm) {
		var pm = new Object();
		pm.settingsValues = settingsInfoPm.addInSettings || {};
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newAddInEnvironmentInfoPM = function ApiCrossDomainPresModelsFactory$NewAddInEnvironmentInfoPM(environmentPresModel) {
		var pm = new Object();
		pm.addInContext = environmentPresModel.addInContext;
		pm.addInMode = environmentPresModel.addInMode;
		pm.addInLanguage = environmentPresModel.addInLanguage;
		pm.addInLocale = environmentPresModel.addInLocale;
		pm.tableauVersion = environmentPresModel.tableauVersion;
		pm.operatingSystem = environmentPresModel.operatingSystem;
		pm.apiVersion = environmentPresModel.apiVersion || '0.0.1';
		return pm;
	};
	global.tab.ApiCrossDomainPresModelsFactory = $tab_ApiCrossDomainPresModelsFactory;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiDomain.ApiParamMappingRegistry
	var $tab_ApiParamMappingRegistry = function() {
		ss.makeGenericType($tab_MappingRegistryBase$2, [Object, $tab_ApiToDocParameter]).call(this);
	};
	$tab_ApiParamMappingRegistry.__typeName = 'tab.ApiParamMappingRegistry';
	global.tab.ApiParamMappingRegistry = $tab_ApiParamMappingRegistry;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiDomain.ApiPresModelsConverter
	var $tab_ApiPresModelsConverter = function() {
	};
	$tab_ApiPresModelsConverter.__typeName = 'tab.ApiPresModelsConverter';
	$tab_ApiPresModelsConverter.getApiAddInInstancePresModel = function ApiPresModelsConverter$GetApiAddInInstancePresModel(addInInstance) {
		return $tab_ApiCrossDomainPresModelsFactory.newAddInInstancePM(addInInstance);
	};
	$tab_ApiPresModelsConverter.getApiAddInBootstrapInfoPresModel = function ApiPresModelsConverter$GetApiAddInBootstrapInfoPresModel(addInBootstrapInfo) {
		return $tab_ApiCrossDomainPresModelsFactory.newAddInBootstrapInfoPM(addInBootstrapInfo);
	};
	$tab_ApiPresModelsConverter.getApiUnderlyingDataTablePresModel = function ApiPresModelsConverter$GetApiUnderlyingDataTablePresModel(underlyingDataTable, isSummary) {
		var dataDictionary = underlyingDataTable.dataDictionary;
		var columns = underlyingDataTable.underlyingDataTableColumns;
		var apiColumns = $tab_ApiPresModelsConverter.$buildHeaders(columns);
		var dataTable = $tab_ApiPresModelsConverter.$buildDataTable(dataDictionary, columns);
		var apiPM = $tab_ApiCrossDomainPresModelsFactory.newUnderlyingDataTablePM(dataTable, apiColumns, isSummary);
		return apiPM;
	};
	$tab_ApiPresModelsConverter.getApiDashboardZonePresModels = function ApiPresModelsConverter$GetApiDashboardZonePresModels(zones) {
		var zonePms = [];
		if (ss.isNullOrUndefined(zones) || ss.getKeyCount(zones) === 0) {
			return zonePms;
		}
		var zoneKeys = Object.keys(zones);
		zoneKeys.sort(function(a, b) {
			return parseInt(a, 10) - parseInt(b, 10);
		});
		for (var $t1 = 0; $t1 < zoneKeys.length; $t1++) {
			var key = zoneKeys[$t1];
			var zone = zones[key];
			if (ss.isNullOrUndefined(zone)) {
				continue;
			}
			var zoneType = $tab_ApiCrossDomainEnumConverter.convertZoneType(zone.zoneCommon.zoneType);
			if (!ss.isValue(zoneType)) {
				continue;
			}
			var name = (ss.isValue(zone.worksheet) ? zone.worksheet : null);
			var x = zone.zoneCommon.x;
			var y = zone.zoneCommon.y;
			var width = zone.zoneCommon.w;
			var height = zone.zoneCommon.h;
			var zoneId = zone.zoneCommon.zoneId;
			var pm = $tab_ApiCrossDomainPresModelsFactory.newDashboardZone(name, zoneId, ss.unbox(zoneType), height, width, x, y);
			zonePms.push(pm);
		}
		return zonePms;
	};
	$tab_ApiPresModelsConverter.processSelectedMarks = function ApiPresModelsConverter$ProcessSelectedMarks(selectionDataPm) {
		var dataDictionaryPM = selectionDataPm.dataDictionary;
		var vizData = selectionDataPm.vizData;
		return $tab_ApiPresModelsConverter.$processActiveMarks(dataDictionaryPM, vizData);
	};
	$tab_ApiPresModelsConverter.processHighlightedMarks = function ApiPresModelsConverter$ProcessHighlightedMarks(pm) {
		var selectionDataPm = pm;
		var dataDictionaryPM = selectionDataPm.dataDictionary;
		var vizData = selectionDataPm.vizData;
		return $tab_ApiPresModelsConverter.$processActiveMarks(dataDictionaryPM, vizData);
	};
	$tab_ApiPresModelsConverter.serializeDataValue = function ApiPresModelsConverter$SerializeDataValue(rawValue, dataType) {
		if (dataType === 'boolean') {
			if (_.isBoolean(rawValue)) {
				return rawValue;
			}
			return (ss.isValue(rawValue) ? (rawValue.toString().toLowerCase() === 'true') : false);
		}
		if (ss.isNullOrUndefined(rawValue)) {
			return null;
		}
		switch (dataType) {
			case 'boolean': {
				if (_.isBoolean(rawValue)) {
					return rawValue;
				}
				return (ss.isValue(rawValue) ? (rawValue.toString().toLowerCase() === 'true') : false);
			}
			case 'date':
			case 'datetime': {
				var d = null;
				if (_.isDate(rawValue)) {
					d = ss.cast(rawValue, ss.JsDate);
				}
				else if (_.isNumber(rawValue)) {
					if (isNaN(ss.unbox(ss.cast(rawValue, Number)))) {
						d = null;
					}
					else {
						d = new Date(tableau.types.JsDateFromOleDate(ss.unbox(ss.cast(rawValue, Number))));
					}
				}
				else {
					d = tab.DateUtil.parsePresModelDate(rawValue.toString());
				}
				if (ss.isNullOrUndefined(d) || isNaN(d)) {
					return null;
				}
				return d.getTime();
			}
			case 'integer': {
				if (_.isNumber(rawValue)) {
					return (isNaN(ss.unbox(ss.cast(rawValue, Number))) ? null : rawValue);
				}
				var parsedInt = parseInt(rawValue.toString(), 10);
				return (isNaN(parsedInt) ? null : parsedInt);
			}
			case 'real': {
				if (_.isNumber(rawValue)) {
					return (isNaN(ss.unbox(ss.cast(rawValue, Number))) ? null : rawValue);
				}
				var parsedFloat = parseFloat(rawValue.toString());
				return (isNaN(parsedFloat) ? null : parsedFloat);
			}
			default:
			case 'cstring':
			case 'tuple':
			case 'unknown': {
				return rawValue.toString();
			}
		}
	};
	$tab_ApiPresModelsConverter.getAddInLocatorPresModel = function ApiPresModelsConverter$GetAddInLocatorPresModel(apiAddInLocator) {
		return $tab_NativePresModelsFactory.newAddInLocatorPresModel(apiAddInLocator);
	};
	$tab_ApiPresModelsConverter.$processActiveMarks = function ApiPresModelsConverter$ProcessActiveMarks(dataDictionaryPM, vizData) {
		var returnPm = new Object();
		var dataDictionary = new tab.DataDictionaryModel(null);
		dataDictionary.update(dataDictionaryPM);
		var vizDataModel = new tab.VizDataModel(null);
		vizDataModel.update(vizData, tab.NoopModelEventsHandler.get_noopContext());
		var marks = [];
		returnPm.marks = marks;
		if (ss.isNullOrUndefined(dataDictionary) || dataDictionary.get_isEmpty()) {
			return returnPm;
		}
		vizDataModel.forEachTupleId(function(tupleId) {
			var mark = new Object();
			mark.tupleId = tupleId;
			var pairs = [];
			mark.pairs = pairs;
			marks.push(mark);
			vizDataModel.forEachVizDataField(function(dataField, colIdx) {
				var pair = new Object();
				pair.fieldName = dataField.get_fieldCaption();
				pair.formattedValue = tab.VizDataLookup.lookupAlias(tupleId, dataField, dataDictionary);
				pair.valueDataType = $tab_ApiCrossDomainEnumConverter.convertDataType(dataField.get_dataType());
				var dataValue = null;
				if (!tab.VizDataLookup.isSpecial(tupleId, dataField, dataDictionary, null) && dataField.get_hasDataValues() && dataField.isTupleIdValid(tupleId)) {
					dataValue = tab.VizDataLookup.lookupRawDataValue(tupleId, dataField, dataDictionary);
				}
				var jsonValue = $tab_ApiPresModelsConverter.serializeDataValue(dataValue, dataField.get_dataType());
				pair.value = jsonValue;
				pairs.push(pair);
				return true;
			});
			return true;
		});
		return returnPm;
	};
	$tab_ApiPresModelsConverter.$buildHeaders = function ApiPresModelsConverter$BuildHeaders(columns) {
		var apiColumns = [];
		for (var columnIndex = 0; columnIndex < columns.length; columnIndex++) {
			var column = columns[columnIndex];
			var dataType = $tab_ApiCrossDomainEnumConverter.convertUnderlyingDataType(column.dataType);
			var apiColumn = $tab_ApiCrossDomainPresModelsFactory.newUnderlyingDataColumnsPM(dataType, column.fieldCaption, column.isReferenced, columnIndex);
			apiColumns.push(apiColumn);
		}
		return apiColumns;
	};
	$tab_ApiPresModelsConverter.$buildDataTable = function ApiPresModelsConverter$BuildDataTable(dataDictionary, columns) {
		var rowCount = columns[0].formatValIdxs.length;
		var dataTable = new Array(rowCount);
		for (var rowIndex = 0; rowIndex < rowCount; rowIndex++) {
			dataTable[rowIndex] = new Array(columns.length);
		}
		for (var columnIndex = 0; columnIndex < columns.length; columnIndex++) {
			var column = columns[columnIndex];
			for (var rowIndex1 = 0; rowIndex1 < column.formatValIdxs.length; rowIndex1++) {
				var val = new Object();
				val.formattedValue = $tab_ApiPresModelsConverter.$lookUpValueFromDictionary(dataDictionary, column.formatValIdxs[rowIndex1], 'cstring');
				val.value = $tab_ApiPresModelsConverter.$lookUpValueFromDictionary(dataDictionary, column.valueIndices[rowIndex1], column.dataType);
				val.aliasedValue = val.formattedValue;
				dataTable[rowIndex1][columnIndex] = val;
			}
		}
		return dataTable;
	};
	$tab_ApiPresModelsConverter.$lookUpValueFromDictionary = function ApiPresModelsConverter$LookUpValueFromDictionary(dataDictionary, index, dataType) {
		var dataValue = null;
		var dt;
		if (index >= 0) {
			dt = dataType;
		}
		else {
			dt = 'cstring';
			index = -index - 1;
		}
		var rawValue = $tab_ApiPresModelsConverter.$getRawValue(dataDictionary, dt, index);
		if (ss.isValue(rawValue)) {
			dataValue = rawValue.toString();
		}
		return dataValue;
	};
	$tab_ApiPresModelsConverter.$getRawValue = function ApiPresModelsConverter$GetRawValue(dataDictionary, dt, index) {
		if (ss.isNullOrUndefined(dataDictionary) || ss.isNullOrUndefined(dataDictionary.dataSegments)) {
			return null;
		}
		var $t1 = ss.getEnumerator(Object.keys(dataDictionary.dataSegments));
		try {
			while ($t1.moveNext()) {
				var key = $t1.current();
				var dataSegment = dataDictionary.dataSegments[key];
				for (var $t2 = 0; $t2 < dataSegment.dataColumns.length; $t2++) {
					var dataColumn = dataSegment.dataColumns[$t2];
					if (ss.isNullOrUndefined(dataColumn) || dataColumn.dataType !== dt) {
						continue;
					}
					if (index < dataColumn.dataValues.length) {
						return dataColumn.dataValues[index];
					}
					index -= dataColumn.dataValues.length;
					break;
				}
			}
		}
		finally {
			$t1.dispose();
		}
		return null;
	};
	global.tab.ApiPresModelsConverter = $tab_ApiPresModelsConverter;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiDomain.ApiToDocParameter
	var $tab_ApiToDocParameter = function(apiParam, toDoc) {
		ss.makeGenericType($tab_ParameterMapping$1, [Object]).call(this, apiParam, toDoc);
	};
	$tab_ApiToDocParameter.__typeName = 'tab.ApiToDocParameter';
	$tab_ApiToDocParameter.create = function(TApiParameterType, TDocParameterType) {
		return function ApiToDocParameter$Create(apiParam, toDoc) {
			return new $tab_ApiToDocParameter(apiParam, ss.makeGenericType($tab_ParameterMapping$1, [Object]).buildConversionFunc(TApiParameterType, TDocParameterType).call(null, toDoc));
		};
	};
	global.tab.ApiToDocParameter = $tab_ApiToDocParameter;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiDomain.CommandMapping
	var $tab_CommandMapping = function(docId, apiId, input, output) {
		this.docCommandId = null;
		this.apiCommandId = null;
		this.$inputParameters = null;
		this.$outputParameter = null;
		this.docCommandId = docId;
		this.apiCommandId = apiId;
		this.$inputParameters = input;
		this.$outputParameter = output;
	};
	$tab_CommandMapping.__typeName = 'tab.CommandMapping';
	global.tab.CommandMapping = $tab_CommandMapping;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiDomain.CommandMappingRegistry
	var $tab_CommandMappingRegistry = function() {
		this.$apiToDocMappings = null;
		this.$docToApiMappings = null;
		ss.makeGenericType($tab_MappingRegistryBase$2, [Object, $tab_CommandMapping]).call(this);
	};
	$tab_CommandMappingRegistry.__typeName = 'tab.CommandMappingRegistry';
	global.tab.CommandMappingRegistry = $tab_CommandMappingRegistry;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiDomain.DocEventMapping
	var $tab_DocEventMapping = function(notificationId, apiCommandId, output) {
		this.docNotificationId = null;
		this.apiCommandId = null;
		this.$outputParameter = null;
		this.docNotificationId = notificationId;
		this.apiCommandId = apiCommandId;
		this.$outputParameter = output;
	};
	$tab_DocEventMapping.__typeName = 'tab.DocEventMapping';
	global.tab.DocEventMapping = $tab_DocEventMapping;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiDomain.DocEventMappingRegistry
	var $tab_DocEventMappingRegistry = function() {
		this.$docToApiMappings = null;
		ss.makeGenericType($tab_MappingRegistryBase$2, [Object, $tab_DocEventMapping]).call(this);
	};
	$tab_DocEventMappingRegistry.__typeName = 'tab.DocEventMappingRegistry';
	global.tab.DocEventMappingRegistry = $tab_DocEventMappingRegistry;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiDomain.DocParamMappingRegistry
	var $tab_DocParamMappingRegistry = function() {
		ss.makeGenericType($tab_MappingRegistryBase$2, [Object, $tab_DocToApiParameter]).call(this);
	};
	$tab_DocParamMappingRegistry.__typeName = 'tab.DocParamMappingRegistry';
	global.tab.DocParamMappingRegistry = $tab_DocParamMappingRegistry;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiDomain.DocToApiParameter
	var $tab_DocToApiParameter = function(docParam, toApi) {
		ss.makeGenericType($tab_ParameterMapping$1, [Object]).call(this, docParam, toApi);
	};
	$tab_DocToApiParameter.__typeName = 'tab.DocToApiParameter';
	$tab_DocToApiParameter.create = function(TDocParameterType, TApiParameterType) {
		return function DocToApiParameter$Create(docParam, toApi) {
			return new $tab_DocToApiParameter(docParam, ss.makeGenericType($tab_ParameterMapping$1, [Object]).buildConversionFunc(TDocParameterType, TApiParameterType).call(null, toApi));
		};
	};
	global.tab.DocToApiParameter = $tab_DocToApiParameter;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiDomain.MappingRegistryBase
	var $tab_MappingRegistryBase$2 = function(TEnumType, TMappingType) {
		var $type = function() {
			this.$mappings = null;
		};
		ss.registerGenericClassInstance($type, $tab_MappingRegistryBase$2, [TEnumType, TMappingType], {
			initialize: function MappingRegistryBase$Initialize() {
				this.$mappings = {};
				this.initialize$1(this.$mappings);
			},
			has: function MappingRegistryBase$Has(key) {
				return ss.keyExists(this.$mappings, key);
			},
			get: function MappingRegistryBase$Get(key) {
				if (this.has(key)) {
					return this.$mappings[key];
				}
				else {
					throw new ss.KeyNotFoundException('Key not found: ' + key.toString());
				}
			},
			getKeys: function MappingRegistryBase$GetKeys() {
				return Object.keys(this.$mappings);
			},
			initialize$1: null
		}, function() {
			return null;
		}, function() {
			return [];
		});
		return $type;
	};
	$tab_MappingRegistryBase$2.__typeName = 'tab.MappingRegistryBase$2';
	ss.initGenericClass($tab_MappingRegistryBase$2, $asm, 2);
	global.tab.MappingRegistryBase$2 = $tab_MappingRegistryBase$2;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiDomain.NativePresModelsFactory
	var $tab_NativePresModelsFactory = function() {
	};
	$tab_NativePresModelsFactory.__typeName = 'tab.NativePresModelsFactory';
	$tab_NativePresModelsFactory.newAddInLocatorPresModel = function NativePresModelsFactory$NewAddInLocatorPresModel(apiAddInLocator) {
		var addInLocator = new Object();
		addInLocator.addInInstanceId = apiAddInLocator.instanceId;
		addInLocator.sheetPath = new Object();
		addInLocator.sheetPath.flipboardZoneId = apiAddInLocator.dashboardPath.flipboardZoneID;
		addInLocator.sheetPath.isDashboard = apiAddInLocator.dashboardPath.isDashboard;
		addInLocator.sheetPath.sheetName = apiAddInLocator.dashboardPath.sheetName;
		addInLocator.sheetPath.storyboard = apiAddInLocator.dashboardPath.storyboard;
		addInLocator.sheetPath.storyPointId = apiAddInLocator.dashboardPath.storyPointID;
		return addInLocator;
	};
	$tab_NativePresModelsFactory.newVisualIdPresModel = function NativePresModelsFactory$NewVisualIdPresModel(apiVisualId) {
		var visualId = new Object();
		visualId.worksheet = apiVisualId.sheetPath.sheetName;
		visualId.dashboard = (apiVisualId.sheetPath.isDashboard ? apiVisualId.dashboardName : null);
		visualId.storyPointId = apiVisualId.sheetPath.storyPointID;
		visualId.flipboardZoneId = apiVisualId.sheetPath.flipboardZoneID;
		return visualId;
	};
	global.tab.NativePresModelsFactory = $tab_NativePresModelsFactory;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiDomain.ParameterMapping
	var $tab_ParameterMapping$1 = function(TParamId) {
		var $type = function(paramId, conversionFn) {
			this.conversionFn = null;
			this.paramId = ss.getDefaultValue(TParamId);
			this.paramId = paramId;
			this.conversionFn = conversionFn || function(a) {
				return a;
			};
		};
		$type.buildConversionFunc = function(TSourceType, TTargetType) {
			return function ParameterMapping$BuildConversionFunc(conversionFn) {
				if (!ss.staticEquals(conversionFn, null)) {
					return function(a) {
						return conversionFn(ss.cast(a, TSourceType));
					};
				}
				else {
					return null;
				}
			};
		};
		ss.registerGenericClassInstance($type, $tab_ParameterMapping$1, [TParamId], {}, function() {
			return null;
		}, function() {
			return [];
		});
		return $type;
	};
	$tab_ParameterMapping$1.__typeName = 'tab.ParameterMapping$1';
	ss.initGenericClass($tab_ParameterMapping$1, $asm, 1);
	global.tab.ParameterMapping$1 = $tab_ParameterMapping$1;
	ss.initClass($tab_$CommandInputMapping, $asm, {
		get_$mapping: function CommandInputMapping$get_Mapping() {
			return this.$1$MappingField;
		},
		set_$mapping: function CommandInputMapping$set_Mapping(value) {
			this.$1$MappingField = value;
		},
		get_$docParam: function CommandInputMapping$get_DocParam() {
			return this.$1$DocParamField;
		},
		set_$docParam: function CommandInputMapping$set_DocParam(value) {
			this.$1$DocParamField = value;
		},
		get_$isOptional: function CommandInputMapping$get_IsOptional() {
			return this.$1$IsOptionalField;
		},
		set_$isOptional: function CommandInputMapping$set_IsOptional(value) {
			this.$1$IsOptionalField = value;
		}
	});
	ss.initClass($tab_ApiCrossDomainEnumConverter, $asm, {});
	ss.initClass($tab_ApiCrossDomainPresModelsFactory, $asm, {});
	ss.initClass($tab_ApiParamMappingRegistry, $asm, {
		initialize$1: function ApiParamMappingRegistry$Initialize(mappingsToInitialize) {
			mappingsToInitialize['api.AddInLocator'] = $tab_ApiToDocParameter.create(Object, Object).call(null, 'api.AddInLocator', $tab_NativePresModelsFactory.newAddInLocatorPresModel);
			mappingsToInitialize['api.AddInSettings'] = $tab_ApiToDocParameter.create(Object, Object).call(null, 'api.AddInSettings', null);
			mappingsToInitialize['api.worksheetName'] = $tab_ApiToDocParameter.create(String, String).call(null, 'api.worksheetName', null);
			mappingsToInitialize['api.dashboardName'] = $tab_ApiToDocParameter.create(String, String).call(null, 'api.dashboardName', null);
			mappingsToInitialize['api.ignoreAliases'] = $tab_ApiToDocParameter.create(Boolean, Boolean).call(null, 'api.ignoreAliases', null);
			mappingsToInitialize['api.ignoreSelection'] = $tab_ApiToDocParameter.create(Boolean, Boolean).call(null, 'api.ignoreSelection', null);
			mappingsToInitialize['api.includeAllColumns'] = $tab_ApiToDocParameter.create(Boolean, Boolean).call(null, 'api.includeAllColumns', null);
			mappingsToInitialize['api.maxRows'] = $tab_ApiToDocParameter.create(ss.Int32, ss.Int32).call(null, 'api.maxRows', null);
			mappingsToInitialize['api.visualId'] = $tab_ApiToDocParameter.create(Object, Object).call(null, 'api.visualId', $tab_NativePresModelsFactory.newVisualIdPresModel);
		}
	}, ss.makeGenericType($tab_MappingRegistryBase$2, [Object, $tab_ApiToDocParameter]));
	ss.initClass($tab_ApiPresModelsConverter, $asm, {});
	ss.initClass($tab_ApiToDocParameter, $asm, {
		get_apiParamId: function ApiToDocParameter$get_ApiParamId() {
			return this.paramId;
		},
		toDocParam: function ApiToDocParameter$ToDocParam(apiPresModel) {
			return this.conversionFn(apiPresModel);
		}
	}, ss.makeGenericType($tab_ParameterMapping$1, [Object]));
	ss.initClass($tab_CommandMapping, $asm, {
		createInternalCommandParams: function CommandMapping$CreateInternalCommandParams(apiParams) {
			var internalCommandParameters = {};
			for (var $t1 = 0; $t1 < this.$inputParameters.length; $t1++) {
				var inputParam = this.$inputParameters[$t1];
				if (!ss.keyExists(apiParams, inputParam.get_$mapping().get_apiParamId())) {
					if (inputParam.get_$isOptional()) {
						throw new ss.ArgumentException('Missing parameter: ' + inputParam.get_$mapping().get_apiParamId() + ' in command: ' + this.docCommandId);
					}
					else {
						continue;
					}
				}
				var apiParam = apiParams[inputParam.get_$mapping().get_apiParamId()];
				internalCommandParameters[inputParam.get_$docParam()] = inputParam.get_$mapping().toDocParam(apiParam);
			}
			return internalCommandParameters;
		},
		processResult: function(T) {
			return function CommandMapping$ProcessResult(commandResponse) {
				if (!ss.keyExists(commandResponse, this.$outputParameter.get_docParamId())) {
					return ss.getDefaultValue(T);
				}
				var resultPm = commandResponse[this.$outputParameter.get_docParamId()];
				var apiResult = this.$outputParameter.toApiParam(resultPm);
				return apiResult;
			};
		}
	});
	ss.initClass($tab_CommandMappingRegistry, $asm, {
		initialize$1: function CommandMappingRegistry$Initialize(mappingsToInitialize) {
			this.$apiToDocMappings = new $tab_ApiParamMappingRegistry();
			this.$apiToDocMappings.initialize();
			this.$docToApiMappings = new $tab_DocParamMappingRegistry();
			this.$docToApiMappings.initialize();
			var $t1 = [];
			$t1.push(new $tab_$CommandInputMapping(this.$apiToDocMappings.get('api.AddInLocator'), 'addInLocatorPresModel', false));
			mappingsToInitialize['api.InitializeDashboard'] = new $tab_CommandMapping('initialize-add-in-instance', 'api.InitializeDashboard', $t1, this.$docToApiMappings.get('addInBootstrapInfo'));
			var $t2 = [];
			$t2.push(new $tab_$CommandInputMapping(this.$apiToDocMappings.get('api.AddInLocator'), 'addInLocatorPresModel', false));
			$t2.push(new $tab_$CommandInputMapping(this.$apiToDocMappings.get('api.AddInSettings'), 'addInSettings', false));
			mappingsToInitialize['api.SaveAddInSettings'] = new $tab_CommandMapping('save-add-in-settings', 'api.SaveAddInSettings', $t2, this.$docToApiMappings.get('addInSettingsInfo'));
			var $t3 = [];
			$t3.push(new $tab_$CommandInputMapping(this.$apiToDocMappings.get('api.worksheetName'), 'worksheet', false));
			$t3.push(new $tab_$CommandInputMapping(this.$apiToDocMappings.get('api.dashboardName'), 'dashboard', false));
			$t3.push(new $tab_$CommandInputMapping(this.$apiToDocMappings.get('api.ignoreAliases'), 'ignoreAliases', false));
			$t3.push(new $tab_$CommandInputMapping(this.$apiToDocMappings.get('api.ignoreSelection'), 'ignoreSelection', false));
			$t3.push(new $tab_$CommandInputMapping(this.$apiToDocMappings.get('api.includeAllColumns'), 'includeAllColumns', false));
			$t3.push(new $tab_$CommandInputMapping(this.$apiToDocMappings.get('api.maxRows'), 'maxRows', false));
			mappingsToInitialize['api.GetUnderlyingTableCommand'] = new $tab_CommandMapping('get-underlying-data', 'api.GetUnderlyingTableCommand', $t3, $tab_DocToApiParameter.create(Object, Object).call(null, 'underlyingDataTable', function(pm) {
				return $tab_ApiPresModelsConverter.getApiUnderlyingDataTablePresModel(pm, false);
			}));
			var $t4 = [];
			$t4.push(new $tab_$CommandInputMapping(this.$apiToDocMappings.get('api.worksheetName'), 'worksheet', false));
			$t4.push(new $tab_$CommandInputMapping(this.$apiToDocMappings.get('api.dashboardName'), 'dashboard', false));
			$t4.push(new $tab_$CommandInputMapping(this.$apiToDocMappings.get('api.ignoreAliases'), 'ignoreAliases', false));
			$t4.push(new $tab_$CommandInputMapping(this.$apiToDocMappings.get('api.ignoreSelection'), 'ignoreSelection', false));
			$t4.push(new $tab_$CommandInputMapping(this.$apiToDocMappings.get('api.includeAllColumns'), 'includeAllColumns', false));
			$t4.push(new $tab_$CommandInputMapping(this.$apiToDocMappings.get('api.maxRows'), 'maxRows', false));
			mappingsToInitialize['api.GetSummaryTableCommand'] = new $tab_CommandMapping('get-summary-data', 'api.GetSummaryTableCommand', $t4, $tab_DocToApiParameter.create(Object, Object).call(null, 'underlyingDataTable', function(pm1) {
				return $tab_ApiPresModelsConverter.getApiUnderlyingDataTablePresModel(pm1, true);
			}));
			var $t5 = [];
			$t5.push(new $tab_$CommandInputMapping(this.$apiToDocMappings.get('api.visualId'), 'visualIdPresModel', false));
			mappingsToInitialize['api.FetchSelectedMarksCommand'] = new $tab_CommandMapping('get-selection', 'api.FetchSelectedMarksCommand', $t5, this.$docToApiMappings.get('selectionData'));
		}
	}, ss.makeGenericType($tab_MappingRegistryBase$2, [Object, $tab_CommandMapping]));
	ss.initClass($tab_DocEventMapping, $asm, {
		convertToMessageHandlerNotification: function DocEventMapping$ConvertToMessageHandlerNotification(presModel) {
			var apiParam = this.$outputParameter.toApiParam(presModel);
			var serializedParam = JSON.stringify(apiParam);
			return serializedParam;
		}
	});
	ss.initClass($tab_DocEventMappingRegistry, $asm, {
		initialize$1: function DocEventMappingRegistry$Initialize(mappingsToInitialize) {
			this.$docToApiMappings = new $tab_DocParamMappingRegistry();
			this.$docToApiMappings.initialize();
			mappingsToInitialize['selection-changed-event'] = new $tab_DocEventMapping('selection-changed-event', 'api.MarksSelectionChangedEvent', this.$docToApiMappings.get('sheetPath'));
		}
	}, ss.makeGenericType($tab_MappingRegistryBase$2, [Object, $tab_DocEventMapping]));
	ss.initClass($tab_DocParamMappingRegistry, $asm, {
		initialize$1: function DocParamMappingRegistry$Initialize(mappingsToInitialize) {
			mappingsToInitialize['addInBootstrapInfo'] = $tab_DocToApiParameter.create(Object, Object).call(null, 'addInBootstrapInfo', $tab_ApiCrossDomainPresModelsFactory.newAddInBootstrapInfoPM);
			mappingsToInitialize['addInSettingsInfo'] = $tab_DocToApiParameter.create(Object, Object).call(null, 'addInSettingsInfo', $tab_ApiCrossDomainPresModelsFactory.newAddInSettingsInfoPM);
			mappingsToInitialize['sheetPath'] = $tab_DocToApiParameter.create(Object, Object).call(null, 'sheetPath', $tab_ApiCrossDomainPresModelsFactory.newSheetPathPM);
			mappingsToInitialize['selectionData'] = $tab_DocToApiParameter.create(Object, Object).call(null, 'selectionData', $tab_ApiPresModelsConverter.processSelectedMarks);
		}
	}, ss.makeGenericType($tab_MappingRegistryBase$2, [Object, $tab_DocToApiParameter]));
	ss.initClass($tab_DocToApiParameter, $asm, {
		get_docParamId: function DocToApiParameter$get_DocParamId() {
			return this.paramId;
		},
		toApiParam: function DocToApiParameter$ToApiParam(docPresModel) {
			return this.conversionFn(docPresModel);
		}
	}, ss.makeGenericType($tab_ParameterMapping$1, [Object]));
	ss.initClass($tab_NativePresModelsFactory, $asm, {});
})();
// END ApiDomain

  var tab = global.tab;
  tab._Deferred = tab._DeferredImpl;
  tab._Collection = tab._CollectionImpl;

(function() {
	'dont use strict';
	var $asm = {};
	global.tab = global.tab || {};
	global.tableauSoftware = global.tableauSoftware || {};
	global.tableauSoftware.addin = global.tableauSoftware.addin || {};
	ss.initAssembly($asm, 'vqladdinapi');
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.AddInApi.AddInImpl
	var $tab__AddInImpl = function() {
		this.$initializationPromiseSingleton = null;
	};
	$tab__AddInImpl.__typeName = 'tab._AddInImpl';
	global.tab._AddInImpl = $tab__AddInImpl;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.AddInApi.AddInSheetBaseImpl
	var $tab__AddInSheetBase = function(sheetInfoImpl, messagingOptions) {
		this.$eventListenerManager = null;
		this.$eventListenerManager = new $tab__AddInSheetEventListenerManager(sheetInfoImpl.name, messagingOptions);
	};
	$tab__AddInSheetBase.__typeName = 'tab._AddInSheetBase';
	global.tab._AddInSheetBase = $tab__AddInSheetBase;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.AddInApi.AddInSheetEventListenerManager
	var $tab__AddInSheetEventListenerManager = function(sheetName, messagingOptions) {
		this.$handlers = null;
		this.$worksheet = null;
		this.$sheetName = null;
		this.$sheetName = sheetName;
		this.$handlers = {};
		messagingOptions.get_router().registerHandler(this);
	};
	$tab__AddInSheetEventListenerManager.__typeName = 'tab._AddInSheetEventListenerManager';
	global.tab._AddInSheetEventListenerManager = $tab__AddInSheetEventListenerManager;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.AddInApi.DashboardImpl
	var $tab__DashboardImpl = function(sheetInfoImpl, messagingOptions) {
		this.$dashboard = null;
		this.$sheetBase = null;
		tab._SharedDashboardImpl.call(this, sheetInfoImpl, messagingOptions);
		this.$sheetBase = new $tab__AddInSheetBase(sheetInfoImpl, messagingOptions);
	};
	$tab__DashboardImpl.__typeName = 'tab._DashboardImpl';
	global.tab._DashboardImpl = $tab__DashboardImpl;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.AddInApi.SettingsImpl
	var $tab__SettingsImpl = function(settingsInfo, messagingOptions) {
		this.$messagingOptions = null;
		this.$currentSettings = null;
		this.$isMofified = false;
		this.$initialize(settingsInfo);
		this.$messagingOptions = messagingOptions;
	};
	$tab__SettingsImpl.__typeName = 'tab._SettingsImpl';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.AddInApi.WorksheetImpl
	var $tab__WorksheetImpl = function(sheetInfoImpl, messagingOptions, parentDashboardImpl) {
		this.$worksheet = null;
		this.$sheetBase = null;
		tab._SharedWorksheetImpl.call(this, sheetInfoImpl, messagingOptions, parentDashboardImpl);
		this.$sheetBase = new $tab__AddInSheetBase(sheetInfoImpl, messagingOptions);
	};
	$tab__WorksheetImpl.__typeName = 'tab._WorksheetImpl';
	global.tab._WorksheetImpl = $tab__WorksheetImpl;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.AddInApi.EnvironmentVariablesImpl
	var $tab_EnvironmentVariablesImpl = function(context, mode, locale, language, operatingSystem, tableauVersion, apiVersion) {
		this.$context = null;
		this.$mode = null;
		this.$locale = null;
		this.$language = null;
		this.$operatingSystem = null;
		this.$tableauVersion = null;
		this.$apiVersion = null;
		this.$context = context;
		this.$mode = mode;
		this.$locale = locale;
		this.$language = language;
		this.$operatingSystem = operatingSystem;
		this.$tableauVersion = tableauVersion;
		this.$apiVersion = apiVersion;
	};
	$tab_EnvironmentVariablesImpl.__typeName = 'tab.EnvironmentVariablesImpl';
	global.tab.EnvironmentVariablesImpl = $tab_EnvironmentVariablesImpl;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.AddInApi.MarksEvent
	var $tab_MarksEvent = function(eventName, worksheet) {
		$tableauSoftware_WorksheetEvent.call(this, eventName, worksheet);
	};
	$tab_MarksEvent.__typeName = 'tab.MarksEvent';
	global.tab.MarksEvent = $tab_MarksEvent;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.AddIn
	var $tableauSoftware_addIn = function() {
	};
	$tableauSoftware_addIn.__typeName = 'tableauSoftware.addIn';
	$tableauSoftware_addIn.initializeAsync = function AddIn$InitializeAsync() {
		return $tableauSoftware_addIn._impl.initializeAsync();
	};
	global.tableauSoftware.addIn = $tableauSoftware_addIn;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.AddInApi.Dashboard
	var $tableauSoftware_Dashboard = function(dashboardImpl, sheetBase) {
		this._impl = null;
		$tableauSoftware_Sheet.call(this, dashboardImpl, sheetBase);
	};
	$tableauSoftware_Dashboard.__typeName = 'tableauSoftware.Dashboard';
	global.tableauSoftware.Dashboard = $tableauSoftware_Dashboard;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.Sheet
	var $tableauSoftware_Sheet = function(sharedSheetImpl, sheetBase) {
		this._impl = null;
		this.$sheetBase = null;
		this._impl = sharedSheetImpl;
		this.$sheetBase = sheetBase;
	};
	$tableauSoftware_Sheet.__typeName = 'tableauSoftware.Sheet';
	global.tableauSoftware.Sheet = $tableauSoftware_Sheet;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.AddInApi.TableauEvent
	var $tableauSoftware_TableauEvent = function(eventName) {
		this.$eventName = null;
		this.$eventName = eventName;
	};
	$tableauSoftware_TableauEvent.__typeName = 'tableauSoftware.TableauEvent';
	global.tableauSoftware.TableauEvent = $tableauSoftware_TableauEvent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.AddInApi.Worksheet
	var $tableauSoftware_Worksheet = function(worksheetImpl, sheetBase) {
		this._impl = null;
		$tableauSoftware_Sheet.call(this, worksheetImpl, sheetBase);
		sheetBase.getEventListenerManager().$setWorksheet(this);
	};
	$tableauSoftware_Worksheet.__typeName = 'tableauSoftware.Worksheet';
	global.tableauSoftware.Worksheet = $tableauSoftware_Worksheet;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.AddInApi.WorksheetEvent
	var $tableauSoftware_WorksheetEvent = function(eventName, worksheet) {
		this.worksheet = null;
		$tableauSoftware_TableauEvent.call(this, eventName);
		this.worksheet = worksheet;
	};
	$tableauSoftware_WorksheetEvent.__typeName = 'tableauSoftware.WorksheetEvent';
	global.tableauSoftware.WorksheetEvent = $tableauSoftware_WorksheetEvent;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.addIn.DashboardContent
	var $tableauSoftware_addin_DashboardContent = function(getDashboard) {
		this.$getDashboard = null;
		this.$getDashboard = getDashboard;
	};
	$tableauSoftware_addin_DashboardContent.__typeName = 'tableauSoftware.addin.DashboardContent';
	global.tableauSoftware.addin.DashboardContent = $tableauSoftware_addin_DashboardContent;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.addIn.Environment
	var $tableauSoftware_addin_Environment = function(impl) {
		this._impl = null;
		this._impl = impl;
	};
	$tableauSoftware_addin_Environment.__typeName = 'tableauSoftware.addin.Environment';
	global.tableauSoftware.addin.Environment = $tableauSoftware_addin_Environment;
	////////////////////////////////////////////////////////////////////////////////
	// tableauSoftware.addIn.Settings
	var $tableauSoftware_addin_Settings = function(settingsImpl) {
		this._impl = null;
		this._impl = settingsImpl;
	};
	$tableauSoftware_addin_Settings.__typeName = 'tableauSoftware.addin.Settings';
	global.tableauSoftware.addin.Settings = $tableauSoftware_addin_Settings;
	ss.initClass($tab__AddInImpl, $asm, {
		initializeAsync: function AddInImpl$InitializeAsync() {
			var deferred = new tab._Deferred();
			if (ss.isNullOrUndefined(this.$initializationPromiseSingleton)) {
				try {
					this.$initializeDesktopBootstrapAsync(deferred);
					this.$initializationPromiseSingleton = deferred.get_promise();
				}
				catch ($t1) {
					var e = ss.Exception.wrap($t1);
					deferred.reject(e);
				}
			}
			return this.$initializationPromiseSingleton;
		},
		$initializeDesktopBootstrapAsync: function AddInImpl$InitializeDesktopBootstrapAsync(d) {
			var router = tab._ApiObjectRegistry.getApiMessageRouter();
			var returnHandler = new (ss.makeGenericType(tab.CommandReturnHandler$1, [Object]))('api.InitializeDashboard', 0, ss.mkdel(this, function(result) {
				this.$initializeDashboardContent(result.addinDashboardInfo);
				this.$initializeSetting(result.addInSettingsInfo);
				this.$initializeEnvironmentVariables(result.addInEnvironment);
				d.resolve();
			}), function(remoteError, errorMessage) {
				throw tab._TableauException.createInternalError('Error initializing Desktop models: ' + errorMessage);
			});
			router.sendCommand(Object).call(router, null, null, returnHandler);
		},
		$initializeDashboardContent: function AddInImpl$InitializeDashboardContent(pm) {
			var sheetSize = tab.SheetSize.$ctor('automatic', null, null);
			var sheetInfoImpl = tab._SheetInfoImpl.$ctor(pm.name, 'dashboard', sheetSize, pm.addInZoneId);
			var messagingOptions = new tab.ApiMessagingOptions(tab._ApiObjectRegistry.getApiMessageRouter(), null);
			var impl = new $tab__DashboardImpl(sheetInfoImpl, messagingOptions);
			var baseImpl = new $tab__AddInSheetBase(sheetInfoImpl, messagingOptions);
			impl.$addObjects(pm.zones);
			var dashboardContent = new $tableauSoftware_addin_DashboardContent(function() {
				return new $tableauSoftware_Dashboard(impl, baseImpl);
			});
			$tableauSoftware_addIn.dashboardContent = dashboardContent;
		},
		$initializeSetting: function AddInImpl$InitializeSetting(pm) {
			var messagingOptions = new tab.ApiMessagingOptions(tab._ApiObjectRegistry.getApiMessageRouter(), null);
			var impl = new $tab__SettingsImpl(pm, messagingOptions);
			var settings = new $tableauSoftware_addin_Settings(impl);
			$tableauSoftware_addIn.settings = settings;
		},
		$initializeEnvironmentVariables: function AddInImpl$InitializeEnvironmentVariables(pm) {
			var envVarsImpl = new $tab_EnvironmentVariablesImpl(pm.addInContext, pm.addInMode, pm.addInLocale, pm.addInLanguage, pm.operatingSystem, pm.tableauVersion, pm.apiVersion);
			$tableauSoftware_addIn.environment = new $tableauSoftware_addin_Environment(envVarsImpl);
		}
	});
	ss.initClass($tab__AddInSheetBase, $asm, {
		getEventListenerManager: function AddInSheetBaseImpl$GetEventListenerManager() {
			return this.$eventListenerManager;
		},
		changeParameterValueAsync: function AddInSheetBaseImpl$ChangeParameterValueAsync(name, value) {
			throw new ss.NotImplementedException();
		},
		getParametersAsync: function AddInSheetBaseImpl$GetParametersAsync() {
			throw new ss.NotImplementedException();
		}
	});
	ss.initClass($tab__AddInSheetEventListenerManager, $asm, {
		$setWorksheet: function AddInSheetEventListenerManager$SetWorksheet(worksheet) {
			this.$worksheet = worksheet;
		},
		$handleMarkSelectionChangedEvent: function AddInSheetEventListenerManager$HandleMarkSelectionChangedEvent(eventParameters, handlers) {
			if (ss.isNullOrUndefined(handlers) || ss.isNullOrUndefined(eventParameters) || ss.isNullOrUndefined(this.$worksheet)) {
				return;
			}
			var pm = JSON.parse(eventParameters);
			if (ss.referenceEquals(pm.sheetName, this.$worksheet.getName())) {
				for (var $t1 = 0; $t1 < handlers.length; $t1++) {
					var handler = handlers[$t1];
					handler(new $tab_MarksEvent('marksselection', this.$worksheet));
				}
			}
		},
		handleEventNotification: function AddInSheetEventListenerManager$HandleEventNotification(eventName, eventParameters) {
			switch (eventName) {
				case 'api.MarksSelectionChangedEvent': {
					this.$handleMarkSelectionChangedEvent(eventParameters, this.$handlers['marksselection']);
					break;
				}
			}
		},
		addEventListener: function AddInSheetEventListenerManager$AddEventListener(eventName, handler) {
			this.$handlers[eventName] = this.$handlers[eventName] || [];
			this.$handlers[eventName].push(handler);
		},
		removeEventListener: function AddInSheetEventListenerManager$RemoveEventListener(eventName, handler) {
			throw new ss.NotImplementedException();
		}
	});
	ss.initClass($tab__DashboardImpl, $asm, {
		get_dashboard: function DashboardImpl$get_Dashboard() {
			if (ss.isNullOrUndefined(this.$dashboard)) {
				this.$dashboard = new $tableauSoftware_Dashboard(this, this.$sheetBase);
			}
			return this.$dashboard;
		},
		get_eventListenerManager: function DashboardImpl$get_EventListenerManager() {
			return this.$sheetBase.getEventListenerManager();
		},
		$changeParameterValueAsync: function DashboardImpl$ChangeParameterValueAsync(parameterName, value) {
			return this.$sheetBase.changeParameterValueAsync(parameterName, value);
		},
		getParametersAsync: function DashboardImpl$GetParametersAsync() {
			return this.$sheetBase.getParametersAsync();
		},
		$addObjects: function DashboardImpl$AddObjects(zones) {
			this.dashboardWorksheets = new tab._Collection();
			for (var i = 0; i < zones.length; i++) {
				var zone = zones[i];
				if (zone.zoneType === 'worksheet') {
					var name = zone.name;
					if (ss.isNullOrUndefined(name)) {
						continue;
					}
					var size = tab.SheetSizeFactory.createAutomatic();
					var sheetInfoImpl = tab._SheetInfoImpl.$ctor(name, 'worksheet', size, zone.zoneId);
					var worksheetImpl = new $tab__WorksheetImpl(sheetInfoImpl, this.messagingOptions, this);
					this.dashboardWorksheets._add(name, worksheetImpl.get_worksheet());
				}
			}
		}
	}, tab._SharedDashboardImpl);
	ss.initClass($tab__SettingsImpl, $asm, {
		get_$isModified: function SettingsImpl$get_IsModified() {
			return this.$isMofified;
		},
		$initialize: function SettingsImpl$Initialize(settingsInfo) {
			tab._Param.verifyValue(settingsInfo, 'settingsInfo');
			tab._Param.verifyValue(settingsInfo.settingsValues, 'settingsInfo.SettingsValues');
			this.$currentSettings = tab._Utility.clone(Object).call(null, settingsInfo.settingsValues);
			this.$isMofified = false;
		},
		$get: function SettingsImpl$Get(key) {
			tab._Param.verifyString(key, 'key');
			return ss.coalesce(this.$currentSettings[key], null);
		},
		$set: function SettingsImpl$Set(key, value) {
			tab._Param.verifyString(key, 'key');
			tab._Param.verifyString(value, 'value');
			this.$currentSettings[key] = value;
			this.$isMofified = true;
		},
		$erase: function SettingsImpl$Erase(key) {
			tab._Param.verifyString(key, 'key');
			if (ss.keyExists(this.$currentSettings, key)) {
				delete this.$currentSettings[key];
				this.$isMofified = true;
			}
		},
		$getAll: function SettingsImpl$GetAll() {
			return tab._Utility.clone(Object).call(null, this.$currentSettings);
		},
		$saveAsync: function SettingsImpl$SaveAsync() {
			var deferred = new tab._Deferred();
			if (!this.get_$isModified()) {
				deferred.resolve(this.$getAll());
				return deferred.get_promise();
			}
			var commandParameters = {};
			commandParameters['api.AddInSettings'] = this.$currentSettings;
			var returnHandler = new (ss.makeGenericType(tab.CommandReturnHandler$1, [Object]))('api.SaveAddInSettings', 0, ss.mkdel(this, function(result) {
				this.$initialize(result);
				deferred.resolve(result.settingsValues);
			}), function(remoteError, message) {
				deferred.reject(tab._TableauException.createServerError(message));
			});
			this.$messagingOptions.sendCommand(Object).call(this.$messagingOptions, commandParameters, returnHandler);
			return deferred.get_promise();
		}
	});
	ss.initClass($tab__WorksheetImpl, $asm, {
		get_worksheet: function WorksheetImpl$get_Worksheet() {
			if (ss.isNullOrUndefined(this.$worksheet)) {
				this.$worksheet = new $tableauSoftware_Worksheet(this, this.$sheetBase);
			}
			return this.$worksheet;
		},
		get_eventListenerManager: function WorksheetImpl$get_EventListenerManager() {
			return this.$sheetBase.getEventListenerManager();
		},
		$changeParameterValueAsync: function WorksheetImpl$ChangeParameterValueAsync(parameterName, value) {
			return this.$sheetBase.changeParameterValueAsync(parameterName, value);
		},
		getParametersAsync: function WorksheetImpl$GetParametersAsync() {
			return this.$sheetBase.getParametersAsync();
		},
		getSelectedMarksAsync: function WorksheetImpl$GetSelectedMarksAsync() {
			var commandParameters = this.getVisualIdParams();
			var deferred = new tab._Deferred();
			var returnHandler = new (ss.makeGenericType(tab.CommandReturnHandler$1, [Object]))('api.FetchSelectedMarksCommand', 0, function(result) {
				var marks = tab.MarkImpl.processActiveMarks(result);
				deferred.resolve(marks._toApiCollection());
			}, function(remoteError, message) {
				deferred.reject(tab._TableauException.createServerError(message));
			});
			this.messagingOptions.sendCommand(Object).call(this.messagingOptions, commandParameters, returnHandler);
			return deferred.get_promise();
		}
	}, tab._SharedWorksheetImpl);
	ss.initClass($tab_EnvironmentVariablesImpl, $asm, {
		get_context: function EnvironmentVariablesImpl$get_Context() {
			return this.$context;
		},
		get_mode: function EnvironmentVariablesImpl$get_Mode() {
			return this.$mode;
		},
		get_locale: function EnvironmentVariablesImpl$get_Locale() {
			return this.$locale;
		},
		get_language: function EnvironmentVariablesImpl$get_Language() {
			return this.$language;
		},
		get_operatingSystem: function EnvironmentVariablesImpl$get_OperatingSystem() {
			return this.$operatingSystem;
		},
		get_tableauVersion: function EnvironmentVariablesImpl$get_TableauVersion() {
			return this.$tableauVersion;
		},
		get_apiVersion: function EnvironmentVariablesImpl$get_ApiVersion() {
			return this.$apiVersion;
		}
	});
	ss.initClass($tableauSoftware_TableauEvent, $asm, {
		getEventName: function TableauEvent$GetEventName() {
			return this.$eventName;
		}
	}, null, [tab.ITableauEvent]);
	ss.initClass($tableauSoftware_WorksheetEvent, $asm, {
		getWorksheet: function WorksheetEvent$GetWorksheet() {
			return this.worksheet;
		}
	}, $tableauSoftware_TableauEvent, [tab.ITableauEvent]);
	ss.initClass($tab_MarksEvent, $asm, {
		getMarksAsync: function MarksEvent$GetMarksAsync() {
			return this.worksheet.getSelectedMarksAsync();
		}
	}, $tableauSoftware_WorksheetEvent, [tab.ITableauEvent]);
	ss.initClass($tableauSoftware_addIn, $asm, {});
	ss.initClass($tableauSoftware_Sheet, $asm, {
		getName: function Sheet$GetName() {
			return this._impl.get_name();
		},
		getSize: function Sheet$GetSize() {
			return this._impl.get_size();
		},
		getSheetType: function Sheet$GetSheetType() {
			return this._impl.get_sheetType();
		},
		getEventListenerManager: function Sheet$GetEventListenerManager() {
			return this.$sheetBase.getEventListenerManager();
		},
		changeParameterValueAsync: function Sheet$ChangeParameterValueAsync(name, value) {
			return this.$sheetBase.changeParameterValueAsync(name, value);
		},
		getParametersAsync: function Sheet$GetParametersAsync() {
			return this.$sheetBase.getParametersAsync();
		}
	});
	ss.initClass($tableauSoftware_Dashboard, $asm, {
		getObjects: function Dashboard$GetObjects() {
			return this._impl.get_objects()._toApiCollection();
		},
		getWorksheets: function Dashboard$GetWorksheets() {
			return this._impl.get_worksheets()._toApiCollection();
		}
	}, $tableauSoftware_Sheet);
	ss.initClass($tableauSoftware_Worksheet, $asm, {
		getParentDashboard: function Worksheet$GetParentDashboard() {
			return this._impl.get_parentDashboard();
		},
		getSummaryDataAsync: function Worksheet$GetSummaryDataAsync(options) {
			return this._impl.getSummaryDataAsync(options);
		},
		getUnderlyingDataAsync: function Worksheet$GetUnderlyingDataAsync(options) {
			return this._impl.getUnderlyingDataAsync(options);
		},
		getSelectedMarksAsync: function Worksheet$GetSelectedMarksAsync() {
			return this._impl.getSelectedMarksAsync();
		}
	}, $tableauSoftware_Sheet);
	ss.initClass($tableauSoftware_addin_DashboardContent, $asm, {
		getDashboard: function DashboardContent$GetDashboard() {
			return this.$getDashboard();
		}
	});
	ss.initClass($tableauSoftware_addin_Environment, $asm, {
		getContext: function Environment$GetContext() {
			return this._impl.get_context();
		},
		getMode: function Environment$GetMode() {
			return this._impl.get_mode();
		},
		getLocale: function Environment$GetLocale() {
			return this._impl.get_locale();
		},
		getLanguage: function Environment$GetLanguage() {
			return this._impl.get_language();
		},
		getOperatingSystem: function Environment$GetOperatingSystem() {
			return this._impl.get_operatingSystem();
		},
		getTableauVersion: function Environment$GetTableauVersion() {
			return this._impl.get_tableauVersion();
		},
		getApiVersion: function Environment$GetApiVersion() {
			return this._impl.get_apiVersion();
		}
	});
	ss.initClass($tableauSoftware_addin_Settings, $asm, {
		get: function Settings$Get(key) {
			return this._impl.$get(key);
		},
		set: function Settings$Set(key, value) {
			this._impl.$set(key, value);
		},
		erase: function Settings$Erase(key) {
			this._impl.$erase(key);
		},
		getAll: function Settings$GetAll() {
			return this._impl.$getAll();
		},
		isModified: function Settings$IsModified() {
			return this._impl.get_$isModified();
		},
		saveAsync: function Settings$SaveAsync() {
			return this._impl.$saveAsync();
		}
	});
	(function() {
		$tableauSoftware_addIn._impl = new $tab__AddInImpl();
		$tableauSoftware_addIn.settings = null;
		$tableauSoftware_addIn.dashboardContent = null;
		$tableauSoftware_addIn.environment = null;
	})();
})();

  window.tabEx = window.tableauSoftware = global.tableauSoftware;

  tableauSoftware.Promise = tab._PromiseImpl;


  window.tabEx._addInApiLoaded = true;
})();

// END AddInApi
